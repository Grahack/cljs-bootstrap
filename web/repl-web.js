var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareTestMethods = function() {
  if (!goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareTestMethods must be called from " + "within a goog.module");
  }
  goog.moduleLoaderState_.declareTestMethods = true;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathIsModule:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document && goog.global.document.all;
  goog.importModule_ = function(src) {
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';
    if (goog.importScript_("", bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL=" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL=" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined, declareTestMethods:false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
      if (goog.moduleLoaderState_.declareTestMethods) {
        for (var entry in exports) {
          if (entry.indexOf("test", 0) === 0 || entry == "tearDown" || entry == "setUp" || entry == "setUpPage" || entry == "tearDownPage") {
            goog.global[entry] = exports[entry];
          }
        }
      }
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function(source) {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('<script type="text/javascript" src="' + src + '"></' + "script>");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = doc.createElement("script");
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      var isOldIE = goog.IS_OLD_IE_;
      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange='goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('<script type="text/javascript" src="' + src + '"' + state + "></" + "script>");
        }
      } else {
        doc.write('<script type="text/javascript">' + opt_sourceText + "</" + "script>");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    var loadingModule = false;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          loadingModule = true;
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    var xhr = new goog.global["XMLHttpRequest"];
    xhr.open("get", src, false);
    xhr.send();
    return xhr.responseText;
  }
};
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error("load of " + src + "failed");
    }
  }
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ = 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("SCRIPT");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.addDependency("caja/string/html/htmlparser.js", ["goog.string.html", "goog.string.html.HtmlParser", "goog.string.html.HtmlParser.EFlags", "goog.string.html.HtmlParser.Elements", "goog.string.html.HtmlParser.Entities", "goog.string.html.HtmlSaxHandler"], [], false);
goog.addDependency("caja/string/html/htmlsanitizer.js", ["goog.string.html.HtmlSanitizer", "goog.string.html.HtmlSanitizer.AttributeType", "goog.string.html.HtmlSanitizer.Attributes", "goog.string.html.htmlSanitize"], ["goog.string.StringBuffer", "goog.string.html.HtmlParser", "goog.string.html.HtmlParser.EFlags", "goog.string.html.HtmlParser.Elements", "goog.string.html.HtmlSaxHandler"], false);
goog.addDependency("dojo/dom/query.js", ["goog.dom.query"], ["goog.array", "goog.dom", "goog.functions", "goog.string", "goog.userAgent"], false);
goog.addDependency("jpeg_encoder/jpeg_encoder_basic.js", ["goog.crypt.JpegEncoder"], ["goog.crypt.base64"], false);
goog.addDependency("loremipsum/text/loremipsum.js", ["goog.text.LoremIpsum"], ["goog.array", "goog.math", "goog.string", "goog.structs.Map", "goog.structs.Set"], false);
goog.addDependency("mochikit/async/deferred.js", ["goog.async.Deferred", "goog.async.Deferred.AlreadyCalledError", "goog.async.Deferred.CanceledError"], ["goog.Promise", "goog.Thenable", "goog.array", "goog.asserts", "goog.debug.Error"], false);
goog.addDependency("mochikit/async/deferredlist.js", ["goog.async.DeferredList"], ["goog.async.Deferred"], false);
goog.addDependency("osapi/osapi.js", ["goog.osapi"], [], false);
goog.addDependency("svgpan/svgpan.js", ["svgpan.SvgPan"], ["goog.Disposable", "goog.events", "goog.events.EventType", "goog.events.MouseWheelHandler"], false);
goog.addDependency("a11y/aria/announcer.js", ["goog.a11y.aria.Announcer"], ["goog.Disposable", "goog.Timer", "goog.a11y.aria", "goog.a11y.aria.LivePriority", "goog.a11y.aria.State", "goog.dom", "goog.dom.TagName", "goog.object"], false);
goog.addDependency("a11y/aria/announcer_test.js", ["goog.a11y.aria.AnnouncerTest"], ["goog.a11y.aria", "goog.a11y.aria.Announcer", "goog.a11y.aria.LivePriority", "goog.a11y.aria.State", "goog.array", "goog.dom", "goog.dom.TagName", "goog.dom.iframe", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("a11y/aria/aria.js", ["goog.a11y.aria"], ["goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.a11y.aria.datatables", "goog.array", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.object", "goog.string"], false);
goog.addDependency("a11y/aria/aria_test.js", ["goog.a11y.ariaTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.dom", "goog.dom.TagName", "goog.testing.jsunit"], false);
goog.addDependency("a11y/aria/attributes.js", ["goog.a11y.aria.AutoCompleteValues", "goog.a11y.aria.CheckedValues", "goog.a11y.aria.DropEffectValues", "goog.a11y.aria.ExpandedValues", "goog.a11y.aria.GrabbedValues", "goog.a11y.aria.InvalidValues", "goog.a11y.aria.LivePriority", "goog.a11y.aria.OrientationValues", "goog.a11y.aria.PressedValues", "goog.a11y.aria.RelevantValues", "goog.a11y.aria.SelectedValues", "goog.a11y.aria.SortValues", "goog.a11y.aria.State"], [], false);
goog.addDependency("a11y/aria/datatables.js", ["goog.a11y.aria.datatables"], ["goog.a11y.aria.State", "goog.object"], false);
goog.addDependency("a11y/aria/roles.js", ["goog.a11y.aria.Role"], [], false);
goog.addDependency("array/array.js", ["goog.array", "goog.array.ArrayLike"], ["goog.asserts"], false);
goog.addDependency("array/array_test.js", ["goog.arrayTest"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("asserts/asserts.js", ["goog.asserts", "goog.asserts.AssertionError"], ["goog.debug.Error", "goog.dom.NodeType", "goog.string"], false);
goog.addDependency("asserts/asserts_test.js", ["goog.assertsTest"], ["goog.asserts", "goog.asserts.AssertionError", "goog.dom", "goog.dom.TagName", "goog.string", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("async/animationdelay.js", ["goog.async.AnimationDelay"], ["goog.Disposable", "goog.events", "goog.functions"], false);
goog.addDependency("async/animationdelay_test.js", ["goog.async.AnimationDelayTest"], ["goog.Timer", "goog.async.AnimationDelay", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("async/conditionaldelay.js", ["goog.async.ConditionalDelay"], ["goog.Disposable", "goog.async.Delay"], false);
goog.addDependency("async/conditionaldelay_test.js", ["goog.async.ConditionalDelayTest"], ["goog.async.ConditionalDelay", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("async/delay.js", ["goog.Delay", "goog.async.Delay"], ["goog.Disposable", "goog.Timer"], false);
goog.addDependency("async/delay_test.js", ["goog.async.DelayTest"], ["goog.async.Delay", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("async/freelist.js", ["goog.async.FreeList"], [], false);
goog.addDependency("async/freelist_test.js", ["goog.async.FreeListTest"], ["goog.async.FreeList", "goog.testing.jsunit"], false);
goog.addDependency("async/nexttick.js", ["goog.async.nextTick", "goog.async.throwException"], ["goog.debug.entryPointRegistry", "goog.dom.TagName", "goog.functions", "goog.labs.userAgent.browser", "goog.labs.userAgent.engine"], false);
goog.addDependency("async/nexttick_test.js", ["goog.async.nextTickTest"], ["goog.Promise", "goog.Timer", "goog.async.nextTick", "goog.debug.ErrorHandler", "goog.debug.entryPointRegistry", "goog.dom", "goog.dom.TagName", "goog.labs.userAgent.browser", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("async/run.js", ["goog.async.run"], ["goog.async.WorkQueue", "goog.async.nextTick", "goog.async.throwException", "goog.testing.watchers"], false);
goog.addDependency("async/run_test.js", ["goog.async.runTest"], ["goog.async.run", "goog.testing.MockClock", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("async/throttle.js", ["goog.Throttle", "goog.async.Throttle"], ["goog.Disposable", "goog.Timer"], false);
goog.addDependency("async/throttle_test.js", ["goog.async.ThrottleTest"], ["goog.async.Throttle", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("async/workqueue.js", ["goog.async.WorkItem", "goog.async.WorkQueue"], ["goog.asserts", "goog.async.FreeList"], false);
goog.addDependency("async/workqueue_test.js", ["goog.async.WorkQueueTest"], ["goog.async.WorkQueue", "goog.testing.jsunit"], false);
goog.addDependency("base.js", ["goog"], [], false);
goog.addDependency("base_module_test.js", ["goog.baseModuleTest"], ["goog.Timer", "goog.test_module", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], true);
goog.addDependency("base_test.js", ["an.existing.path", "dup.base", "far.out", "goog.baseTest", "goog.explicit", "goog.implicit.explicit", "goog.test", "goog.test.name", "goog.test.name.space", "goog.xy", "goog.xy.z", "ns", "testDep.bar"], ["goog.Promise", "goog.Timer", "goog.dom.TagName", "goog.functions", "goog.test_module", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.userAgent"], false);
goog.addDependency("color/alpha.js", ["goog.color.alpha"], ["goog.color"], false);
goog.addDependency("color/alpha_test.js", ["goog.color.alphaTest"], ["goog.array", "goog.color", "goog.color.alpha", "goog.testing.jsunit"], false);
goog.addDependency("color/color.js", ["goog.color", "goog.color.Hsl", "goog.color.Hsv", "goog.color.Rgb"], ["goog.color.names", "goog.math"], false);
goog.addDependency("color/color_test.js", ["goog.colorTest"], ["goog.array", "goog.color", "goog.color.names", "goog.testing.jsunit"], false);
goog.addDependency("color/names.js", ["goog.color.names"], [], false);
goog.addDependency("crypt/aes.js", ["goog.crypt.Aes"], ["goog.asserts", "goog.crypt.BlockCipher"], false);
goog.addDependency("crypt/aes_test.js", ["goog.crypt.AesTest"], ["goog.crypt", "goog.crypt.Aes", "goog.testing.jsunit"], false);
goog.addDependency("crypt/arc4.js", ["goog.crypt.Arc4"], ["goog.asserts"], false);
goog.addDependency("crypt/arc4_test.js", ["goog.crypt.Arc4Test"], ["goog.array", "goog.crypt.Arc4", "goog.testing.jsunit"], false);
goog.addDependency("crypt/base64.js", ["goog.crypt.base64"], ["goog.crypt", "goog.userAgent"], false);
goog.addDependency("crypt/base64_test.js", ["goog.crypt.base64Test"], ["goog.crypt", "goog.crypt.base64", "goog.testing.jsunit"], false);
goog.addDependency("crypt/basen.js", ["goog.crypt.baseN"], [], false);
goog.addDependency("crypt/basen_test.js", ["goog.crypt.baseNTest"], ["goog.crypt.baseN", "goog.testing.jsunit"], false);
goog.addDependency("crypt/blobhasher.js", ["goog.crypt.BlobHasher", "goog.crypt.BlobHasher.EventType"], ["goog.asserts", "goog.events.EventTarget", "goog.fs", "goog.log"], false);
goog.addDependency("crypt/blobhasher_test.js", ["goog.crypt.BlobHasherTest"], ["goog.crypt", "goog.crypt.BlobHasher", "goog.crypt.Md5", "goog.events", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("crypt/blockcipher.js", ["goog.crypt.BlockCipher"], [], false);
goog.addDependency("crypt/bytestring_perf.js", ["goog.crypt.byteArrayToStringPerf"], ["goog.array", "goog.dom", "goog.testing.PerformanceTable"], false);
goog.addDependency("crypt/cbc.js", ["goog.crypt.Cbc"], ["goog.array", "goog.asserts", "goog.crypt"], false);
goog.addDependency("crypt/cbc_test.js", ["goog.crypt.CbcTest"], ["goog.crypt", "goog.crypt.Aes", "goog.crypt.Cbc", "goog.testing.jsunit"], false);
goog.addDependency("crypt/crypt.js", ["goog.crypt"], ["goog.array", "goog.asserts"], false);
goog.addDependency("crypt/crypt_test.js", ["goog.cryptTest"], ["goog.crypt", "goog.string", "goog.testing.jsunit"], false);
goog.addDependency("crypt/hash.js", ["goog.crypt.Hash"], [], false);
goog.addDependency("crypt/hash32.js", ["goog.crypt.hash32"], ["goog.crypt"], false);
goog.addDependency("crypt/hash32_test.js", ["goog.crypt.hash32Test"], ["goog.crypt.hash32", "goog.testing.TestCase", "goog.testing.jsunit"], false);
goog.addDependency("crypt/hashtester.js", ["goog.crypt.hashTester"], ["goog.array", "goog.crypt", "goog.dom", "goog.dom.TagName", "goog.testing.PerformanceTable", "goog.testing.PseudoRandom", "goog.testing.asserts"], false);
goog.addDependency("crypt/hmac.js", ["goog.crypt.Hmac"], ["goog.crypt.Hash"], false);
goog.addDependency("crypt/hmac_test.js", ["goog.crypt.HmacTest"], ["goog.crypt.Hmac", "goog.crypt.Sha1", "goog.crypt.hashTester", "goog.testing.jsunit"], false);
goog.addDependency("crypt/md5.js", ["goog.crypt.Md5"], ["goog.crypt.Hash"], false);
goog.addDependency("crypt/md5_test.js", ["goog.crypt.Md5Test"], ["goog.crypt", "goog.crypt.Md5", "goog.crypt.hashTester", "goog.testing.jsunit"], false);
goog.addDependency("crypt/pbkdf2.js", ["goog.crypt.pbkdf2"], ["goog.array", "goog.asserts", "goog.crypt", "goog.crypt.Hmac", "goog.crypt.Sha1"], false);
goog.addDependency("crypt/pbkdf2_test.js", ["goog.crypt.pbkdf2Test"], ["goog.crypt", "goog.crypt.pbkdf2", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("crypt/sha1.js", ["goog.crypt.Sha1"], ["goog.crypt.Hash"], false);
goog.addDependency("crypt/sha1_test.js", ["goog.crypt.Sha1Test"], ["goog.crypt", "goog.crypt.Sha1", "goog.crypt.hashTester", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("crypt/sha2.js", ["goog.crypt.Sha2"], ["goog.array", "goog.asserts", "goog.crypt.Hash"], false);
goog.addDependency("crypt/sha224.js", ["goog.crypt.Sha224"], ["goog.crypt.Sha2"], false);
goog.addDependency("crypt/sha224_test.js", ["goog.crypt.Sha224Test"], ["goog.crypt", "goog.crypt.Sha224", "goog.crypt.hashTester", "goog.testing.jsunit"], false);
goog.addDependency("crypt/sha256.js", ["goog.crypt.Sha256"], ["goog.crypt.Sha2"], false);
goog.addDependency("crypt/sha256_test.js", ["goog.crypt.Sha256Test"], ["goog.crypt", "goog.crypt.Sha256", "goog.crypt.hashTester", "goog.testing.jsunit"], false);
goog.addDependency("crypt/sha2_64bit.js", ["goog.crypt.Sha2_64bit"], ["goog.array", "goog.asserts", "goog.crypt.Hash", "goog.math.Long"], false);
goog.addDependency("crypt/sha2_64bit_test.js", ["goog.crypt.Sha2_64bit_test"], ["goog.array", "goog.crypt", "goog.crypt.Sha384", "goog.crypt.Sha512", "goog.crypt.Sha512_256", "goog.crypt.hashTester", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("crypt/sha384.js", ["goog.crypt.Sha384"], ["goog.crypt.Sha2_64bit"], false);
goog.addDependency("crypt/sha512.js", ["goog.crypt.Sha512"], ["goog.crypt.Sha2_64bit"], false);
goog.addDependency("crypt/sha512_256.js", ["goog.crypt.Sha512_256"], ["goog.crypt.Sha2_64bit"], false);
goog.addDependency("cssom/cssom.js", ["goog.cssom", "goog.cssom.CssRuleType"], ["goog.array", "goog.dom", "goog.dom.TagName"], false);
goog.addDependency("cssom/cssom_test.js", ["goog.cssomTest"], ["goog.array", "goog.cssom", "goog.cssom.CssRuleType", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("cssom/iframe/style.js", ["goog.cssom.iframe.style"], ["goog.asserts", "goog.cssom", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.string", "goog.style", "goog.userAgent"], false);
goog.addDependency("cssom/iframe/style_test.js", ["goog.cssom.iframe.styleTest"], ["goog.cssom", "goog.cssom.iframe.style", "goog.dom", "goog.dom.DomHelper", "goog.dom.TagName", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("datasource/datamanager.js", ["goog.ds.DataManager"], ["goog.ds.BasicNodeList", "goog.ds.DataNode", "goog.ds.Expr", "goog.object", "goog.string", "goog.structs", "goog.structs.Map"], false);
goog.addDependency("datasource/datasource.js", ["goog.ds.BaseDataNode", "goog.ds.BasicNodeList", "goog.ds.DataNode", "goog.ds.DataNodeList", "goog.ds.EmptyNodeList", "goog.ds.LoadState", "goog.ds.SortedNodeList", "goog.ds.Util", "goog.ds.logger"], ["goog.array", "goog.log"], false);
goog.addDependency("datasource/datasource_test.js", ["goog.ds.JsDataSourceTest"], ["goog.dom.xml", "goog.ds.DataManager", "goog.ds.JsDataSource", "goog.ds.SortedNodeList", "goog.ds.XmlDataSource", "goog.testing.jsunit"], false);
goog.addDependency("datasource/expr.js", ["goog.ds.Expr"], ["goog.ds.BasicNodeList", "goog.ds.EmptyNodeList", "goog.string"], false);
goog.addDependency("datasource/expr_test.js", ["goog.ds.ExprTest"], ["goog.ds.DataManager", "goog.ds.Expr", "goog.ds.JsDataSource", "goog.testing.jsunit"], false);
goog.addDependency("datasource/fastdatanode.js", ["goog.ds.AbstractFastDataNode", "goog.ds.FastDataNode", "goog.ds.FastListNode", "goog.ds.PrimitiveFastDataNode"], ["goog.ds.DataManager", "goog.ds.DataNodeList", "goog.ds.EmptyNodeList", "goog.string"], false);
goog.addDependency("datasource/fastdatanode_test.js", ["goog.ds.FastDataNodeTest"], ["goog.array", "goog.ds.DataManager", "goog.ds.Expr", "goog.ds.FastDataNode", "goog.testing.jsunit"], false);
goog.addDependency("datasource/jsdatasource.js", ["goog.ds.JsDataSource", "goog.ds.JsPropertyDataSource"], ["goog.ds.BaseDataNode", "goog.ds.BasicNodeList", "goog.ds.DataManager", "goog.ds.DataNode", "goog.ds.EmptyNodeList", "goog.ds.LoadState"], false);
goog.addDependency("datasource/jsondatasource.js", ["goog.ds.JsonDataSource"], ["goog.Uri", "goog.dom", "goog.dom.TagName", "goog.ds.DataManager", "goog.ds.JsDataSource", "goog.ds.LoadState", "goog.ds.logger", "goog.log"], false);
goog.addDependency("datasource/jsxmlhttpdatasource.js", ["goog.ds.JsXmlHttpDataSource"], ["goog.Uri", "goog.ds.DataManager", "goog.ds.FastDataNode", "goog.ds.LoadState", "goog.ds.logger", "goog.events", "goog.log", "goog.net.EventType", "goog.net.XhrIo"], false);
goog.addDependency("datasource/jsxmlhttpdatasource_test.js", ["goog.ds.JsXmlHttpDataSourceTest"], ["goog.ds.JsXmlHttpDataSource", "goog.testing.TestQueue", "goog.testing.jsunit", "goog.testing.net.XhrIo"], false);
goog.addDependency("datasource/xmldatasource.js", ["goog.ds.XmlDataSource", "goog.ds.XmlHttpDataSource"], ["goog.Uri", "goog.dom.NodeType", "goog.dom.xml", "goog.ds.BasicNodeList", "goog.ds.DataManager", "goog.ds.DataNode", "goog.ds.LoadState", "goog.ds.logger", "goog.net.XhrIo", "goog.string"], false);
goog.addDependency("date/date.js", ["goog.date", "goog.date.Date", "goog.date.DateTime", "goog.date.Interval", "goog.date.month", "goog.date.weekDay"], ["goog.asserts", "goog.date.DateLike", "goog.i18n.DateTimeSymbols", "goog.string"], false);
goog.addDependency("date/date_test.js", ["goog.dateTest"], ["goog.array", "goog.date", "goog.date.Date", "goog.date.DateTime", "goog.date.Interval", "goog.date.month", "goog.date.weekDay", "goog.i18n.DateTimeSymbols", "goog.testing.ExpectedFailures", "goog.testing.jsunit", "goog.userAgent", "goog.userAgent.platform", "goog.userAgent.product", "goog.userAgent.product.isVersion"], false);
goog.addDependency("date/datelike.js", ["goog.date.DateLike"], [], false);
goog.addDependency("date/daterange.js", ["goog.date.DateRange", "goog.date.DateRange.Iterator", "goog.date.DateRange.StandardDateRangeKeys"], ["goog.date.Date", "goog.date.Interval", "goog.iter.Iterator", "goog.iter.StopIteration"], false);
goog.addDependency("date/daterange_test.js", ["goog.date.DateRangeTest"], ["goog.date.Date", "goog.date.DateRange", "goog.date.Interval", "goog.i18n.DateTimeSymbols", "goog.testing.jsunit"], false);
goog.addDependency("date/duration.js", ["goog.date.duration"], ["goog.i18n.DateTimeFormat", "goog.i18n.MessageFormat"], false);
goog.addDependency("date/duration_test.js", ["goog.date.durationTest"], ["goog.date.duration", "goog.i18n.DateTimeFormat", "goog.i18n.DateTimeSymbols", "goog.i18n.DateTimeSymbols_bn", "goog.i18n.DateTimeSymbols_en", "goog.i18n.DateTimeSymbols_fa", "goog.testing.jsunit"], false);
goog.addDependency("date/relative.js", ["goog.date.relative", "goog.date.relative.TimeDeltaFormatter", "goog.date.relative.Unit"], ["goog.i18n.DateTimeFormat", "goog.i18n.DateTimePatterns"], false);
goog.addDependency("date/relative_test.js", ["goog.date.relativeTest"], ["goog.date.DateTime", "goog.date.relative", "goog.i18n.DateTimeFormat", "goog.testing.jsunit"], false);
goog.addDependency("date/relativewithplurals.js", ["goog.date.relativeWithPlurals"], ["goog.date.relative", "goog.date.relative.Unit", "goog.i18n.MessageFormat"], false);
goog.addDependency("date/relativewithplurals_test.js", ["goog.date.relativeWithPluralsTest"], ["goog.date.relative", "goog.date.relativeTest", "goog.date.relativeWithPlurals", "goog.i18n.DateTimeFormat", "goog.i18n.DateTimeSymbols", "goog.i18n.DateTimeSymbols_bn", "goog.i18n.DateTimeSymbols_en", "goog.i18n.DateTimeSymbols_fa", "goog.i18n.NumberFormatSymbols", "goog.i18n.NumberFormatSymbols_bn", "goog.i18n.NumberFormatSymbols_en", "goog.i18n.NumberFormatSymbols_fa"], false);
goog.addDependency("date/utcdatetime.js", ["goog.date.UtcDateTime"], ["goog.date", "goog.date.Date", "goog.date.DateTime", "goog.date.Interval"], false);
goog.addDependency("date/utcdatetime_test.js", ["goog.date.UtcDateTimeTest"], ["goog.date.Interval", "goog.date.UtcDateTime", "goog.date.month", "goog.date.weekDay", "goog.testing.jsunit"], false);
goog.addDependency("db/cursor.js", ["goog.db.Cursor"], ["goog.async.Deferred", "goog.db.Error", "goog.debug", "goog.events.EventTarget"], false);
goog.addDependency("db/db.js", ["goog.db", "goog.db.BlockedCallback", "goog.db.UpgradeNeededCallback"], ["goog.asserts", "goog.async.Deferred", "goog.db.Error", "goog.db.IndexedDb", "goog.db.Transaction"], false);
goog.addDependency("db/db_test.js", ["goog.dbTest"], ["goog.Disposable", "goog.Promise", "goog.array", "goog.db", "goog.db.Cursor", "goog.db.Error", "goog.db.IndexedDb", "goog.db.KeyRange", "goog.db.Transaction", "goog.events", "goog.object", "goog.testing.PropertyReplacer", "goog.testing.asserts", "goog.testing.jsunit", "goog.userAgent.product"], false);
goog.addDependency("db/error.js", ["goog.db.Error", "goog.db.Error.ErrorCode", "goog.db.Error.ErrorName", "goog.db.Error.VersionChangeBlockedError"], ["goog.debug.Error"], false);
goog.addDependency("db/index.js", ["goog.db.Index"], ["goog.async.Deferred", "goog.db.Cursor", "goog.db.Error", "goog.debug"], false);
goog.addDependency("db/indexeddb.js", ["goog.db.IndexedDb"], ["goog.async.Deferred", "goog.db.Error", "goog.db.ObjectStore", "goog.db.Transaction", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventTarget"], false);
goog.addDependency("db/keyrange.js", ["goog.db.KeyRange"], [], false);
goog.addDependency("db/objectstore.js", ["goog.db.ObjectStore"], ["goog.async.Deferred", "goog.db.Cursor", "goog.db.Error", "goog.db.Index", "goog.debug", "goog.events"], false);
goog.addDependency("db/old_db_test.js", ["goog.oldDbTest"], ["goog.async.Deferred", "goog.db", "goog.db.Cursor", "goog.db.Error", "goog.db.IndexedDb", "goog.db.KeyRange", "goog.db.Transaction", "goog.events", "goog.testing.AsyncTestCase", "goog.testing.asserts", "goog.testing.jsunit", "goog.userAgent.product", "goog.userAgent.product.isVersion"], false);
goog.addDependency("db/transaction.js", ["goog.db.Transaction", "goog.db.Transaction.TransactionMode"], ["goog.async.Deferred", "goog.db.Error", "goog.db.ObjectStore", "goog.events", "goog.events.EventHandler", "goog.events.EventTarget"], false);
goog.addDependency("debug/console.js", ["goog.debug.Console"], ["goog.debug.LogManager", "goog.debug.Logger", "goog.debug.TextFormatter"], false);
goog.addDependency("debug/console_test.js", ["goog.debug.ConsoleTest"], ["goog.debug.Console", "goog.debug.LogRecord", "goog.debug.Logger", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("debug/debug.js", ["goog.debug"], ["goog.array", "goog.html.SafeHtml", "goog.html.SafeUrl", "goog.html.uncheckedconversions", "goog.string.Const", "goog.structs.Set", "goog.userAgent"], false);
goog.addDependency("debug/debug_test.js", ["goog.debugTest"], ["goog.debug", "goog.html.SafeHtml", "goog.structs.Set", "goog.testing.jsunit"], false);
goog.addDependency("debug/debugwindow.js", ["goog.debug.DebugWindow"], ["goog.debug.HtmlFormatter", "goog.debug.LogManager", "goog.debug.Logger", "goog.dom.safe", "goog.html.SafeHtml", "goog.html.SafeStyleSheet", "goog.string.Const", "goog.structs.CircularBuffer", "goog.userAgent"], false);
goog.addDependency("debug/debugwindow_test.js", ["goog.debug.DebugWindowTest"], ["goog.debug.DebugWindow", "goog.testing.jsunit"], false);
goog.addDependency("debug/devcss/devcss.js", ["goog.debug.DevCss", "goog.debug.DevCss.UserAgent"], ["goog.asserts", "goog.cssom", "goog.dom.classlist", "goog.events", "goog.events.EventType", "goog.string", "goog.userAgent"], false);
goog.addDependency("debug/devcss/devcss_test.js", ["goog.debug.DevCssTest"], ["goog.debug.DevCss", "goog.style", "goog.testing.jsunit"], false);
goog.addDependency("debug/devcss/devcssrunner.js", ["goog.debug.devCssRunner"], ["goog.debug.DevCss"], false);
goog.addDependency("debug/divconsole.js", ["goog.debug.DivConsole"], ["goog.debug.HtmlFormatter", "goog.debug.LogManager", "goog.dom.TagName", "goog.dom.safe", "goog.html.SafeHtml", "goog.style"], false);
goog.addDependency("debug/enhanceerror_test.js", ["goog.debugEnhanceErrorTest"], ["goog.debug", "goog.testing.jsunit"], false);
goog.addDependency("debug/entrypointregistry.js", ["goog.debug.EntryPointMonitor", "goog.debug.entryPointRegistry"], ["goog.asserts"], false);
goog.addDependency("debug/entrypointregistry_test.js", ["goog.debug.entryPointRegistryTest"], ["goog.debug.ErrorHandler", "goog.debug.entryPointRegistry", "goog.testing.jsunit"], false);
goog.addDependency("debug/error.js", ["goog.debug.Error"], [], false);
goog.addDependency("debug/error_test.js", ["goog.debug.ErrorTest"], ["goog.debug.Error", "goog.testing.ExpectedFailures", "goog.testing.jsunit", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("debug/errorhandler.js", ["goog.debug.ErrorHandler", "goog.debug.ErrorHandler.ProtectedFunctionError"], ["goog.Disposable", "goog.asserts", "goog.debug", "goog.debug.EntryPointMonitor", "goog.debug.Error", "goog.debug.Trace"], false);
goog.addDependency("debug/errorhandler_async_test.js", ["goog.debug.ErrorHandlerAsyncTest"], ["goog.Promise", "goog.debug.ErrorHandler", "goog.testing.TestCase", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("debug/errorhandler_test.js", ["goog.debug.ErrorHandlerTest"], ["goog.debug.ErrorHandler", "goog.testing.MockControl", "goog.testing.jsunit"], false);
goog.addDependency("debug/errorhandlerweakdep.js", ["goog.debug.errorHandlerWeakDep"], [], false);
goog.addDependency("debug/errorreporter.js", ["goog.debug.ErrorReporter", "goog.debug.ErrorReporter.ExceptionEvent"], ["goog.asserts", "goog.debug", "goog.debug.Error", "goog.debug.ErrorHandler", "goog.debug.entryPointRegistry", "goog.events", "goog.events.Event", "goog.events.EventTarget", "goog.log", "goog.net.XhrIo", "goog.object", "goog.string", "goog.uri.utils", "goog.userAgent"], false);
goog.addDependency("debug/errorreporter_test.js", ["goog.debug.ErrorReporterTest"], ["goog.debug.Error", "goog.debug.ErrorReporter", "goog.events", "goog.functions", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("debug/fancywindow.js", ["goog.debug.FancyWindow"], ["goog.array", "goog.debug.DebugWindow", "goog.debug.LogManager", "goog.debug.Logger", "goog.dom.DomHelper", "goog.dom.TagName", "goog.dom.safe", "goog.html.SafeHtml", "goog.html.SafeStyleSheet", "goog.object", "goog.string", "goog.string.Const", "goog.userAgent"], false);
goog.addDependency("debug/formatter.js", ["goog.debug.Formatter", "goog.debug.HtmlFormatter", "goog.debug.TextFormatter"], ["goog.debug", "goog.debug.Logger", "goog.debug.RelativeTimeProvider", "goog.html.SafeHtml"], false);
goog.addDependency("debug/formatter_test.js", ["goog.debug.FormatterTest"], ["goog.debug.HtmlFormatter", "goog.debug.LogRecord", "goog.debug.Logger", "goog.html.SafeHtml", "goog.testing.jsunit"], false);
goog.addDependency("debug/fpsdisplay.js", ["goog.debug.FpsDisplay"], ["goog.asserts", "goog.async.AnimationDelay", "goog.dom", "goog.dom.TagName", "goog.ui.Component"], false);
goog.addDependency("debug/fpsdisplay_test.js", ["goog.debug.FpsDisplayTest"], ["goog.Timer", "goog.debug.FpsDisplay", "goog.testing.jsunit"], false);
goog.addDependency("debug/gcdiagnostics.js", ["goog.debug.GcDiagnostics"], ["goog.debug.Trace", "goog.log", "goog.userAgent"], false);
goog.addDependency("debug/logbuffer.js", ["goog.debug.LogBuffer"], ["goog.asserts", "goog.debug.LogRecord"], false);
goog.addDependency("debug/logbuffer_test.js", ["goog.debug.LogBufferTest"], ["goog.debug.LogBuffer", "goog.debug.Logger", "goog.testing.jsunit"], false);
goog.addDependency("debug/logger.js", ["goog.debug.LogManager", "goog.debug.Loggable", "goog.debug.Logger", "goog.debug.Logger.Level"], ["goog.array", "goog.asserts", "goog.debug", "goog.debug.LogBuffer", "goog.debug.LogRecord"], false);
goog.addDependency("debug/logger_test.js", ["goog.debug.LoggerTest"], ["goog.debug.LogManager", "goog.debug.Logger", "goog.testing.jsunit"], false);
goog.addDependency("debug/logrecord.js", ["goog.debug.LogRecord"], [], false);
goog.addDependency("debug/logrecordserializer.js", ["goog.debug.logRecordSerializer"], ["goog.debug.LogRecord", "goog.debug.Logger", "goog.json", "goog.object"], false);
goog.addDependency("debug/logrecordserializer_test.js", ["goog.debug.logRecordSerializerTest"], ["goog.debug.LogRecord", "goog.debug.Logger", "goog.debug.logRecordSerializer", "goog.testing.jsunit"], false);
goog.addDependency("debug/relativetimeprovider.js", ["goog.debug.RelativeTimeProvider"], [], false);
goog.addDependency("debug/tracer.js", ["goog.debug.Trace"], ["goog.array", "goog.debug.Logger", "goog.iter", "goog.log", "goog.structs.Map", "goog.structs.SimplePool"], false);
goog.addDependency("debug/tracer_test.js", ["goog.debug.TraceTest"], ["goog.debug.Trace", "goog.testing.jsunit"], false);
goog.addDependency("defineclass_test.js", ["goog.defineClassTest"], ["goog.testing.jsunit"], false);
goog.addDependency("disposable/disposable.js", ["goog.Disposable", "goog.dispose", "goog.disposeAll"], ["goog.disposable.IDisposable"], false);
goog.addDependency("disposable/disposable_test.js", ["goog.DisposableTest"], ["goog.Disposable", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("disposable/idisposable.js", ["goog.disposable.IDisposable"], [], false);
goog.addDependency("dom/abstractmultirange.js", ["goog.dom.AbstractMultiRange"], ["goog.array", "goog.dom", "goog.dom.AbstractRange"], false);
goog.addDependency("dom/abstractrange.js", ["goog.dom.AbstractRange", "goog.dom.RangeIterator", "goog.dom.RangeType"], ["goog.dom", "goog.dom.NodeType", "goog.dom.SavedCaretRange", "goog.dom.TagIterator", "goog.userAgent"], false);
goog.addDependency("dom/abstractrange_test.js", ["goog.dom.AbstractRangeTest"], ["goog.dom", "goog.dom.AbstractRange", "goog.dom.Range", "goog.dom.TagName", "goog.testing.jsunit"], false);
goog.addDependency("dom/animationframe/animationframe.js", ["goog.dom.animationFrame", "goog.dom.animationFrame.Spec", "goog.dom.animationFrame.State"], ["goog.dom.animationFrame.polyfill"], false);
goog.addDependency("dom/animationframe/polyfill.js", ["goog.dom.animationFrame.polyfill"], [], false);
goog.addDependency("dom/annotate.js", ["goog.dom.annotate", "goog.dom.annotate.AnnotateFn"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.safe", "goog.html.SafeHtml"], false);
goog.addDependency("dom/annotate_test.js", ["goog.dom.annotateTest"], ["goog.dom", "goog.dom.TagName", "goog.dom.annotate", "goog.html.SafeHtml", "goog.testing.jsunit"], false);
goog.addDependency("dom/browserfeature.js", ["goog.dom.BrowserFeature"], ["goog.userAgent"], false);
goog.addDependency("dom/browserrange/abstractrange.js", ["goog.dom.browserrange.AbstractRange"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.NodeType", "goog.dom.RangeEndpoint", "goog.dom.TagName", "goog.dom.TextRangeIterator", "goog.iter", "goog.math.Coordinate", "goog.string", "goog.string.StringBuffer", "goog.userAgent"], false);
goog.addDependency("dom/browserrange/browserrange.js", ["goog.dom.browserrange", "goog.dom.browserrange.Error"], ["goog.dom", "goog.dom.BrowserFeature", "goog.dom.NodeType", "goog.dom.browserrange.GeckoRange", "goog.dom.browserrange.IeRange", "goog.dom.browserrange.OperaRange", "goog.dom.browserrange.W3cRange", "goog.dom.browserrange.WebKitRange", "goog.userAgent"], false);
goog.addDependency("dom/browserrange/browserrange_test.js", ["goog.dom.browserrangeTest"], ["goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.RangeEndpoint", "goog.dom.TagName", "goog.dom.browserrange", "goog.testing.dom", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("dom/browserrange/geckorange.js", ["goog.dom.browserrange.GeckoRange"], ["goog.dom.browserrange.W3cRange"], false);
goog.addDependency("dom/browserrange/ierange.js", ["goog.dom.browserrange.IeRange"], ["goog.array", "goog.dom", "goog.dom.NodeType", "goog.dom.RangeEndpoint", "goog.dom.TagName", "goog.dom.browserrange.AbstractRange", "goog.log", "goog.string"], false);
goog.addDependency("dom/browserrange/operarange.js", ["goog.dom.browserrange.OperaRange"], ["goog.dom.browserrange.W3cRange"], false);
goog.addDependency("dom/browserrange/w3crange.js", ["goog.dom.browserrange.W3cRange"], ["goog.array", "goog.dom", "goog.dom.NodeType", "goog.dom.RangeEndpoint", "goog.dom.TagName", "goog.dom.browserrange.AbstractRange", "goog.string", "goog.userAgent"], false);
goog.addDependency("dom/browserrange/webkitrange.js", ["goog.dom.browserrange.WebKitRange"], ["goog.dom.RangeEndpoint", "goog.dom.browserrange.W3cRange", "goog.userAgent"], false);
goog.addDependency("dom/bufferedviewportsizemonitor.js", ["goog.dom.BufferedViewportSizeMonitor"], ["goog.asserts", "goog.async.Delay", "goog.events", "goog.events.EventTarget", "goog.events.EventType"], false);
goog.addDependency("dom/bufferedviewportsizemonitor_test.js", ["goog.dom.BufferedViewportSizeMonitorTest"], ["goog.dom.BufferedViewportSizeMonitor", "goog.dom.ViewportSizeMonitor", "goog.events", "goog.events.EventType", "goog.math.Size", "goog.testing.MockClock", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit"], false);
goog.addDependency("dom/classes.js", ["goog.dom.classes"], ["goog.array"], false);
goog.addDependency("dom/classes_test.js", ["goog.dom.classes_test"], ["goog.dom", "goog.dom.TagName", "goog.dom.classes", "goog.testing.jsunit"], false);
goog.addDependency("dom/classlist.js", ["goog.dom.classlist"], ["goog.array"], false);
goog.addDependency("dom/classlist_test.js", ["goog.dom.classlist_test"], ["goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.testing.ExpectedFailures", "goog.testing.jsunit"], false);
goog.addDependency("dom/controlrange.js", ["goog.dom.ControlRange", "goog.dom.ControlRangeIterator"], ["goog.array", "goog.dom", "goog.dom.AbstractMultiRange", "goog.dom.AbstractRange", "goog.dom.RangeIterator", "goog.dom.RangeType", "goog.dom.SavedRange", "goog.dom.TagWalkType", "goog.dom.TextRange", "goog.iter.StopIteration", "goog.userAgent"], false);
goog.addDependency("dom/controlrange_test.js", ["goog.dom.ControlRangeTest"], ["goog.dom", "goog.dom.ControlRange", "goog.dom.RangeType", "goog.dom.TagName", "goog.dom.TextRange", "goog.testing.dom", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("dom/dataset.js", ["goog.dom.dataset"], ["goog.string", "goog.userAgent.product"], false);
goog.addDependency("dom/dataset_test.js", ["goog.dom.datasetTest"], ["goog.dom", "goog.dom.dataset", "goog.testing.jsunit"], false);
goog.addDependency("dom/dom.js", ["goog.dom", "goog.dom.Appendable", "goog.dom.DomHelper"], ["goog.array", "goog.asserts", "goog.dom.BrowserFeature", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.safe", "goog.html.SafeHtml", "goog.math.Coordinate", "goog.math.Size", "goog.object", "goog.string", "goog.string.Unicode", "goog.userAgent"], false);
goog.addDependency("dom/dom_test.js", ["goog.dom.dom_test"], ["goog.dom", "goog.dom.BrowserFeature", "goog.dom.DomHelper", "goog.dom.InputType", "goog.dom.NodeType", "goog.dom.TagName", "goog.functions", "goog.html.testing", "goog.object", "goog.string.Unicode", "goog.testing.PropertyReplacer", "goog.testing.asserts", "goog.userAgent", "goog.userAgent.product", "goog.userAgent.product.isVersion"], false);
goog.addDependency("dom/fontsizemonitor.js", ["goog.dom.FontSizeMonitor", "goog.dom.FontSizeMonitor.EventType"], ["goog.dom", "goog.dom.TagName", "goog.events", "goog.events.EventTarget", "goog.events.EventType", "goog.userAgent"], false);
goog.addDependency("dom/fontsizemonitor_test.js", ["goog.dom.FontSizeMonitorTest"], ["goog.dom", "goog.dom.FontSizeMonitor", "goog.dom.TagName", "goog.events", "goog.events.Event", "goog.testing.PropertyReplacer", "goog.testing.events", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("dom/forms.js", ["goog.dom.forms"], ["goog.dom.InputType", "goog.dom.TagName", "goog.structs.Map"], false);
goog.addDependency("dom/forms_test.js", ["goog.dom.formsTest"], ["goog.dom", "goog.dom.forms", "goog.testing.jsunit"], false);
goog.addDependency("dom/fullscreen.js", ["goog.dom.fullscreen", "goog.dom.fullscreen.EventType"], ["goog.dom", "goog.userAgent"], false);
goog.addDependency("dom/iframe.js", ["goog.dom.iframe"], ["goog.dom", "goog.dom.safe", "goog.html.SafeHtml", "goog.html.SafeStyle", "goog.html.legacyconversions", "goog.userAgent"], false);
goog.addDependency("dom/iframe_test.js", ["goog.dom.iframeTest"], ["goog.dom", "goog.dom.iframe", "goog.html.SafeHtml", "goog.html.SafeStyle", "goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("dom/inputtype.js", ["goog.dom.InputType"], [], false);
goog.addDependency("dom/inputtype_test.js", ["goog.dom.InputTypeTest"], ["goog.dom.InputType", "goog.object"], false);
goog.addDependency("dom/iter.js", ["goog.dom.iter.AncestorIterator", "goog.dom.iter.ChildIterator", "goog.dom.iter.SiblingIterator"], ["goog.iter.Iterator", "goog.iter.StopIteration"], false);
goog.addDependency("dom/iter_test.js", ["goog.dom.iterTest"], ["goog.dom", "goog.dom.NodeType", "goog.dom.iter.AncestorIterator", "goog.dom.iter.ChildIterator", "goog.dom.iter.SiblingIterator", "goog.testing.dom", "goog.testing.jsunit"], false);
goog.addDependency("dom/multirange.js", ["goog.dom.MultiRange", "goog.dom.MultiRangeIterator"], ["goog.array", "goog.dom.AbstractMultiRange", "goog.dom.AbstractRange", "goog.dom.RangeIterator", "goog.dom.RangeType", "goog.dom.SavedRange", "goog.dom.TextRange", "goog.iter.StopIteration", "goog.log"], false);
goog.addDependency("dom/multirange_test.js", ["goog.dom.MultiRangeTest"], ["goog.dom", "goog.dom.MultiRange", "goog.dom.Range", "goog.iter", "goog.testing.jsunit"], false);
goog.addDependency("dom/nodeiterator.js", ["goog.dom.NodeIterator"], ["goog.dom.TagIterator"], false);
goog.addDependency("dom/nodeiterator_test.js", ["goog.dom.NodeIteratorTest"], ["goog.dom", "goog.dom.NodeIterator", "goog.testing.dom", "goog.testing.jsunit"], false);
goog.addDependency("dom/nodeoffset.js", ["goog.dom.NodeOffset"], ["goog.Disposable", "goog.dom.TagName"], false);
goog.addDependency("dom/nodeoffset_test.js", ["goog.dom.NodeOffsetTest"], ["goog.dom", "goog.dom.NodeOffset", "goog.dom.NodeType", "goog.dom.TagName", "goog.testing.jsunit"], false);
goog.addDependency("dom/nodetype.js", ["goog.dom.NodeType"], [], false);
goog.addDependency("dom/pattern/abstractpattern.js", ["goog.dom.pattern.AbstractPattern"], ["goog.dom.pattern.MatchType"], false);
goog.addDependency("dom/pattern/allchildren.js", ["goog.dom.pattern.AllChildren"], ["goog.dom.pattern.AbstractPattern", "goog.dom.pattern.MatchType"], false);
goog.addDependency("dom/pattern/callback/callback.js", ["goog.dom.pattern.callback"], ["goog.dom", "goog.dom.TagWalkType", "goog.iter"], false);
goog.addDependency("dom/pattern/callback/counter.js", ["goog.dom.pattern.callback.Counter"], [], false);
goog.addDependency("dom/pattern/callback/test.js", ["goog.dom.pattern.callback.Test"], ["goog.iter.StopIteration"], false);
goog.addDependency("dom/pattern/childmatches.js", ["goog.dom.pattern.ChildMatches"], ["goog.dom.pattern.AllChildren", "goog.dom.pattern.MatchType"], false);
goog.addDependency("dom/pattern/endtag.js", ["goog.dom.pattern.EndTag"], ["goog.dom.TagWalkType", "goog.dom.pattern.Tag"], false);
goog.addDependency("dom/pattern/fulltag.js", ["goog.dom.pattern.FullTag"], ["goog.dom.pattern.MatchType", "goog.dom.pattern.StartTag", "goog.dom.pattern.Tag"], false);
goog.addDependency("dom/pattern/matcher.js", ["goog.dom.pattern.Matcher"], ["goog.dom.TagIterator", "goog.dom.pattern.MatchType", "goog.iter"], false);
goog.addDependency("dom/pattern/matcher_test.js", ["goog.dom.pattern.matcherTest"], ["goog.dom", "goog.dom.TagName", "goog.dom.pattern.EndTag", "goog.dom.pattern.FullTag", "goog.dom.pattern.Matcher", "goog.dom.pattern.Repeat", "goog.dom.pattern.Sequence", "goog.dom.pattern.StartTag", "goog.dom.pattern.callback.Counter", "goog.dom.pattern.callback.Test", "goog.iter.StopIteration", "goog.testing.jsunit"], false);
goog.addDependency("dom/pattern/nodetype.js", ["goog.dom.pattern.NodeType"], ["goog.dom.pattern.AbstractPattern", "goog.dom.pattern.MatchType"], false);
goog.addDependency("dom/pattern/pattern.js", ["goog.dom.pattern", "goog.dom.pattern.MatchType"], [], false);
goog.addDependency("dom/pattern/pattern_test.js", ["goog.dom.patternTest"], ["goog.dom", "goog.dom.NodeType", "goog.dom.TagWalkType", "goog.dom.pattern.AllChildren", "goog.dom.pattern.ChildMatches", "goog.dom.pattern.EndTag", "goog.dom.pattern.FullTag", "goog.dom.pattern.MatchType", "goog.dom.pattern.NodeType", "goog.dom.pattern.Repeat", "goog.dom.pattern.Sequence", "goog.dom.pattern.StartTag", "goog.dom.pattern.Text", "goog.testing.jsunit"], false);
goog.addDependency("dom/pattern/repeat.js", ["goog.dom.pattern.Repeat"], ["goog.dom.NodeType", "goog.dom.pattern.AbstractPattern", "goog.dom.pattern.MatchType"], false);
goog.addDependency("dom/pattern/sequence.js", ["goog.dom.pattern.Sequence"], ["goog.dom.NodeType", "goog.dom.pattern", "goog.dom.pattern.AbstractPattern", "goog.dom.pattern.MatchType"], false);
goog.addDependency("dom/pattern/starttag.js", ["goog.dom.pattern.StartTag"], ["goog.dom.TagWalkType", "goog.dom.pattern.Tag"], false);
goog.addDependency("dom/pattern/tag.js", ["goog.dom.pattern.Tag"], ["goog.dom.pattern", "goog.dom.pattern.AbstractPattern", "goog.dom.pattern.MatchType", "goog.object"], false);
goog.addDependency("dom/pattern/text.js", ["goog.dom.pattern.Text"], ["goog.dom.NodeType", "goog.dom.pattern", "goog.dom.pattern.AbstractPattern", "goog.dom.pattern.MatchType"], false);
goog.addDependency("dom/range.js", ["goog.dom.Range"], ["goog.dom", "goog.dom.AbstractRange", "goog.dom.BrowserFeature", "goog.dom.ControlRange", "goog.dom.MultiRange", "goog.dom.NodeType", "goog.dom.TextRange"], false);
goog.addDependency("dom/range_test.js", ["goog.dom.RangeTest"], ["goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.RangeType", "goog.dom.TagName", "goog.dom.TextRange", "goog.dom.browserrange", "goog.testing.dom", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("dom/rangeendpoint.js", ["goog.dom.RangeEndpoint"], [], false);
goog.addDependency("dom/safe.js", ["goog.dom.safe"], ["goog.asserts", "goog.html.SafeHtml", "goog.html.SafeUrl", "goog.html.TrustedResourceUrl", "goog.string", "goog.string.Const"], false);
goog.addDependency("dom/safe_test.js", ["goog.dom.safeTest"], ["goog.dom.safe", "goog.html.SafeUrl", "goog.html.TrustedResourceUrl", "goog.html.testing", "goog.string.Const", "goog.testing", "goog.testing.jsunit"], false);
goog.addDependency("dom/savedcaretrange.js", ["goog.dom.SavedCaretRange"], ["goog.array", "goog.dom", "goog.dom.SavedRange", "goog.dom.TagName", "goog.string"], false);
goog.addDependency("dom/savedcaretrange_test.js", ["goog.dom.SavedCaretRangeTest"], ["goog.dom", "goog.dom.Range", "goog.dom.SavedCaretRange", "goog.testing.dom", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("dom/savedrange.js", ["goog.dom.SavedRange"], ["goog.Disposable", "goog.log"], false);
goog.addDependency("dom/savedrange_test.js", ["goog.dom.SavedRangeTest"], ["goog.dom", "goog.dom.Range", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("dom/selection.js", ["goog.dom.selection"], ["goog.dom.InputType", "goog.string", "goog.userAgent"], false);
goog.addDependency("dom/selection_test.js", ["goog.dom.selectionTest"], ["goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.dom.selection", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("dom/tagiterator.js", ["goog.dom.TagIterator", "goog.dom.TagWalkType"], ["goog.dom", "goog.dom.NodeType", "goog.iter.Iterator", "goog.iter.StopIteration"], false);
goog.addDependency("dom/tagiterator_test.js", ["goog.dom.TagIteratorTest"], ["goog.dom", "goog.dom.TagIterator", "goog.dom.TagName", "goog.dom.TagWalkType", "goog.iter", "goog.iter.StopIteration", "goog.testing.dom", "goog.testing.jsunit"], false);
goog.addDependency("dom/tagname.js", ["goog.dom.TagName"], [], false);
goog.addDependency("dom/tagname_test.js", ["goog.dom.TagNameTest"], ["goog.dom.TagName", "goog.object", "goog.testing.jsunit"], false);
goog.addDependency("dom/tags.js", ["goog.dom.tags"], ["goog.object"], false);
goog.addDependency("dom/tags_test.js", ["goog.dom.tagsTest"], ["goog.dom.tags", "goog.testing.jsunit"], false);
goog.addDependency("dom/textrange.js", ["goog.dom.TextRange"], ["goog.array", "goog.dom", "goog.dom.AbstractRange", "goog.dom.RangeType", "goog.dom.SavedRange", "goog.dom.TagName", "goog.dom.TextRangeIterator", "goog.dom.browserrange", "goog.string", "goog.userAgent"], false);
goog.addDependency("dom/textrange_test.js", ["goog.dom.TextRangeTest"], ["goog.dom", "goog.dom.ControlRange", "goog.dom.Range", "goog.dom.TextRange", "goog.math.Coordinate", "goog.style", "goog.testing.ExpectedFailures", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("dom/textrangeiterator.js", ["goog.dom.TextRangeIterator"], ["goog.array", "goog.dom", "goog.dom.NodeType", "goog.dom.RangeIterator", "goog.dom.TagName", "goog.iter.StopIteration"], false);
goog.addDependency("dom/textrangeiterator_test.js", ["goog.dom.TextRangeIteratorTest"], ["goog.dom", "goog.dom.TagName", "goog.dom.TextRangeIterator", "goog.iter.StopIteration", "goog.testing.dom", "goog.testing.jsunit"], false);
goog.addDependency("dom/vendor.js", ["goog.dom.vendor"], ["goog.string", "goog.userAgent"], false);
goog.addDependency("dom/vendor_test.js", ["goog.dom.vendorTest"], ["goog.array", "goog.dom.vendor", "goog.labs.userAgent.util", "goog.testing.MockUserAgent", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.userAgent", "goog.userAgentTestUtil"], false);
goog.addDependency("dom/viewportsizemonitor.js", ["goog.dom.ViewportSizeMonitor"], ["goog.dom", "goog.events", "goog.events.EventTarget", "goog.events.EventType", "goog.math.Size"], false);
goog.addDependency("dom/viewportsizemonitor_test.js", ["goog.dom.ViewportSizeMonitorTest"], ["goog.dom.ViewportSizeMonitor", "goog.events", "goog.events.Event", "goog.events.EventTarget", "goog.events.EventType", "goog.math.Size", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("dom/xml.js", ["goog.dom.xml"], ["goog.dom", "goog.dom.NodeType"], false);
goog.addDependency("dom/xml_test.js", ["goog.dom.xmlTest"], ["goog.dom.TagName", "goog.dom.xml", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/browserfeature.js", ["goog.editor.BrowserFeature"], ["goog.editor.defines", "goog.userAgent", "goog.userAgent.product", "goog.userAgent.product.isVersion"], false);
goog.addDependency("editor/browserfeature_test.js", ["goog.editor.BrowserFeatureTest"], ["goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.testing.ExpectedFailures", "goog.testing.jsunit"], false);
goog.addDependency("editor/clicktoeditwrapper.js", ["goog.editor.ClickToEditWrapper"], ["goog.Disposable", "goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Command", "goog.editor.Field", "goog.editor.range", "goog.events.BrowserEvent", "goog.events.EventHandler", "goog.events.EventType"], false);
goog.addDependency("editor/clicktoeditwrapper_test.js", ["goog.editor.ClickToEditWrapperTest"], ["goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.ClickToEditWrapper", "goog.editor.SeamlessField", "goog.testing.MockClock", "goog.testing.events", "goog.testing.jsunit", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("editor/command.js", ["goog.editor.Command"], [], false);
goog.addDependency("editor/contenteditablefield.js", ["goog.editor.ContentEditableField"], ["goog.asserts", "goog.editor.Field", "goog.log"], false);
goog.addDependency("editor/contenteditablefield_test.js", ["goog.editor.ContentEditableFieldTest"], ["goog.dom", "goog.editor.ContentEditableField", "goog.editor.field_test", "goog.testing.jsunit"], false);
goog.addDependency("editor/defines.js", ["goog.editor.defines"], [], false);
goog.addDependency("editor/field.js", ["goog.editor.Field", "goog.editor.Field.EventType"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.array", "goog.asserts", "goog.async.Delay", "goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Command", "goog.editor.Plugin", "goog.editor.icontent", "goog.editor.icontent.FieldFormatInfo", "goog.editor.icontent.FieldStyleInfo", "goog.editor.node", "goog.editor.range", "goog.events", "goog.events.EventHandler", "goog.events.EventTarget", 
"goog.events.EventType", "goog.events.KeyCodes", "goog.functions", "goog.log", "goog.log.Level", "goog.string", "goog.string.Unicode", "goog.style", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("editor/field_test.js", ["goog.editor.field_test"], ["goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Field", "goog.editor.Plugin", "goog.editor.range", "goog.events", "goog.events.BrowserEvent", "goog.events.EventType", "goog.events.KeyCodes", "goog.functions", "goog.testing.LooseMock", "goog.testing.MockClock", "goog.testing.dom", "goog.testing.events", "goog.testing.events.Event", "goog.testing.recordFunction", "goog.userAgent"], false);
goog.addDependency("editor/focus.js", ["goog.editor.focus"], ["goog.dom.selection"], false);
goog.addDependency("editor/focus_test.js", ["goog.editor.focusTest"], ["goog.dom.selection", "goog.editor.BrowserFeature", "goog.editor.focus", "goog.testing.jsunit"], false);
goog.addDependency("editor/icontent.js", ["goog.editor.icontent", "goog.editor.icontent.FieldFormatInfo", "goog.editor.icontent.FieldStyleInfo"], ["goog.dom", "goog.editor.BrowserFeature", "goog.style", "goog.userAgent"], false);
goog.addDependency("editor/icontent_test.js", ["goog.editor.icontentTest"], ["goog.dom", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.icontent", "goog.editor.icontent.FieldFormatInfo", "goog.editor.icontent.FieldStyleInfo", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/link.js", ["goog.editor.Link"], ["goog.array", "goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Command", "goog.editor.node", "goog.editor.range", "goog.string", "goog.string.Unicode", "goog.uri.utils", "goog.uri.utils.ComponentIndex"], false);
goog.addDependency("editor/link_test.js", ["goog.editor.LinkTest"], ["goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.TagName", "goog.editor.Link", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/node.js", ["goog.editor.node"], ["goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.iter.ChildIterator", "goog.dom.iter.SiblingIterator", "goog.iter", "goog.object", "goog.string", "goog.string.Unicode", "goog.userAgent"], false);
goog.addDependency("editor/node_test.js", ["goog.editor.nodeTest"], ["goog.array", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.editor.node", "goog.style", "goog.testing.ExpectedFailures", "goog.testing.dom", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/plugin.js", ["goog.editor.Plugin"], ["goog.events.EventTarget", "goog.functions", "goog.log", "goog.object", "goog.reflect", "goog.userAgent"], false);
goog.addDependency("editor/plugin_test.js", ["goog.editor.PluginTest"], ["goog.editor.Field", "goog.editor.Plugin", "goog.functions", "goog.testing.StrictMock", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/plugins/abstractbubbleplugin.js", ["goog.editor.plugins.AbstractBubblePlugin"], ["goog.array", "goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.TagName", "goog.dom.classlist", "goog.editor.Plugin", "goog.editor.style", "goog.events", "goog.events.EventHandler", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.actionEventWrapper", "goog.functions", "goog.string.Unicode", "goog.ui.Component", "goog.ui.editor.Bubble", "goog.userAgent"], false);
goog.addDependency("editor/plugins/abstractbubbleplugin_test.js", ["goog.editor.plugins.AbstractBubblePluginTest"], ["goog.dom", "goog.dom.TagName", "goog.editor.plugins.AbstractBubblePlugin", "goog.events.BrowserEvent", "goog.events.EventType", "goog.events.KeyCodes", "goog.functions", "goog.style", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.ui.editor.Bubble", "goog.userAgent"], false);
goog.addDependency("editor/plugins/abstractdialogplugin.js", ["goog.editor.plugins.AbstractDialogPlugin", "goog.editor.plugins.AbstractDialogPlugin.EventType"], ["goog.dom", "goog.dom.Range", "goog.editor.Field", "goog.editor.Plugin", "goog.editor.range", "goog.events", "goog.ui.editor.AbstractDialog"], false);
goog.addDependency("editor/plugins/abstractdialogplugin_test.js", ["goog.editor.plugins.AbstractDialogPluginTest"], ["goog.dom.SavedRange", "goog.dom.TagName", "goog.editor.Field", "goog.editor.plugins.AbstractDialogPlugin", "goog.events.Event", "goog.events.EventHandler", "goog.functions", "goog.testing.MockClock", "goog.testing.MockControl", "goog.testing.PropertyReplacer", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.events", "goog.testing.jsunit", "goog.testing.mockmatchers.ArgumentMatcher", 
"goog.ui.editor.AbstractDialog", "goog.userAgent"], false);
goog.addDependency("editor/plugins/abstracttabhandler.js", ["goog.editor.plugins.AbstractTabHandler"], ["goog.editor.Plugin", "goog.events.KeyCodes", "goog.userAgent"], false);
goog.addDependency("editor/plugins/abstracttabhandler_test.js", ["goog.editor.plugins.AbstractTabHandlerTest"], ["goog.editor.Field", "goog.editor.plugins.AbstractTabHandler", "goog.events.BrowserEvent", "goog.events.KeyCodes", "goog.testing.StrictMock", "goog.testing.editor.FieldMock", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/plugins/basictextformatter.js", ["goog.editor.plugins.BasicTextFormatter", "goog.editor.plugins.BasicTextFormatter.COMMAND"], ["goog.array", "goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Command", "goog.editor.Link", "goog.editor.Plugin", "goog.editor.node", "goog.editor.range", "goog.editor.style", "goog.iter", "goog.iter.StopIteration", "goog.log", "goog.object", "goog.string", "goog.string.Unicode", 
"goog.style", "goog.ui.editor.messages", "goog.userAgent"], false);
goog.addDependency("editor/plugins/basictextformatter_test.js", ["goog.editor.plugins.BasicTextFormatterTest"], ["goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Command", "goog.editor.Field", "goog.editor.Plugin", "goog.editor.plugins.BasicTextFormatter", "goog.object", "goog.style", "goog.testing.ExpectedFailures", "goog.testing.LooseMock", "goog.testing.PropertyReplacer", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.jsunit", 
"goog.testing.mockmatchers", "goog.userAgent"], false);
goog.addDependency("editor/plugins/blockquote.js", ["goog.editor.plugins.Blockquote"], ["goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.editor.BrowserFeature", "goog.editor.Command", "goog.editor.Plugin", "goog.editor.node", "goog.functions", "goog.log"], false);
goog.addDependency("editor/plugins/blockquote_test.js", ["goog.editor.plugins.BlockquoteTest"], ["goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.plugins.Blockquote", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.jsunit"], false);
goog.addDependency("editor/plugins/emoticons.js", ["goog.editor.plugins.Emoticons"], ["goog.dom.TagName", "goog.editor.Plugin", "goog.editor.range", "goog.functions", "goog.ui.emoji.Emoji", "goog.userAgent"], false);
goog.addDependency("editor/plugins/emoticons_test.js", ["goog.editor.plugins.EmoticonsTest"], ["goog.Uri", "goog.array", "goog.dom", "goog.dom.TagName", "goog.editor.Field", "goog.editor.plugins.Emoticons", "goog.testing.jsunit", "goog.ui.emoji.Emoji", "goog.userAgent"], false);
goog.addDependency("editor/plugins/enterhandler.js", ["goog.editor.plugins.EnterHandler"], ["goog.dom", "goog.dom.NodeOffset", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Plugin", "goog.editor.node", "goog.editor.plugins.Blockquote", "goog.editor.range", "goog.editor.style", "goog.events.KeyCodes", "goog.functions", "goog.object", "goog.string", "goog.userAgent"], false);
goog.addDependency("editor/plugins/enterhandler_test.js", ["goog.editor.plugins.EnterHandlerTest"], ["goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Field", "goog.editor.Plugin", "goog.editor.plugins.Blockquote", "goog.editor.plugins.EnterHandler", "goog.editor.range", "goog.events", "goog.events.KeyCodes", "goog.testing.ExpectedFailures", "goog.testing.MockClock", "goog.testing.dom", "goog.testing.editor.TestHelper", "goog.testing.events", 
"goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/plugins/firststrong.js", ["goog.editor.plugins.FirstStrong"], ["goog.dom.NodeType", "goog.dom.TagIterator", "goog.dom.TagName", "goog.editor.Command", "goog.editor.Field", "goog.editor.Plugin", "goog.editor.node", "goog.editor.range", "goog.i18n.bidi", "goog.i18n.uChar", "goog.iter", "goog.userAgent"], false);
goog.addDependency("editor/plugins/firststrong_test.js", ["goog.editor.plugins.FirstStrongTest"], ["goog.dom.Range", "goog.editor.Command", "goog.editor.Field", "goog.editor.plugins.FirstStrong", "goog.editor.range", "goog.events.KeyCodes", "goog.testing.MockClock", "goog.testing.editor.TestHelper", "goog.testing.events", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/plugins/headerformatter.js", ["goog.editor.plugins.HeaderFormatter"], ["goog.editor.Command", "goog.editor.Plugin", "goog.userAgent"], false);
goog.addDependency("editor/plugins/headerformatter_test.js", ["goog.editor.plugins.HeaderFormatterTest"], ["goog.dom", "goog.editor.Command", "goog.editor.plugins.BasicTextFormatter", "goog.editor.plugins.HeaderFormatter", "goog.events.BrowserEvent", "goog.testing.LooseMock", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/plugins/linkbubble.js", ["goog.editor.plugins.LinkBubble", "goog.editor.plugins.LinkBubble.Action"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.editor.Command", "goog.editor.Link", "goog.editor.plugins.AbstractBubblePlugin", "goog.editor.range", "goog.functions", "goog.string", "goog.style", "goog.ui.editor.messages", "goog.uri.utils", "goog.window"], false);
goog.addDependency("editor/plugins/linkbubble_test.js", ["goog.editor.plugins.LinkBubbleTest"], ["goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.Command", "goog.editor.Link", "goog.editor.plugins.LinkBubble", "goog.events.BrowserEvent", "goog.events.Event", "goog.events.EventType", "goog.string", "goog.style", "goog.testing.FunctionMock", "goog.testing.PropertyReplacer", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.events", "goog.testing.jsunit", 
"goog.userAgent"], false);
goog.addDependency("editor/plugins/linkdialogplugin.js", ["goog.editor.plugins.LinkDialogPlugin"], ["goog.array", "goog.dom", "goog.editor.Command", "goog.editor.plugins.AbstractDialogPlugin", "goog.events.EventHandler", "goog.functions", "goog.ui.editor.AbstractDialog", "goog.ui.editor.LinkDialog", "goog.uri.utils"], false);
goog.addDependency("editor/plugins/linkdialogplugin_test.js", ["goog.ui.editor.plugins.LinkDialogTest"], ["goog.dom", "goog.dom.DomHelper", "goog.dom.NodeType", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Command", "goog.editor.Field", "goog.editor.Link", "goog.editor.plugins.LinkDialogPlugin", "goog.string", "goog.string.Unicode", "goog.testing.MockControl", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.editor.dom", "goog.testing.events", "goog.testing.jsunit", 
"goog.testing.mockmatchers", "goog.ui.editor.AbstractDialog", "goog.ui.editor.LinkDialog", "goog.userAgent"], false);
goog.addDependency("editor/plugins/linkshortcutplugin.js", ["goog.editor.plugins.LinkShortcutPlugin"], ["goog.editor.Command", "goog.editor.Plugin"], false);
goog.addDependency("editor/plugins/linkshortcutplugin_test.js", ["goog.editor.plugins.LinkShortcutPluginTest"], ["goog.dom", "goog.dom.TagName", "goog.editor.Field", "goog.editor.plugins.BasicTextFormatter", "goog.editor.plugins.LinkBubble", "goog.editor.plugins.LinkShortcutPlugin", "goog.events.KeyCodes", "goog.testing.PropertyReplacer", "goog.testing.dom", "goog.testing.events", "goog.testing.jsunit"], false);
goog.addDependency("editor/plugins/listtabhandler.js", ["goog.editor.plugins.ListTabHandler"], ["goog.dom", "goog.dom.TagName", "goog.editor.Command", "goog.editor.plugins.AbstractTabHandler", "goog.iter"], false);
goog.addDependency("editor/plugins/listtabhandler_test.js", ["goog.editor.plugins.ListTabHandlerTest"], ["goog.dom", "goog.editor.Command", "goog.editor.plugins.ListTabHandler", "goog.events.BrowserEvent", "goog.events.KeyCodes", "goog.functions", "goog.testing.StrictMock", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.jsunit"], false);
goog.addDependency("editor/plugins/loremipsum.js", ["goog.editor.plugins.LoremIpsum"], ["goog.asserts", "goog.dom", "goog.editor.Command", "goog.editor.Field", "goog.editor.Plugin", "goog.editor.node", "goog.functions", "goog.userAgent"], false);
goog.addDependency("editor/plugins/loremipsum_test.js", ["goog.editor.plugins.LoremIpsumTest"], ["goog.dom", "goog.editor.Command", "goog.editor.Field", "goog.editor.plugins.LoremIpsum", "goog.string.Unicode", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/plugins/removeformatting.js", ["goog.editor.plugins.RemoveFormatting"], ["goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Plugin", "goog.editor.node", "goog.editor.range", "goog.string", "goog.userAgent"], false);
goog.addDependency("editor/plugins/removeformatting_test.js", ["goog.editor.plugins.RemoveFormattingTest"], ["goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.plugins.RemoveFormatting", "goog.string", "goog.testing.ExpectedFailures", "goog.testing.dom", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/plugins/spacestabhandler.js", ["goog.editor.plugins.SpacesTabHandler"], ["goog.dom.TagName", "goog.editor.plugins.AbstractTabHandler", "goog.editor.range"], false);
goog.addDependency("editor/plugins/spacestabhandler_test.js", ["goog.editor.plugins.SpacesTabHandlerTest"], ["goog.dom", "goog.dom.Range", "goog.editor.plugins.SpacesTabHandler", "goog.events.BrowserEvent", "goog.events.KeyCodes", "goog.functions", "goog.testing.StrictMock", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.jsunit"], false);
goog.addDependency("editor/plugins/tableeditor.js", ["goog.editor.plugins.TableEditor"], ["goog.array", "goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.Plugin", "goog.editor.Table", "goog.editor.node", "goog.editor.range", "goog.object", "goog.userAgent"], false);
goog.addDependency("editor/plugins/tableeditor_test.js", ["goog.editor.plugins.TableEditorTest"], ["goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.plugins.TableEditor", "goog.object", "goog.string", "goog.testing.ExpectedFailures", "goog.testing.JsUnitException", "goog.testing.editor.FieldMock", "goog.testing.editor.TestHelper", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/plugins/tagonenterhandler.js", ["goog.editor.plugins.TagOnEnterHandler"], ["goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.TagName", "goog.editor.Command", "goog.editor.node", "goog.editor.plugins.EnterHandler", "goog.editor.range", "goog.editor.style", "goog.events.KeyCodes", "goog.functions", "goog.string.Unicode", "goog.style", "goog.userAgent"], false);
goog.addDependency("editor/plugins/tagonenterhandler_test.js", ["goog.editor.plugins.TagOnEnterHandlerTest"], ["goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Field", "goog.editor.Plugin", "goog.editor.plugins.TagOnEnterHandler", "goog.events.KeyCodes", "goog.string.Unicode", "goog.testing.dom", "goog.testing.editor.TestHelper", "goog.testing.events", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/plugins/undoredo.js", ["goog.editor.plugins.UndoRedo"], ["goog.dom", "goog.dom.NodeOffset", "goog.dom.Range", "goog.editor.BrowserFeature", "goog.editor.Command", "goog.editor.Field", "goog.editor.Plugin", "goog.editor.node", "goog.editor.plugins.UndoRedoManager", "goog.editor.plugins.UndoRedoState", "goog.events", "goog.events.EventHandler", "goog.log", "goog.object"], false);
goog.addDependency("editor/plugins/undoredo_test.js", ["goog.editor.plugins.UndoRedoTest"], ["goog.array", "goog.dom", "goog.dom.browserrange", "goog.editor.Field", "goog.editor.plugins.LoremIpsum", "goog.editor.plugins.UndoRedo", "goog.events", "goog.functions", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.StrictMock", "goog.testing.jsunit"], false);
goog.addDependency("editor/plugins/undoredomanager.js", ["goog.editor.plugins.UndoRedoManager", "goog.editor.plugins.UndoRedoManager.EventType"], ["goog.editor.plugins.UndoRedoState", "goog.events", "goog.events.EventTarget"], false);
goog.addDependency("editor/plugins/undoredomanager_test.js", ["goog.editor.plugins.UndoRedoManagerTest"], ["goog.editor.plugins.UndoRedoManager", "goog.editor.plugins.UndoRedoState", "goog.events", "goog.testing.StrictMock", "goog.testing.jsunit"], false);
goog.addDependency("editor/plugins/undoredostate.js", ["goog.editor.plugins.UndoRedoState"], ["goog.events.EventTarget"], false);
goog.addDependency("editor/plugins/undoredostate_test.js", ["goog.editor.plugins.UndoRedoStateTest"], ["goog.editor.plugins.UndoRedoState", "goog.testing.jsunit"], false);
goog.addDependency("editor/range.js", ["goog.editor.range", "goog.editor.range.Point"], ["goog.array", "goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.dom.RangeEndpoint", "goog.dom.SavedCaretRange", "goog.editor.node", "goog.editor.style", "goog.iter", "goog.userAgent"], false);
goog.addDependency("editor/range_test.js", ["goog.editor.rangeTest"], ["goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.editor.range", "goog.editor.range.Point", "goog.string", "goog.testing.dom", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("editor/seamlessfield.js", ["goog.editor.SeamlessField"], ["goog.cssom.iframe.style", "goog.dom", "goog.dom.Range", "goog.dom.TagName", "goog.dom.safe", "goog.editor.BrowserFeature", "goog.editor.Field", "goog.editor.icontent", "goog.editor.icontent.FieldFormatInfo", "goog.editor.icontent.FieldStyleInfo", "goog.editor.node", "goog.events", "goog.events.EventType", "goog.html.uncheckedconversions", "goog.log", "goog.string.Const", "goog.style"], false);
goog.addDependency("editor/seamlessfield_test.js", ["goog.editor.seamlessfield_test"], ["goog.dom", "goog.dom.DomHelper", "goog.dom.Range", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Field", "goog.editor.SeamlessField", "goog.events", "goog.functions", "goog.style", "goog.testing.MockClock", "goog.testing.MockRange", "goog.testing.jsunit"], false);
goog.addDependency("editor/style.js", ["goog.editor.style"], ["goog.array", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.events.EventType", "goog.object", "goog.style", "goog.userAgent"], false);
goog.addDependency("editor/style_test.js", ["goog.editor.styleTest"], ["goog.dom", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.style", "goog.events.EventHandler", "goog.events.EventType", "goog.style", "goog.testing.LooseMock", "goog.testing.jsunit", "goog.testing.mockmatchers"], false);
goog.addDependency("editor/table.js", ["goog.editor.Table", "goog.editor.TableCell", "goog.editor.TableRow"], ["goog.dom", "goog.dom.DomHelper", "goog.dom.NodeType", "goog.dom.TagName", "goog.log", "goog.string.Unicode", "goog.style"], false);
goog.addDependency("editor/table_test.js", ["goog.editor.TableTest"], ["goog.dom", "goog.dom.TagName", "goog.editor.Table", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("events/actioneventwrapper.js", ["goog.events.actionEventWrapper"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.dom", "goog.events", "goog.events.EventHandler", "goog.events.EventType", "goog.events.EventWrapper", "goog.events.KeyCodes", "goog.userAgent"], false);
goog.addDependency("events/actioneventwrapper_test.js", ["goog.events.actionEventWrapperTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.events", "goog.events.EventHandler", "goog.events.KeyCodes", "goog.events.actionEventWrapper", "goog.testing.events", "goog.testing.jsunit"], false);
goog.addDependency("events/actionhandler.js", ["goog.events.ActionEvent", "goog.events.ActionHandler", "goog.events.ActionHandler.EventType", "goog.events.BeforeActionEvent"], ["goog.events", "goog.events.BrowserEvent", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.userAgent"], false);
goog.addDependency("events/actionhandler_test.js", ["goog.events.ActionHandlerTest"], ["goog.dom", "goog.events", "goog.events.ActionHandler", "goog.testing.events", "goog.testing.jsunit"], false);
goog.addDependency("events/browserevent.js", ["goog.events.BrowserEvent", "goog.events.BrowserEvent.MouseButton"], ["goog.events.BrowserFeature", "goog.events.Event", "goog.events.EventType", "goog.reflect", "goog.userAgent"], false);
goog.addDependency("events/browserevent_test.js", ["goog.events.BrowserEventTest"], ["goog.events.BrowserEvent", "goog.events.BrowserFeature", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("events/browserfeature.js", ["goog.events.BrowserFeature"], ["goog.userAgent"], false);
goog.addDependency("events/event.js", ["goog.events.Event", "goog.events.EventLike"], ["goog.Disposable", "goog.events.EventId"], false);
goog.addDependency("events/event_test.js", ["goog.events.EventTest"], ["goog.events.Event", "goog.events.EventId", "goog.events.EventTarget", "goog.testing.jsunit"], false);
goog.addDependency("events/eventhandler.js", ["goog.events.EventHandler"], ["goog.Disposable", "goog.events", "goog.object"], false);
goog.addDependency("events/eventhandler_test.js", ["goog.events.EventHandlerTest"], ["goog.events", "goog.events.EventHandler", "goog.events.EventTarget", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("events/eventid.js", ["goog.events.EventId"], [], false);
goog.addDependency("events/events.js", ["goog.events", "goog.events.CaptureSimulationMode", "goog.events.Key", "goog.events.ListenableType"], ["goog.asserts", "goog.debug.entryPointRegistry", "goog.events.BrowserEvent", "goog.events.BrowserFeature", "goog.events.Listenable", "goog.events.ListenerMap"], false);
goog.addDependency("events/events_test.js", ["goog.eventsTest"], ["goog.asserts.AssertionError", "goog.debug.EntryPointMonitor", "goog.debug.ErrorHandler", "goog.debug.entryPointRegistry", "goog.dom", "goog.dom.TagName", "goog.events", "goog.events.BrowserFeature", "goog.events.CaptureSimulationMode", "goog.events.Event", "goog.events.EventTarget", "goog.events.EventType", "goog.events.Listener", "goog.functions", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction"], 
false);
goog.addDependency("events/eventtarget.js", ["goog.events.EventTarget"], ["goog.Disposable", "goog.asserts", "goog.events", "goog.events.Event", "goog.events.Listenable", "goog.events.ListenerMap", "goog.object"], false);
goog.addDependency("events/eventtarget_test.js", ["goog.events.EventTargetTest"], ["goog.events.EventTarget", "goog.events.Listenable", "goog.events.eventTargetTester", "goog.events.eventTargetTester.KeyType", "goog.events.eventTargetTester.UnlistenReturnType", "goog.testing.jsunit"], false);
goog.addDependency("events/eventtarget_via_googevents_test.js", ["goog.events.EventTargetGoogEventsTest"], ["goog.events", "goog.events.EventTarget", "goog.events.eventTargetTester", "goog.events.eventTargetTester.KeyType", "goog.events.eventTargetTester.UnlistenReturnType", "goog.testing", "goog.testing.jsunit"], false);
goog.addDependency("events/eventtarget_via_w3cinterface_test.js", ["goog.events.EventTargetW3CTest"], ["goog.events.EventTarget", "goog.events.eventTargetTester", "goog.events.eventTargetTester.KeyType", "goog.events.eventTargetTester.UnlistenReturnType", "goog.testing.jsunit"], false);
goog.addDependency("events/eventtargettester.js", ["goog.events.eventTargetTester", "goog.events.eventTargetTester.KeyType", "goog.events.eventTargetTester.UnlistenReturnType"], ["goog.array", "goog.events", "goog.events.Event", "goog.events.EventTarget", "goog.testing.asserts", "goog.testing.recordFunction"], false);
goog.addDependency("events/eventtype.js", ["goog.events.EventType"], ["goog.userAgent"], false);
goog.addDependency("events/eventwrapper.js", ["goog.events.EventWrapper"], [], false);
goog.addDependency("events/filedrophandler.js", ["goog.events.FileDropHandler", "goog.events.FileDropHandler.EventType"], ["goog.array", "goog.dom", "goog.events.BrowserEvent", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.log", "goog.log.Level"], false);
goog.addDependency("events/filedrophandler_test.js", ["goog.events.FileDropHandlerTest"], ["goog.events", "goog.events.BrowserEvent", "goog.events.EventTarget", "goog.events.EventType", "goog.events.FileDropHandler", "goog.testing.jsunit"], false);
goog.addDependency("events/focushandler.js", ["goog.events.FocusHandler", "goog.events.FocusHandler.EventType"], ["goog.events", "goog.events.BrowserEvent", "goog.events.EventTarget", "goog.userAgent"], false);
goog.addDependency("events/imehandler.js", ["goog.events.ImeHandler", "goog.events.ImeHandler.Event", "goog.events.ImeHandler.EventType"], ["goog.events.Event", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.userAgent"], false);
goog.addDependency("events/imehandler_test.js", ["goog.events.ImeHandlerTest"], ["goog.array", "goog.dom", "goog.events", "goog.events.ImeHandler", "goog.events.KeyCodes", "goog.object", "goog.string", "goog.testing.PropertyReplacer", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("events/inputhandler.js", ["goog.events.InputHandler", "goog.events.InputHandler.EventType"], ["goog.Timer", "goog.dom.TagName", "goog.events.BrowserEvent", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.KeyCodes", "goog.userAgent"], false);
goog.addDependency("events/inputhandler_test.js", ["goog.events.InputHandlerTest"], ["goog.dom", "goog.events.EventHandler", "goog.events.EventType", "goog.events.InputHandler", "goog.events.KeyCodes", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.userAgent"], false);
goog.addDependency("events/keycodes.js", ["goog.events.KeyCodes"], ["goog.userAgent"], false);
goog.addDependency("events/keycodes_test.js", ["goog.events.KeyCodesTest"], ["goog.events.BrowserEvent", "goog.events.KeyCodes", "goog.object", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("events/keyhandler.js", ["goog.events.KeyEvent", "goog.events.KeyHandler", "goog.events.KeyHandler.EventType"], ["goog.events", "goog.events.BrowserEvent", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.userAgent"], false);
goog.addDependency("events/keyhandler_test.js", ["goog.events.KeyEventTest"], ["goog.dom", "goog.dom.TagName", "goog.events", "goog.events.BrowserEvent", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.testing.events", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("events/keynames.js", ["goog.events.KeyNames"], [], false);
goog.addDependency("events/listenable.js", ["goog.events.Listenable", "goog.events.ListenableKey"], ["goog.events.EventId"], false);
goog.addDependency("events/listenable_test.js", ["goog.events.ListenableTest"], ["goog.events.Listenable", "goog.testing.jsunit"], false);
goog.addDependency("events/listener.js", ["goog.events.Listener"], ["goog.events.ListenableKey"], false);
goog.addDependency("events/listenermap.js", ["goog.events.ListenerMap"], ["goog.array", "goog.events.Listener", "goog.object"], false);
goog.addDependency("events/listenermap_test.js", ["goog.events.ListenerMapTest"], ["goog.dispose", "goog.events", "goog.events.EventId", "goog.events.EventTarget", "goog.events.ListenerMap", "goog.testing.jsunit"], false);
goog.addDependency("events/mousewheelhandler.js", ["goog.events.MouseWheelEvent", "goog.events.MouseWheelHandler", "goog.events.MouseWheelHandler.EventType"], ["goog.dom", "goog.events", "goog.events.BrowserEvent", "goog.events.EventTarget", "goog.math", "goog.style", "goog.userAgent"], false);
goog.addDependency("events/mousewheelhandler_test.js", ["goog.events.MouseWheelHandlerTest"], ["goog.dom", "goog.events", "goog.events.BrowserEvent", "goog.events.MouseWheelEvent", "goog.events.MouseWheelHandler", "goog.functions", "goog.string", "goog.testing.PropertyReplacer", "goog.testing.events", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("events/onlinehandler.js", ["goog.events.OnlineHandler", "goog.events.OnlineHandler.EventType"], ["goog.Timer", "goog.events.BrowserFeature", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.net.NetworkStatusMonitor"], false);
goog.addDependency("events/onlinelistener_test.js", ["goog.events.OnlineHandlerTest"], ["goog.events", "goog.events.BrowserFeature", "goog.events.Event", "goog.events.EventHandler", "goog.events.OnlineHandler", "goog.net.NetworkStatusMonitor", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("events/pastehandler.js", ["goog.events.PasteHandler", "goog.events.PasteHandler.EventType", "goog.events.PasteHandler.State"], ["goog.Timer", "goog.async.ConditionalDelay", "goog.events.BrowserEvent", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.log", "goog.userAgent"], false);
goog.addDependency("events/pastehandler_test.js", ["goog.events.PasteHandlerTest"], ["goog.dom", "goog.events", "goog.events.BrowserEvent", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.PasteHandler", "goog.testing.MockClock", "goog.testing.MockUserAgent", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("events/wheelevent.js", ["goog.events.WheelEvent"], ["goog.asserts", "goog.events.BrowserEvent"], false);
goog.addDependency("events/wheelhandler.js", ["goog.events.WheelHandler"], ["goog.dom", "goog.events", "goog.events.EventTarget", "goog.events.WheelEvent", "goog.style", "goog.userAgent", "goog.userAgent.product", "goog.userAgent.product.isVersion"], false);
goog.addDependency("events/wheelhandler_test.js", ["goog.events.WheelHandlerTest"], ["goog.dom", "goog.events", "goog.events.BrowserEvent", "goog.events.WheelEvent", "goog.events.WheelHandler", "goog.string", "goog.testing.PropertyReplacer", "goog.testing.events", "goog.testing.jsunit", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("format/emailaddress.js", ["goog.format.EmailAddress"], ["goog.string"], false);
goog.addDependency("format/emailaddress_test.js", ["goog.format.EmailAddressTest"], ["goog.array", "goog.format.EmailAddress", "goog.testing.jsunit"], false);
goog.addDependency("format/format.js", ["goog.format"], ["goog.i18n.GraphemeBreak", "goog.string", "goog.userAgent"], false);
goog.addDependency("format/format_test.js", ["goog.formatTest"], ["goog.dom", "goog.dom.TagName", "goog.format", "goog.string", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("format/htmlprettyprinter.js", ["goog.format.HtmlPrettyPrinter", "goog.format.HtmlPrettyPrinter.Buffer"], ["goog.dom.TagName", "goog.object", "goog.string.StringBuffer"], false);
goog.addDependency("format/htmlprettyprinter_test.js", ["goog.format.HtmlPrettyPrinterTest"], ["goog.format.HtmlPrettyPrinter", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("format/internationalizedemailaddress.js", ["goog.format.InternationalizedEmailAddress"], ["goog.format.EmailAddress", "goog.string"], false);
goog.addDependency("format/internationalizedemailaddress_test.js", ["goog.format.InternationalizedEmailAddressTest"], ["goog.array", "goog.format.InternationalizedEmailAddress", "goog.testing.jsunit"], false);
goog.addDependency("format/jsonprettyprinter.js", ["goog.format.JsonPrettyPrinter", "goog.format.JsonPrettyPrinter.HtmlDelimiters", "goog.format.JsonPrettyPrinter.TextDelimiters"], ["goog.json", "goog.json.Serializer", "goog.string", "goog.string.StringBuffer", "goog.string.format"], false);
goog.addDependency("format/jsonprettyprinter_test.js", ["goog.format.JsonPrettyPrinterTest"], ["goog.format.JsonPrettyPrinter", "goog.testing.jsunit"], false);
goog.addDependency("fs/entry.js", ["goog.fs.DirectoryEntry", "goog.fs.DirectoryEntry.Behavior", "goog.fs.Entry", "goog.fs.FileEntry"], [], false);
goog.addDependency("fs/entryimpl.js", ["goog.fs.DirectoryEntryImpl", "goog.fs.EntryImpl", "goog.fs.FileEntryImpl"], ["goog.array", "goog.async.Deferred", "goog.fs.DirectoryEntry", "goog.fs.Entry", "goog.fs.Error", "goog.fs.FileEntry", "goog.fs.FileWriter", "goog.functions", "goog.string"], false);
goog.addDependency("fs/error.js", ["goog.fs.Error", "goog.fs.Error.ErrorCode"], ["goog.debug.Error", "goog.object", "goog.string"], false);
goog.addDependency("fs/filereader.js", ["goog.fs.FileReader", "goog.fs.FileReader.EventType", "goog.fs.FileReader.ReadyState"], ["goog.async.Deferred", "goog.events.EventTarget", "goog.fs.Error", "goog.fs.ProgressEvent"], false);
goog.addDependency("fs/filesaver.js", ["goog.fs.FileSaver", "goog.fs.FileSaver.EventType", "goog.fs.FileSaver.ReadyState"], ["goog.events.EventTarget", "goog.fs.Error", "goog.fs.ProgressEvent"], false);
goog.addDependency("fs/filesystem.js", ["goog.fs.FileSystem"], [], false);
goog.addDependency("fs/filesystemimpl.js", ["goog.fs.FileSystemImpl"], ["goog.fs.DirectoryEntryImpl", "goog.fs.FileSystem"], false);
goog.addDependency("fs/filewriter.js", ["goog.fs.FileWriter"], ["goog.fs.Error", "goog.fs.FileSaver"], false);
goog.addDependency("fs/fs.js", ["goog.fs"], ["goog.array", "goog.async.Deferred", "goog.fs.Error", "goog.fs.FileReader", "goog.fs.FileSystemImpl", "goog.fs.url", "goog.userAgent"], false);
goog.addDependency("fs/fs_test.js", ["goog.fsTest"], ["goog.Promise", "goog.array", "goog.dom", "goog.events", "goog.fs", "goog.fs.DirectoryEntry", "goog.fs.Error", "goog.fs.FileReader", "goog.fs.FileSaver", "goog.string", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("fs/progressevent.js", ["goog.fs.ProgressEvent"], ["goog.events.Event"], false);
goog.addDependency("fs/url.js", ["goog.fs.url"], [], false);
goog.addDependency("fs/url_test.js", ["goog.urlTest"], ["goog.fs.url", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("functions/functions.js", ["goog.functions"], [], false);
goog.addDependency("functions/functions_test.js", ["goog.functionsTest"], ["goog.functions", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("fx/abstractdragdrop.js", ["goog.fx.AbstractDragDrop", "goog.fx.AbstractDragDrop.EventType", "goog.fx.DragDropEvent", "goog.fx.DragDropItem"], ["goog.asserts", "goog.dom", "goog.dom.classlist", "goog.events", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.fx.Dragger", "goog.math.Box", "goog.math.Coordinate", "goog.style"], false);
goog.addDependency("fx/abstractdragdrop_test.js", ["goog.fx.AbstractDragDropTest"], ["goog.array", "goog.dom.TagName", "goog.events.EventType", "goog.functions", "goog.fx.AbstractDragDrop", "goog.fx.DragDropItem", "goog.math.Box", "goog.math.Coordinate", "goog.style", "goog.testing.events", "goog.testing.jsunit"], false);
goog.addDependency("fx/anim/anim.js", ["goog.fx.anim", "goog.fx.anim.Animated"], ["goog.async.AnimationDelay", "goog.async.Delay", "goog.object"], false);
goog.addDependency("fx/anim/anim_test.js", ["goog.fx.animTest"], ["goog.async.AnimationDelay", "goog.async.Delay", "goog.events", "goog.functions", "goog.fx.Animation", "goog.fx.anim", "goog.object", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.userAgent"], false);
goog.addDependency("fx/animation.js", ["goog.fx.Animation", "goog.fx.Animation.EventType", "goog.fx.Animation.State", "goog.fx.AnimationEvent"], ["goog.array", "goog.events.Event", "goog.fx.Transition", "goog.fx.TransitionBase", "goog.fx.anim", "goog.fx.anim.Animated"], false);
goog.addDependency("fx/animation_test.js", ["goog.fx.AnimationTest"], ["goog.events", "goog.fx.Animation", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("fx/animationqueue.js", ["goog.fx.AnimationParallelQueue", "goog.fx.AnimationQueue", "goog.fx.AnimationSerialQueue"], ["goog.array", "goog.asserts", "goog.events", "goog.fx.Transition", "goog.fx.TransitionBase"], false);
goog.addDependency("fx/animationqueue_test.js", ["goog.fx.AnimationQueueTest"], ["goog.events", "goog.fx.Animation", "goog.fx.AnimationParallelQueue", "goog.fx.AnimationSerialQueue", "goog.fx.Transition", "goog.fx.anim", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("fx/css3/fx.js", ["goog.fx.css3"], ["goog.fx.css3.Transition"], false);
goog.addDependency("fx/css3/transition.js", ["goog.fx.css3.Transition"], ["goog.Timer", "goog.asserts", "goog.fx.TransitionBase", "goog.style", "goog.style.transition"], false);
goog.addDependency("fx/css3/transition_test.js", ["goog.fx.css3.TransitionTest"], ["goog.dispose", "goog.dom", "goog.dom.TagName", "goog.events", "goog.fx.Transition", "goog.fx.css3.Transition", "goog.style.transition", "goog.testing.MockClock", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("fx/cssspriteanimation.js", ["goog.fx.CssSpriteAnimation"], ["goog.fx.Animation"], false);
goog.addDependency("fx/cssspriteanimation_test.js", ["goog.fx.CssSpriteAnimationTest"], ["goog.fx.CssSpriteAnimation", "goog.math.Box", "goog.math.Size", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("fx/dom.js", ["goog.fx.dom", "goog.fx.dom.BgColorTransform", "goog.fx.dom.ColorTransform", "goog.fx.dom.Fade", "goog.fx.dom.FadeIn", "goog.fx.dom.FadeInAndShow", "goog.fx.dom.FadeOut", "goog.fx.dom.FadeOutAndHide", "goog.fx.dom.PredefinedEffect", "goog.fx.dom.Resize", "goog.fx.dom.ResizeHeight", "goog.fx.dom.ResizeWidth", "goog.fx.dom.Scroll", "goog.fx.dom.Slide", "goog.fx.dom.SlideFrom", "goog.fx.dom.Swipe"], ["goog.color", "goog.events", "goog.fx.Animation", "goog.fx.Transition", 
"goog.style", "goog.style.bidi"], false);
goog.addDependency("fx/dragdrop.js", ["goog.fx.DragDrop"], ["goog.fx.AbstractDragDrop", "goog.fx.DragDropItem"], false);
goog.addDependency("fx/dragdropgroup.js", ["goog.fx.DragDropGroup"], ["goog.dom", "goog.fx.AbstractDragDrop", "goog.fx.DragDropItem"], false);
goog.addDependency("fx/dragdropgroup_test.js", ["goog.fx.DragDropGroupTest"], ["goog.events", "goog.fx.DragDropGroup", "goog.testing.jsunit"], false);
goog.addDependency("fx/dragger.js", ["goog.fx.DragEvent", "goog.fx.Dragger", "goog.fx.Dragger.EventType"], ["goog.dom", "goog.dom.TagName", "goog.events", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.math.Coordinate", "goog.math.Rect", "goog.style", "goog.style.bidi", "goog.userAgent"], false);
goog.addDependency("fx/dragger_test.js", ["goog.fx.DraggerTest"], ["goog.dom", "goog.dom.TagName", "goog.events", "goog.events.BrowserEvent", "goog.events.Event", "goog.events.EventType", "goog.fx.Dragger", "goog.math.Rect", "goog.style.bidi", "goog.testing.StrictMock", "goog.testing.events", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("fx/draglistgroup.js", ["goog.fx.DragListDirection", "goog.fx.DragListGroup", "goog.fx.DragListGroup.EventType", "goog.fx.DragListGroupEvent"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.classlist", "goog.events", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.fx.Dragger", "goog.math.Coordinate", "goog.string", "goog.style"], false);
goog.addDependency("fx/draglistgroup_test.js", ["goog.fx.DragListGroupTest"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.BrowserEvent", "goog.events.BrowserFeature", "goog.events.Event", "goog.events.EventType", "goog.fx.DragEvent", "goog.fx.DragListDirection", "goog.fx.DragListGroup", "goog.fx.Dragger", "goog.math.Coordinate", "goog.object", "goog.testing.events", "goog.testing.jsunit"], false);
goog.addDependency("fx/dragscrollsupport.js", ["goog.fx.DragScrollSupport"], ["goog.Disposable", "goog.Timer", "goog.dom", "goog.events.EventHandler", "goog.events.EventType", "goog.math.Coordinate", "goog.style"], false);
goog.addDependency("fx/dragscrollsupport_test.js", ["goog.fx.DragScrollSupportTest"], ["goog.fx.DragScrollSupport", "goog.math.Coordinate", "goog.testing.MockClock", "goog.testing.events", "goog.testing.jsunit"], false);
goog.addDependency("fx/easing.js", ["goog.fx.easing"], [], false);
goog.addDependency("fx/easing_test.js", ["goog.fx.easingTest"], ["goog.fx.easing", "goog.testing.jsunit"], false);
goog.addDependency("fx/fx.js", ["goog.fx"], ["goog.asserts", "goog.fx.Animation", "goog.fx.Animation.EventType", "goog.fx.Animation.State", "goog.fx.AnimationEvent", "goog.fx.Transition.EventType", "goog.fx.easing"], false);
goog.addDependency("fx/fx_test.js", ["goog.fxTest"], ["goog.fx.Animation", "goog.object", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("fx/transition.js", ["goog.fx.Transition", "goog.fx.Transition.EventType"], [], false);
goog.addDependency("fx/transitionbase.js", ["goog.fx.TransitionBase", "goog.fx.TransitionBase.State"], ["goog.events.EventTarget", "goog.fx.Transition"], false);
goog.addDependency("graphics/abstractgraphics.js", ["goog.graphics.AbstractGraphics"], ["goog.dom", "goog.graphics.Path", "goog.math.Coordinate", "goog.math.Size", "goog.style", "goog.ui.Component"], false);
goog.addDependency("graphics/affinetransform.js", ["goog.graphics.AffineTransform"], ["goog.math"], false);
goog.addDependency("graphics/canvaselement.js", ["goog.graphics.CanvasEllipseElement", "goog.graphics.CanvasGroupElement", "goog.graphics.CanvasImageElement", "goog.graphics.CanvasPathElement", "goog.graphics.CanvasRectElement", "goog.graphics.CanvasTextElement"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.dom.safe", "goog.graphics.EllipseElement", "goog.graphics.GroupElement", "goog.graphics.ImageElement", "goog.graphics.Path", "goog.graphics.PathElement", "goog.graphics.RectElement", 
"goog.graphics.TextElement", "goog.html.SafeHtml", "goog.html.uncheckedconversions", "goog.math", "goog.string", "goog.string.Const"], false);
goog.addDependency("graphics/canvasgraphics.js", ["goog.graphics.CanvasGraphics"], ["goog.dom.TagName", "goog.events.EventType", "goog.graphics.AbstractGraphics", "goog.graphics.CanvasEllipseElement", "goog.graphics.CanvasGroupElement", "goog.graphics.CanvasImageElement", "goog.graphics.CanvasPathElement", "goog.graphics.CanvasRectElement", "goog.graphics.CanvasTextElement", "goog.graphics.SolidFill", "goog.math.Size", "goog.style"], false);
goog.addDependency("graphics/element.js", ["goog.graphics.Element"], ["goog.asserts", "goog.events", "goog.events.EventTarget", "goog.events.Listenable", "goog.graphics.AffineTransform", "goog.math"], false);
goog.addDependency("graphics/ellipseelement.js", ["goog.graphics.EllipseElement"], ["goog.graphics.StrokeAndFillElement"], false);
goog.addDependency("graphics/ext/coordinates.js", ["goog.graphics.ext.coordinates"], ["goog.string"], false);
goog.addDependency("graphics/ext/element.js", ["goog.graphics.ext.Element"], ["goog.events.EventTarget", "goog.functions", "goog.graphics.ext.coordinates"], false);
goog.addDependency("graphics/ext/ellipse.js", ["goog.graphics.ext.Ellipse"], ["goog.graphics.ext.StrokeAndFillElement"], false);
goog.addDependency("graphics/ext/ext.js", ["goog.graphics.ext"], ["goog.graphics.ext.Ellipse", "goog.graphics.ext.Graphics", "goog.graphics.ext.Group", "goog.graphics.ext.Image", "goog.graphics.ext.Rectangle", "goog.graphics.ext.Shape", "goog.graphics.ext.coordinates"], false);
goog.addDependency("graphics/ext/graphics.js", ["goog.graphics.ext.Graphics"], ["goog.events", "goog.events.EventType", "goog.graphics", "goog.graphics.ext.Group"], false);
goog.addDependency("graphics/ext/group.js", ["goog.graphics.ext.Group"], ["goog.array", "goog.graphics.ext.Element"], false);
goog.addDependency("graphics/ext/image.js", ["goog.graphics.ext.Image"], ["goog.graphics.ext.Element"], false);
goog.addDependency("graphics/ext/path.js", ["goog.graphics.ext.Path"], ["goog.graphics.AffineTransform", "goog.graphics.Path", "goog.math.Rect"], false);
goog.addDependency("graphics/ext/rectangle.js", ["goog.graphics.ext.Rectangle"], ["goog.graphics.ext.StrokeAndFillElement"], false);
goog.addDependency("graphics/ext/shape.js", ["goog.graphics.ext.Shape"], ["goog.graphics.ext.StrokeAndFillElement"], false);
goog.addDependency("graphics/ext/strokeandfillelement.js", ["goog.graphics.ext.StrokeAndFillElement"], ["goog.graphics.ext.Element"], false);
goog.addDependency("graphics/fill.js", ["goog.graphics.Fill"], [], false);
goog.addDependency("graphics/font.js", ["goog.graphics.Font"], [], false);
goog.addDependency("graphics/graphics.js", ["goog.graphics"], ["goog.dom", "goog.graphics.CanvasGraphics", "goog.graphics.SvgGraphics", "goog.graphics.VmlGraphics", "goog.userAgent"], false);
goog.addDependency("graphics/groupelement.js", ["goog.graphics.GroupElement"], ["goog.graphics.Element"], false);
goog.addDependency("graphics/imageelement.js", ["goog.graphics.ImageElement"], ["goog.graphics.Element"], false);
goog.addDependency("graphics/lineargradient.js", ["goog.graphics.LinearGradient"], ["goog.asserts", "goog.graphics.Fill"], false);
goog.addDependency("graphics/path.js", ["goog.graphics.Path", "goog.graphics.Path.Segment"], ["goog.array", "goog.math"], false);
goog.addDependency("graphics/pathelement.js", ["goog.graphics.PathElement"], ["goog.graphics.StrokeAndFillElement"], false);
goog.addDependency("graphics/paths.js", ["goog.graphics.paths"], ["goog.graphics.Path", "goog.math.Coordinate"], false);
goog.addDependency("graphics/rectelement.js", ["goog.graphics.RectElement"], ["goog.graphics.StrokeAndFillElement"], false);
goog.addDependency("graphics/solidfill.js", ["goog.graphics.SolidFill"], ["goog.graphics.Fill"], false);
goog.addDependency("graphics/stroke.js", ["goog.graphics.Stroke"], [], false);
goog.addDependency("graphics/strokeandfillelement.js", ["goog.graphics.StrokeAndFillElement"], ["goog.graphics.Element"], false);
goog.addDependency("graphics/svgelement.js", ["goog.graphics.SvgEllipseElement", "goog.graphics.SvgGroupElement", "goog.graphics.SvgImageElement", "goog.graphics.SvgPathElement", "goog.graphics.SvgRectElement", "goog.graphics.SvgTextElement"], ["goog.dom", "goog.graphics.EllipseElement", "goog.graphics.GroupElement", "goog.graphics.ImageElement", "goog.graphics.PathElement", "goog.graphics.RectElement", "goog.graphics.TextElement"], false);
goog.addDependency("graphics/svggraphics.js", ["goog.graphics.SvgGraphics"], ["goog.Timer", "goog.dom", "goog.events.EventHandler", "goog.events.EventType", "goog.graphics.AbstractGraphics", "goog.graphics.LinearGradient", "goog.graphics.Path", "goog.graphics.SolidFill", "goog.graphics.Stroke", "goog.graphics.SvgEllipseElement", "goog.graphics.SvgGroupElement", "goog.graphics.SvgImageElement", "goog.graphics.SvgPathElement", "goog.graphics.SvgRectElement", "goog.graphics.SvgTextElement", "goog.math", 
"goog.math.Size", "goog.style", "goog.userAgent"], false);
goog.addDependency("graphics/textelement.js", ["goog.graphics.TextElement"], ["goog.graphics.StrokeAndFillElement"], false);
goog.addDependency("graphics/vmlelement.js", ["goog.graphics.VmlEllipseElement", "goog.graphics.VmlGroupElement", "goog.graphics.VmlImageElement", "goog.graphics.VmlPathElement", "goog.graphics.VmlRectElement", "goog.graphics.VmlTextElement"], ["goog.dom", "goog.graphics.EllipseElement", "goog.graphics.GroupElement", "goog.graphics.ImageElement", "goog.graphics.PathElement", "goog.graphics.RectElement", "goog.graphics.TextElement"], false);
goog.addDependency("graphics/vmlgraphics.js", ["goog.graphics.VmlGraphics"], ["goog.array", "goog.dom.TagName", "goog.dom.safe", "goog.events", "goog.events.EventHandler", "goog.events.EventType", "goog.graphics.AbstractGraphics", "goog.graphics.LinearGradient", "goog.graphics.Path", "goog.graphics.SolidFill", "goog.graphics.VmlEllipseElement", "goog.graphics.VmlGroupElement", "goog.graphics.VmlImageElement", "goog.graphics.VmlPathElement", "goog.graphics.VmlRectElement", "goog.graphics.VmlTextElement", 
"goog.html.uncheckedconversions", "goog.math", "goog.math.Size", "goog.string", "goog.string.Const", "goog.style"], false);
goog.addDependency("history/event.js", ["goog.history.Event"], ["goog.events.Event", "goog.history.EventType"], false);
goog.addDependency("history/eventtype.js", ["goog.history.EventType"], [], false);
goog.addDependency("history/history.js", ["goog.History", "goog.History.Event", "goog.History.EventType"], ["goog.Timer", "goog.asserts", "goog.dom", "goog.dom.InputType", "goog.dom.safe", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.history.Event", "goog.history.EventType", "goog.html.SafeHtml", "goog.html.TrustedResourceUrl", "goog.html.legacyconversions", "goog.labs.userAgent.device", "goog.memoize", "goog.string", "goog.string.Const", 
"goog.userAgent"], false);
goog.addDependency("history/history_test.js", ["goog.HistoryTest"], ["goog.History", "goog.dispose", "goog.dom", "goog.html.TrustedResourceUrl", "goog.string.Const", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("history/html5history.js", ["goog.history.Html5History", "goog.history.Html5History.TokenTransformer"], ["goog.asserts", "goog.events", "goog.events.EventTarget", "goog.events.EventType", "goog.history.Event"], false);
goog.addDependency("history/html5history_test.js", ["goog.history.Html5HistoryTest"], ["goog.history.Html5History", "goog.testing.MockControl", "goog.testing.jsunit", "goog.testing.mockmatchers"], false);
goog.addDependency("html/flash.js", ["goog.html.flash"], ["goog.asserts", "goog.html.SafeHtml"], false);
goog.addDependency("html/flash_test.js", ["goog.html.flashTest"], ["goog.html.SafeHtml", "goog.html.TrustedResourceUrl", "goog.html.flash", "goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("html/legacyconversions.js", ["goog.html.legacyconversions"], ["goog.html.SafeHtml", "goog.html.SafeStyle", "goog.html.SafeUrl", "goog.html.TrustedResourceUrl"], false);
goog.addDependency("html/legacyconversions_test.js", ["goog.html.legacyconversionsTest"], ["goog.html.SafeHtml", "goog.html.SafeUrl", "goog.html.TrustedResourceUrl", "goog.html.legacyconversions", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("html/safehtml.js", ["goog.html.SafeHtml"], ["goog.array", "goog.asserts", "goog.dom.TagName", "goog.dom.tags", "goog.html.SafeStyle", "goog.html.SafeStyleSheet", "goog.html.SafeUrl", "goog.html.TrustedResourceUrl", "goog.i18n.bidi.Dir", "goog.i18n.bidi.DirectionalString", "goog.object", "goog.string", "goog.string.Const", "goog.string.TypedString"], false);
goog.addDependency("html/safehtml_test.js", ["goog.html.safeHtmlTest"], ["goog.html.SafeHtml", "goog.html.SafeStyle", "goog.html.SafeStyleSheet", "goog.html.SafeUrl", "goog.html.TrustedResourceUrl", "goog.html.testing", "goog.i18n.bidi.Dir", "goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("html/safescript.js", ["goog.html.SafeScript"], ["goog.asserts", "goog.string.Const", "goog.string.TypedString"], false);
goog.addDependency("html/safescript_test.js", ["goog.html.safeScriptTest"], ["goog.html.SafeScript", "goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("html/safestyle.js", ["goog.html.SafeStyle"], ["goog.array", "goog.asserts", "goog.string", "goog.string.Const", "goog.string.TypedString"], false);
goog.addDependency("html/safestyle_test.js", ["goog.html.safeStyleTest"], ["goog.html.SafeStyle", "goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("html/safestylesheet.js", ["goog.html.SafeStyleSheet"], ["goog.array", "goog.asserts", "goog.string", "goog.string.Const", "goog.string.TypedString"], false);
goog.addDependency("html/safestylesheet_test.js", ["goog.html.safeStyleSheetTest"], ["goog.html.SafeStyleSheet", "goog.string", "goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("html/safeurl.js", ["goog.html.SafeUrl"], ["goog.asserts", "goog.fs.url", "goog.i18n.bidi.Dir", "goog.i18n.bidi.DirectionalString", "goog.string.Const", "goog.string.TypedString"], false);
goog.addDependency("html/safeurl_test.js", ["goog.html.safeUrlTest"], ["goog.html.SafeUrl", "goog.i18n.bidi.Dir", "goog.string.Const", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("html/silverlight.js", ["goog.html.silverlight"], ["goog.html.SafeHtml", "goog.html.TrustedResourceUrl", "goog.html.flash", "goog.string.Const"], false);
goog.addDependency("html/silverlight_test.js", ["goog.html.silverlightTest"], ["goog.html.SafeHtml", "goog.html.TrustedResourceUrl", "goog.html.silverlight", "goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("html/testing.js", ["goog.html.testing"], ["goog.html.SafeHtml", "goog.html.SafeScript", "goog.html.SafeStyle", "goog.html.SafeStyleSheet", "goog.html.SafeUrl", "goog.html.TrustedResourceUrl"], false);
goog.addDependency("html/trustedresourceurl.js", ["goog.html.TrustedResourceUrl"], ["goog.asserts", "goog.i18n.bidi.Dir", "goog.i18n.bidi.DirectionalString", "goog.string.Const", "goog.string.TypedString"], false);
goog.addDependency("html/trustedresourceurl_test.js", ["goog.html.trustedResourceUrlTest"], ["goog.html.TrustedResourceUrl", "goog.i18n.bidi.Dir", "goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("html/uncheckedconversions.js", ["goog.html.uncheckedconversions"], ["goog.asserts", "goog.html.SafeHtml", "goog.html.SafeScript", "goog.html.SafeStyle", "goog.html.SafeStyleSheet", "goog.html.SafeUrl", "goog.html.TrustedResourceUrl", "goog.string", "goog.string.Const"], false);
goog.addDependency("html/uncheckedconversions_test.js", ["goog.html.uncheckedconversionsTest"], ["goog.html.SafeHtml", "goog.html.SafeScript", "goog.html.SafeStyle", "goog.html.SafeStyleSheet", "goog.html.SafeUrl", "goog.html.TrustedResourceUrl", "goog.html.uncheckedconversions", "goog.i18n.bidi.Dir", "goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("html/utils.js", ["goog.html.utils"], ["goog.string"], false);
goog.addDependency("html/utils_test.js", ["goog.html.UtilsTest"], ["goog.array", "goog.dom.TagName", "goog.html.utils", "goog.object", "goog.testing.jsunit"], false);
goog.addDependency("i18n/bidi.js", ["goog.i18n.bidi", "goog.i18n.bidi.Dir", "goog.i18n.bidi.DirectionalString", "goog.i18n.bidi.Format"], [], false);
goog.addDependency("i18n/bidi_test.js", ["goog.i18n.bidiTest"], ["goog.i18n.bidi", "goog.i18n.bidi.Dir", "goog.testing.jsunit"], false);
goog.addDependency("i18n/bidiformatter.js", ["goog.i18n.BidiFormatter"], ["goog.html.SafeHtml", "goog.html.legacyconversions", "goog.i18n.bidi", "goog.i18n.bidi.Dir", "goog.i18n.bidi.Format"], false);
goog.addDependency("i18n/bidiformatter_test.js", ["goog.i18n.BidiFormatterTest"], ["goog.html.SafeHtml", "goog.i18n.BidiFormatter", "goog.i18n.bidi.Dir", "goog.i18n.bidi.Format", "goog.testing.jsunit"], false);
goog.addDependency("i18n/charlistdecompressor.js", ["goog.i18n.CharListDecompressor"], ["goog.array", "goog.i18n.uChar"], false);
goog.addDependency("i18n/charlistdecompressor_test.js", ["goog.i18n.CharListDecompressorTest"], ["goog.i18n.CharListDecompressor", "goog.testing.jsunit"], false);
goog.addDependency("i18n/charpickerdata.js", ["goog.i18n.CharPickerData"], [], false);
goog.addDependency("i18n/collation.js", ["goog.i18n.collation"], [], false);
goog.addDependency("i18n/collation_test.js", ["goog.i18n.collationTest"], ["goog.i18n.collation", "goog.testing.ExpectedFailures", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("i18n/compactnumberformatsymbols.js", ["goog.i18n.CompactNumberFormatSymbols", "goog.i18n.CompactNumberFormatSymbols_af", "goog.i18n.CompactNumberFormatSymbols_af_ZA", "goog.i18n.CompactNumberFormatSymbols_am", "goog.i18n.CompactNumberFormatSymbols_am_ET", "goog.i18n.CompactNumberFormatSymbols_ar", "goog.i18n.CompactNumberFormatSymbols_ar_001", "goog.i18n.CompactNumberFormatSymbols_ar_EG", "goog.i18n.CompactNumberFormatSymbols_az", "goog.i18n.CompactNumberFormatSymbols_az_Latn", 
"goog.i18n.CompactNumberFormatSymbols_az_Latn_AZ", "goog.i18n.CompactNumberFormatSymbols_bg", "goog.i18n.CompactNumberFormatSymbols_bg_BG", "goog.i18n.CompactNumberFormatSymbols_bn", "goog.i18n.CompactNumberFormatSymbols_bn_BD", "goog.i18n.CompactNumberFormatSymbols_br", "goog.i18n.CompactNumberFormatSymbols_br_FR", "goog.i18n.CompactNumberFormatSymbols_ca", "goog.i18n.CompactNumberFormatSymbols_ca_AD", "goog.i18n.CompactNumberFormatSymbols_ca_ES", "goog.i18n.CompactNumberFormatSymbols_ca_ES_VALENCIA", 
"goog.i18n.CompactNumberFormatSymbols_ca_FR", "goog.i18n.CompactNumberFormatSymbols_ca_IT", "goog.i18n.CompactNumberFormatSymbols_chr", "goog.i18n.CompactNumberFormatSymbols_chr_US", "goog.i18n.CompactNumberFormatSymbols_cs", "goog.i18n.CompactNumberFormatSymbols_cs_CZ", "goog.i18n.CompactNumberFormatSymbols_cy", "goog.i18n.CompactNumberFormatSymbols_cy_GB", "goog.i18n.CompactNumberFormatSymbols_da", "goog.i18n.CompactNumberFormatSymbols_da_DK", "goog.i18n.CompactNumberFormatSymbols_da_GL", "goog.i18n.CompactNumberFormatSymbols_de", 
"goog.i18n.CompactNumberFormatSymbols_de_AT", "goog.i18n.CompactNumberFormatSymbols_de_BE", "goog.i18n.CompactNumberFormatSymbols_de_CH", "goog.i18n.CompactNumberFormatSymbols_de_DE", "goog.i18n.CompactNumberFormatSymbols_de_LU", "goog.i18n.CompactNumberFormatSymbols_el", "goog.i18n.CompactNumberFormatSymbols_el_CY", "goog.i18n.CompactNumberFormatSymbols_el_GR", "goog.i18n.CompactNumberFormatSymbols_en", "goog.i18n.CompactNumberFormatSymbols_en_001", "goog.i18n.CompactNumberFormatSymbols_en_AS", 
"goog.i18n.CompactNumberFormatSymbols_en_AU", "goog.i18n.CompactNumberFormatSymbols_en_DG", "goog.i18n.CompactNumberFormatSymbols_en_FM", "goog.i18n.CompactNumberFormatSymbols_en_GB", "goog.i18n.CompactNumberFormatSymbols_en_GU", "goog.i18n.CompactNumberFormatSymbols_en_IE", "goog.i18n.CompactNumberFormatSymbols_en_IN", "goog.i18n.CompactNumberFormatSymbols_en_IO", "goog.i18n.CompactNumberFormatSymbols_en_MH", "goog.i18n.CompactNumberFormatSymbols_en_MP", "goog.i18n.CompactNumberFormatSymbols_en_PR", 
"goog.i18n.CompactNumberFormatSymbols_en_PW", "goog.i18n.CompactNumberFormatSymbols_en_SG", "goog.i18n.CompactNumberFormatSymbols_en_TC", "goog.i18n.CompactNumberFormatSymbols_en_UM", "goog.i18n.CompactNumberFormatSymbols_en_US", "goog.i18n.CompactNumberFormatSymbols_en_VG", "goog.i18n.CompactNumberFormatSymbols_en_VI", "goog.i18n.CompactNumberFormatSymbols_en_ZA", "goog.i18n.CompactNumberFormatSymbols_en_ZW", "goog.i18n.CompactNumberFormatSymbols_es", "goog.i18n.CompactNumberFormatSymbols_es_419", 
"goog.i18n.CompactNumberFormatSymbols_es_EA", "goog.i18n.CompactNumberFormatSymbols_es_ES", "goog.i18n.CompactNumberFormatSymbols_es_IC", "goog.i18n.CompactNumberFormatSymbols_et", "goog.i18n.CompactNumberFormatSymbols_et_EE", "goog.i18n.CompactNumberFormatSymbols_eu", "goog.i18n.CompactNumberFormatSymbols_eu_ES", "goog.i18n.CompactNumberFormatSymbols_fa", "goog.i18n.CompactNumberFormatSymbols_fa_IR", "goog.i18n.CompactNumberFormatSymbols_fi", "goog.i18n.CompactNumberFormatSymbols_fi_FI", "goog.i18n.CompactNumberFormatSymbols_fil", 
"goog.i18n.CompactNumberFormatSymbols_fil_PH", "goog.i18n.CompactNumberFormatSymbols_fr", "goog.i18n.CompactNumberFormatSymbols_fr_BL", "goog.i18n.CompactNumberFormatSymbols_fr_CA", "goog.i18n.CompactNumberFormatSymbols_fr_FR", "goog.i18n.CompactNumberFormatSymbols_fr_GF", "goog.i18n.CompactNumberFormatSymbols_fr_GP", "goog.i18n.CompactNumberFormatSymbols_fr_MC", "goog.i18n.CompactNumberFormatSymbols_fr_MF", "goog.i18n.CompactNumberFormatSymbols_fr_MQ", "goog.i18n.CompactNumberFormatSymbols_fr_PM", 
"goog.i18n.CompactNumberFormatSymbols_fr_RE", "goog.i18n.CompactNumberFormatSymbols_fr_YT", "goog.i18n.CompactNumberFormatSymbols_ga", "goog.i18n.CompactNumberFormatSymbols_ga_IE", "goog.i18n.CompactNumberFormatSymbols_gl", "goog.i18n.CompactNumberFormatSymbols_gl_ES", "goog.i18n.CompactNumberFormatSymbols_gsw", "goog.i18n.CompactNumberFormatSymbols_gsw_CH", "goog.i18n.CompactNumberFormatSymbols_gsw_LI", "goog.i18n.CompactNumberFormatSymbols_gu", "goog.i18n.CompactNumberFormatSymbols_gu_IN", "goog.i18n.CompactNumberFormatSymbols_haw", 
"goog.i18n.CompactNumberFormatSymbols_haw_US", "goog.i18n.CompactNumberFormatSymbols_he", "goog.i18n.CompactNumberFormatSymbols_he_IL", "goog.i18n.CompactNumberFormatSymbols_hi", "goog.i18n.CompactNumberFormatSymbols_hi_IN", "goog.i18n.CompactNumberFormatSymbols_hr", "goog.i18n.CompactNumberFormatSymbols_hr_HR", "goog.i18n.CompactNumberFormatSymbols_hu", "goog.i18n.CompactNumberFormatSymbols_hu_HU", "goog.i18n.CompactNumberFormatSymbols_hy", "goog.i18n.CompactNumberFormatSymbols_hy_AM", "goog.i18n.CompactNumberFormatSymbols_id", 
"goog.i18n.CompactNumberFormatSymbols_id_ID", "goog.i18n.CompactNumberFormatSymbols_in", "goog.i18n.CompactNumberFormatSymbols_is", "goog.i18n.CompactNumberFormatSymbols_is_IS", "goog.i18n.CompactNumberFormatSymbols_it", "goog.i18n.CompactNumberFormatSymbols_it_IT", "goog.i18n.CompactNumberFormatSymbols_it_SM", "goog.i18n.CompactNumberFormatSymbols_iw", "goog.i18n.CompactNumberFormatSymbols_ja", "goog.i18n.CompactNumberFormatSymbols_ja_JP", "goog.i18n.CompactNumberFormatSymbols_ka", "goog.i18n.CompactNumberFormatSymbols_ka_GE", 
"goog.i18n.CompactNumberFormatSymbols_kk", "goog.i18n.CompactNumberFormatSymbols_kk_Cyrl", "goog.i18n.CompactNumberFormatSymbols_kk_Cyrl_KZ", "goog.i18n.CompactNumberFormatSymbols_km", "goog.i18n.CompactNumberFormatSymbols_km_KH", "goog.i18n.CompactNumberFormatSymbols_kn", "goog.i18n.CompactNumberFormatSymbols_kn_IN", "goog.i18n.CompactNumberFormatSymbols_ko", "goog.i18n.CompactNumberFormatSymbols_ko_KR", "goog.i18n.CompactNumberFormatSymbols_ky", "goog.i18n.CompactNumberFormatSymbols_ky_Cyrl", "goog.i18n.CompactNumberFormatSymbols_ky_Cyrl_KG", 
"goog.i18n.CompactNumberFormatSymbols_ln", "goog.i18n.CompactNumberFormatSymbols_ln_CD", "goog.i18n.CompactNumberFormatSymbols_lo", "goog.i18n.CompactNumberFormatSymbols_lo_LA", "goog.i18n.CompactNumberFormatSymbols_lt", "goog.i18n.CompactNumberFormatSymbols_lt_LT", "goog.i18n.CompactNumberFormatSymbols_lv", "goog.i18n.CompactNumberFormatSymbols_lv_LV", "goog.i18n.CompactNumberFormatSymbols_mk", "goog.i18n.CompactNumberFormatSymbols_mk_MK", "goog.i18n.CompactNumberFormatSymbols_ml", "goog.i18n.CompactNumberFormatSymbols_ml_IN", 
"goog.i18n.CompactNumberFormatSymbols_mn", "goog.i18n.CompactNumberFormatSymbols_mn_Cyrl", "goog.i18n.CompactNumberFormatSymbols_mn_Cyrl_MN", "goog.i18n.CompactNumberFormatSymbols_mr", "goog.i18n.CompactNumberFormatSymbols_mr_IN", "goog.i18n.CompactNumberFormatSymbols_ms", "goog.i18n.CompactNumberFormatSymbols_ms_Latn", "goog.i18n.CompactNumberFormatSymbols_ms_Latn_MY", "goog.i18n.CompactNumberFormatSymbols_mt", "goog.i18n.CompactNumberFormatSymbols_mt_MT", "goog.i18n.CompactNumberFormatSymbols_my", 
"goog.i18n.CompactNumberFormatSymbols_my_MM", "goog.i18n.CompactNumberFormatSymbols_nb", "goog.i18n.CompactNumberFormatSymbols_nb_NO", "goog.i18n.CompactNumberFormatSymbols_nb_SJ", "goog.i18n.CompactNumberFormatSymbols_ne", "goog.i18n.CompactNumberFormatSymbols_ne_NP", "goog.i18n.CompactNumberFormatSymbols_nl", "goog.i18n.CompactNumberFormatSymbols_nl_NL", "goog.i18n.CompactNumberFormatSymbols_no", "goog.i18n.CompactNumberFormatSymbols_no_NO", "goog.i18n.CompactNumberFormatSymbols_or", "goog.i18n.CompactNumberFormatSymbols_or_IN", 
"goog.i18n.CompactNumberFormatSymbols_pa", "goog.i18n.CompactNumberFormatSymbols_pa_Guru", "goog.i18n.CompactNumberFormatSymbols_pa_Guru_IN", "goog.i18n.CompactNumberFormatSymbols_pl", "goog.i18n.CompactNumberFormatSymbols_pl_PL", "goog.i18n.CompactNumberFormatSymbols_pt", "goog.i18n.CompactNumberFormatSymbols_pt_BR", "goog.i18n.CompactNumberFormatSymbols_pt_PT", "goog.i18n.CompactNumberFormatSymbols_ro", "goog.i18n.CompactNumberFormatSymbols_ro_RO", "goog.i18n.CompactNumberFormatSymbols_ru", "goog.i18n.CompactNumberFormatSymbols_ru_RU", 
"goog.i18n.CompactNumberFormatSymbols_si", "goog.i18n.CompactNumberFormatSymbols_si_LK", "goog.i18n.CompactNumberFormatSymbols_sk", "goog.i18n.CompactNumberFormatSymbols_sk_SK", "goog.i18n.CompactNumberFormatSymbols_sl", "goog.i18n.CompactNumberFormatSymbols_sl_SI", "goog.i18n.CompactNumberFormatSymbols_sq", "goog.i18n.CompactNumberFormatSymbols_sq_AL", "goog.i18n.CompactNumberFormatSymbols_sr", "goog.i18n.CompactNumberFormatSymbols_sr_Cyrl", "goog.i18n.CompactNumberFormatSymbols_sr_Cyrl_RS", "goog.i18n.CompactNumberFormatSymbols_sv", 
"goog.i18n.CompactNumberFormatSymbols_sv_SE", "goog.i18n.CompactNumberFormatSymbols_sw", "goog.i18n.CompactNumberFormatSymbols_sw_TZ", "goog.i18n.CompactNumberFormatSymbols_ta", "goog.i18n.CompactNumberFormatSymbols_ta_IN", "goog.i18n.CompactNumberFormatSymbols_te", "goog.i18n.CompactNumberFormatSymbols_te_IN", "goog.i18n.CompactNumberFormatSymbols_th", "goog.i18n.CompactNumberFormatSymbols_th_TH", "goog.i18n.CompactNumberFormatSymbols_tl", "goog.i18n.CompactNumberFormatSymbols_tr", "goog.i18n.CompactNumberFormatSymbols_tr_TR", 
"goog.i18n.CompactNumberFormatSymbols_uk", "goog.i18n.CompactNumberFormatSymbols_uk_UA", "goog.i18n.CompactNumberFormatSymbols_ur", "goog.i18n.CompactNumberFormatSymbols_ur_PK", "goog.i18n.CompactNumberFormatSymbols_uz", "goog.i18n.CompactNumberFormatSymbols_uz_Latn", "goog.i18n.CompactNumberFormatSymbols_uz_Latn_UZ", "goog.i18n.CompactNumberFormatSymbols_vi", "goog.i18n.CompactNumberFormatSymbols_vi_VN", "goog.i18n.CompactNumberFormatSymbols_zh", "goog.i18n.CompactNumberFormatSymbols_zh_CN", "goog.i18n.CompactNumberFormatSymbols_zh_HK", 
"goog.i18n.CompactNumberFormatSymbols_zh_Hans", "goog.i18n.CompactNumberFormatSymbols_zh_Hans_CN", "goog.i18n.CompactNumberFormatSymbols_zh_TW", "goog.i18n.CompactNumberFormatSymbols_zu", "goog.i18n.CompactNumberFormatSymbols_zu_ZA"], [], false);
goog.addDependency("i18n/compactnumberformatsymbols_ext.js", ["goog.i18n.CompactNumberFormatSymbolsExt", "goog.i18n.CompactNumberFormatSymbols_af_NA", "goog.i18n.CompactNumberFormatSymbols_agq", "goog.i18n.CompactNumberFormatSymbols_agq_CM", "goog.i18n.CompactNumberFormatSymbols_ak", "goog.i18n.CompactNumberFormatSymbols_ak_GH", "goog.i18n.CompactNumberFormatSymbols_ar_AE", "goog.i18n.CompactNumberFormatSymbols_ar_BH", "goog.i18n.CompactNumberFormatSymbols_ar_DJ", "goog.i18n.CompactNumberFormatSymbols_ar_DZ", 
"goog.i18n.CompactNumberFormatSymbols_ar_EH", "goog.i18n.CompactNumberFormatSymbols_ar_ER", "goog.i18n.CompactNumberFormatSymbols_ar_IL", "goog.i18n.CompactNumberFormatSymbols_ar_IQ", "goog.i18n.CompactNumberFormatSymbols_ar_JO", "goog.i18n.CompactNumberFormatSymbols_ar_KM", "goog.i18n.CompactNumberFormatSymbols_ar_KW", "goog.i18n.CompactNumberFormatSymbols_ar_LB", "goog.i18n.CompactNumberFormatSymbols_ar_LY", "goog.i18n.CompactNumberFormatSymbols_ar_MA", "goog.i18n.CompactNumberFormatSymbols_ar_MR", 
"goog.i18n.CompactNumberFormatSymbols_ar_OM", "goog.i18n.CompactNumberFormatSymbols_ar_PS", "goog.i18n.CompactNumberFormatSymbols_ar_QA", "goog.i18n.CompactNumberFormatSymbols_ar_SA", "goog.i18n.CompactNumberFormatSymbols_ar_SD", "goog.i18n.CompactNumberFormatSymbols_ar_SO", "goog.i18n.CompactNumberFormatSymbols_ar_SS", "goog.i18n.CompactNumberFormatSymbols_ar_SY", "goog.i18n.CompactNumberFormatSymbols_ar_TD", "goog.i18n.CompactNumberFormatSymbols_ar_TN", "goog.i18n.CompactNumberFormatSymbols_ar_YE", 
"goog.i18n.CompactNumberFormatSymbols_as", "goog.i18n.CompactNumberFormatSymbols_as_IN", "goog.i18n.CompactNumberFormatSymbols_asa", "goog.i18n.CompactNumberFormatSymbols_asa_TZ", "goog.i18n.CompactNumberFormatSymbols_ast", "goog.i18n.CompactNumberFormatSymbols_ast_ES", "goog.i18n.CompactNumberFormatSymbols_az_Cyrl", "goog.i18n.CompactNumberFormatSymbols_az_Cyrl_AZ", "goog.i18n.CompactNumberFormatSymbols_bas", "goog.i18n.CompactNumberFormatSymbols_bas_CM", "goog.i18n.CompactNumberFormatSymbols_be", 
"goog.i18n.CompactNumberFormatSymbols_be_BY", "goog.i18n.CompactNumberFormatSymbols_bem", "goog.i18n.CompactNumberFormatSymbols_bem_ZM", "goog.i18n.CompactNumberFormatSymbols_bez", "goog.i18n.CompactNumberFormatSymbols_bez_TZ", "goog.i18n.CompactNumberFormatSymbols_bm", "goog.i18n.CompactNumberFormatSymbols_bm_Latn", "goog.i18n.CompactNumberFormatSymbols_bm_Latn_ML", "goog.i18n.CompactNumberFormatSymbols_bn_IN", "goog.i18n.CompactNumberFormatSymbols_bo", "goog.i18n.CompactNumberFormatSymbols_bo_CN", 
"goog.i18n.CompactNumberFormatSymbols_bo_IN", "goog.i18n.CompactNumberFormatSymbols_brx", "goog.i18n.CompactNumberFormatSymbols_brx_IN", "goog.i18n.CompactNumberFormatSymbols_bs", "goog.i18n.CompactNumberFormatSymbols_bs_Cyrl", "goog.i18n.CompactNumberFormatSymbols_bs_Cyrl_BA", "goog.i18n.CompactNumberFormatSymbols_bs_Latn", "goog.i18n.CompactNumberFormatSymbols_bs_Latn_BA", "goog.i18n.CompactNumberFormatSymbols_cgg", "goog.i18n.CompactNumberFormatSymbols_cgg_UG", "goog.i18n.CompactNumberFormatSymbols_ckb", 
"goog.i18n.CompactNumberFormatSymbols_ckb_Arab", "goog.i18n.CompactNumberFormatSymbols_ckb_Arab_IQ", "goog.i18n.CompactNumberFormatSymbols_ckb_Arab_IR", "goog.i18n.CompactNumberFormatSymbols_ckb_IQ", "goog.i18n.CompactNumberFormatSymbols_ckb_IR", "goog.i18n.CompactNumberFormatSymbols_ckb_Latn", "goog.i18n.CompactNumberFormatSymbols_ckb_Latn_IQ", "goog.i18n.CompactNumberFormatSymbols_dav", "goog.i18n.CompactNumberFormatSymbols_dav_KE", "goog.i18n.CompactNumberFormatSymbols_de_LI", "goog.i18n.CompactNumberFormatSymbols_dje", 
"goog.i18n.CompactNumberFormatSymbols_dje_NE", "goog.i18n.CompactNumberFormatSymbols_dsb", "goog.i18n.CompactNumberFormatSymbols_dsb_DE", "goog.i18n.CompactNumberFormatSymbols_dua", "goog.i18n.CompactNumberFormatSymbols_dua_CM", "goog.i18n.CompactNumberFormatSymbols_dyo", "goog.i18n.CompactNumberFormatSymbols_dyo_SN", "goog.i18n.CompactNumberFormatSymbols_dz", "goog.i18n.CompactNumberFormatSymbols_dz_BT", "goog.i18n.CompactNumberFormatSymbols_ebu", "goog.i18n.CompactNumberFormatSymbols_ebu_KE", "goog.i18n.CompactNumberFormatSymbols_ee", 
"goog.i18n.CompactNumberFormatSymbols_ee_GH", "goog.i18n.CompactNumberFormatSymbols_ee_TG", "goog.i18n.CompactNumberFormatSymbols_en_150", "goog.i18n.CompactNumberFormatSymbols_en_AG", "goog.i18n.CompactNumberFormatSymbols_en_AI", "goog.i18n.CompactNumberFormatSymbols_en_BB", "goog.i18n.CompactNumberFormatSymbols_en_BE", "goog.i18n.CompactNumberFormatSymbols_en_BM", "goog.i18n.CompactNumberFormatSymbols_en_BS", "goog.i18n.CompactNumberFormatSymbols_en_BW", "goog.i18n.CompactNumberFormatSymbols_en_BZ", 
"goog.i18n.CompactNumberFormatSymbols_en_CA", "goog.i18n.CompactNumberFormatSymbols_en_CC", "goog.i18n.CompactNumberFormatSymbols_en_CK", "goog.i18n.CompactNumberFormatSymbols_en_CM", "goog.i18n.CompactNumberFormatSymbols_en_CX", "goog.i18n.CompactNumberFormatSymbols_en_DM", "goog.i18n.CompactNumberFormatSymbols_en_ER", "goog.i18n.CompactNumberFormatSymbols_en_FJ", "goog.i18n.CompactNumberFormatSymbols_en_FK", "goog.i18n.CompactNumberFormatSymbols_en_GD", "goog.i18n.CompactNumberFormatSymbols_en_GG", 
"goog.i18n.CompactNumberFormatSymbols_en_GH", "goog.i18n.CompactNumberFormatSymbols_en_GI", "goog.i18n.CompactNumberFormatSymbols_en_GM", "goog.i18n.CompactNumberFormatSymbols_en_GY", "goog.i18n.CompactNumberFormatSymbols_en_HK", "goog.i18n.CompactNumberFormatSymbols_en_IM", "goog.i18n.CompactNumberFormatSymbols_en_JE", "goog.i18n.CompactNumberFormatSymbols_en_JM", "goog.i18n.CompactNumberFormatSymbols_en_KE", "goog.i18n.CompactNumberFormatSymbols_en_KI", "goog.i18n.CompactNumberFormatSymbols_en_KN", 
"goog.i18n.CompactNumberFormatSymbols_en_KY", "goog.i18n.CompactNumberFormatSymbols_en_LC", "goog.i18n.CompactNumberFormatSymbols_en_LR", "goog.i18n.CompactNumberFormatSymbols_en_LS", "goog.i18n.CompactNumberFormatSymbols_en_MG", "goog.i18n.CompactNumberFormatSymbols_en_MO", "goog.i18n.CompactNumberFormatSymbols_en_MS", "goog.i18n.CompactNumberFormatSymbols_en_MT", "goog.i18n.CompactNumberFormatSymbols_en_MU", "goog.i18n.CompactNumberFormatSymbols_en_MW", "goog.i18n.CompactNumberFormatSymbols_en_MY", 
"goog.i18n.CompactNumberFormatSymbols_en_NA", "goog.i18n.CompactNumberFormatSymbols_en_NF", "goog.i18n.CompactNumberFormatSymbols_en_NG", "goog.i18n.CompactNumberFormatSymbols_en_NR", "goog.i18n.CompactNumberFormatSymbols_en_NU", "goog.i18n.CompactNumberFormatSymbols_en_NZ", "goog.i18n.CompactNumberFormatSymbols_en_PG", "goog.i18n.CompactNumberFormatSymbols_en_PH", "goog.i18n.CompactNumberFormatSymbols_en_PK", "goog.i18n.CompactNumberFormatSymbols_en_PN", "goog.i18n.CompactNumberFormatSymbols_en_RW", 
"goog.i18n.CompactNumberFormatSymbols_en_SB", "goog.i18n.CompactNumberFormatSymbols_en_SC", "goog.i18n.CompactNumberFormatSymbols_en_SD", "goog.i18n.CompactNumberFormatSymbols_en_SH", "goog.i18n.CompactNumberFormatSymbols_en_SL", "goog.i18n.CompactNumberFormatSymbols_en_SS", "goog.i18n.CompactNumberFormatSymbols_en_SX", "goog.i18n.CompactNumberFormatSymbols_en_SZ", "goog.i18n.CompactNumberFormatSymbols_en_TK", "goog.i18n.CompactNumberFormatSymbols_en_TO", "goog.i18n.CompactNumberFormatSymbols_en_TT", 
"goog.i18n.CompactNumberFormatSymbols_en_TV", "goog.i18n.CompactNumberFormatSymbols_en_TZ", "goog.i18n.CompactNumberFormatSymbols_en_UG", "goog.i18n.CompactNumberFormatSymbols_en_VC", "goog.i18n.CompactNumberFormatSymbols_en_VU", "goog.i18n.CompactNumberFormatSymbols_en_WS", "goog.i18n.CompactNumberFormatSymbols_en_ZM", "goog.i18n.CompactNumberFormatSymbols_eo", "goog.i18n.CompactNumberFormatSymbols_eo_001", "goog.i18n.CompactNumberFormatSymbols_es_AR", "goog.i18n.CompactNumberFormatSymbols_es_BO", 
"goog.i18n.CompactNumberFormatSymbols_es_CL", "goog.i18n.CompactNumberFormatSymbols_es_CO", "goog.i18n.CompactNumberFormatSymbols_es_CR", "goog.i18n.CompactNumberFormatSymbols_es_CU", "goog.i18n.CompactNumberFormatSymbols_es_DO", "goog.i18n.CompactNumberFormatSymbols_es_EC", "goog.i18n.CompactNumberFormatSymbols_es_GQ", "goog.i18n.CompactNumberFormatSymbols_es_GT", "goog.i18n.CompactNumberFormatSymbols_es_HN", "goog.i18n.CompactNumberFormatSymbols_es_MX", "goog.i18n.CompactNumberFormatSymbols_es_NI", 
"goog.i18n.CompactNumberFormatSymbols_es_PA", "goog.i18n.CompactNumberFormatSymbols_es_PE", "goog.i18n.CompactNumberFormatSymbols_es_PH", "goog.i18n.CompactNumberFormatSymbols_es_PR", "goog.i18n.CompactNumberFormatSymbols_es_PY", "goog.i18n.CompactNumberFormatSymbols_es_SV", "goog.i18n.CompactNumberFormatSymbols_es_US", "goog.i18n.CompactNumberFormatSymbols_es_UY", "goog.i18n.CompactNumberFormatSymbols_es_VE", "goog.i18n.CompactNumberFormatSymbols_ewo", "goog.i18n.CompactNumberFormatSymbols_ewo_CM", 
"goog.i18n.CompactNumberFormatSymbols_fa_AF", "goog.i18n.CompactNumberFormatSymbols_ff", "goog.i18n.CompactNumberFormatSymbols_ff_CM", "goog.i18n.CompactNumberFormatSymbols_ff_GN", "goog.i18n.CompactNumberFormatSymbols_ff_MR", "goog.i18n.CompactNumberFormatSymbols_ff_SN", "goog.i18n.CompactNumberFormatSymbols_fo", "goog.i18n.CompactNumberFormatSymbols_fo_FO", "goog.i18n.CompactNumberFormatSymbols_fr_BE", "goog.i18n.CompactNumberFormatSymbols_fr_BF", "goog.i18n.CompactNumberFormatSymbols_fr_BI", "goog.i18n.CompactNumberFormatSymbols_fr_BJ", 
"goog.i18n.CompactNumberFormatSymbols_fr_CD", "goog.i18n.CompactNumberFormatSymbols_fr_CF", "goog.i18n.CompactNumberFormatSymbols_fr_CG", "goog.i18n.CompactNumberFormatSymbols_fr_CH", "goog.i18n.CompactNumberFormatSymbols_fr_CI", "goog.i18n.CompactNumberFormatSymbols_fr_CM", "goog.i18n.CompactNumberFormatSymbols_fr_DJ", "goog.i18n.CompactNumberFormatSymbols_fr_DZ", "goog.i18n.CompactNumberFormatSymbols_fr_GA", "goog.i18n.CompactNumberFormatSymbols_fr_GN", "goog.i18n.CompactNumberFormatSymbols_fr_GQ", 
"goog.i18n.CompactNumberFormatSymbols_fr_HT", "goog.i18n.CompactNumberFormatSymbols_fr_KM", "goog.i18n.CompactNumberFormatSymbols_fr_LU", "goog.i18n.CompactNumberFormatSymbols_fr_MA", "goog.i18n.CompactNumberFormatSymbols_fr_MG", "goog.i18n.CompactNumberFormatSymbols_fr_ML", "goog.i18n.CompactNumberFormatSymbols_fr_MR", "goog.i18n.CompactNumberFormatSymbols_fr_MU", "goog.i18n.CompactNumberFormatSymbols_fr_NC", "goog.i18n.CompactNumberFormatSymbols_fr_NE", "goog.i18n.CompactNumberFormatSymbols_fr_PF", 
"goog.i18n.CompactNumberFormatSymbols_fr_RW", "goog.i18n.CompactNumberFormatSymbols_fr_SC", "goog.i18n.CompactNumberFormatSymbols_fr_SN", "goog.i18n.CompactNumberFormatSymbols_fr_SY", "goog.i18n.CompactNumberFormatSymbols_fr_TD", "goog.i18n.CompactNumberFormatSymbols_fr_TG", "goog.i18n.CompactNumberFormatSymbols_fr_TN", "goog.i18n.CompactNumberFormatSymbols_fr_VU", "goog.i18n.CompactNumberFormatSymbols_fr_WF", "goog.i18n.CompactNumberFormatSymbols_fur", "goog.i18n.CompactNumberFormatSymbols_fur_IT", 
"goog.i18n.CompactNumberFormatSymbols_fy", "goog.i18n.CompactNumberFormatSymbols_fy_NL", "goog.i18n.CompactNumberFormatSymbols_gd", "goog.i18n.CompactNumberFormatSymbols_gd_GB", "goog.i18n.CompactNumberFormatSymbols_gsw_FR", "goog.i18n.CompactNumberFormatSymbols_guz", "goog.i18n.CompactNumberFormatSymbols_guz_KE", "goog.i18n.CompactNumberFormatSymbols_gv", "goog.i18n.CompactNumberFormatSymbols_gv_IM", "goog.i18n.CompactNumberFormatSymbols_ha", "goog.i18n.CompactNumberFormatSymbols_ha_Latn", "goog.i18n.CompactNumberFormatSymbols_ha_Latn_GH", 
"goog.i18n.CompactNumberFormatSymbols_ha_Latn_NE", "goog.i18n.CompactNumberFormatSymbols_ha_Latn_NG", "goog.i18n.CompactNumberFormatSymbols_hr_BA", "goog.i18n.CompactNumberFormatSymbols_hsb", "goog.i18n.CompactNumberFormatSymbols_hsb_DE", "goog.i18n.CompactNumberFormatSymbols_ig", "goog.i18n.CompactNumberFormatSymbols_ig_NG", "goog.i18n.CompactNumberFormatSymbols_ii", "goog.i18n.CompactNumberFormatSymbols_ii_CN", "goog.i18n.CompactNumberFormatSymbols_it_CH", "goog.i18n.CompactNumberFormatSymbols_jgo", 
"goog.i18n.CompactNumberFormatSymbols_jgo_CM", "goog.i18n.CompactNumberFormatSymbols_jmc", "goog.i18n.CompactNumberFormatSymbols_jmc_TZ", "goog.i18n.CompactNumberFormatSymbols_kab", "goog.i18n.CompactNumberFormatSymbols_kab_DZ", "goog.i18n.CompactNumberFormatSymbols_kam", "goog.i18n.CompactNumberFormatSymbols_kam_KE", "goog.i18n.CompactNumberFormatSymbols_kde", "goog.i18n.CompactNumberFormatSymbols_kde_TZ", "goog.i18n.CompactNumberFormatSymbols_kea", "goog.i18n.CompactNumberFormatSymbols_kea_CV", 
"goog.i18n.CompactNumberFormatSymbols_khq", "goog.i18n.CompactNumberFormatSymbols_khq_ML", "goog.i18n.CompactNumberFormatSymbols_ki", "goog.i18n.CompactNumberFormatSymbols_ki_KE", "goog.i18n.CompactNumberFormatSymbols_kkj", "goog.i18n.CompactNumberFormatSymbols_kkj_CM", "goog.i18n.CompactNumberFormatSymbols_kl", "goog.i18n.CompactNumberFormatSymbols_kl_GL", "goog.i18n.CompactNumberFormatSymbols_kln", "goog.i18n.CompactNumberFormatSymbols_kln_KE", "goog.i18n.CompactNumberFormatSymbols_ko_KP", "goog.i18n.CompactNumberFormatSymbols_kok", 
"goog.i18n.CompactNumberFormatSymbols_kok_IN", "goog.i18n.CompactNumberFormatSymbols_ks", "goog.i18n.CompactNumberFormatSymbols_ks_Arab", "goog.i18n.CompactNumberFormatSymbols_ks_Arab_IN", "goog.i18n.CompactNumberFormatSymbols_ksb", "goog.i18n.CompactNumberFormatSymbols_ksb_TZ", "goog.i18n.CompactNumberFormatSymbols_ksf", "goog.i18n.CompactNumberFormatSymbols_ksf_CM", "goog.i18n.CompactNumberFormatSymbols_ksh", "goog.i18n.CompactNumberFormatSymbols_ksh_DE", "goog.i18n.CompactNumberFormatSymbols_kw", 
"goog.i18n.CompactNumberFormatSymbols_kw_GB", "goog.i18n.CompactNumberFormatSymbols_lag", "goog.i18n.CompactNumberFormatSymbols_lag_TZ", "goog.i18n.CompactNumberFormatSymbols_lb", "goog.i18n.CompactNumberFormatSymbols_lb_LU", "goog.i18n.CompactNumberFormatSymbols_lg", "goog.i18n.CompactNumberFormatSymbols_lg_UG", "goog.i18n.CompactNumberFormatSymbols_lkt", "goog.i18n.CompactNumberFormatSymbols_lkt_US", "goog.i18n.CompactNumberFormatSymbols_ln_AO", "goog.i18n.CompactNumberFormatSymbols_ln_CF", "goog.i18n.CompactNumberFormatSymbols_ln_CG", 
"goog.i18n.CompactNumberFormatSymbols_lu", "goog.i18n.CompactNumberFormatSymbols_lu_CD", "goog.i18n.CompactNumberFormatSymbols_luo", "goog.i18n.CompactNumberFormatSymbols_luo_KE", "goog.i18n.CompactNumberFormatSymbols_luy", "goog.i18n.CompactNumberFormatSymbols_luy_KE", "goog.i18n.CompactNumberFormatSymbols_mas", "goog.i18n.CompactNumberFormatSymbols_mas_KE", "goog.i18n.CompactNumberFormatSymbols_mas_TZ", "goog.i18n.CompactNumberFormatSymbols_mer", "goog.i18n.CompactNumberFormatSymbols_mer_KE", "goog.i18n.CompactNumberFormatSymbols_mfe", 
"goog.i18n.CompactNumberFormatSymbols_mfe_MU", "goog.i18n.CompactNumberFormatSymbols_mg", "goog.i18n.CompactNumberFormatSymbols_mg_MG", "goog.i18n.CompactNumberFormatSymbols_mgh", "goog.i18n.CompactNumberFormatSymbols_mgh_MZ", "goog.i18n.CompactNumberFormatSymbols_mgo", "goog.i18n.CompactNumberFormatSymbols_mgo_CM", "goog.i18n.CompactNumberFormatSymbols_ms_Latn_BN", "goog.i18n.CompactNumberFormatSymbols_ms_Latn_SG", "goog.i18n.CompactNumberFormatSymbols_mua", "goog.i18n.CompactNumberFormatSymbols_mua_CM", 
"goog.i18n.CompactNumberFormatSymbols_naq", "goog.i18n.CompactNumberFormatSymbols_naq_NA", "goog.i18n.CompactNumberFormatSymbols_nd", "goog.i18n.CompactNumberFormatSymbols_nd_ZW", "goog.i18n.CompactNumberFormatSymbols_ne_IN", "goog.i18n.CompactNumberFormatSymbols_nl_AW", "goog.i18n.CompactNumberFormatSymbols_nl_BE", "goog.i18n.CompactNumberFormatSymbols_nl_BQ", "goog.i18n.CompactNumberFormatSymbols_nl_CW", "goog.i18n.CompactNumberFormatSymbols_nl_SR", "goog.i18n.CompactNumberFormatSymbols_nl_SX", 
"goog.i18n.CompactNumberFormatSymbols_nmg", "goog.i18n.CompactNumberFormatSymbols_nmg_CM", "goog.i18n.CompactNumberFormatSymbols_nn", "goog.i18n.CompactNumberFormatSymbols_nn_NO", "goog.i18n.CompactNumberFormatSymbols_nnh", "goog.i18n.CompactNumberFormatSymbols_nnh_CM", "goog.i18n.CompactNumberFormatSymbols_nus", "goog.i18n.CompactNumberFormatSymbols_nus_SD", "goog.i18n.CompactNumberFormatSymbols_nyn", "goog.i18n.CompactNumberFormatSymbols_nyn_UG", "goog.i18n.CompactNumberFormatSymbols_om", "goog.i18n.CompactNumberFormatSymbols_om_ET", 
"goog.i18n.CompactNumberFormatSymbols_om_KE", "goog.i18n.CompactNumberFormatSymbols_os", "goog.i18n.CompactNumberFormatSymbols_os_GE", "goog.i18n.CompactNumberFormatSymbols_os_RU", "goog.i18n.CompactNumberFormatSymbols_pa_Arab", "goog.i18n.CompactNumberFormatSymbols_pa_Arab_PK", "goog.i18n.CompactNumberFormatSymbols_ps", "goog.i18n.CompactNumberFormatSymbols_ps_AF", "goog.i18n.CompactNumberFormatSymbols_pt_AO", "goog.i18n.CompactNumberFormatSymbols_pt_CV", "goog.i18n.CompactNumberFormatSymbols_pt_GW", 
"goog.i18n.CompactNumberFormatSymbols_pt_MO", "goog.i18n.CompactNumberFormatSymbols_pt_MZ", "goog.i18n.CompactNumberFormatSymbols_pt_ST", "goog.i18n.CompactNumberFormatSymbols_pt_TL", "goog.i18n.CompactNumberFormatSymbols_qu", "goog.i18n.CompactNumberFormatSymbols_qu_BO", "goog.i18n.CompactNumberFormatSymbols_qu_EC", "goog.i18n.CompactNumberFormatSymbols_qu_PE", "goog.i18n.CompactNumberFormatSymbols_rm", "goog.i18n.CompactNumberFormatSymbols_rm_CH", "goog.i18n.CompactNumberFormatSymbols_rn", "goog.i18n.CompactNumberFormatSymbols_rn_BI", 
"goog.i18n.CompactNumberFormatSymbols_ro_MD", "goog.i18n.CompactNumberFormatSymbols_rof", "goog.i18n.CompactNumberFormatSymbols_rof_TZ", "goog.i18n.CompactNumberFormatSymbols_ru_BY", "goog.i18n.CompactNumberFormatSymbols_ru_KG", "goog.i18n.CompactNumberFormatSymbols_ru_KZ", "goog.i18n.CompactNumberFormatSymbols_ru_MD", "goog.i18n.CompactNumberFormatSymbols_ru_UA", "goog.i18n.CompactNumberFormatSymbols_rw", "goog.i18n.CompactNumberFormatSymbols_rw_RW", "goog.i18n.CompactNumberFormatSymbols_rwk", "goog.i18n.CompactNumberFormatSymbols_rwk_TZ", 
"goog.i18n.CompactNumberFormatSymbols_sah", "goog.i18n.CompactNumberFormatSymbols_sah_RU", "goog.i18n.CompactNumberFormatSymbols_saq", "goog.i18n.CompactNumberFormatSymbols_saq_KE", "goog.i18n.CompactNumberFormatSymbols_sbp", "goog.i18n.CompactNumberFormatSymbols_sbp_TZ", "goog.i18n.CompactNumberFormatSymbols_se", "goog.i18n.CompactNumberFormatSymbols_se_FI", "goog.i18n.CompactNumberFormatSymbols_se_NO", "goog.i18n.CompactNumberFormatSymbols_se_SE", "goog.i18n.CompactNumberFormatSymbols_seh", "goog.i18n.CompactNumberFormatSymbols_seh_MZ", 
"goog.i18n.CompactNumberFormatSymbols_ses", "goog.i18n.CompactNumberFormatSymbols_ses_ML", "goog.i18n.CompactNumberFormatSymbols_sg", "goog.i18n.CompactNumberFormatSymbols_sg_CF", "goog.i18n.CompactNumberFormatSymbols_shi", "goog.i18n.CompactNumberFormatSymbols_shi_Latn", "goog.i18n.CompactNumberFormatSymbols_shi_Latn_MA", "goog.i18n.CompactNumberFormatSymbols_shi_Tfng", "goog.i18n.CompactNumberFormatSymbols_shi_Tfng_MA", "goog.i18n.CompactNumberFormatSymbols_smn", "goog.i18n.CompactNumberFormatSymbols_smn_FI", 
"goog.i18n.CompactNumberFormatSymbols_sn", "goog.i18n.CompactNumberFormatSymbols_sn_ZW", "goog.i18n.CompactNumberFormatSymbols_so", "goog.i18n.CompactNumberFormatSymbols_so_DJ", "goog.i18n.CompactNumberFormatSymbols_so_ET", "goog.i18n.CompactNumberFormatSymbols_so_KE", "goog.i18n.CompactNumberFormatSymbols_so_SO", "goog.i18n.CompactNumberFormatSymbols_sq_MK", "goog.i18n.CompactNumberFormatSymbols_sq_XK", "goog.i18n.CompactNumberFormatSymbols_sr_Cyrl_BA", "goog.i18n.CompactNumberFormatSymbols_sr_Cyrl_ME", 
"goog.i18n.CompactNumberFormatSymbols_sr_Cyrl_XK", "goog.i18n.CompactNumberFormatSymbols_sr_Latn", "goog.i18n.CompactNumberFormatSymbols_sr_Latn_BA", "goog.i18n.CompactNumberFormatSymbols_sr_Latn_ME", "goog.i18n.CompactNumberFormatSymbols_sr_Latn_RS", "goog.i18n.CompactNumberFormatSymbols_sr_Latn_XK", "goog.i18n.CompactNumberFormatSymbols_sv_AX", "goog.i18n.CompactNumberFormatSymbols_sv_FI", "goog.i18n.CompactNumberFormatSymbols_sw_CD", "goog.i18n.CompactNumberFormatSymbols_sw_KE", "goog.i18n.CompactNumberFormatSymbols_sw_UG", 
"goog.i18n.CompactNumberFormatSymbols_ta_LK", "goog.i18n.CompactNumberFormatSymbols_ta_MY", "goog.i18n.CompactNumberFormatSymbols_ta_SG", "goog.i18n.CompactNumberFormatSymbols_teo", "goog.i18n.CompactNumberFormatSymbols_teo_KE", "goog.i18n.CompactNumberFormatSymbols_teo_UG", "goog.i18n.CompactNumberFormatSymbols_ti", "goog.i18n.CompactNumberFormatSymbols_ti_ER", "goog.i18n.CompactNumberFormatSymbols_ti_ET", "goog.i18n.CompactNumberFormatSymbols_to", "goog.i18n.CompactNumberFormatSymbols_to_TO", "goog.i18n.CompactNumberFormatSymbols_tr_CY", 
"goog.i18n.CompactNumberFormatSymbols_twq", "goog.i18n.CompactNumberFormatSymbols_twq_NE", "goog.i18n.CompactNumberFormatSymbols_tzm", "goog.i18n.CompactNumberFormatSymbols_tzm_Latn", "goog.i18n.CompactNumberFormatSymbols_tzm_Latn_MA", "goog.i18n.CompactNumberFormatSymbols_ug", "goog.i18n.CompactNumberFormatSymbols_ug_Arab", "goog.i18n.CompactNumberFormatSymbols_ug_Arab_CN", "goog.i18n.CompactNumberFormatSymbols_ur_IN", "goog.i18n.CompactNumberFormatSymbols_uz_Arab", "goog.i18n.CompactNumberFormatSymbols_uz_Arab_AF", 
"goog.i18n.CompactNumberFormatSymbols_uz_Cyrl", "goog.i18n.CompactNumberFormatSymbols_uz_Cyrl_UZ", "goog.i18n.CompactNumberFormatSymbols_vai", "goog.i18n.CompactNumberFormatSymbols_vai_Latn", "goog.i18n.CompactNumberFormatSymbols_vai_Latn_LR", "goog.i18n.CompactNumberFormatSymbols_vai_Vaii", "goog.i18n.CompactNumberFormatSymbols_vai_Vaii_LR", "goog.i18n.CompactNumberFormatSymbols_vun", "goog.i18n.CompactNumberFormatSymbols_vun_TZ", "goog.i18n.CompactNumberFormatSymbols_wae", "goog.i18n.CompactNumberFormatSymbols_wae_CH", 
"goog.i18n.CompactNumberFormatSymbols_xog", "goog.i18n.CompactNumberFormatSymbols_xog_UG", "goog.i18n.CompactNumberFormatSymbols_yav", "goog.i18n.CompactNumberFormatSymbols_yav_CM", "goog.i18n.CompactNumberFormatSymbols_yi", "goog.i18n.CompactNumberFormatSymbols_yi_001", "goog.i18n.CompactNumberFormatSymbols_yo", "goog.i18n.CompactNumberFormatSymbols_yo_BJ", "goog.i18n.CompactNumberFormatSymbols_yo_NG", "goog.i18n.CompactNumberFormatSymbols_zgh", "goog.i18n.CompactNumberFormatSymbols_zgh_MA", "goog.i18n.CompactNumberFormatSymbols_zh_Hans_HK", 
"goog.i18n.CompactNumberFormatSymbols_zh_Hans_MO", "goog.i18n.CompactNumberFormatSymbols_zh_Hans_SG", "goog.i18n.CompactNumberFormatSymbols_zh_Hant", "goog.i18n.CompactNumberFormatSymbols_zh_Hant_HK", "goog.i18n.CompactNumberFormatSymbols_zh_Hant_MO", "goog.i18n.CompactNumberFormatSymbols_zh_Hant_TW"], [], false);
goog.addDependency("i18n/currency.js", ["goog.i18n.currency", "goog.i18n.currency.CurrencyInfo", "goog.i18n.currency.CurrencyInfoTier2"], [], false);
goog.addDependency("i18n/currency_test.js", ["goog.i18n.currencyTest"], ["goog.i18n.NumberFormat", "goog.i18n.currency", "goog.i18n.currency.CurrencyInfo", "goog.object", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("i18n/currencycodemap.js", ["goog.i18n.currencyCodeMap", "goog.i18n.currencyCodeMapTier2"], [], false);
goog.addDependency("i18n/datetimeformat.js", ["goog.i18n.DateTimeFormat", "goog.i18n.DateTimeFormat.Format"], ["goog.asserts", "goog.date", "goog.i18n.DateTimeSymbols", "goog.i18n.TimeZone", "goog.string"], false);
goog.addDependency("i18n/datetimeformat_test.js", ["goog.i18n.DateTimeFormatTest"], ["goog.date.Date", "goog.date.DateTime", "goog.i18n.DateTimeFormat", "goog.i18n.DateTimePatterns", "goog.i18n.DateTimePatterns_de", "goog.i18n.DateTimePatterns_en", "goog.i18n.DateTimePatterns_fa", "goog.i18n.DateTimePatterns_fr", "goog.i18n.DateTimePatterns_ja", "goog.i18n.DateTimePatterns_sv", "goog.i18n.DateTimeSymbols", "goog.i18n.DateTimeSymbols_ar_AE", "goog.i18n.DateTimeSymbols_ar_SA", "goog.i18n.DateTimeSymbols_bn_BD", 
"goog.i18n.DateTimeSymbols_de", "goog.i18n.DateTimeSymbols_en", "goog.i18n.DateTimeSymbols_en_GB", "goog.i18n.DateTimeSymbols_en_IE", "goog.i18n.DateTimeSymbols_en_IN", "goog.i18n.DateTimeSymbols_en_US", "goog.i18n.DateTimeSymbols_fa", "goog.i18n.DateTimeSymbols_fr", "goog.i18n.DateTimeSymbols_fr_DJ", "goog.i18n.DateTimeSymbols_he_IL", "goog.i18n.DateTimeSymbols_ja", "goog.i18n.DateTimeSymbols_ro_RO", "goog.i18n.DateTimeSymbols_sv", "goog.i18n.TimeZone", "goog.testing.jsunit"], false);
goog.addDependency("i18n/datetimeparse.js", ["goog.i18n.DateTimeParse"], ["goog.date", "goog.i18n.DateTimeFormat", "goog.i18n.DateTimeSymbols"], false);
goog.addDependency("i18n/datetimeparse_test.js", ["goog.i18n.DateTimeParseTest"], ["goog.date.Date", "goog.i18n.DateTimeFormat", "goog.i18n.DateTimeParse", "goog.i18n.DateTimeSymbols", "goog.i18n.DateTimeSymbols_en", "goog.i18n.DateTimeSymbols_fa", "goog.i18n.DateTimeSymbols_fr", "goog.i18n.DateTimeSymbols_pl", "goog.i18n.DateTimeSymbols_zh", "goog.testing.ExpectedFailures", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("i18n/datetimepatterns.js", ["goog.i18n.DateTimePatterns", "goog.i18n.DateTimePatterns_af", "goog.i18n.DateTimePatterns_am", "goog.i18n.DateTimePatterns_ar", "goog.i18n.DateTimePatterns_az", "goog.i18n.DateTimePatterns_bg", "goog.i18n.DateTimePatterns_bn", "goog.i18n.DateTimePatterns_br", "goog.i18n.DateTimePatterns_ca", "goog.i18n.DateTimePatterns_chr", "goog.i18n.DateTimePatterns_cs", "goog.i18n.DateTimePatterns_cy", "goog.i18n.DateTimePatterns_da", "goog.i18n.DateTimePatterns_de", 
"goog.i18n.DateTimePatterns_de_AT", "goog.i18n.DateTimePatterns_de_CH", "goog.i18n.DateTimePatterns_el", "goog.i18n.DateTimePatterns_en", "goog.i18n.DateTimePatterns_en_AU", "goog.i18n.DateTimePatterns_en_GB", "goog.i18n.DateTimePatterns_en_IE", "goog.i18n.DateTimePatterns_en_IN", "goog.i18n.DateTimePatterns_en_SG", "goog.i18n.DateTimePatterns_en_US", "goog.i18n.DateTimePatterns_en_ZA", "goog.i18n.DateTimePatterns_es", "goog.i18n.DateTimePatterns_es_419", "goog.i18n.DateTimePatterns_es_ES", "goog.i18n.DateTimePatterns_et", 
"goog.i18n.DateTimePatterns_eu", "goog.i18n.DateTimePatterns_fa", "goog.i18n.DateTimePatterns_fi", "goog.i18n.DateTimePatterns_fil", "goog.i18n.DateTimePatterns_fr", "goog.i18n.DateTimePatterns_fr_CA", "goog.i18n.DateTimePatterns_ga", "goog.i18n.DateTimePatterns_gl", "goog.i18n.DateTimePatterns_gsw", "goog.i18n.DateTimePatterns_gu", "goog.i18n.DateTimePatterns_haw", "goog.i18n.DateTimePatterns_he", "goog.i18n.DateTimePatterns_hi", "goog.i18n.DateTimePatterns_hr", "goog.i18n.DateTimePatterns_hu", 
"goog.i18n.DateTimePatterns_hy", "goog.i18n.DateTimePatterns_id", "goog.i18n.DateTimePatterns_in", "goog.i18n.DateTimePatterns_is", "goog.i18n.DateTimePatterns_it", "goog.i18n.DateTimePatterns_iw", "goog.i18n.DateTimePatterns_ja", "goog.i18n.DateTimePatterns_ka", "goog.i18n.DateTimePatterns_kk", "goog.i18n.DateTimePatterns_km", "goog.i18n.DateTimePatterns_kn", "goog.i18n.DateTimePatterns_ko", "goog.i18n.DateTimePatterns_ky", "goog.i18n.DateTimePatterns_ln", "goog.i18n.DateTimePatterns_lo", "goog.i18n.DateTimePatterns_lt", 
"goog.i18n.DateTimePatterns_lv", "goog.i18n.DateTimePatterns_mk", "goog.i18n.DateTimePatterns_ml", "goog.i18n.DateTimePatterns_mn", "goog.i18n.DateTimePatterns_mo", "goog.i18n.DateTimePatterns_mr", "goog.i18n.DateTimePatterns_ms", "goog.i18n.DateTimePatterns_mt", "goog.i18n.DateTimePatterns_my", "goog.i18n.DateTimePatterns_nb", "goog.i18n.DateTimePatterns_ne", "goog.i18n.DateTimePatterns_nl", "goog.i18n.DateTimePatterns_no", "goog.i18n.DateTimePatterns_no_NO", "goog.i18n.DateTimePatterns_or", "goog.i18n.DateTimePatterns_pa", 
"goog.i18n.DateTimePatterns_pl", "goog.i18n.DateTimePatterns_pt", "goog.i18n.DateTimePatterns_pt_BR", "goog.i18n.DateTimePatterns_pt_PT", "goog.i18n.DateTimePatterns_ro", "goog.i18n.DateTimePatterns_ru", "goog.i18n.DateTimePatterns_sh", "goog.i18n.DateTimePatterns_si", "goog.i18n.DateTimePatterns_sk", "goog.i18n.DateTimePatterns_sl", "goog.i18n.DateTimePatterns_sq", "goog.i18n.DateTimePatterns_sr", "goog.i18n.DateTimePatterns_sv", "goog.i18n.DateTimePatterns_sw", "goog.i18n.DateTimePatterns_ta", 
"goog.i18n.DateTimePatterns_te", "goog.i18n.DateTimePatterns_th", "goog.i18n.DateTimePatterns_tl", "goog.i18n.DateTimePatterns_tr", "goog.i18n.DateTimePatterns_uk", "goog.i18n.DateTimePatterns_ur", "goog.i18n.DateTimePatterns_uz", "goog.i18n.DateTimePatterns_vi", "goog.i18n.DateTimePatterns_zh", "goog.i18n.DateTimePatterns_zh_CN", "goog.i18n.DateTimePatterns_zh_HK", "goog.i18n.DateTimePatterns_zh_TW", "goog.i18n.DateTimePatterns_zu"], [], false);
goog.addDependency("i18n/datetimepatternsext.js", ["goog.i18n.DateTimePatternsExt", "goog.i18n.DateTimePatterns_af_NA", "goog.i18n.DateTimePatterns_af_ZA", "goog.i18n.DateTimePatterns_agq", "goog.i18n.DateTimePatterns_agq_CM", "goog.i18n.DateTimePatterns_ak", "goog.i18n.DateTimePatterns_ak_GH", "goog.i18n.DateTimePatterns_am_ET", "goog.i18n.DateTimePatterns_ar_001", "goog.i18n.DateTimePatterns_ar_AE", "goog.i18n.DateTimePatterns_ar_BH", "goog.i18n.DateTimePatterns_ar_DJ", "goog.i18n.DateTimePatterns_ar_DZ", 
"goog.i18n.DateTimePatterns_ar_EG", "goog.i18n.DateTimePatterns_ar_EH", "goog.i18n.DateTimePatterns_ar_ER", "goog.i18n.DateTimePatterns_ar_IL", "goog.i18n.DateTimePatterns_ar_IQ", "goog.i18n.DateTimePatterns_ar_JO", "goog.i18n.DateTimePatterns_ar_KM", "goog.i18n.DateTimePatterns_ar_KW", "goog.i18n.DateTimePatterns_ar_LB", "goog.i18n.DateTimePatterns_ar_LY", "goog.i18n.DateTimePatterns_ar_MA", "goog.i18n.DateTimePatterns_ar_MR", "goog.i18n.DateTimePatterns_ar_OM", "goog.i18n.DateTimePatterns_ar_PS", 
"goog.i18n.DateTimePatterns_ar_QA", "goog.i18n.DateTimePatterns_ar_SA", "goog.i18n.DateTimePatterns_ar_SD", "goog.i18n.DateTimePatterns_ar_SO", "goog.i18n.DateTimePatterns_ar_SS", "goog.i18n.DateTimePatterns_ar_SY", "goog.i18n.DateTimePatterns_ar_TD", "goog.i18n.DateTimePatterns_ar_TN", "goog.i18n.DateTimePatterns_ar_YE", "goog.i18n.DateTimePatterns_as", "goog.i18n.DateTimePatterns_as_IN", "goog.i18n.DateTimePatterns_asa", "goog.i18n.DateTimePatterns_asa_TZ", "goog.i18n.DateTimePatterns_az_Cyrl", 
"goog.i18n.DateTimePatterns_az_Cyrl_AZ", "goog.i18n.DateTimePatterns_az_Latn", "goog.i18n.DateTimePatterns_az_Latn_AZ", "goog.i18n.DateTimePatterns_bas", "goog.i18n.DateTimePatterns_bas_CM", "goog.i18n.DateTimePatterns_be", "goog.i18n.DateTimePatterns_be_BY", "goog.i18n.DateTimePatterns_bem", "goog.i18n.DateTimePatterns_bem_ZM", "goog.i18n.DateTimePatterns_bez", "goog.i18n.DateTimePatterns_bez_TZ", "goog.i18n.DateTimePatterns_bg_BG", "goog.i18n.DateTimePatterns_bm", "goog.i18n.DateTimePatterns_bm_Latn", 
"goog.i18n.DateTimePatterns_bm_Latn_ML", "goog.i18n.DateTimePatterns_bn_BD", "goog.i18n.DateTimePatterns_bn_IN", "goog.i18n.DateTimePatterns_bo", "goog.i18n.DateTimePatterns_bo_CN", "goog.i18n.DateTimePatterns_bo_IN", "goog.i18n.DateTimePatterns_br_FR", "goog.i18n.DateTimePatterns_brx", "goog.i18n.DateTimePatterns_brx_IN", "goog.i18n.DateTimePatterns_bs", "goog.i18n.DateTimePatterns_bs_Cyrl", "goog.i18n.DateTimePatterns_bs_Cyrl_BA", "goog.i18n.DateTimePatterns_bs_Latn", "goog.i18n.DateTimePatterns_bs_Latn_BA", 
"goog.i18n.DateTimePatterns_ca_AD", "goog.i18n.DateTimePatterns_ca_ES", "goog.i18n.DateTimePatterns_ca_FR", "goog.i18n.DateTimePatterns_ca_IT", "goog.i18n.DateTimePatterns_cgg", "goog.i18n.DateTimePatterns_cgg_UG", "goog.i18n.DateTimePatterns_chr_US", "goog.i18n.DateTimePatterns_cs_CZ", "goog.i18n.DateTimePatterns_cy_GB", "goog.i18n.DateTimePatterns_da_DK", "goog.i18n.DateTimePatterns_da_GL", "goog.i18n.DateTimePatterns_dav", "goog.i18n.DateTimePatterns_dav_KE", "goog.i18n.DateTimePatterns_de_BE", 
"goog.i18n.DateTimePatterns_de_DE", "goog.i18n.DateTimePatterns_de_LI", "goog.i18n.DateTimePatterns_de_LU", "goog.i18n.DateTimePatterns_dje", "goog.i18n.DateTimePatterns_dje_NE", "goog.i18n.DateTimePatterns_dsb", "goog.i18n.DateTimePatterns_dsb_DE", "goog.i18n.DateTimePatterns_dua", "goog.i18n.DateTimePatterns_dua_CM", "goog.i18n.DateTimePatterns_dyo", "goog.i18n.DateTimePatterns_dyo_SN", "goog.i18n.DateTimePatterns_dz", "goog.i18n.DateTimePatterns_dz_BT", "goog.i18n.DateTimePatterns_ebu", "goog.i18n.DateTimePatterns_ebu_KE", 
"goog.i18n.DateTimePatterns_ee", "goog.i18n.DateTimePatterns_ee_GH", "goog.i18n.DateTimePatterns_ee_TG", "goog.i18n.DateTimePatterns_el_CY", "goog.i18n.DateTimePatterns_el_GR", "goog.i18n.DateTimePatterns_en_001", "goog.i18n.DateTimePatterns_en_150", "goog.i18n.DateTimePatterns_en_AG", "goog.i18n.DateTimePatterns_en_AI", "goog.i18n.DateTimePatterns_en_AS", "goog.i18n.DateTimePatterns_en_BB", "goog.i18n.DateTimePatterns_en_BE", "goog.i18n.DateTimePatterns_en_BM", "goog.i18n.DateTimePatterns_en_BS", 
"goog.i18n.DateTimePatterns_en_BW", "goog.i18n.DateTimePatterns_en_BZ", "goog.i18n.DateTimePatterns_en_CA", "goog.i18n.DateTimePatterns_en_CC", "goog.i18n.DateTimePatterns_en_CK", "goog.i18n.DateTimePatterns_en_CM", "goog.i18n.DateTimePatterns_en_CX", "goog.i18n.DateTimePatterns_en_DG", "goog.i18n.DateTimePatterns_en_DM", "goog.i18n.DateTimePatterns_en_ER", "goog.i18n.DateTimePatterns_en_FJ", "goog.i18n.DateTimePatterns_en_FK", "goog.i18n.DateTimePatterns_en_FM", "goog.i18n.DateTimePatterns_en_GD", 
"goog.i18n.DateTimePatterns_en_GG", "goog.i18n.DateTimePatterns_en_GH", "goog.i18n.DateTimePatterns_en_GI", "goog.i18n.DateTimePatterns_en_GM", "goog.i18n.DateTimePatterns_en_GU", "goog.i18n.DateTimePatterns_en_GY", "goog.i18n.DateTimePatterns_en_HK", "goog.i18n.DateTimePatterns_en_IM", "goog.i18n.DateTimePatterns_en_IO", "goog.i18n.DateTimePatterns_en_JE", "goog.i18n.DateTimePatterns_en_JM", "goog.i18n.DateTimePatterns_en_KE", "goog.i18n.DateTimePatterns_en_KI", "goog.i18n.DateTimePatterns_en_KN", 
"goog.i18n.DateTimePatterns_en_KY", "goog.i18n.DateTimePatterns_en_LC", "goog.i18n.DateTimePatterns_en_LR", "goog.i18n.DateTimePatterns_en_LS", "goog.i18n.DateTimePatterns_en_MG", "goog.i18n.DateTimePatterns_en_MH", "goog.i18n.DateTimePatterns_en_MO", "goog.i18n.DateTimePatterns_en_MP", "goog.i18n.DateTimePatterns_en_MS", "goog.i18n.DateTimePatterns_en_MT", "goog.i18n.DateTimePatterns_en_MU", "goog.i18n.DateTimePatterns_en_MW", "goog.i18n.DateTimePatterns_en_MY", "goog.i18n.DateTimePatterns_en_NA", 
"goog.i18n.DateTimePatterns_en_NF", "goog.i18n.DateTimePatterns_en_NG", "goog.i18n.DateTimePatterns_en_NR", "goog.i18n.DateTimePatterns_en_NU", "goog.i18n.DateTimePatterns_en_NZ", "goog.i18n.DateTimePatterns_en_PG", "goog.i18n.DateTimePatterns_en_PH", "goog.i18n.DateTimePatterns_en_PK", "goog.i18n.DateTimePatterns_en_PN", "goog.i18n.DateTimePatterns_en_PR", "goog.i18n.DateTimePatterns_en_PW", "goog.i18n.DateTimePatterns_en_RW", "goog.i18n.DateTimePatterns_en_SB", "goog.i18n.DateTimePatterns_en_SC", 
"goog.i18n.DateTimePatterns_en_SD", "goog.i18n.DateTimePatterns_en_SH", "goog.i18n.DateTimePatterns_en_SL", "goog.i18n.DateTimePatterns_en_SS", "goog.i18n.DateTimePatterns_en_SX", "goog.i18n.DateTimePatterns_en_SZ", "goog.i18n.DateTimePatterns_en_TC", "goog.i18n.DateTimePatterns_en_TK", "goog.i18n.DateTimePatterns_en_TO", "goog.i18n.DateTimePatterns_en_TT", "goog.i18n.DateTimePatterns_en_TV", "goog.i18n.DateTimePatterns_en_TZ", "goog.i18n.DateTimePatterns_en_UG", "goog.i18n.DateTimePatterns_en_UM", 
"goog.i18n.DateTimePatterns_en_US_POSIX", "goog.i18n.DateTimePatterns_en_VC", "goog.i18n.DateTimePatterns_en_VG", "goog.i18n.DateTimePatterns_en_VI", "goog.i18n.DateTimePatterns_en_VU", "goog.i18n.DateTimePatterns_en_WS", "goog.i18n.DateTimePatterns_en_ZM", "goog.i18n.DateTimePatterns_en_ZW", "goog.i18n.DateTimePatterns_eo", "goog.i18n.DateTimePatterns_es_AR", "goog.i18n.DateTimePatterns_es_BO", "goog.i18n.DateTimePatterns_es_CL", "goog.i18n.DateTimePatterns_es_CO", "goog.i18n.DateTimePatterns_es_CR", 
"goog.i18n.DateTimePatterns_es_CU", "goog.i18n.DateTimePatterns_es_DO", "goog.i18n.DateTimePatterns_es_EA", "goog.i18n.DateTimePatterns_es_EC", "goog.i18n.DateTimePatterns_es_GQ", "goog.i18n.DateTimePatterns_es_GT", "goog.i18n.DateTimePatterns_es_HN", "goog.i18n.DateTimePatterns_es_IC", "goog.i18n.DateTimePatterns_es_MX", "goog.i18n.DateTimePatterns_es_NI", "goog.i18n.DateTimePatterns_es_PA", "goog.i18n.DateTimePatterns_es_PE", "goog.i18n.DateTimePatterns_es_PH", "goog.i18n.DateTimePatterns_es_PR", 
"goog.i18n.DateTimePatterns_es_PY", "goog.i18n.DateTimePatterns_es_SV", "goog.i18n.DateTimePatterns_es_US", "goog.i18n.DateTimePatterns_es_UY", "goog.i18n.DateTimePatterns_es_VE", "goog.i18n.DateTimePatterns_et_EE", "goog.i18n.DateTimePatterns_eu_ES", "goog.i18n.DateTimePatterns_ewo", "goog.i18n.DateTimePatterns_ewo_CM", "goog.i18n.DateTimePatterns_fa_AF", "goog.i18n.DateTimePatterns_fa_IR", "goog.i18n.DateTimePatterns_ff", "goog.i18n.DateTimePatterns_ff_CM", "goog.i18n.DateTimePatterns_ff_GN", "goog.i18n.DateTimePatterns_ff_MR", 
"goog.i18n.DateTimePatterns_ff_SN", "goog.i18n.DateTimePatterns_fi_FI", "goog.i18n.DateTimePatterns_fil_PH", "goog.i18n.DateTimePatterns_fo", "goog.i18n.DateTimePatterns_fo_FO", "goog.i18n.DateTimePatterns_fr_BE", "goog.i18n.DateTimePatterns_fr_BF", "goog.i18n.DateTimePatterns_fr_BI", "goog.i18n.DateTimePatterns_fr_BJ", "goog.i18n.DateTimePatterns_fr_BL", "goog.i18n.DateTimePatterns_fr_CD", "goog.i18n.DateTimePatterns_fr_CF", "goog.i18n.DateTimePatterns_fr_CG", "goog.i18n.DateTimePatterns_fr_CH", 
"goog.i18n.DateTimePatterns_fr_CI", "goog.i18n.DateTimePatterns_fr_CM", "goog.i18n.DateTimePatterns_fr_DJ", "goog.i18n.DateTimePatterns_fr_DZ", "goog.i18n.DateTimePatterns_fr_FR", "goog.i18n.DateTimePatterns_fr_GA", "goog.i18n.DateTimePatterns_fr_GF", "goog.i18n.DateTimePatterns_fr_GN", "goog.i18n.DateTimePatterns_fr_GP", "goog.i18n.DateTimePatterns_fr_GQ", "goog.i18n.DateTimePatterns_fr_HT", "goog.i18n.DateTimePatterns_fr_KM", "goog.i18n.DateTimePatterns_fr_LU", "goog.i18n.DateTimePatterns_fr_MA", 
"goog.i18n.DateTimePatterns_fr_MC", "goog.i18n.DateTimePatterns_fr_MF", "goog.i18n.DateTimePatterns_fr_MG", "goog.i18n.DateTimePatterns_fr_ML", "goog.i18n.DateTimePatterns_fr_MQ", "goog.i18n.DateTimePatterns_fr_MR", "goog.i18n.DateTimePatterns_fr_MU", "goog.i18n.DateTimePatterns_fr_NC", "goog.i18n.DateTimePatterns_fr_NE", "goog.i18n.DateTimePatterns_fr_PF", "goog.i18n.DateTimePatterns_fr_PM", "goog.i18n.DateTimePatterns_fr_RE", "goog.i18n.DateTimePatterns_fr_RW", "goog.i18n.DateTimePatterns_fr_SC", 
"goog.i18n.DateTimePatterns_fr_SN", "goog.i18n.DateTimePatterns_fr_SY", "goog.i18n.DateTimePatterns_fr_TD", "goog.i18n.DateTimePatterns_fr_TG", "goog.i18n.DateTimePatterns_fr_TN", "goog.i18n.DateTimePatterns_fr_VU", "goog.i18n.DateTimePatterns_fr_WF", "goog.i18n.DateTimePatterns_fr_YT", "goog.i18n.DateTimePatterns_fur", "goog.i18n.DateTimePatterns_fur_IT", "goog.i18n.DateTimePatterns_fy", "goog.i18n.DateTimePatterns_fy_NL", "goog.i18n.DateTimePatterns_ga_IE", "goog.i18n.DateTimePatterns_gd", "goog.i18n.DateTimePatterns_gd_GB", 
"goog.i18n.DateTimePatterns_gl_ES", "goog.i18n.DateTimePatterns_gsw_CH", "goog.i18n.DateTimePatterns_gsw_FR", "goog.i18n.DateTimePatterns_gsw_LI", "goog.i18n.DateTimePatterns_gu_IN", "goog.i18n.DateTimePatterns_guz", "goog.i18n.DateTimePatterns_guz_KE", "goog.i18n.DateTimePatterns_gv", "goog.i18n.DateTimePatterns_gv_IM", "goog.i18n.DateTimePatterns_ha", "goog.i18n.DateTimePatterns_ha_Latn", "goog.i18n.DateTimePatterns_ha_Latn_GH", "goog.i18n.DateTimePatterns_ha_Latn_NE", "goog.i18n.DateTimePatterns_ha_Latn_NG", 
"goog.i18n.DateTimePatterns_haw_US", "goog.i18n.DateTimePatterns_he_IL", "goog.i18n.DateTimePatterns_hi_IN", "goog.i18n.DateTimePatterns_hr_BA", "goog.i18n.DateTimePatterns_hr_HR", "goog.i18n.DateTimePatterns_hsb", "goog.i18n.DateTimePatterns_hsb_DE", "goog.i18n.DateTimePatterns_hu_HU", "goog.i18n.DateTimePatterns_hy_AM", "goog.i18n.DateTimePatterns_id_ID", "goog.i18n.DateTimePatterns_ig", "goog.i18n.DateTimePatterns_ig_NG", "goog.i18n.DateTimePatterns_ii", "goog.i18n.DateTimePatterns_ii_CN", "goog.i18n.DateTimePatterns_is_IS", 
"goog.i18n.DateTimePatterns_it_CH", "goog.i18n.DateTimePatterns_it_IT", "goog.i18n.DateTimePatterns_it_SM", "goog.i18n.DateTimePatterns_ja_JP", "goog.i18n.DateTimePatterns_jgo", "goog.i18n.DateTimePatterns_jgo_CM", "goog.i18n.DateTimePatterns_jmc", "goog.i18n.DateTimePatterns_jmc_TZ", "goog.i18n.DateTimePatterns_ka_GE", "goog.i18n.DateTimePatterns_kab", "goog.i18n.DateTimePatterns_kab_DZ", "goog.i18n.DateTimePatterns_kam", "goog.i18n.DateTimePatterns_kam_KE", "goog.i18n.DateTimePatterns_kde", "goog.i18n.DateTimePatterns_kde_TZ", 
"goog.i18n.DateTimePatterns_kea", "goog.i18n.DateTimePatterns_kea_CV", "goog.i18n.DateTimePatterns_khq", "goog.i18n.DateTimePatterns_khq_ML", "goog.i18n.DateTimePatterns_ki", "goog.i18n.DateTimePatterns_ki_KE", "goog.i18n.DateTimePatterns_kk_Cyrl", "goog.i18n.DateTimePatterns_kk_Cyrl_KZ", "goog.i18n.DateTimePatterns_kkj", "goog.i18n.DateTimePatterns_kkj_CM", "goog.i18n.DateTimePatterns_kl", "goog.i18n.DateTimePatterns_kl_GL", "goog.i18n.DateTimePatterns_kln", "goog.i18n.DateTimePatterns_kln_KE", 
"goog.i18n.DateTimePatterns_km_KH", "goog.i18n.DateTimePatterns_kn_IN", "goog.i18n.DateTimePatterns_ko_KP", "goog.i18n.DateTimePatterns_ko_KR", "goog.i18n.DateTimePatterns_kok", "goog.i18n.DateTimePatterns_kok_IN", "goog.i18n.DateTimePatterns_ks", "goog.i18n.DateTimePatterns_ks_Arab", "goog.i18n.DateTimePatterns_ks_Arab_IN", "goog.i18n.DateTimePatterns_ksb", "goog.i18n.DateTimePatterns_ksb_TZ", "goog.i18n.DateTimePatterns_ksf", "goog.i18n.DateTimePatterns_ksf_CM", "goog.i18n.DateTimePatterns_ksh", 
"goog.i18n.DateTimePatterns_ksh_DE", "goog.i18n.DateTimePatterns_kw", "goog.i18n.DateTimePatterns_kw_GB", "goog.i18n.DateTimePatterns_ky_Cyrl", "goog.i18n.DateTimePatterns_ky_Cyrl_KG", "goog.i18n.DateTimePatterns_lag", "goog.i18n.DateTimePatterns_lag_TZ", "goog.i18n.DateTimePatterns_lb", "goog.i18n.DateTimePatterns_lb_LU", "goog.i18n.DateTimePatterns_lg", "goog.i18n.DateTimePatterns_lg_UG", "goog.i18n.DateTimePatterns_lkt", "goog.i18n.DateTimePatterns_lkt_US", "goog.i18n.DateTimePatterns_ln_AO", 
"goog.i18n.DateTimePatterns_ln_CD", "goog.i18n.DateTimePatterns_ln_CF", "goog.i18n.DateTimePatterns_ln_CG", "goog.i18n.DateTimePatterns_lo_LA", "goog.i18n.DateTimePatterns_lt_LT", "goog.i18n.DateTimePatterns_lu", "goog.i18n.DateTimePatterns_lu_CD", "goog.i18n.DateTimePatterns_luo", "goog.i18n.DateTimePatterns_luo_KE", "goog.i18n.DateTimePatterns_luy", "goog.i18n.DateTimePatterns_luy_KE", "goog.i18n.DateTimePatterns_lv_LV", "goog.i18n.DateTimePatterns_mas", "goog.i18n.DateTimePatterns_mas_KE", "goog.i18n.DateTimePatterns_mas_TZ", 
"goog.i18n.DateTimePatterns_mer", "goog.i18n.DateTimePatterns_mer_KE", "goog.i18n.DateTimePatterns_mfe", "goog.i18n.DateTimePatterns_mfe_MU", "goog.i18n.DateTimePatterns_mg", "goog.i18n.DateTimePatterns_mg_MG", "goog.i18n.DateTimePatterns_mgh", "goog.i18n.DateTimePatterns_mgh_MZ", "goog.i18n.DateTimePatterns_mgo", "goog.i18n.DateTimePatterns_mgo_CM", "goog.i18n.DateTimePatterns_mk_MK", "goog.i18n.DateTimePatterns_ml_IN", "goog.i18n.DateTimePatterns_mn_Cyrl", "goog.i18n.DateTimePatterns_mn_Cyrl_MN", 
"goog.i18n.DateTimePatterns_mr_IN", "goog.i18n.DateTimePatterns_ms_Latn", "goog.i18n.DateTimePatterns_ms_Latn_BN", "goog.i18n.DateTimePatterns_ms_Latn_MY", "goog.i18n.DateTimePatterns_ms_Latn_SG", "goog.i18n.DateTimePatterns_mt_MT", "goog.i18n.DateTimePatterns_mua", "goog.i18n.DateTimePatterns_mua_CM", "goog.i18n.DateTimePatterns_my_MM", "goog.i18n.DateTimePatterns_naq", "goog.i18n.DateTimePatterns_naq_NA", "goog.i18n.DateTimePatterns_nb_NO", "goog.i18n.DateTimePatterns_nb_SJ", "goog.i18n.DateTimePatterns_nd", 
"goog.i18n.DateTimePatterns_nd_ZW", "goog.i18n.DateTimePatterns_ne_IN", "goog.i18n.DateTimePatterns_ne_NP", "goog.i18n.DateTimePatterns_nl_AW", "goog.i18n.DateTimePatterns_nl_BE", "goog.i18n.DateTimePatterns_nl_BQ", "goog.i18n.DateTimePatterns_nl_CW", "goog.i18n.DateTimePatterns_nl_NL", "goog.i18n.DateTimePatterns_nl_SR", "goog.i18n.DateTimePatterns_nl_SX", "goog.i18n.DateTimePatterns_nmg", "goog.i18n.DateTimePatterns_nmg_CM", "goog.i18n.DateTimePatterns_nn", "goog.i18n.DateTimePatterns_nn_NO", "goog.i18n.DateTimePatterns_nnh", 
"goog.i18n.DateTimePatterns_nnh_CM", "goog.i18n.DateTimePatterns_nus", "goog.i18n.DateTimePatterns_nus_SD", "goog.i18n.DateTimePatterns_nyn", "goog.i18n.DateTimePatterns_nyn_UG", "goog.i18n.DateTimePatterns_om", "goog.i18n.DateTimePatterns_om_ET", "goog.i18n.DateTimePatterns_om_KE", "goog.i18n.DateTimePatterns_or_IN", "goog.i18n.DateTimePatterns_os", "goog.i18n.DateTimePatterns_os_GE", "goog.i18n.DateTimePatterns_os_RU", "goog.i18n.DateTimePatterns_pa_Arab", "goog.i18n.DateTimePatterns_pa_Arab_PK", 
"goog.i18n.DateTimePatterns_pa_Guru", "goog.i18n.DateTimePatterns_pa_Guru_IN", "goog.i18n.DateTimePatterns_pl_PL", "goog.i18n.DateTimePatterns_ps", "goog.i18n.DateTimePatterns_ps_AF", "goog.i18n.DateTimePatterns_pt_AO", "goog.i18n.DateTimePatterns_pt_CV", "goog.i18n.DateTimePatterns_pt_GW", "goog.i18n.DateTimePatterns_pt_MO", "goog.i18n.DateTimePatterns_pt_MZ", "goog.i18n.DateTimePatterns_pt_ST", "goog.i18n.DateTimePatterns_pt_TL", "goog.i18n.DateTimePatterns_qu", "goog.i18n.DateTimePatterns_qu_BO", 
"goog.i18n.DateTimePatterns_qu_EC", "goog.i18n.DateTimePatterns_qu_PE", "goog.i18n.DateTimePatterns_rm", "goog.i18n.DateTimePatterns_rm_CH", "goog.i18n.DateTimePatterns_rn", "goog.i18n.DateTimePatterns_rn_BI", "goog.i18n.DateTimePatterns_ro_MD", "goog.i18n.DateTimePatterns_ro_RO", "goog.i18n.DateTimePatterns_rof", "goog.i18n.DateTimePatterns_rof_TZ", "goog.i18n.DateTimePatterns_ru_BY", "goog.i18n.DateTimePatterns_ru_KG", "goog.i18n.DateTimePatterns_ru_KZ", "goog.i18n.DateTimePatterns_ru_MD", "goog.i18n.DateTimePatterns_ru_RU", 
"goog.i18n.DateTimePatterns_ru_UA", "goog.i18n.DateTimePatterns_rw", "goog.i18n.DateTimePatterns_rw_RW", "goog.i18n.DateTimePatterns_rwk", "goog.i18n.DateTimePatterns_rwk_TZ", "goog.i18n.DateTimePatterns_sah", "goog.i18n.DateTimePatterns_sah_RU", "goog.i18n.DateTimePatterns_saq", "goog.i18n.DateTimePatterns_saq_KE", "goog.i18n.DateTimePatterns_sbp", "goog.i18n.DateTimePatterns_sbp_TZ", "goog.i18n.DateTimePatterns_se", "goog.i18n.DateTimePatterns_se_FI", "goog.i18n.DateTimePatterns_se_NO", "goog.i18n.DateTimePatterns_se_SE", 
"goog.i18n.DateTimePatterns_seh", "goog.i18n.DateTimePatterns_seh_MZ", "goog.i18n.DateTimePatterns_ses", "goog.i18n.DateTimePatterns_ses_ML", "goog.i18n.DateTimePatterns_sg", "goog.i18n.DateTimePatterns_sg_CF", "goog.i18n.DateTimePatterns_shi", "goog.i18n.DateTimePatterns_shi_Latn", "goog.i18n.DateTimePatterns_shi_Latn_MA", "goog.i18n.DateTimePatterns_shi_Tfng", "goog.i18n.DateTimePatterns_shi_Tfng_MA", "goog.i18n.DateTimePatterns_si_LK", "goog.i18n.DateTimePatterns_sk_SK", "goog.i18n.DateTimePatterns_sl_SI", 
"goog.i18n.DateTimePatterns_smn", "goog.i18n.DateTimePatterns_smn_FI", "goog.i18n.DateTimePatterns_sn", "goog.i18n.DateTimePatterns_sn_ZW", "goog.i18n.DateTimePatterns_so", "goog.i18n.DateTimePatterns_so_DJ", "goog.i18n.DateTimePatterns_so_ET", "goog.i18n.DateTimePatterns_so_KE", "goog.i18n.DateTimePatterns_so_SO", "goog.i18n.DateTimePatterns_sq_AL", "goog.i18n.DateTimePatterns_sq_MK", "goog.i18n.DateTimePatterns_sq_XK", "goog.i18n.DateTimePatterns_sr_Cyrl", "goog.i18n.DateTimePatterns_sr_Cyrl_BA", 
"goog.i18n.DateTimePatterns_sr_Cyrl_ME", "goog.i18n.DateTimePatterns_sr_Cyrl_RS", "goog.i18n.DateTimePatterns_sr_Cyrl_XK", "goog.i18n.DateTimePatterns_sr_Latn", "goog.i18n.DateTimePatterns_sr_Latn_BA", "goog.i18n.DateTimePatterns_sr_Latn_ME", "goog.i18n.DateTimePatterns_sr_Latn_RS", "goog.i18n.DateTimePatterns_sr_Latn_XK", "goog.i18n.DateTimePatterns_sv_AX", "goog.i18n.DateTimePatterns_sv_FI", "goog.i18n.DateTimePatterns_sv_SE", "goog.i18n.DateTimePatterns_sw_CD", "goog.i18n.DateTimePatterns_sw_KE", 
"goog.i18n.DateTimePatterns_sw_TZ", "goog.i18n.DateTimePatterns_sw_UG", "goog.i18n.DateTimePatterns_ta_IN", "goog.i18n.DateTimePatterns_ta_LK", "goog.i18n.DateTimePatterns_ta_MY", "goog.i18n.DateTimePatterns_ta_SG", "goog.i18n.DateTimePatterns_te_IN", "goog.i18n.DateTimePatterns_teo", "goog.i18n.DateTimePatterns_teo_KE", "goog.i18n.DateTimePatterns_teo_UG", "goog.i18n.DateTimePatterns_th_TH", "goog.i18n.DateTimePatterns_ti", "goog.i18n.DateTimePatterns_ti_ER", "goog.i18n.DateTimePatterns_ti_ET", 
"goog.i18n.DateTimePatterns_to", "goog.i18n.DateTimePatterns_to_TO", "goog.i18n.DateTimePatterns_tr_CY", "goog.i18n.DateTimePatterns_tr_TR", "goog.i18n.DateTimePatterns_twq", "goog.i18n.DateTimePatterns_twq_NE", "goog.i18n.DateTimePatterns_tzm", "goog.i18n.DateTimePatterns_tzm_Latn", "goog.i18n.DateTimePatterns_tzm_Latn_MA", "goog.i18n.DateTimePatterns_ug", "goog.i18n.DateTimePatterns_ug_Arab", "goog.i18n.DateTimePatterns_ug_Arab_CN", "goog.i18n.DateTimePatterns_uk_UA", "goog.i18n.DateTimePatterns_ur_IN", 
"goog.i18n.DateTimePatterns_ur_PK", "goog.i18n.DateTimePatterns_uz_Arab", "goog.i18n.DateTimePatterns_uz_Arab_AF", "goog.i18n.DateTimePatterns_uz_Cyrl", "goog.i18n.DateTimePatterns_uz_Cyrl_UZ", "goog.i18n.DateTimePatterns_uz_Latn", "goog.i18n.DateTimePatterns_uz_Latn_UZ", "goog.i18n.DateTimePatterns_vai", "goog.i18n.DateTimePatterns_vai_Latn", "goog.i18n.DateTimePatterns_vai_Latn_LR", "goog.i18n.DateTimePatterns_vai_Vaii", "goog.i18n.DateTimePatterns_vai_Vaii_LR", "goog.i18n.DateTimePatterns_vi_VN", 
"goog.i18n.DateTimePatterns_vun", "goog.i18n.DateTimePatterns_vun_TZ", "goog.i18n.DateTimePatterns_wae", "goog.i18n.DateTimePatterns_wae_CH", "goog.i18n.DateTimePatterns_xog", "goog.i18n.DateTimePatterns_xog_UG", "goog.i18n.DateTimePatterns_yav", "goog.i18n.DateTimePatterns_yav_CM", "goog.i18n.DateTimePatterns_yi", "goog.i18n.DateTimePatterns_yi_001", "goog.i18n.DateTimePatterns_yo", "goog.i18n.DateTimePatterns_yo_BJ", "goog.i18n.DateTimePatterns_yo_NG", "goog.i18n.DateTimePatterns_zgh", "goog.i18n.DateTimePatterns_zgh_MA", 
"goog.i18n.DateTimePatterns_zh_Hans", "goog.i18n.DateTimePatterns_zh_Hans_CN", "goog.i18n.DateTimePatterns_zh_Hans_HK", "goog.i18n.DateTimePatterns_zh_Hans_MO", "goog.i18n.DateTimePatterns_zh_Hans_SG", "goog.i18n.DateTimePatterns_zh_Hant", "goog.i18n.DateTimePatterns_zh_Hant_HK", "goog.i18n.DateTimePatterns_zh_Hant_MO", "goog.i18n.DateTimePatterns_zh_Hant_TW", "goog.i18n.DateTimePatterns_zu_ZA"], ["goog.i18n.DateTimePatterns"], false);
goog.addDependency("i18n/datetimesymbols.js", ["goog.i18n.DateTimeSymbols", "goog.i18n.DateTimeSymbols_af", "goog.i18n.DateTimeSymbols_am", "goog.i18n.DateTimeSymbols_ar", "goog.i18n.DateTimeSymbols_az", "goog.i18n.DateTimeSymbols_bg", "goog.i18n.DateTimeSymbols_bn", "goog.i18n.DateTimeSymbols_br", "goog.i18n.DateTimeSymbols_ca", "goog.i18n.DateTimeSymbols_chr", "goog.i18n.DateTimeSymbols_cs", "goog.i18n.DateTimeSymbols_cy", "goog.i18n.DateTimeSymbols_da", "goog.i18n.DateTimeSymbols_de", "goog.i18n.DateTimeSymbols_de_AT", 
"goog.i18n.DateTimeSymbols_de_CH", "goog.i18n.DateTimeSymbols_el", "goog.i18n.DateTimeSymbols_en", "goog.i18n.DateTimeSymbols_en_AU", "goog.i18n.DateTimeSymbols_en_GB", "goog.i18n.DateTimeSymbols_en_IE", "goog.i18n.DateTimeSymbols_en_IN", "goog.i18n.DateTimeSymbols_en_ISO", "goog.i18n.DateTimeSymbols_en_SG", "goog.i18n.DateTimeSymbols_en_US", "goog.i18n.DateTimeSymbols_en_ZA", "goog.i18n.DateTimeSymbols_es", "goog.i18n.DateTimeSymbols_es_419", "goog.i18n.DateTimeSymbols_es_ES", "goog.i18n.DateTimeSymbols_et", 
"goog.i18n.DateTimeSymbols_eu", "goog.i18n.DateTimeSymbols_fa", "goog.i18n.DateTimeSymbols_fi", "goog.i18n.DateTimeSymbols_fil", "goog.i18n.DateTimeSymbols_fr", "goog.i18n.DateTimeSymbols_fr_CA", "goog.i18n.DateTimeSymbols_ga", "goog.i18n.DateTimeSymbols_gl", "goog.i18n.DateTimeSymbols_gsw", "goog.i18n.DateTimeSymbols_gu", "goog.i18n.DateTimeSymbols_haw", "goog.i18n.DateTimeSymbols_he", "goog.i18n.DateTimeSymbols_hi", "goog.i18n.DateTimeSymbols_hr", "goog.i18n.DateTimeSymbols_hu", "goog.i18n.DateTimeSymbols_hy", 
"goog.i18n.DateTimeSymbols_id", "goog.i18n.DateTimeSymbols_in", "goog.i18n.DateTimeSymbols_is", "goog.i18n.DateTimeSymbols_it", "goog.i18n.DateTimeSymbols_iw", "goog.i18n.DateTimeSymbols_ja", "goog.i18n.DateTimeSymbols_ka", "goog.i18n.DateTimeSymbols_kk", "goog.i18n.DateTimeSymbols_km", "goog.i18n.DateTimeSymbols_kn", "goog.i18n.DateTimeSymbols_ko", "goog.i18n.DateTimeSymbols_ky", "goog.i18n.DateTimeSymbols_ln", "goog.i18n.DateTimeSymbols_lo", "goog.i18n.DateTimeSymbols_lt", "goog.i18n.DateTimeSymbols_lv", 
"goog.i18n.DateTimeSymbols_mk", "goog.i18n.DateTimeSymbols_ml", "goog.i18n.DateTimeSymbols_mn", "goog.i18n.DateTimeSymbols_mr", "goog.i18n.DateTimeSymbols_ms", "goog.i18n.DateTimeSymbols_mt", "goog.i18n.DateTimeSymbols_my", "goog.i18n.DateTimeSymbols_nb", "goog.i18n.DateTimeSymbols_ne", "goog.i18n.DateTimeSymbols_nl", "goog.i18n.DateTimeSymbols_no", "goog.i18n.DateTimeSymbols_no_NO", "goog.i18n.DateTimeSymbols_or", "goog.i18n.DateTimeSymbols_pa", "goog.i18n.DateTimeSymbols_pl", "goog.i18n.DateTimeSymbols_pt", 
"goog.i18n.DateTimeSymbols_pt_BR", "goog.i18n.DateTimeSymbols_pt_PT", "goog.i18n.DateTimeSymbols_ro", "goog.i18n.DateTimeSymbols_ru", "goog.i18n.DateTimeSymbols_si", "goog.i18n.DateTimeSymbols_sk", "goog.i18n.DateTimeSymbols_sl", "goog.i18n.DateTimeSymbols_sq", "goog.i18n.DateTimeSymbols_sr", "goog.i18n.DateTimeSymbols_sv", "goog.i18n.DateTimeSymbols_sw", "goog.i18n.DateTimeSymbols_ta", "goog.i18n.DateTimeSymbols_te", "goog.i18n.DateTimeSymbols_th", "goog.i18n.DateTimeSymbols_tl", "goog.i18n.DateTimeSymbols_tr", 
"goog.i18n.DateTimeSymbols_uk", "goog.i18n.DateTimeSymbols_ur", "goog.i18n.DateTimeSymbols_uz", "goog.i18n.DateTimeSymbols_vi", "goog.i18n.DateTimeSymbols_zh", "goog.i18n.DateTimeSymbols_zh_CN", "goog.i18n.DateTimeSymbols_zh_HK", "goog.i18n.DateTimeSymbols_zh_TW", "goog.i18n.DateTimeSymbols_zu"], [], false);
goog.addDependency("i18n/datetimesymbolsext.js", ["goog.i18n.DateTimeSymbolsExt", "goog.i18n.DateTimeSymbols_af_NA", "goog.i18n.DateTimeSymbols_af_ZA", "goog.i18n.DateTimeSymbols_agq", "goog.i18n.DateTimeSymbols_agq_CM", "goog.i18n.DateTimeSymbols_ak", "goog.i18n.DateTimeSymbols_ak_GH", "goog.i18n.DateTimeSymbols_am_ET", "goog.i18n.DateTimeSymbols_ar_001", "goog.i18n.DateTimeSymbols_ar_AE", "goog.i18n.DateTimeSymbols_ar_BH", "goog.i18n.DateTimeSymbols_ar_DJ", "goog.i18n.DateTimeSymbols_ar_DZ", "goog.i18n.DateTimeSymbols_ar_EG", 
"goog.i18n.DateTimeSymbols_ar_EH", "goog.i18n.DateTimeSymbols_ar_ER", "goog.i18n.DateTimeSymbols_ar_IL", "goog.i18n.DateTimeSymbols_ar_IQ", "goog.i18n.DateTimeSymbols_ar_JO", "goog.i18n.DateTimeSymbols_ar_KM", "goog.i18n.DateTimeSymbols_ar_KW", "goog.i18n.DateTimeSymbols_ar_LB", "goog.i18n.DateTimeSymbols_ar_LY", "goog.i18n.DateTimeSymbols_ar_MA", "goog.i18n.DateTimeSymbols_ar_MR", "goog.i18n.DateTimeSymbols_ar_OM", "goog.i18n.DateTimeSymbols_ar_PS", "goog.i18n.DateTimeSymbols_ar_QA", "goog.i18n.DateTimeSymbols_ar_SA", 
"goog.i18n.DateTimeSymbols_ar_SD", "goog.i18n.DateTimeSymbols_ar_SO", "goog.i18n.DateTimeSymbols_ar_SS", "goog.i18n.DateTimeSymbols_ar_SY", "goog.i18n.DateTimeSymbols_ar_TD", "goog.i18n.DateTimeSymbols_ar_TN", "goog.i18n.DateTimeSymbols_ar_YE", "goog.i18n.DateTimeSymbols_as", "goog.i18n.DateTimeSymbols_as_IN", "goog.i18n.DateTimeSymbols_asa", "goog.i18n.DateTimeSymbols_asa_TZ", "goog.i18n.DateTimeSymbols_ast", "goog.i18n.DateTimeSymbols_ast_ES", "goog.i18n.DateTimeSymbols_az_Cyrl", "goog.i18n.DateTimeSymbols_az_Cyrl_AZ", 
"goog.i18n.DateTimeSymbols_az_Latn", "goog.i18n.DateTimeSymbols_az_Latn_AZ", "goog.i18n.DateTimeSymbols_bas", "goog.i18n.DateTimeSymbols_bas_CM", "goog.i18n.DateTimeSymbols_be", "goog.i18n.DateTimeSymbols_be_BY", "goog.i18n.DateTimeSymbols_bem", "goog.i18n.DateTimeSymbols_bem_ZM", "goog.i18n.DateTimeSymbols_bez", "goog.i18n.DateTimeSymbols_bez_TZ", "goog.i18n.DateTimeSymbols_bg_BG", "goog.i18n.DateTimeSymbols_bm", "goog.i18n.DateTimeSymbols_bm_Latn", "goog.i18n.DateTimeSymbols_bm_Latn_ML", "goog.i18n.DateTimeSymbols_bn_BD", 
"goog.i18n.DateTimeSymbols_bn_IN", "goog.i18n.DateTimeSymbols_bo", "goog.i18n.DateTimeSymbols_bo_CN", "goog.i18n.DateTimeSymbols_bo_IN", "goog.i18n.DateTimeSymbols_br_FR", "goog.i18n.DateTimeSymbols_brx", "goog.i18n.DateTimeSymbols_brx_IN", "goog.i18n.DateTimeSymbols_bs", "goog.i18n.DateTimeSymbols_bs_Cyrl", "goog.i18n.DateTimeSymbols_bs_Cyrl_BA", "goog.i18n.DateTimeSymbols_bs_Latn", "goog.i18n.DateTimeSymbols_bs_Latn_BA", "goog.i18n.DateTimeSymbols_ca_AD", "goog.i18n.DateTimeSymbols_ca_ES", "goog.i18n.DateTimeSymbols_ca_ES_VALENCIA", 
"goog.i18n.DateTimeSymbols_ca_FR", "goog.i18n.DateTimeSymbols_ca_IT", "goog.i18n.DateTimeSymbols_cgg", "goog.i18n.DateTimeSymbols_cgg_UG", "goog.i18n.DateTimeSymbols_chr_US", "goog.i18n.DateTimeSymbols_ckb", "goog.i18n.DateTimeSymbols_ckb_Arab", "goog.i18n.DateTimeSymbols_ckb_Arab_IQ", "goog.i18n.DateTimeSymbols_ckb_Arab_IR", "goog.i18n.DateTimeSymbols_ckb_IQ", "goog.i18n.DateTimeSymbols_ckb_IR", "goog.i18n.DateTimeSymbols_ckb_Latn", "goog.i18n.DateTimeSymbols_ckb_Latn_IQ", "goog.i18n.DateTimeSymbols_cs_CZ", 
"goog.i18n.DateTimeSymbols_cy_GB", "goog.i18n.DateTimeSymbols_da_DK", "goog.i18n.DateTimeSymbols_da_GL", "goog.i18n.DateTimeSymbols_dav", "goog.i18n.DateTimeSymbols_dav_KE", "goog.i18n.DateTimeSymbols_de_BE", "goog.i18n.DateTimeSymbols_de_DE", "goog.i18n.DateTimeSymbols_de_LI", "goog.i18n.DateTimeSymbols_de_LU", "goog.i18n.DateTimeSymbols_dje", "goog.i18n.DateTimeSymbols_dje_NE", "goog.i18n.DateTimeSymbols_dsb", "goog.i18n.DateTimeSymbols_dsb_DE", "goog.i18n.DateTimeSymbols_dua", "goog.i18n.DateTimeSymbols_dua_CM", 
"goog.i18n.DateTimeSymbols_dyo", "goog.i18n.DateTimeSymbols_dyo_SN", "goog.i18n.DateTimeSymbols_dz", "goog.i18n.DateTimeSymbols_dz_BT", "goog.i18n.DateTimeSymbols_ebu", "goog.i18n.DateTimeSymbols_ebu_KE", "goog.i18n.DateTimeSymbols_ee", "goog.i18n.DateTimeSymbols_ee_GH", "goog.i18n.DateTimeSymbols_ee_TG", "goog.i18n.DateTimeSymbols_el_CY", "goog.i18n.DateTimeSymbols_el_GR", "goog.i18n.DateTimeSymbols_en_001", "goog.i18n.DateTimeSymbols_en_150", "goog.i18n.DateTimeSymbols_en_AG", "goog.i18n.DateTimeSymbols_en_AI", 
"goog.i18n.DateTimeSymbols_en_AS", "goog.i18n.DateTimeSymbols_en_BB", "goog.i18n.DateTimeSymbols_en_BE", "goog.i18n.DateTimeSymbols_en_BM", "goog.i18n.DateTimeSymbols_en_BS", "goog.i18n.DateTimeSymbols_en_BW", "goog.i18n.DateTimeSymbols_en_BZ", "goog.i18n.DateTimeSymbols_en_CA", "goog.i18n.DateTimeSymbols_en_CC", "goog.i18n.DateTimeSymbols_en_CK", "goog.i18n.DateTimeSymbols_en_CM", "goog.i18n.DateTimeSymbols_en_CX", "goog.i18n.DateTimeSymbols_en_DG", "goog.i18n.DateTimeSymbols_en_DM", "goog.i18n.DateTimeSymbols_en_ER", 
"goog.i18n.DateTimeSymbols_en_FJ", "goog.i18n.DateTimeSymbols_en_FK", "goog.i18n.DateTimeSymbols_en_FM", "goog.i18n.DateTimeSymbols_en_GD", "goog.i18n.DateTimeSymbols_en_GG", "goog.i18n.DateTimeSymbols_en_GH", "goog.i18n.DateTimeSymbols_en_GI", "goog.i18n.DateTimeSymbols_en_GM", "goog.i18n.DateTimeSymbols_en_GU", "goog.i18n.DateTimeSymbols_en_GY", "goog.i18n.DateTimeSymbols_en_HK", "goog.i18n.DateTimeSymbols_en_IM", "goog.i18n.DateTimeSymbols_en_IO", "goog.i18n.DateTimeSymbols_en_JE", "goog.i18n.DateTimeSymbols_en_JM", 
"goog.i18n.DateTimeSymbols_en_KE", "goog.i18n.DateTimeSymbols_en_KI", "goog.i18n.DateTimeSymbols_en_KN", "goog.i18n.DateTimeSymbols_en_KY", "goog.i18n.DateTimeSymbols_en_LC", "goog.i18n.DateTimeSymbols_en_LR", "goog.i18n.DateTimeSymbols_en_LS", "goog.i18n.DateTimeSymbols_en_MG", "goog.i18n.DateTimeSymbols_en_MH", "goog.i18n.DateTimeSymbols_en_MO", "goog.i18n.DateTimeSymbols_en_MP", "goog.i18n.DateTimeSymbols_en_MS", "goog.i18n.DateTimeSymbols_en_MT", "goog.i18n.DateTimeSymbols_en_MU", "goog.i18n.DateTimeSymbols_en_MW", 
"goog.i18n.DateTimeSymbols_en_MY", "goog.i18n.DateTimeSymbols_en_NA", "goog.i18n.DateTimeSymbols_en_NF", "goog.i18n.DateTimeSymbols_en_NG", "goog.i18n.DateTimeSymbols_en_NR", "goog.i18n.DateTimeSymbols_en_NU", "goog.i18n.DateTimeSymbols_en_NZ", "goog.i18n.DateTimeSymbols_en_PG", "goog.i18n.DateTimeSymbols_en_PH", "goog.i18n.DateTimeSymbols_en_PK", "goog.i18n.DateTimeSymbols_en_PN", "goog.i18n.DateTimeSymbols_en_PR", "goog.i18n.DateTimeSymbols_en_PW", "goog.i18n.DateTimeSymbols_en_RW", "goog.i18n.DateTimeSymbols_en_SB", 
"goog.i18n.DateTimeSymbols_en_SC", "goog.i18n.DateTimeSymbols_en_SD", "goog.i18n.DateTimeSymbols_en_SH", "goog.i18n.DateTimeSymbols_en_SL", "goog.i18n.DateTimeSymbols_en_SS", "goog.i18n.DateTimeSymbols_en_SX", "goog.i18n.DateTimeSymbols_en_SZ", "goog.i18n.DateTimeSymbols_en_TC", "goog.i18n.DateTimeSymbols_en_TK", "goog.i18n.DateTimeSymbols_en_TO", "goog.i18n.DateTimeSymbols_en_TT", "goog.i18n.DateTimeSymbols_en_TV", "goog.i18n.DateTimeSymbols_en_TZ", "goog.i18n.DateTimeSymbols_en_UG", "goog.i18n.DateTimeSymbols_en_UM", 
"goog.i18n.DateTimeSymbols_en_VC", "goog.i18n.DateTimeSymbols_en_VG", "goog.i18n.DateTimeSymbols_en_VI", "goog.i18n.DateTimeSymbols_en_VU", "goog.i18n.DateTimeSymbols_en_WS", "goog.i18n.DateTimeSymbols_en_ZM", "goog.i18n.DateTimeSymbols_en_ZW", "goog.i18n.DateTimeSymbols_eo", "goog.i18n.DateTimeSymbols_eo_001", "goog.i18n.DateTimeSymbols_es_AR", "goog.i18n.DateTimeSymbols_es_BO", "goog.i18n.DateTimeSymbols_es_CL", "goog.i18n.DateTimeSymbols_es_CO", "goog.i18n.DateTimeSymbols_es_CR", "goog.i18n.DateTimeSymbols_es_CU", 
"goog.i18n.DateTimeSymbols_es_DO", "goog.i18n.DateTimeSymbols_es_EA", "goog.i18n.DateTimeSymbols_es_EC", "goog.i18n.DateTimeSymbols_es_GQ", "goog.i18n.DateTimeSymbols_es_GT", "goog.i18n.DateTimeSymbols_es_HN", "goog.i18n.DateTimeSymbols_es_IC", "goog.i18n.DateTimeSymbols_es_MX", "goog.i18n.DateTimeSymbols_es_NI", "goog.i18n.DateTimeSymbols_es_PA", "goog.i18n.DateTimeSymbols_es_PE", "goog.i18n.DateTimeSymbols_es_PH", "goog.i18n.DateTimeSymbols_es_PR", "goog.i18n.DateTimeSymbols_es_PY", "goog.i18n.DateTimeSymbols_es_SV", 
"goog.i18n.DateTimeSymbols_es_US", "goog.i18n.DateTimeSymbols_es_UY", "goog.i18n.DateTimeSymbols_es_VE", "goog.i18n.DateTimeSymbols_et_EE", "goog.i18n.DateTimeSymbols_eu_ES", "goog.i18n.DateTimeSymbols_ewo", "goog.i18n.DateTimeSymbols_ewo_CM", "goog.i18n.DateTimeSymbols_fa_AF", "goog.i18n.DateTimeSymbols_fa_IR", "goog.i18n.DateTimeSymbols_ff", "goog.i18n.DateTimeSymbols_ff_CM", "goog.i18n.DateTimeSymbols_ff_GN", "goog.i18n.DateTimeSymbols_ff_MR", "goog.i18n.DateTimeSymbols_ff_SN", "goog.i18n.DateTimeSymbols_fi_FI", 
"goog.i18n.DateTimeSymbols_fil_PH", "goog.i18n.DateTimeSymbols_fo", "goog.i18n.DateTimeSymbols_fo_FO", "goog.i18n.DateTimeSymbols_fr_BE", "goog.i18n.DateTimeSymbols_fr_BF", "goog.i18n.DateTimeSymbols_fr_BI", "goog.i18n.DateTimeSymbols_fr_BJ", "goog.i18n.DateTimeSymbols_fr_BL", "goog.i18n.DateTimeSymbols_fr_CD", "goog.i18n.DateTimeSymbols_fr_CF", "goog.i18n.DateTimeSymbols_fr_CG", "goog.i18n.DateTimeSymbols_fr_CH", "goog.i18n.DateTimeSymbols_fr_CI", "goog.i18n.DateTimeSymbols_fr_CM", "goog.i18n.DateTimeSymbols_fr_DJ", 
"goog.i18n.DateTimeSymbols_fr_DZ", "goog.i18n.DateTimeSymbols_fr_FR", "goog.i18n.DateTimeSymbols_fr_GA", "goog.i18n.DateTimeSymbols_fr_GF", "goog.i18n.DateTimeSymbols_fr_GN", "goog.i18n.DateTimeSymbols_fr_GP", "goog.i18n.DateTimeSymbols_fr_GQ", "goog.i18n.DateTimeSymbols_fr_HT", "goog.i18n.DateTimeSymbols_fr_KM", "goog.i18n.DateTimeSymbols_fr_LU", "goog.i18n.DateTimeSymbols_fr_MA", "goog.i18n.DateTimeSymbols_fr_MC", "goog.i18n.DateTimeSymbols_fr_MF", "goog.i18n.DateTimeSymbols_fr_MG", "goog.i18n.DateTimeSymbols_fr_ML", 
"goog.i18n.DateTimeSymbols_fr_MQ", "goog.i18n.DateTimeSymbols_fr_MR", "goog.i18n.DateTimeSymbols_fr_MU", "goog.i18n.DateTimeSymbols_fr_NC", "goog.i18n.DateTimeSymbols_fr_NE", "goog.i18n.DateTimeSymbols_fr_PF", "goog.i18n.DateTimeSymbols_fr_PM", "goog.i18n.DateTimeSymbols_fr_RE", "goog.i18n.DateTimeSymbols_fr_RW", "goog.i18n.DateTimeSymbols_fr_SC", "goog.i18n.DateTimeSymbols_fr_SN", "goog.i18n.DateTimeSymbols_fr_SY", "goog.i18n.DateTimeSymbols_fr_TD", "goog.i18n.DateTimeSymbols_fr_TG", "goog.i18n.DateTimeSymbols_fr_TN", 
"goog.i18n.DateTimeSymbols_fr_VU", "goog.i18n.DateTimeSymbols_fr_WF", "goog.i18n.DateTimeSymbols_fr_YT", "goog.i18n.DateTimeSymbols_fur", "goog.i18n.DateTimeSymbols_fur_IT", "goog.i18n.DateTimeSymbols_fy", "goog.i18n.DateTimeSymbols_fy_NL", "goog.i18n.DateTimeSymbols_ga_IE", "goog.i18n.DateTimeSymbols_gd", "goog.i18n.DateTimeSymbols_gd_GB", "goog.i18n.DateTimeSymbols_gl_ES", "goog.i18n.DateTimeSymbols_gsw_CH", "goog.i18n.DateTimeSymbols_gsw_FR", "goog.i18n.DateTimeSymbols_gsw_LI", "goog.i18n.DateTimeSymbols_gu_IN", 
"goog.i18n.DateTimeSymbols_guz", "goog.i18n.DateTimeSymbols_guz_KE", "goog.i18n.DateTimeSymbols_gv", "goog.i18n.DateTimeSymbols_gv_IM", "goog.i18n.DateTimeSymbols_ha", "goog.i18n.DateTimeSymbols_ha_Latn", "goog.i18n.DateTimeSymbols_ha_Latn_GH", "goog.i18n.DateTimeSymbols_ha_Latn_NE", "goog.i18n.DateTimeSymbols_ha_Latn_NG", "goog.i18n.DateTimeSymbols_haw_US", "goog.i18n.DateTimeSymbols_he_IL", "goog.i18n.DateTimeSymbols_hi_IN", "goog.i18n.DateTimeSymbols_hr_BA", "goog.i18n.DateTimeSymbols_hr_HR", 
"goog.i18n.DateTimeSymbols_hsb", "goog.i18n.DateTimeSymbols_hsb_DE", "goog.i18n.DateTimeSymbols_hu_HU", "goog.i18n.DateTimeSymbols_hy_AM", "goog.i18n.DateTimeSymbols_id_ID", "goog.i18n.DateTimeSymbols_ig", "goog.i18n.DateTimeSymbols_ig_NG", "goog.i18n.DateTimeSymbols_ii", "goog.i18n.DateTimeSymbols_ii_CN", "goog.i18n.DateTimeSymbols_is_IS", "goog.i18n.DateTimeSymbols_it_CH", "goog.i18n.DateTimeSymbols_it_IT", "goog.i18n.DateTimeSymbols_it_SM", "goog.i18n.DateTimeSymbols_ja_JP", "goog.i18n.DateTimeSymbols_jgo", 
"goog.i18n.DateTimeSymbols_jgo_CM", "goog.i18n.DateTimeSymbols_jmc", "goog.i18n.DateTimeSymbols_jmc_TZ", "goog.i18n.DateTimeSymbols_ka_GE", "goog.i18n.DateTimeSymbols_kab", "goog.i18n.DateTimeSymbols_kab_DZ", "goog.i18n.DateTimeSymbols_kam", "goog.i18n.DateTimeSymbols_kam_KE", "goog.i18n.DateTimeSymbols_kde", "goog.i18n.DateTimeSymbols_kde_TZ", "goog.i18n.DateTimeSymbols_kea", "goog.i18n.DateTimeSymbols_kea_CV", "goog.i18n.DateTimeSymbols_khq", "goog.i18n.DateTimeSymbols_khq_ML", "goog.i18n.DateTimeSymbols_ki", 
"goog.i18n.DateTimeSymbols_ki_KE", "goog.i18n.DateTimeSymbols_kk_Cyrl", "goog.i18n.DateTimeSymbols_kk_Cyrl_KZ", "goog.i18n.DateTimeSymbols_kkj", "goog.i18n.DateTimeSymbols_kkj_CM", "goog.i18n.DateTimeSymbols_kl", "goog.i18n.DateTimeSymbols_kl_GL", "goog.i18n.DateTimeSymbols_kln", "goog.i18n.DateTimeSymbols_kln_KE", "goog.i18n.DateTimeSymbols_km_KH", "goog.i18n.DateTimeSymbols_kn_IN", "goog.i18n.DateTimeSymbols_ko_KP", "goog.i18n.DateTimeSymbols_ko_KR", "goog.i18n.DateTimeSymbols_kok", "goog.i18n.DateTimeSymbols_kok_IN", 
"goog.i18n.DateTimeSymbols_ks", "goog.i18n.DateTimeSymbols_ks_Arab", "goog.i18n.DateTimeSymbols_ks_Arab_IN", "goog.i18n.DateTimeSymbols_ksb", "goog.i18n.DateTimeSymbols_ksb_TZ", "goog.i18n.DateTimeSymbols_ksf", "goog.i18n.DateTimeSymbols_ksf_CM", "goog.i18n.DateTimeSymbols_ksh", "goog.i18n.DateTimeSymbols_ksh_DE", "goog.i18n.DateTimeSymbols_kw", "goog.i18n.DateTimeSymbols_kw_GB", "goog.i18n.DateTimeSymbols_ky_Cyrl", "goog.i18n.DateTimeSymbols_ky_Cyrl_KG", "goog.i18n.DateTimeSymbols_lag", "goog.i18n.DateTimeSymbols_lag_TZ", 
"goog.i18n.DateTimeSymbols_lb", "goog.i18n.DateTimeSymbols_lb_LU", "goog.i18n.DateTimeSymbols_lg", "goog.i18n.DateTimeSymbols_lg_UG", "goog.i18n.DateTimeSymbols_lkt", "goog.i18n.DateTimeSymbols_lkt_US", "goog.i18n.DateTimeSymbols_ln_AO", "goog.i18n.DateTimeSymbols_ln_CD", "goog.i18n.DateTimeSymbols_ln_CF", "goog.i18n.DateTimeSymbols_ln_CG", "goog.i18n.DateTimeSymbols_lo_LA", "goog.i18n.DateTimeSymbols_lt_LT", "goog.i18n.DateTimeSymbols_lu", "goog.i18n.DateTimeSymbols_lu_CD", "goog.i18n.DateTimeSymbols_luo", 
"goog.i18n.DateTimeSymbols_luo_KE", "goog.i18n.DateTimeSymbols_luy", "goog.i18n.DateTimeSymbols_luy_KE", "goog.i18n.DateTimeSymbols_lv_LV", "goog.i18n.DateTimeSymbols_mas", "goog.i18n.DateTimeSymbols_mas_KE", "goog.i18n.DateTimeSymbols_mas_TZ", "goog.i18n.DateTimeSymbols_mer", "goog.i18n.DateTimeSymbols_mer_KE", "goog.i18n.DateTimeSymbols_mfe", "goog.i18n.DateTimeSymbols_mfe_MU", "goog.i18n.DateTimeSymbols_mg", "goog.i18n.DateTimeSymbols_mg_MG", "goog.i18n.DateTimeSymbols_mgh", "goog.i18n.DateTimeSymbols_mgh_MZ", 
"goog.i18n.DateTimeSymbols_mgo", "goog.i18n.DateTimeSymbols_mgo_CM", "goog.i18n.DateTimeSymbols_mk_MK", "goog.i18n.DateTimeSymbols_ml_IN", "goog.i18n.DateTimeSymbols_mn_Cyrl", "goog.i18n.DateTimeSymbols_mn_Cyrl_MN", "goog.i18n.DateTimeSymbols_mr_IN", "goog.i18n.DateTimeSymbols_ms_Latn", "goog.i18n.DateTimeSymbols_ms_Latn_BN", "goog.i18n.DateTimeSymbols_ms_Latn_MY", "goog.i18n.DateTimeSymbols_ms_Latn_SG", "goog.i18n.DateTimeSymbols_mt_MT", "goog.i18n.DateTimeSymbols_mua", "goog.i18n.DateTimeSymbols_mua_CM", 
"goog.i18n.DateTimeSymbols_my_MM", "goog.i18n.DateTimeSymbols_naq", "goog.i18n.DateTimeSymbols_naq_NA", "goog.i18n.DateTimeSymbols_nb_NO", "goog.i18n.DateTimeSymbols_nb_SJ", "goog.i18n.DateTimeSymbols_nd", "goog.i18n.DateTimeSymbols_nd_ZW", "goog.i18n.DateTimeSymbols_ne_IN", "goog.i18n.DateTimeSymbols_ne_NP", "goog.i18n.DateTimeSymbols_nl_AW", "goog.i18n.DateTimeSymbols_nl_BE", "goog.i18n.DateTimeSymbols_nl_BQ", "goog.i18n.DateTimeSymbols_nl_CW", "goog.i18n.DateTimeSymbols_nl_NL", "goog.i18n.DateTimeSymbols_nl_SR", 
"goog.i18n.DateTimeSymbols_nl_SX", "goog.i18n.DateTimeSymbols_nmg", "goog.i18n.DateTimeSymbols_nmg_CM", "goog.i18n.DateTimeSymbols_nn", "goog.i18n.DateTimeSymbols_nn_NO", "goog.i18n.DateTimeSymbols_nnh", "goog.i18n.DateTimeSymbols_nnh_CM", "goog.i18n.DateTimeSymbols_nus", "goog.i18n.DateTimeSymbols_nus_SD", "goog.i18n.DateTimeSymbols_nyn", "goog.i18n.DateTimeSymbols_nyn_UG", "goog.i18n.DateTimeSymbols_om", "goog.i18n.DateTimeSymbols_om_ET", "goog.i18n.DateTimeSymbols_om_KE", "goog.i18n.DateTimeSymbols_or_IN", 
"goog.i18n.DateTimeSymbols_os", "goog.i18n.DateTimeSymbols_os_GE", "goog.i18n.DateTimeSymbols_os_RU", "goog.i18n.DateTimeSymbols_pa_Arab", "goog.i18n.DateTimeSymbols_pa_Arab_PK", "goog.i18n.DateTimeSymbols_pa_Guru", "goog.i18n.DateTimeSymbols_pa_Guru_IN", "goog.i18n.DateTimeSymbols_pl_PL", "goog.i18n.DateTimeSymbols_ps", "goog.i18n.DateTimeSymbols_ps_AF", "goog.i18n.DateTimeSymbols_pt_AO", "goog.i18n.DateTimeSymbols_pt_CV", "goog.i18n.DateTimeSymbols_pt_GW", "goog.i18n.DateTimeSymbols_pt_MO", "goog.i18n.DateTimeSymbols_pt_MZ", 
"goog.i18n.DateTimeSymbols_pt_ST", "goog.i18n.DateTimeSymbols_pt_TL", "goog.i18n.DateTimeSymbols_qu", "goog.i18n.DateTimeSymbols_qu_BO", "goog.i18n.DateTimeSymbols_qu_EC", "goog.i18n.DateTimeSymbols_qu_PE", "goog.i18n.DateTimeSymbols_rm", "goog.i18n.DateTimeSymbols_rm_CH", "goog.i18n.DateTimeSymbols_rn", "goog.i18n.DateTimeSymbols_rn_BI", "goog.i18n.DateTimeSymbols_ro_MD", "goog.i18n.DateTimeSymbols_ro_RO", "goog.i18n.DateTimeSymbols_rof", "goog.i18n.DateTimeSymbols_rof_TZ", "goog.i18n.DateTimeSymbols_ru_BY", 
"goog.i18n.DateTimeSymbols_ru_KG", "goog.i18n.DateTimeSymbols_ru_KZ", "goog.i18n.DateTimeSymbols_ru_MD", "goog.i18n.DateTimeSymbols_ru_RU", "goog.i18n.DateTimeSymbols_ru_UA", "goog.i18n.DateTimeSymbols_rw", "goog.i18n.DateTimeSymbols_rw_RW", "goog.i18n.DateTimeSymbols_rwk", "goog.i18n.DateTimeSymbols_rwk_TZ", "goog.i18n.DateTimeSymbols_sah", "goog.i18n.DateTimeSymbols_sah_RU", "goog.i18n.DateTimeSymbols_saq", "goog.i18n.DateTimeSymbols_saq_KE", "goog.i18n.DateTimeSymbols_sbp", "goog.i18n.DateTimeSymbols_sbp_TZ", 
"goog.i18n.DateTimeSymbols_se", "goog.i18n.DateTimeSymbols_se_FI", "goog.i18n.DateTimeSymbols_se_NO", "goog.i18n.DateTimeSymbols_se_SE", "goog.i18n.DateTimeSymbols_seh", "goog.i18n.DateTimeSymbols_seh_MZ", "goog.i18n.DateTimeSymbols_ses", "goog.i18n.DateTimeSymbols_ses_ML", "goog.i18n.DateTimeSymbols_sg", "goog.i18n.DateTimeSymbols_sg_CF", "goog.i18n.DateTimeSymbols_shi", "goog.i18n.DateTimeSymbols_shi_Latn", "goog.i18n.DateTimeSymbols_shi_Latn_MA", "goog.i18n.DateTimeSymbols_shi_Tfng", "goog.i18n.DateTimeSymbols_shi_Tfng_MA", 
"goog.i18n.DateTimeSymbols_si_LK", "goog.i18n.DateTimeSymbols_sk_SK", "goog.i18n.DateTimeSymbols_sl_SI", "goog.i18n.DateTimeSymbols_smn", "goog.i18n.DateTimeSymbols_smn_FI", "goog.i18n.DateTimeSymbols_sn", "goog.i18n.DateTimeSymbols_sn_ZW", "goog.i18n.DateTimeSymbols_so", "goog.i18n.DateTimeSymbols_so_DJ", "goog.i18n.DateTimeSymbols_so_ET", "goog.i18n.DateTimeSymbols_so_KE", "goog.i18n.DateTimeSymbols_so_SO", "goog.i18n.DateTimeSymbols_sq_AL", "goog.i18n.DateTimeSymbols_sq_MK", "goog.i18n.DateTimeSymbols_sq_XK", 
"goog.i18n.DateTimeSymbols_sr_Cyrl", "goog.i18n.DateTimeSymbols_sr_Cyrl_BA", "goog.i18n.DateTimeSymbols_sr_Cyrl_ME", "goog.i18n.DateTimeSymbols_sr_Cyrl_RS", "goog.i18n.DateTimeSymbols_sr_Cyrl_XK", "goog.i18n.DateTimeSymbols_sr_Latn", "goog.i18n.DateTimeSymbols_sr_Latn_BA", "goog.i18n.DateTimeSymbols_sr_Latn_ME", "goog.i18n.DateTimeSymbols_sr_Latn_RS", "goog.i18n.DateTimeSymbols_sr_Latn_XK", "goog.i18n.DateTimeSymbols_sv_AX", "goog.i18n.DateTimeSymbols_sv_FI", "goog.i18n.DateTimeSymbols_sv_SE", "goog.i18n.DateTimeSymbols_sw_CD", 
"goog.i18n.DateTimeSymbols_sw_KE", "goog.i18n.DateTimeSymbols_sw_TZ", "goog.i18n.DateTimeSymbols_sw_UG", "goog.i18n.DateTimeSymbols_ta_IN", "goog.i18n.DateTimeSymbols_ta_LK", "goog.i18n.DateTimeSymbols_ta_MY", "goog.i18n.DateTimeSymbols_ta_SG", "goog.i18n.DateTimeSymbols_te_IN", "goog.i18n.DateTimeSymbols_teo", "goog.i18n.DateTimeSymbols_teo_KE", "goog.i18n.DateTimeSymbols_teo_UG", "goog.i18n.DateTimeSymbols_th_TH", "goog.i18n.DateTimeSymbols_ti", "goog.i18n.DateTimeSymbols_ti_ER", "goog.i18n.DateTimeSymbols_ti_ET", 
"goog.i18n.DateTimeSymbols_to", "goog.i18n.DateTimeSymbols_to_TO", "goog.i18n.DateTimeSymbols_tr_CY", "goog.i18n.DateTimeSymbols_tr_TR", "goog.i18n.DateTimeSymbols_twq", "goog.i18n.DateTimeSymbols_twq_NE", "goog.i18n.DateTimeSymbols_tzm", "goog.i18n.DateTimeSymbols_tzm_Latn", "goog.i18n.DateTimeSymbols_tzm_Latn_MA", "goog.i18n.DateTimeSymbols_ug", "goog.i18n.DateTimeSymbols_ug_Arab", "goog.i18n.DateTimeSymbols_ug_Arab_CN", "goog.i18n.DateTimeSymbols_uk_UA", "goog.i18n.DateTimeSymbols_ur_IN", "goog.i18n.DateTimeSymbols_ur_PK", 
"goog.i18n.DateTimeSymbols_uz_Arab", "goog.i18n.DateTimeSymbols_uz_Arab_AF", "goog.i18n.DateTimeSymbols_uz_Cyrl", "goog.i18n.DateTimeSymbols_uz_Cyrl_UZ", "goog.i18n.DateTimeSymbols_uz_Latn", "goog.i18n.DateTimeSymbols_uz_Latn_UZ", "goog.i18n.DateTimeSymbols_vai", "goog.i18n.DateTimeSymbols_vai_Latn", "goog.i18n.DateTimeSymbols_vai_Latn_LR", "goog.i18n.DateTimeSymbols_vai_Vaii", "goog.i18n.DateTimeSymbols_vai_Vaii_LR", "goog.i18n.DateTimeSymbols_vi_VN", "goog.i18n.DateTimeSymbols_vun", "goog.i18n.DateTimeSymbols_vun_TZ", 
"goog.i18n.DateTimeSymbols_wae", "goog.i18n.DateTimeSymbols_wae_CH", "goog.i18n.DateTimeSymbols_xog", "goog.i18n.DateTimeSymbols_xog_UG", "goog.i18n.DateTimeSymbols_yav", "goog.i18n.DateTimeSymbols_yav_CM", "goog.i18n.DateTimeSymbols_yi", "goog.i18n.DateTimeSymbols_yi_001", "goog.i18n.DateTimeSymbols_yo", "goog.i18n.DateTimeSymbols_yo_BJ", "goog.i18n.DateTimeSymbols_yo_NG", "goog.i18n.DateTimeSymbols_zgh", "goog.i18n.DateTimeSymbols_zgh_MA", "goog.i18n.DateTimeSymbols_zh_Hans", "goog.i18n.DateTimeSymbols_zh_Hans_CN", 
"goog.i18n.DateTimeSymbols_zh_Hans_HK", "goog.i18n.DateTimeSymbols_zh_Hans_MO", "goog.i18n.DateTimeSymbols_zh_Hans_SG", "goog.i18n.DateTimeSymbols_zh_Hant", "goog.i18n.DateTimeSymbols_zh_Hant_HK", "goog.i18n.DateTimeSymbols_zh_Hant_MO", "goog.i18n.DateTimeSymbols_zh_Hant_TW", "goog.i18n.DateTimeSymbols_zu_ZA"], ["goog.i18n.DateTimeSymbols"], false);
goog.addDependency("i18n/graphemebreak.js", ["goog.i18n.GraphemeBreak"], ["goog.structs.InversionMap"], false);
goog.addDependency("i18n/graphemebreak_test.js", ["goog.i18n.GraphemeBreakTest"], ["goog.i18n.GraphemeBreak", "goog.testing.jsunit"], false);
goog.addDependency("i18n/messageformat.js", ["goog.i18n.MessageFormat"], ["goog.asserts", "goog.i18n.NumberFormat", "goog.i18n.ordinalRules", "goog.i18n.pluralRules"], false);
goog.addDependency("i18n/messageformat_test.js", ["goog.i18n.MessageFormatTest"], ["goog.i18n.MessageFormat", "goog.i18n.NumberFormatSymbols_hr", "goog.i18n.pluralRules", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("i18n/mime.js", ["goog.i18n.mime", "goog.i18n.mime.encode"], ["goog.array"], false);
goog.addDependency("i18n/mime_test.js", ["goog.i18n.mime.encodeTest"], ["goog.i18n.mime.encode", "goog.testing.jsunit"], false);
goog.addDependency("i18n/numberformat.js", ["goog.i18n.NumberFormat", "goog.i18n.NumberFormat.CurrencyStyle", "goog.i18n.NumberFormat.Format"], ["goog.asserts", "goog.i18n.CompactNumberFormatSymbols", "goog.i18n.NumberFormatSymbols", "goog.i18n.currency", "goog.math"], false);
goog.addDependency("i18n/numberformat_test.js", ["goog.i18n.NumberFormatTest"], ["goog.i18n.CompactNumberFormatSymbols", "goog.i18n.CompactNumberFormatSymbols_de", "goog.i18n.CompactNumberFormatSymbols_en", "goog.i18n.CompactNumberFormatSymbols_fr", "goog.i18n.NumberFormat", "goog.i18n.NumberFormatSymbols", "goog.i18n.NumberFormatSymbols_de", "goog.i18n.NumberFormatSymbols_en", "goog.i18n.NumberFormatSymbols_fr", "goog.i18n.NumberFormatSymbols_pl", "goog.i18n.NumberFormatSymbols_ro", "goog.testing.ExpectedFailures", 
"goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.userAgent", "goog.userAgent.product", "goog.userAgent.product.isVersion"], false);
goog.addDependency("i18n/numberformatsymbols.js", ["goog.i18n.NumberFormatSymbols", "goog.i18n.NumberFormatSymbols_af", "goog.i18n.NumberFormatSymbols_af_ZA", "goog.i18n.NumberFormatSymbols_am", "goog.i18n.NumberFormatSymbols_am_ET", "goog.i18n.NumberFormatSymbols_ar", "goog.i18n.NumberFormatSymbols_ar_001", "goog.i18n.NumberFormatSymbols_ar_EG", "goog.i18n.NumberFormatSymbols_az", "goog.i18n.NumberFormatSymbols_az_Latn", "goog.i18n.NumberFormatSymbols_az_Latn_AZ", "goog.i18n.NumberFormatSymbols_bg", 
"goog.i18n.NumberFormatSymbols_bg_BG", "goog.i18n.NumberFormatSymbols_bn", "goog.i18n.NumberFormatSymbols_bn_BD", "goog.i18n.NumberFormatSymbols_br", "goog.i18n.NumberFormatSymbols_br_FR", "goog.i18n.NumberFormatSymbols_ca", "goog.i18n.NumberFormatSymbols_ca_AD", "goog.i18n.NumberFormatSymbols_ca_ES", "goog.i18n.NumberFormatSymbols_ca_ES_VALENCIA", "goog.i18n.NumberFormatSymbols_ca_FR", "goog.i18n.NumberFormatSymbols_ca_IT", "goog.i18n.NumberFormatSymbols_chr", "goog.i18n.NumberFormatSymbols_chr_US", 
"goog.i18n.NumberFormatSymbols_cs", "goog.i18n.NumberFormatSymbols_cs_CZ", "goog.i18n.NumberFormatSymbols_cy", "goog.i18n.NumberFormatSymbols_cy_GB", "goog.i18n.NumberFormatSymbols_da", "goog.i18n.NumberFormatSymbols_da_DK", "goog.i18n.NumberFormatSymbols_da_GL", "goog.i18n.NumberFormatSymbols_de", "goog.i18n.NumberFormatSymbols_de_AT", "goog.i18n.NumberFormatSymbols_de_BE", "goog.i18n.NumberFormatSymbols_de_CH", "goog.i18n.NumberFormatSymbols_de_DE", "goog.i18n.NumberFormatSymbols_de_LU", "goog.i18n.NumberFormatSymbols_el", 
"goog.i18n.NumberFormatSymbols_el_CY", "goog.i18n.NumberFormatSymbols_el_GR", "goog.i18n.NumberFormatSymbols_en", "goog.i18n.NumberFormatSymbols_en_001", "goog.i18n.NumberFormatSymbols_en_AS", "goog.i18n.NumberFormatSymbols_en_AU", "goog.i18n.NumberFormatSymbols_en_DG", "goog.i18n.NumberFormatSymbols_en_FM", "goog.i18n.NumberFormatSymbols_en_GB", "goog.i18n.NumberFormatSymbols_en_GU", "goog.i18n.NumberFormatSymbols_en_IE", "goog.i18n.NumberFormatSymbols_en_IN", "goog.i18n.NumberFormatSymbols_en_IO", 
"goog.i18n.NumberFormatSymbols_en_MH", "goog.i18n.NumberFormatSymbols_en_MP", "goog.i18n.NumberFormatSymbols_en_PR", "goog.i18n.NumberFormatSymbols_en_PW", "goog.i18n.NumberFormatSymbols_en_SG", "goog.i18n.NumberFormatSymbols_en_TC", "goog.i18n.NumberFormatSymbols_en_UM", "goog.i18n.NumberFormatSymbols_en_US", "goog.i18n.NumberFormatSymbols_en_VG", "goog.i18n.NumberFormatSymbols_en_VI", "goog.i18n.NumberFormatSymbols_en_ZA", "goog.i18n.NumberFormatSymbols_en_ZW", "goog.i18n.NumberFormatSymbols_es", 
"goog.i18n.NumberFormatSymbols_es_419", "goog.i18n.NumberFormatSymbols_es_EA", "goog.i18n.NumberFormatSymbols_es_ES", "goog.i18n.NumberFormatSymbols_es_IC", "goog.i18n.NumberFormatSymbols_et", "goog.i18n.NumberFormatSymbols_et_EE", "goog.i18n.NumberFormatSymbols_eu", "goog.i18n.NumberFormatSymbols_eu_ES", "goog.i18n.NumberFormatSymbols_fa", "goog.i18n.NumberFormatSymbols_fa_IR", "goog.i18n.NumberFormatSymbols_fi", "goog.i18n.NumberFormatSymbols_fi_FI", "goog.i18n.NumberFormatSymbols_fil", "goog.i18n.NumberFormatSymbols_fil_PH", 
"goog.i18n.NumberFormatSymbols_fr", "goog.i18n.NumberFormatSymbols_fr_BL", "goog.i18n.NumberFormatSymbols_fr_CA", "goog.i18n.NumberFormatSymbols_fr_FR", "goog.i18n.NumberFormatSymbols_fr_GF", "goog.i18n.NumberFormatSymbols_fr_GP", "goog.i18n.NumberFormatSymbols_fr_MC", "goog.i18n.NumberFormatSymbols_fr_MF", "goog.i18n.NumberFormatSymbols_fr_MQ", "goog.i18n.NumberFormatSymbols_fr_PM", "goog.i18n.NumberFormatSymbols_fr_RE", "goog.i18n.NumberFormatSymbols_fr_YT", "goog.i18n.NumberFormatSymbols_ga", 
"goog.i18n.NumberFormatSymbols_ga_IE", "goog.i18n.NumberFormatSymbols_gl", "goog.i18n.NumberFormatSymbols_gl_ES", "goog.i18n.NumberFormatSymbols_gsw", "goog.i18n.NumberFormatSymbols_gsw_CH", "goog.i18n.NumberFormatSymbols_gsw_LI", "goog.i18n.NumberFormatSymbols_gu", "goog.i18n.NumberFormatSymbols_gu_IN", "goog.i18n.NumberFormatSymbols_haw", "goog.i18n.NumberFormatSymbols_haw_US", "goog.i18n.NumberFormatSymbols_he", "goog.i18n.NumberFormatSymbols_he_IL", "goog.i18n.NumberFormatSymbols_hi", "goog.i18n.NumberFormatSymbols_hi_IN", 
"goog.i18n.NumberFormatSymbols_hr", "goog.i18n.NumberFormatSymbols_hr_HR", "goog.i18n.NumberFormatSymbols_hu", "goog.i18n.NumberFormatSymbols_hu_HU", "goog.i18n.NumberFormatSymbols_hy", "goog.i18n.NumberFormatSymbols_hy_AM", "goog.i18n.NumberFormatSymbols_id", "goog.i18n.NumberFormatSymbols_id_ID", "goog.i18n.NumberFormatSymbols_in", "goog.i18n.NumberFormatSymbols_is", "goog.i18n.NumberFormatSymbols_is_IS", "goog.i18n.NumberFormatSymbols_it", "goog.i18n.NumberFormatSymbols_it_IT", "goog.i18n.NumberFormatSymbols_it_SM", 
"goog.i18n.NumberFormatSymbols_iw", "goog.i18n.NumberFormatSymbols_ja", "goog.i18n.NumberFormatSymbols_ja_JP", "goog.i18n.NumberFormatSymbols_ka", "goog.i18n.NumberFormatSymbols_ka_GE", "goog.i18n.NumberFormatSymbols_kk", "goog.i18n.NumberFormatSymbols_kk_Cyrl", "goog.i18n.NumberFormatSymbols_kk_Cyrl_KZ", "goog.i18n.NumberFormatSymbols_km", "goog.i18n.NumberFormatSymbols_km_KH", "goog.i18n.NumberFormatSymbols_kn", "goog.i18n.NumberFormatSymbols_kn_IN", "goog.i18n.NumberFormatSymbols_ko", "goog.i18n.NumberFormatSymbols_ko_KR", 
"goog.i18n.NumberFormatSymbols_ky", "goog.i18n.NumberFormatSymbols_ky_Cyrl", "goog.i18n.NumberFormatSymbols_ky_Cyrl_KG", "goog.i18n.NumberFormatSymbols_ln", "goog.i18n.NumberFormatSymbols_ln_CD", "goog.i18n.NumberFormatSymbols_lo", "goog.i18n.NumberFormatSymbols_lo_LA", "goog.i18n.NumberFormatSymbols_lt", "goog.i18n.NumberFormatSymbols_lt_LT", "goog.i18n.NumberFormatSymbols_lv", "goog.i18n.NumberFormatSymbols_lv_LV", "goog.i18n.NumberFormatSymbols_mk", "goog.i18n.NumberFormatSymbols_mk_MK", "goog.i18n.NumberFormatSymbols_ml", 
"goog.i18n.NumberFormatSymbols_ml_IN", "goog.i18n.NumberFormatSymbols_mn", "goog.i18n.NumberFormatSymbols_mn_Cyrl", "goog.i18n.NumberFormatSymbols_mn_Cyrl_MN", "goog.i18n.NumberFormatSymbols_mr", "goog.i18n.NumberFormatSymbols_mr_IN", "goog.i18n.NumberFormatSymbols_ms", "goog.i18n.NumberFormatSymbols_ms_Latn", "goog.i18n.NumberFormatSymbols_ms_Latn_MY", "goog.i18n.NumberFormatSymbols_mt", "goog.i18n.NumberFormatSymbols_mt_MT", "goog.i18n.NumberFormatSymbols_my", "goog.i18n.NumberFormatSymbols_my_MM", 
"goog.i18n.NumberFormatSymbols_nb", "goog.i18n.NumberFormatSymbols_nb_NO", "goog.i18n.NumberFormatSymbols_nb_SJ", "goog.i18n.NumberFormatSymbols_ne", "goog.i18n.NumberFormatSymbols_ne_NP", "goog.i18n.NumberFormatSymbols_nl", "goog.i18n.NumberFormatSymbols_nl_NL", "goog.i18n.NumberFormatSymbols_no", "goog.i18n.NumberFormatSymbols_no_NO", "goog.i18n.NumberFormatSymbols_or", "goog.i18n.NumberFormatSymbols_or_IN", "goog.i18n.NumberFormatSymbols_pa", "goog.i18n.NumberFormatSymbols_pa_Guru", "goog.i18n.NumberFormatSymbols_pa_Guru_IN", 
"goog.i18n.NumberFormatSymbols_pl", "goog.i18n.NumberFormatSymbols_pl_PL", "goog.i18n.NumberFormatSymbols_pt", "goog.i18n.NumberFormatSymbols_pt_BR", "goog.i18n.NumberFormatSymbols_pt_PT", "goog.i18n.NumberFormatSymbols_ro", "goog.i18n.NumberFormatSymbols_ro_RO", "goog.i18n.NumberFormatSymbols_ru", "goog.i18n.NumberFormatSymbols_ru_RU", "goog.i18n.NumberFormatSymbols_si", "goog.i18n.NumberFormatSymbols_si_LK", "goog.i18n.NumberFormatSymbols_sk", "goog.i18n.NumberFormatSymbols_sk_SK", "goog.i18n.NumberFormatSymbols_sl", 
"goog.i18n.NumberFormatSymbols_sl_SI", "goog.i18n.NumberFormatSymbols_sq", "goog.i18n.NumberFormatSymbols_sq_AL", "goog.i18n.NumberFormatSymbols_sr", "goog.i18n.NumberFormatSymbols_sr_Cyrl", "goog.i18n.NumberFormatSymbols_sr_Cyrl_RS", "goog.i18n.NumberFormatSymbols_sv", "goog.i18n.NumberFormatSymbols_sv_SE", "goog.i18n.NumberFormatSymbols_sw", "goog.i18n.NumberFormatSymbols_sw_TZ", "goog.i18n.NumberFormatSymbols_ta", "goog.i18n.NumberFormatSymbols_ta_IN", "goog.i18n.NumberFormatSymbols_te", "goog.i18n.NumberFormatSymbols_te_IN", 
"goog.i18n.NumberFormatSymbols_th", "goog.i18n.NumberFormatSymbols_th_TH", "goog.i18n.NumberFormatSymbols_tl", "goog.i18n.NumberFormatSymbols_tr", "goog.i18n.NumberFormatSymbols_tr_TR", "goog.i18n.NumberFormatSymbols_uk", "goog.i18n.NumberFormatSymbols_uk_UA", "goog.i18n.NumberFormatSymbols_ur", "goog.i18n.NumberFormatSymbols_ur_PK", "goog.i18n.NumberFormatSymbols_uz", "goog.i18n.NumberFormatSymbols_uz_Latn", "goog.i18n.NumberFormatSymbols_uz_Latn_UZ", "goog.i18n.NumberFormatSymbols_vi", "goog.i18n.NumberFormatSymbols_vi_VN", 
"goog.i18n.NumberFormatSymbols_zh", "goog.i18n.NumberFormatSymbols_zh_CN", "goog.i18n.NumberFormatSymbols_zh_HK", "goog.i18n.NumberFormatSymbols_zh_Hans", "goog.i18n.NumberFormatSymbols_zh_Hans_CN", "goog.i18n.NumberFormatSymbols_zh_TW", "goog.i18n.NumberFormatSymbols_zu", "goog.i18n.NumberFormatSymbols_zu_ZA"], [], false);
goog.addDependency("i18n/numberformatsymbolsext.js", ["goog.i18n.NumberFormatSymbolsExt", "goog.i18n.NumberFormatSymbols_af_NA", "goog.i18n.NumberFormatSymbols_agq", "goog.i18n.NumberFormatSymbols_agq_CM", "goog.i18n.NumberFormatSymbols_ak", "goog.i18n.NumberFormatSymbols_ak_GH", "goog.i18n.NumberFormatSymbols_ar_AE", "goog.i18n.NumberFormatSymbols_ar_BH", "goog.i18n.NumberFormatSymbols_ar_DJ", "goog.i18n.NumberFormatSymbols_ar_DZ", "goog.i18n.NumberFormatSymbols_ar_EH", "goog.i18n.NumberFormatSymbols_ar_ER", 
"goog.i18n.NumberFormatSymbols_ar_IL", "goog.i18n.NumberFormatSymbols_ar_IQ", "goog.i18n.NumberFormatSymbols_ar_JO", "goog.i18n.NumberFormatSymbols_ar_KM", "goog.i18n.NumberFormatSymbols_ar_KW", "goog.i18n.NumberFormatSymbols_ar_LB", "goog.i18n.NumberFormatSymbols_ar_LY", "goog.i18n.NumberFormatSymbols_ar_MA", "goog.i18n.NumberFormatSymbols_ar_MR", "goog.i18n.NumberFormatSymbols_ar_OM", "goog.i18n.NumberFormatSymbols_ar_PS", "goog.i18n.NumberFormatSymbols_ar_QA", "goog.i18n.NumberFormatSymbols_ar_SA", 
"goog.i18n.NumberFormatSymbols_ar_SD", "goog.i18n.NumberFormatSymbols_ar_SO", "goog.i18n.NumberFormatSymbols_ar_SS", "goog.i18n.NumberFormatSymbols_ar_SY", "goog.i18n.NumberFormatSymbols_ar_TD", "goog.i18n.NumberFormatSymbols_ar_TN", "goog.i18n.NumberFormatSymbols_ar_YE", "goog.i18n.NumberFormatSymbols_as", "goog.i18n.NumberFormatSymbols_as_IN", "goog.i18n.NumberFormatSymbols_asa", "goog.i18n.NumberFormatSymbols_asa_TZ", "goog.i18n.NumberFormatSymbols_ast", "goog.i18n.NumberFormatSymbols_ast_ES", 
"goog.i18n.NumberFormatSymbols_az_Cyrl", "goog.i18n.NumberFormatSymbols_az_Cyrl_AZ", "goog.i18n.NumberFormatSymbols_bas", "goog.i18n.NumberFormatSymbols_bas_CM", "goog.i18n.NumberFormatSymbols_be", "goog.i18n.NumberFormatSymbols_be_BY", "goog.i18n.NumberFormatSymbols_bem", "goog.i18n.NumberFormatSymbols_bem_ZM", "goog.i18n.NumberFormatSymbols_bez", "goog.i18n.NumberFormatSymbols_bez_TZ", "goog.i18n.NumberFormatSymbols_bm", "goog.i18n.NumberFormatSymbols_bm_Latn", "goog.i18n.NumberFormatSymbols_bm_Latn_ML", 
"goog.i18n.NumberFormatSymbols_bn_IN", "goog.i18n.NumberFormatSymbols_bo", "goog.i18n.NumberFormatSymbols_bo_CN", "goog.i18n.NumberFormatSymbols_bo_IN", "goog.i18n.NumberFormatSymbols_brx", "goog.i18n.NumberFormatSymbols_brx_IN", "goog.i18n.NumberFormatSymbols_bs", "goog.i18n.NumberFormatSymbols_bs_Cyrl", "goog.i18n.NumberFormatSymbols_bs_Cyrl_BA", "goog.i18n.NumberFormatSymbols_bs_Latn", "goog.i18n.NumberFormatSymbols_bs_Latn_BA", "goog.i18n.NumberFormatSymbols_cgg", "goog.i18n.NumberFormatSymbols_cgg_UG", 
"goog.i18n.NumberFormatSymbols_ckb", "goog.i18n.NumberFormatSymbols_ckb_Arab", "goog.i18n.NumberFormatSymbols_ckb_Arab_IQ", "goog.i18n.NumberFormatSymbols_ckb_Arab_IR", "goog.i18n.NumberFormatSymbols_ckb_IQ", "goog.i18n.NumberFormatSymbols_ckb_IR", "goog.i18n.NumberFormatSymbols_ckb_Latn", "goog.i18n.NumberFormatSymbols_ckb_Latn_IQ", "goog.i18n.NumberFormatSymbols_dav", "goog.i18n.NumberFormatSymbols_dav_KE", "goog.i18n.NumberFormatSymbols_de_LI", "goog.i18n.NumberFormatSymbols_dje", "goog.i18n.NumberFormatSymbols_dje_NE", 
"goog.i18n.NumberFormatSymbols_dsb", "goog.i18n.NumberFormatSymbols_dsb_DE", "goog.i18n.NumberFormatSymbols_dua", "goog.i18n.NumberFormatSymbols_dua_CM", "goog.i18n.NumberFormatSymbols_dyo", "goog.i18n.NumberFormatSymbols_dyo_SN", "goog.i18n.NumberFormatSymbols_dz", "goog.i18n.NumberFormatSymbols_dz_BT", "goog.i18n.NumberFormatSymbols_ebu", "goog.i18n.NumberFormatSymbols_ebu_KE", "goog.i18n.NumberFormatSymbols_ee", "goog.i18n.NumberFormatSymbols_ee_GH", "goog.i18n.NumberFormatSymbols_ee_TG", "goog.i18n.NumberFormatSymbols_en_150", 
"goog.i18n.NumberFormatSymbols_en_AG", "goog.i18n.NumberFormatSymbols_en_AI", "goog.i18n.NumberFormatSymbols_en_BB", "goog.i18n.NumberFormatSymbols_en_BE", "goog.i18n.NumberFormatSymbols_en_BM", "goog.i18n.NumberFormatSymbols_en_BS", "goog.i18n.NumberFormatSymbols_en_BW", "goog.i18n.NumberFormatSymbols_en_BZ", "goog.i18n.NumberFormatSymbols_en_CA", "goog.i18n.NumberFormatSymbols_en_CC", "goog.i18n.NumberFormatSymbols_en_CK", "goog.i18n.NumberFormatSymbols_en_CM", "goog.i18n.NumberFormatSymbols_en_CX", 
"goog.i18n.NumberFormatSymbols_en_DM", "goog.i18n.NumberFormatSymbols_en_ER", "goog.i18n.NumberFormatSymbols_en_FJ", "goog.i18n.NumberFormatSymbols_en_FK", "goog.i18n.NumberFormatSymbols_en_GD", "goog.i18n.NumberFormatSymbols_en_GG", "goog.i18n.NumberFormatSymbols_en_GH", "goog.i18n.NumberFormatSymbols_en_GI", "goog.i18n.NumberFormatSymbols_en_GM", "goog.i18n.NumberFormatSymbols_en_GY", "goog.i18n.NumberFormatSymbols_en_HK", "goog.i18n.NumberFormatSymbols_en_IM", "goog.i18n.NumberFormatSymbols_en_JE", 
"goog.i18n.NumberFormatSymbols_en_JM", "goog.i18n.NumberFormatSymbols_en_KE", "goog.i18n.NumberFormatSymbols_en_KI", "goog.i18n.NumberFormatSymbols_en_KN", "goog.i18n.NumberFormatSymbols_en_KY", "goog.i18n.NumberFormatSymbols_en_LC", "goog.i18n.NumberFormatSymbols_en_LR", "goog.i18n.NumberFormatSymbols_en_LS", "goog.i18n.NumberFormatSymbols_en_MG", "goog.i18n.NumberFormatSymbols_en_MO", "goog.i18n.NumberFormatSymbols_en_MS", "goog.i18n.NumberFormatSymbols_en_MT", "goog.i18n.NumberFormatSymbols_en_MU", 
"goog.i18n.NumberFormatSymbols_en_MW", "goog.i18n.NumberFormatSymbols_en_MY", "goog.i18n.NumberFormatSymbols_en_NA", "goog.i18n.NumberFormatSymbols_en_NF", "goog.i18n.NumberFormatSymbols_en_NG", "goog.i18n.NumberFormatSymbols_en_NR", "goog.i18n.NumberFormatSymbols_en_NU", "goog.i18n.NumberFormatSymbols_en_NZ", "goog.i18n.NumberFormatSymbols_en_PG", "goog.i18n.NumberFormatSymbols_en_PH", "goog.i18n.NumberFormatSymbols_en_PK", "goog.i18n.NumberFormatSymbols_en_PN", "goog.i18n.NumberFormatSymbols_en_RW", 
"goog.i18n.NumberFormatSymbols_en_SB", "goog.i18n.NumberFormatSymbols_en_SC", "goog.i18n.NumberFormatSymbols_en_SD", "goog.i18n.NumberFormatSymbols_en_SH", "goog.i18n.NumberFormatSymbols_en_SL", "goog.i18n.NumberFormatSymbols_en_SS", "goog.i18n.NumberFormatSymbols_en_SX", "goog.i18n.NumberFormatSymbols_en_SZ", "goog.i18n.NumberFormatSymbols_en_TK", "goog.i18n.NumberFormatSymbols_en_TO", "goog.i18n.NumberFormatSymbols_en_TT", "goog.i18n.NumberFormatSymbols_en_TV", "goog.i18n.NumberFormatSymbols_en_TZ", 
"goog.i18n.NumberFormatSymbols_en_UG", "goog.i18n.NumberFormatSymbols_en_VC", "goog.i18n.NumberFormatSymbols_en_VU", "goog.i18n.NumberFormatSymbols_en_WS", "goog.i18n.NumberFormatSymbols_en_ZM", "goog.i18n.NumberFormatSymbols_eo", "goog.i18n.NumberFormatSymbols_eo_001", "goog.i18n.NumberFormatSymbols_es_AR", "goog.i18n.NumberFormatSymbols_es_BO", "goog.i18n.NumberFormatSymbols_es_CL", "goog.i18n.NumberFormatSymbols_es_CO", "goog.i18n.NumberFormatSymbols_es_CR", "goog.i18n.NumberFormatSymbols_es_CU", 
"goog.i18n.NumberFormatSymbols_es_DO", "goog.i18n.NumberFormatSymbols_es_EC", "goog.i18n.NumberFormatSymbols_es_GQ", "goog.i18n.NumberFormatSymbols_es_GT", "goog.i18n.NumberFormatSymbols_es_HN", "goog.i18n.NumberFormatSymbols_es_MX", "goog.i18n.NumberFormatSymbols_es_NI", "goog.i18n.NumberFormatSymbols_es_PA", "goog.i18n.NumberFormatSymbols_es_PE", "goog.i18n.NumberFormatSymbols_es_PH", "goog.i18n.NumberFormatSymbols_es_PR", "goog.i18n.NumberFormatSymbols_es_PY", "goog.i18n.NumberFormatSymbols_es_SV", 
"goog.i18n.NumberFormatSymbols_es_US", "goog.i18n.NumberFormatSymbols_es_UY", "goog.i18n.NumberFormatSymbols_es_VE", "goog.i18n.NumberFormatSymbols_ewo", "goog.i18n.NumberFormatSymbols_ewo_CM", "goog.i18n.NumberFormatSymbols_fa_AF", "goog.i18n.NumberFormatSymbols_ff", "goog.i18n.NumberFormatSymbols_ff_CM", "goog.i18n.NumberFormatSymbols_ff_GN", "goog.i18n.NumberFormatSymbols_ff_MR", "goog.i18n.NumberFormatSymbols_ff_SN", "goog.i18n.NumberFormatSymbols_fo", "goog.i18n.NumberFormatSymbols_fo_FO", "goog.i18n.NumberFormatSymbols_fr_BE", 
"goog.i18n.NumberFormatSymbols_fr_BF", "goog.i18n.NumberFormatSymbols_fr_BI", "goog.i18n.NumberFormatSymbols_fr_BJ", "goog.i18n.NumberFormatSymbols_fr_CD", "goog.i18n.NumberFormatSymbols_fr_CF", "goog.i18n.NumberFormatSymbols_fr_CG", "goog.i18n.NumberFormatSymbols_fr_CH", "goog.i18n.NumberFormatSymbols_fr_CI", "goog.i18n.NumberFormatSymbols_fr_CM", "goog.i18n.NumberFormatSymbols_fr_DJ", "goog.i18n.NumberFormatSymbols_fr_DZ", "goog.i18n.NumberFormatSymbols_fr_GA", "goog.i18n.NumberFormatSymbols_fr_GN", 
"goog.i18n.NumberFormatSymbols_fr_GQ", "goog.i18n.NumberFormatSymbols_fr_HT", "goog.i18n.NumberFormatSymbols_fr_KM", "goog.i18n.NumberFormatSymbols_fr_LU", "goog.i18n.NumberFormatSymbols_fr_MA", "goog.i18n.NumberFormatSymbols_fr_MG", "goog.i18n.NumberFormatSymbols_fr_ML", "goog.i18n.NumberFormatSymbols_fr_MR", "goog.i18n.NumberFormatSymbols_fr_MU", "goog.i18n.NumberFormatSymbols_fr_NC", "goog.i18n.NumberFormatSymbols_fr_NE", "goog.i18n.NumberFormatSymbols_fr_PF", "goog.i18n.NumberFormatSymbols_fr_RW", 
"goog.i18n.NumberFormatSymbols_fr_SC", "goog.i18n.NumberFormatSymbols_fr_SN", "goog.i18n.NumberFormatSymbols_fr_SY", "goog.i18n.NumberFormatSymbols_fr_TD", "goog.i18n.NumberFormatSymbols_fr_TG", "goog.i18n.NumberFormatSymbols_fr_TN", "goog.i18n.NumberFormatSymbols_fr_VU", "goog.i18n.NumberFormatSymbols_fr_WF", "goog.i18n.NumberFormatSymbols_fur", "goog.i18n.NumberFormatSymbols_fur_IT", "goog.i18n.NumberFormatSymbols_fy", "goog.i18n.NumberFormatSymbols_fy_NL", "goog.i18n.NumberFormatSymbols_gd", "goog.i18n.NumberFormatSymbols_gd_GB", 
"goog.i18n.NumberFormatSymbols_gsw_FR", "goog.i18n.NumberFormatSymbols_guz", "goog.i18n.NumberFormatSymbols_guz_KE", "goog.i18n.NumberFormatSymbols_gv", "goog.i18n.NumberFormatSymbols_gv_IM", "goog.i18n.NumberFormatSymbols_ha", "goog.i18n.NumberFormatSymbols_ha_Latn", "goog.i18n.NumberFormatSymbols_ha_Latn_GH", "goog.i18n.NumberFormatSymbols_ha_Latn_NE", "goog.i18n.NumberFormatSymbols_ha_Latn_NG", "goog.i18n.NumberFormatSymbols_hr_BA", "goog.i18n.NumberFormatSymbols_hsb", "goog.i18n.NumberFormatSymbols_hsb_DE", 
"goog.i18n.NumberFormatSymbols_ig", "goog.i18n.NumberFormatSymbols_ig_NG", "goog.i18n.NumberFormatSymbols_ii", "goog.i18n.NumberFormatSymbols_ii_CN", "goog.i18n.NumberFormatSymbols_it_CH", "goog.i18n.NumberFormatSymbols_jgo", "goog.i18n.NumberFormatSymbols_jgo_CM", "goog.i18n.NumberFormatSymbols_jmc", "goog.i18n.NumberFormatSymbols_jmc_TZ", "goog.i18n.NumberFormatSymbols_kab", "goog.i18n.NumberFormatSymbols_kab_DZ", "goog.i18n.NumberFormatSymbols_kam", "goog.i18n.NumberFormatSymbols_kam_KE", "goog.i18n.NumberFormatSymbols_kde", 
"goog.i18n.NumberFormatSymbols_kde_TZ", "goog.i18n.NumberFormatSymbols_kea", "goog.i18n.NumberFormatSymbols_kea_CV", "goog.i18n.NumberFormatSymbols_khq", "goog.i18n.NumberFormatSymbols_khq_ML", "goog.i18n.NumberFormatSymbols_ki", "goog.i18n.NumberFormatSymbols_ki_KE", "goog.i18n.NumberFormatSymbols_kkj", "goog.i18n.NumberFormatSymbols_kkj_CM", "goog.i18n.NumberFormatSymbols_kl", "goog.i18n.NumberFormatSymbols_kl_GL", "goog.i18n.NumberFormatSymbols_kln", "goog.i18n.NumberFormatSymbols_kln_KE", "goog.i18n.NumberFormatSymbols_ko_KP", 
"goog.i18n.NumberFormatSymbols_kok", "goog.i18n.NumberFormatSymbols_kok_IN", "goog.i18n.NumberFormatSymbols_ks", "goog.i18n.NumberFormatSymbols_ks_Arab", "goog.i18n.NumberFormatSymbols_ks_Arab_IN", "goog.i18n.NumberFormatSymbols_ksb", "goog.i18n.NumberFormatSymbols_ksb_TZ", "goog.i18n.NumberFormatSymbols_ksf", "goog.i18n.NumberFormatSymbols_ksf_CM", "goog.i18n.NumberFormatSymbols_ksh", "goog.i18n.NumberFormatSymbols_ksh_DE", "goog.i18n.NumberFormatSymbols_kw", "goog.i18n.NumberFormatSymbols_kw_GB", 
"goog.i18n.NumberFormatSymbols_lag", "goog.i18n.NumberFormatSymbols_lag_TZ", "goog.i18n.NumberFormatSymbols_lb", "goog.i18n.NumberFormatSymbols_lb_LU", "goog.i18n.NumberFormatSymbols_lg", "goog.i18n.NumberFormatSymbols_lg_UG", "goog.i18n.NumberFormatSymbols_lkt", "goog.i18n.NumberFormatSymbols_lkt_US", "goog.i18n.NumberFormatSymbols_ln_AO", "goog.i18n.NumberFormatSymbols_ln_CF", "goog.i18n.NumberFormatSymbols_ln_CG", "goog.i18n.NumberFormatSymbols_lu", "goog.i18n.NumberFormatSymbols_lu_CD", "goog.i18n.NumberFormatSymbols_luo", 
"goog.i18n.NumberFormatSymbols_luo_KE", "goog.i18n.NumberFormatSymbols_luy", "goog.i18n.NumberFormatSymbols_luy_KE", "goog.i18n.NumberFormatSymbols_mas", "goog.i18n.NumberFormatSymbols_mas_KE", "goog.i18n.NumberFormatSymbols_mas_TZ", "goog.i18n.NumberFormatSymbols_mer", "goog.i18n.NumberFormatSymbols_mer_KE", "goog.i18n.NumberFormatSymbols_mfe", "goog.i18n.NumberFormatSymbols_mfe_MU", "goog.i18n.NumberFormatSymbols_mg", "goog.i18n.NumberFormatSymbols_mg_MG", "goog.i18n.NumberFormatSymbols_mgh", "goog.i18n.NumberFormatSymbols_mgh_MZ", 
"goog.i18n.NumberFormatSymbols_mgo", "goog.i18n.NumberFormatSymbols_mgo_CM", "goog.i18n.NumberFormatSymbols_ms_Latn_BN", "goog.i18n.NumberFormatSymbols_ms_Latn_SG", "goog.i18n.NumberFormatSymbols_mua", "goog.i18n.NumberFormatSymbols_mua_CM", "goog.i18n.NumberFormatSymbols_naq", "goog.i18n.NumberFormatSymbols_naq_NA", "goog.i18n.NumberFormatSymbols_nd", "goog.i18n.NumberFormatSymbols_nd_ZW", "goog.i18n.NumberFormatSymbols_ne_IN", "goog.i18n.NumberFormatSymbols_nl_AW", "goog.i18n.NumberFormatSymbols_nl_BE", 
"goog.i18n.NumberFormatSymbols_nl_BQ", "goog.i18n.NumberFormatSymbols_nl_CW", "goog.i18n.NumberFormatSymbols_nl_SR", "goog.i18n.NumberFormatSymbols_nl_SX", "goog.i18n.NumberFormatSymbols_nmg", "goog.i18n.NumberFormatSymbols_nmg_CM", "goog.i18n.NumberFormatSymbols_nn", "goog.i18n.NumberFormatSymbols_nn_NO", "goog.i18n.NumberFormatSymbols_nnh", "goog.i18n.NumberFormatSymbols_nnh_CM", "goog.i18n.NumberFormatSymbols_nus", "goog.i18n.NumberFormatSymbols_nus_SD", "goog.i18n.NumberFormatSymbols_nyn", "goog.i18n.NumberFormatSymbols_nyn_UG", 
"goog.i18n.NumberFormatSymbols_om", "goog.i18n.NumberFormatSymbols_om_ET", "goog.i18n.NumberFormatSymbols_om_KE", "goog.i18n.NumberFormatSymbols_os", "goog.i18n.NumberFormatSymbols_os_GE", "goog.i18n.NumberFormatSymbols_os_RU", "goog.i18n.NumberFormatSymbols_pa_Arab", "goog.i18n.NumberFormatSymbols_pa_Arab_PK", "goog.i18n.NumberFormatSymbols_ps", "goog.i18n.NumberFormatSymbols_ps_AF", "goog.i18n.NumberFormatSymbols_pt_AO", "goog.i18n.NumberFormatSymbols_pt_CV", "goog.i18n.NumberFormatSymbols_pt_GW", 
"goog.i18n.NumberFormatSymbols_pt_MO", "goog.i18n.NumberFormatSymbols_pt_MZ", "goog.i18n.NumberFormatSymbols_pt_ST", "goog.i18n.NumberFormatSymbols_pt_TL", "goog.i18n.NumberFormatSymbols_qu", "goog.i18n.NumberFormatSymbols_qu_BO", "goog.i18n.NumberFormatSymbols_qu_EC", "goog.i18n.NumberFormatSymbols_qu_PE", "goog.i18n.NumberFormatSymbols_rm", "goog.i18n.NumberFormatSymbols_rm_CH", "goog.i18n.NumberFormatSymbols_rn", "goog.i18n.NumberFormatSymbols_rn_BI", "goog.i18n.NumberFormatSymbols_ro_MD", "goog.i18n.NumberFormatSymbols_rof", 
"goog.i18n.NumberFormatSymbols_rof_TZ", "goog.i18n.NumberFormatSymbols_ru_BY", "goog.i18n.NumberFormatSymbols_ru_KG", "goog.i18n.NumberFormatSymbols_ru_KZ", "goog.i18n.NumberFormatSymbols_ru_MD", "goog.i18n.NumberFormatSymbols_ru_UA", "goog.i18n.NumberFormatSymbols_rw", "goog.i18n.NumberFormatSymbols_rw_RW", "goog.i18n.NumberFormatSymbols_rwk", "goog.i18n.NumberFormatSymbols_rwk_TZ", "goog.i18n.NumberFormatSymbols_sah", "goog.i18n.NumberFormatSymbols_sah_RU", "goog.i18n.NumberFormatSymbols_saq", 
"goog.i18n.NumberFormatSymbols_saq_KE", "goog.i18n.NumberFormatSymbols_sbp", "goog.i18n.NumberFormatSymbols_sbp_TZ", "goog.i18n.NumberFormatSymbols_se", "goog.i18n.NumberFormatSymbols_se_FI", "goog.i18n.NumberFormatSymbols_se_NO", "goog.i18n.NumberFormatSymbols_se_SE", "goog.i18n.NumberFormatSymbols_seh", "goog.i18n.NumberFormatSymbols_seh_MZ", "goog.i18n.NumberFormatSymbols_ses", "goog.i18n.NumberFormatSymbols_ses_ML", "goog.i18n.NumberFormatSymbols_sg", "goog.i18n.NumberFormatSymbols_sg_CF", "goog.i18n.NumberFormatSymbols_shi", 
"goog.i18n.NumberFormatSymbols_shi_Latn", "goog.i18n.NumberFormatSymbols_shi_Latn_MA", "goog.i18n.NumberFormatSymbols_shi_Tfng", "goog.i18n.NumberFormatSymbols_shi_Tfng_MA", "goog.i18n.NumberFormatSymbols_smn", "goog.i18n.NumberFormatSymbols_smn_FI", "goog.i18n.NumberFormatSymbols_sn", "goog.i18n.NumberFormatSymbols_sn_ZW", "goog.i18n.NumberFormatSymbols_so", "goog.i18n.NumberFormatSymbols_so_DJ", "goog.i18n.NumberFormatSymbols_so_ET", "goog.i18n.NumberFormatSymbols_so_KE", "goog.i18n.NumberFormatSymbols_so_SO", 
"goog.i18n.NumberFormatSymbols_sq_MK", "goog.i18n.NumberFormatSymbols_sq_XK", "goog.i18n.NumberFormatSymbols_sr_Cyrl_BA", "goog.i18n.NumberFormatSymbols_sr_Cyrl_ME", "goog.i18n.NumberFormatSymbols_sr_Cyrl_XK", "goog.i18n.NumberFormatSymbols_sr_Latn", "goog.i18n.NumberFormatSymbols_sr_Latn_BA", "goog.i18n.NumberFormatSymbols_sr_Latn_ME", "goog.i18n.NumberFormatSymbols_sr_Latn_RS", "goog.i18n.NumberFormatSymbols_sr_Latn_XK", "goog.i18n.NumberFormatSymbols_sv_AX", "goog.i18n.NumberFormatSymbols_sv_FI", 
"goog.i18n.NumberFormatSymbols_sw_CD", "goog.i18n.NumberFormatSymbols_sw_KE", "goog.i18n.NumberFormatSymbols_sw_UG", "goog.i18n.NumberFormatSymbols_ta_LK", "goog.i18n.NumberFormatSymbols_ta_MY", "goog.i18n.NumberFormatSymbols_ta_SG", "goog.i18n.NumberFormatSymbols_teo", "goog.i18n.NumberFormatSymbols_teo_KE", "goog.i18n.NumberFormatSymbols_teo_UG", "goog.i18n.NumberFormatSymbols_ti", "goog.i18n.NumberFormatSymbols_ti_ER", "goog.i18n.NumberFormatSymbols_ti_ET", "goog.i18n.NumberFormatSymbols_to", 
"goog.i18n.NumberFormatSymbols_to_TO", "goog.i18n.NumberFormatSymbols_tr_CY", "goog.i18n.NumberFormatSymbols_twq", "goog.i18n.NumberFormatSymbols_twq_NE", "goog.i18n.NumberFormatSymbols_tzm", "goog.i18n.NumberFormatSymbols_tzm_Latn", "goog.i18n.NumberFormatSymbols_tzm_Latn_MA", "goog.i18n.NumberFormatSymbols_ug", "goog.i18n.NumberFormatSymbols_ug_Arab", "goog.i18n.NumberFormatSymbols_ug_Arab_CN", "goog.i18n.NumberFormatSymbols_ur_IN", "goog.i18n.NumberFormatSymbols_uz_Arab", "goog.i18n.NumberFormatSymbols_uz_Arab_AF", 
"goog.i18n.NumberFormatSymbols_uz_Cyrl", "goog.i18n.NumberFormatSymbols_uz_Cyrl_UZ", "goog.i18n.NumberFormatSymbols_vai", "goog.i18n.NumberFormatSymbols_vai_Latn", "goog.i18n.NumberFormatSymbols_vai_Latn_LR", "goog.i18n.NumberFormatSymbols_vai_Vaii", "goog.i18n.NumberFormatSymbols_vai_Vaii_LR", "goog.i18n.NumberFormatSymbols_vun", "goog.i18n.NumberFormatSymbols_vun_TZ", "goog.i18n.NumberFormatSymbols_wae", "goog.i18n.NumberFormatSymbols_wae_CH", "goog.i18n.NumberFormatSymbols_xog", "goog.i18n.NumberFormatSymbols_xog_UG", 
"goog.i18n.NumberFormatSymbols_yav", "goog.i18n.NumberFormatSymbols_yav_CM", "goog.i18n.NumberFormatSymbols_yi", "goog.i18n.NumberFormatSymbols_yi_001", "goog.i18n.NumberFormatSymbols_yo", "goog.i18n.NumberFormatSymbols_yo_BJ", "goog.i18n.NumberFormatSymbols_yo_NG", "goog.i18n.NumberFormatSymbols_zgh", "goog.i18n.NumberFormatSymbols_zgh_MA", "goog.i18n.NumberFormatSymbols_zh_Hans_HK", "goog.i18n.NumberFormatSymbols_zh_Hans_MO", "goog.i18n.NumberFormatSymbols_zh_Hans_SG", "goog.i18n.NumberFormatSymbols_zh_Hant", 
"goog.i18n.NumberFormatSymbols_zh_Hant_HK", "goog.i18n.NumberFormatSymbols_zh_Hant_MO", "goog.i18n.NumberFormatSymbols_zh_Hant_TW"], ["goog.i18n.NumberFormatSymbols"], false);
goog.addDependency("i18n/ordinalrules.js", ["goog.i18n.ordinalRules"], [], false);
goog.addDependency("i18n/pluralrules.js", ["goog.i18n.pluralRules"], [], false);
goog.addDependency("i18n/pluralrules_test.js", ["goog.i18n.pluralRulesTest"], ["goog.i18n.pluralRules", "goog.testing.jsunit"], false);
goog.addDependency("i18n/timezone.js", ["goog.i18n.TimeZone"], ["goog.array", "goog.date.DateLike", "goog.string"], false);
goog.addDependency("i18n/timezone_test.js", ["goog.i18n.TimeZoneTest"], ["goog.i18n.TimeZone", "goog.testing.jsunit"], false);
goog.addDependency("i18n/uchar.js", ["goog.i18n.uChar"], [], false);
goog.addDependency("i18n/uchar/localnamefetcher.js", ["goog.i18n.uChar.LocalNameFetcher"], ["goog.i18n.uChar.NameFetcher", "goog.i18n.uCharNames", "goog.log"], false);
goog.addDependency("i18n/uchar/localnamefetcher_test.js", ["goog.i18n.uChar.LocalNameFetcherTest"], ["goog.i18n.uChar.LocalNameFetcher", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("i18n/uchar/namefetcher.js", ["goog.i18n.uChar.NameFetcher"], [], false);
goog.addDependency("i18n/uchar/remotenamefetcher.js", ["goog.i18n.uChar.RemoteNameFetcher"], ["goog.Disposable", "goog.Uri", "goog.i18n.uChar", "goog.i18n.uChar.NameFetcher", "goog.log", "goog.net.XhrIo", "goog.structs.Map"], false);
goog.addDependency("i18n/uchar/remotenamefetcher_test.js", ["goog.i18n.uChar.RemoteNameFetcherTest"], ["goog.i18n.uChar.RemoteNameFetcher", "goog.net.XhrIo", "goog.testing.jsunit", "goog.testing.net.XhrIo", "goog.testing.recordFunction"], false);
goog.addDependency("i18n/uchar_test.js", ["goog.i18n.uCharTest"], ["goog.i18n.uChar", "goog.testing.jsunit"], false);
goog.addDependency("i18n/ucharnames.js", ["goog.i18n.uCharNames"], ["goog.i18n.uChar"], false);
goog.addDependency("i18n/ucharnames_test.js", ["goog.i18n.uCharNamesTest"], ["goog.i18n.uCharNames", "goog.testing.jsunit"], false);
goog.addDependency("iter/iter.js", ["goog.iter", "goog.iter.Iterable", "goog.iter.Iterator", "goog.iter.StopIteration"], ["goog.array", "goog.asserts", "goog.functions", "goog.math"], false);
goog.addDependency("iter/iter_test.js", ["goog.iterTest"], ["goog.iter", "goog.iter.Iterator", "goog.iter.StopIteration", "goog.testing.jsunit"], false);
goog.addDependency("json/evaljsonprocessor.js", ["goog.json.EvalJsonProcessor"], ["goog.json", "goog.json.Processor", "goog.json.Serializer"], false);
goog.addDependency("json/hybrid.js", ["goog.json.hybrid"], ["goog.asserts", "goog.json"], false);
goog.addDependency("json/hybrid_test.js", ["goog.json.hybridTest"], ["goog.json", "goog.json.hybrid", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.userAgent"], false);
goog.addDependency("json/hybridjsonprocessor.js", ["goog.json.HybridJsonProcessor"], ["goog.json.Processor", "goog.json.hybrid"], false);
goog.addDependency("json/hybridjsonprocessor_test.js", ["goog.json.HybridJsonProcessorTest"], ["goog.json.HybridJsonProcessor", "goog.json.hybrid", "goog.testing.jsunit"], false);
goog.addDependency("json/json.js", ["goog.json", "goog.json.Replacer", "goog.json.Reviver", "goog.json.Serializer"], [], false);
goog.addDependency("json/json_perf.js", ["goog.jsonPerf"], ["goog.dom", "goog.json", "goog.math", "goog.string", "goog.testing.PerformanceTable", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("json/json_test.js", ["goog.jsonTest"], ["goog.functions", "goog.json", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("json/nativejsonprocessor.js", ["goog.json.NativeJsonProcessor"], ["goog.asserts", "goog.json.Processor"], false);
goog.addDependency("json/processor.js", ["goog.json.Processor"], ["goog.string.Parser", "goog.string.Stringifier"], false);
goog.addDependency("json/processor_test.js", ["goog.json.processorTest"], ["goog.json.EvalJsonProcessor", "goog.json.NativeJsonProcessor", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("labs/dom/pagevisibilitymonitor.js", ["goog.labs.dom.PageVisibilityEvent", "goog.labs.dom.PageVisibilityMonitor", "goog.labs.dom.PageVisibilityState"], ["goog.dom", "goog.dom.vendor", "goog.events", "goog.events.Event", "goog.events.EventTarget", "goog.events.EventType", "goog.memoize"], false);
goog.addDependency("labs/dom/pagevisibilitymonitor_test.js", ["goog.labs.dom.PageVisibilityMonitorTest"], ["goog.events", "goog.functions", "goog.labs.dom.PageVisibilityMonitor", "goog.testing.PropertyReplacer", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("labs/events/nondisposableeventtarget.js", ["goog.labs.events.NonDisposableEventTarget"], ["goog.array", "goog.asserts", "goog.events.Event", "goog.events.Listenable", "goog.events.ListenerMap", "goog.object"], false);
goog.addDependency("labs/events/nondisposableeventtarget_test.js", ["goog.labs.events.NonDisposableEventTargetTest"], ["goog.events.Listenable", "goog.events.eventTargetTester", "goog.events.eventTargetTester.KeyType", "goog.events.eventTargetTester.UnlistenReturnType", "goog.labs.events.NonDisposableEventTarget", "goog.testing.jsunit"], false);
goog.addDependency("labs/events/nondisposableeventtarget_via_googevents_test.js", ["goog.labs.events.NonDisposableEventTargetGoogEventsTest"], ["goog.events", "goog.events.eventTargetTester", "goog.events.eventTargetTester.KeyType", "goog.events.eventTargetTester.UnlistenReturnType", "goog.labs.events.NonDisposableEventTarget", "goog.testing", "goog.testing.jsunit"], false);
goog.addDependency("labs/events/touch.js", ["goog.labs.events.touch", "goog.labs.events.touch.TouchData"], ["goog.array", "goog.asserts", "goog.events.EventType", "goog.string"], false);
goog.addDependency("labs/events/touch_test.js", ["goog.labs.events.touchTest"], ["goog.labs.events.touch", "goog.testing.jsunit"], false);
goog.addDependency("labs/format/csv.js", ["goog.labs.format.csv", "goog.labs.format.csv.ParseError", "goog.labs.format.csv.Token"], ["goog.array", "goog.asserts", "goog.debug.Error", "goog.object", "goog.string", "goog.string.newlines"], false);
goog.addDependency("labs/format/csv_test.js", ["goog.labs.format.csvTest"], ["goog.labs.format.csv", "goog.labs.format.csv.ParseError", "goog.object", "goog.testing.asserts", "goog.testing.jsunit"], false);
goog.addDependency("labs/html/attribute_rewriter.js", ["goog.labs.html.AttributeRewriter", "goog.labs.html.AttributeValue", "goog.labs.html.attributeRewriterPresubmitWorkaround"], [], false);
goog.addDependency("labs/html/sanitizer.js", ["goog.labs.html.Sanitizer"], ["goog.asserts", "goog.html.SafeUrl", "goog.labs.html.attributeRewriterPresubmitWorkaround", "goog.labs.html.scrubber", "goog.object", "goog.string"], false);
goog.addDependency("labs/html/sanitizer_test.js", ["goog.labs.html.SanitizerTest"], ["goog.html.SafeUrl", "goog.labs.html.Sanitizer", "goog.string", "goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("labs/html/scrubber.js", ["goog.labs.html.scrubber"], ["goog.array", "goog.dom.tags", "goog.labs.html.attributeRewriterPresubmitWorkaround", "goog.string"], false);
goog.addDependency("labs/html/scrubber_test.js", ["goog.html.ScrubberTest"], ["goog.labs.html.scrubber", "goog.object", "goog.string", "goog.testing.jsunit"], false);
goog.addDependency("labs/i18n/listformat.js", ["goog.labs.i18n.GenderInfo", "goog.labs.i18n.GenderInfo.Gender", "goog.labs.i18n.ListFormat"], ["goog.asserts", "goog.labs.i18n.ListFormatSymbols"], false);
goog.addDependency("labs/i18n/listformat_test.js", ["goog.labs.i18n.ListFormatTest"], ["goog.labs.i18n.GenderInfo", "goog.labs.i18n.ListFormat", "goog.labs.i18n.ListFormatSymbols", "goog.labs.i18n.ListFormatSymbols_el", "goog.labs.i18n.ListFormatSymbols_en", "goog.labs.i18n.ListFormatSymbols_fr", "goog.labs.i18n.ListFormatSymbols_ml", "goog.labs.i18n.ListFormatSymbols_zu", "goog.testing.jsunit"], false);
goog.addDependency("labs/i18n/listsymbols.js", ["goog.labs.i18n.ListFormatSymbols", "goog.labs.i18n.ListFormatSymbols_af", "goog.labs.i18n.ListFormatSymbols_am", "goog.labs.i18n.ListFormatSymbols_ar", "goog.labs.i18n.ListFormatSymbols_az", "goog.labs.i18n.ListFormatSymbols_bg", "goog.labs.i18n.ListFormatSymbols_bn", "goog.labs.i18n.ListFormatSymbols_br", "goog.labs.i18n.ListFormatSymbols_ca", "goog.labs.i18n.ListFormatSymbols_chr", "goog.labs.i18n.ListFormatSymbols_cs", "goog.labs.i18n.ListFormatSymbols_cy", 
"goog.labs.i18n.ListFormatSymbols_da", "goog.labs.i18n.ListFormatSymbols_de", "goog.labs.i18n.ListFormatSymbols_de_AT", "goog.labs.i18n.ListFormatSymbols_de_CH", "goog.labs.i18n.ListFormatSymbols_el", "goog.labs.i18n.ListFormatSymbols_en", "goog.labs.i18n.ListFormatSymbols_en_AU", "goog.labs.i18n.ListFormatSymbols_en_GB", "goog.labs.i18n.ListFormatSymbols_en_IE", "goog.labs.i18n.ListFormatSymbols_en_IN", "goog.labs.i18n.ListFormatSymbols_en_SG", "goog.labs.i18n.ListFormatSymbols_en_US", "goog.labs.i18n.ListFormatSymbols_en_ZA", 
"goog.labs.i18n.ListFormatSymbols_es", "goog.labs.i18n.ListFormatSymbols_es_419", "goog.labs.i18n.ListFormatSymbols_es_ES", "goog.labs.i18n.ListFormatSymbols_et", "goog.labs.i18n.ListFormatSymbols_eu", "goog.labs.i18n.ListFormatSymbols_fa", "goog.labs.i18n.ListFormatSymbols_fi", "goog.labs.i18n.ListFormatSymbols_fil", "goog.labs.i18n.ListFormatSymbols_fr", "goog.labs.i18n.ListFormatSymbols_fr_CA", "goog.labs.i18n.ListFormatSymbols_ga", "goog.labs.i18n.ListFormatSymbols_gl", "goog.labs.i18n.ListFormatSymbols_gsw", 
"goog.labs.i18n.ListFormatSymbols_gu", "goog.labs.i18n.ListFormatSymbols_haw", "goog.labs.i18n.ListFormatSymbols_he", "goog.labs.i18n.ListFormatSymbols_hi", "goog.labs.i18n.ListFormatSymbols_hr", "goog.labs.i18n.ListFormatSymbols_hu", "goog.labs.i18n.ListFormatSymbols_hy", "goog.labs.i18n.ListFormatSymbols_id", "goog.labs.i18n.ListFormatSymbols_in", "goog.labs.i18n.ListFormatSymbols_is", "goog.labs.i18n.ListFormatSymbols_it", "goog.labs.i18n.ListFormatSymbols_iw", "goog.labs.i18n.ListFormatSymbols_ja", 
"goog.labs.i18n.ListFormatSymbols_ka", "goog.labs.i18n.ListFormatSymbols_kk", "goog.labs.i18n.ListFormatSymbols_km", "goog.labs.i18n.ListFormatSymbols_kn", "goog.labs.i18n.ListFormatSymbols_ko", "goog.labs.i18n.ListFormatSymbols_ky", "goog.labs.i18n.ListFormatSymbols_ln", "goog.labs.i18n.ListFormatSymbols_lo", "goog.labs.i18n.ListFormatSymbols_lt", "goog.labs.i18n.ListFormatSymbols_lv", "goog.labs.i18n.ListFormatSymbols_mk", "goog.labs.i18n.ListFormatSymbols_ml", "goog.labs.i18n.ListFormatSymbols_mn", 
"goog.labs.i18n.ListFormatSymbols_mo", "goog.labs.i18n.ListFormatSymbols_mr", "goog.labs.i18n.ListFormatSymbols_ms", "goog.labs.i18n.ListFormatSymbols_mt", "goog.labs.i18n.ListFormatSymbols_my", "goog.labs.i18n.ListFormatSymbols_nb", "goog.labs.i18n.ListFormatSymbols_ne", "goog.labs.i18n.ListFormatSymbols_nl", "goog.labs.i18n.ListFormatSymbols_no", "goog.labs.i18n.ListFormatSymbols_no_NO", "goog.labs.i18n.ListFormatSymbols_or", "goog.labs.i18n.ListFormatSymbols_pa", "goog.labs.i18n.ListFormatSymbols_pl", 
"goog.labs.i18n.ListFormatSymbols_pt", "goog.labs.i18n.ListFormatSymbols_pt_BR", "goog.labs.i18n.ListFormatSymbols_pt_PT", "goog.labs.i18n.ListFormatSymbols_ro", "goog.labs.i18n.ListFormatSymbols_ru", "goog.labs.i18n.ListFormatSymbols_sh", "goog.labs.i18n.ListFormatSymbols_si", "goog.labs.i18n.ListFormatSymbols_sk", "goog.labs.i18n.ListFormatSymbols_sl", "goog.labs.i18n.ListFormatSymbols_sq", "goog.labs.i18n.ListFormatSymbols_sr", "goog.labs.i18n.ListFormatSymbols_sv", "goog.labs.i18n.ListFormatSymbols_sw", 
"goog.labs.i18n.ListFormatSymbols_ta", "goog.labs.i18n.ListFormatSymbols_te", "goog.labs.i18n.ListFormatSymbols_th", "goog.labs.i18n.ListFormatSymbols_tl", "goog.labs.i18n.ListFormatSymbols_tr", "goog.labs.i18n.ListFormatSymbols_uk", "goog.labs.i18n.ListFormatSymbols_ur", "goog.labs.i18n.ListFormatSymbols_uz", "goog.labs.i18n.ListFormatSymbols_vi", "goog.labs.i18n.ListFormatSymbols_zh", "goog.labs.i18n.ListFormatSymbols_zh_CN", "goog.labs.i18n.ListFormatSymbols_zh_HK", "goog.labs.i18n.ListFormatSymbols_zh_TW", 
"goog.labs.i18n.ListFormatSymbols_zu"], [], false);
goog.addDependency("labs/i18n/listsymbolsext.js", ["goog.labs.i18n.ListFormatSymbolsExt", "goog.labs.i18n.ListFormatSymbols_af_NA", "goog.labs.i18n.ListFormatSymbols_af_ZA", "goog.labs.i18n.ListFormatSymbols_agq", "goog.labs.i18n.ListFormatSymbols_agq_CM", "goog.labs.i18n.ListFormatSymbols_ak", "goog.labs.i18n.ListFormatSymbols_ak_GH", "goog.labs.i18n.ListFormatSymbols_am_ET", "goog.labs.i18n.ListFormatSymbols_ar_001", "goog.labs.i18n.ListFormatSymbols_ar_AE", "goog.labs.i18n.ListFormatSymbols_ar_BH", 
"goog.labs.i18n.ListFormatSymbols_ar_DJ", "goog.labs.i18n.ListFormatSymbols_ar_DZ", "goog.labs.i18n.ListFormatSymbols_ar_EG", "goog.labs.i18n.ListFormatSymbols_ar_EH", "goog.labs.i18n.ListFormatSymbols_ar_ER", "goog.labs.i18n.ListFormatSymbols_ar_IL", "goog.labs.i18n.ListFormatSymbols_ar_IQ", "goog.labs.i18n.ListFormatSymbols_ar_JO", "goog.labs.i18n.ListFormatSymbols_ar_KM", "goog.labs.i18n.ListFormatSymbols_ar_KW", "goog.labs.i18n.ListFormatSymbols_ar_LB", "goog.labs.i18n.ListFormatSymbols_ar_LY", 
"goog.labs.i18n.ListFormatSymbols_ar_MA", "goog.labs.i18n.ListFormatSymbols_ar_MR", "goog.labs.i18n.ListFormatSymbols_ar_OM", "goog.labs.i18n.ListFormatSymbols_ar_PS", "goog.labs.i18n.ListFormatSymbols_ar_QA", "goog.labs.i18n.ListFormatSymbols_ar_SA", "goog.labs.i18n.ListFormatSymbols_ar_SD", "goog.labs.i18n.ListFormatSymbols_ar_SO", "goog.labs.i18n.ListFormatSymbols_ar_SS", "goog.labs.i18n.ListFormatSymbols_ar_SY", "goog.labs.i18n.ListFormatSymbols_ar_TD", "goog.labs.i18n.ListFormatSymbols_ar_TN", 
"goog.labs.i18n.ListFormatSymbols_ar_YE", "goog.labs.i18n.ListFormatSymbols_as", "goog.labs.i18n.ListFormatSymbols_as_IN", "goog.labs.i18n.ListFormatSymbols_asa", "goog.labs.i18n.ListFormatSymbols_asa_TZ", "goog.labs.i18n.ListFormatSymbols_az_Cyrl", "goog.labs.i18n.ListFormatSymbols_az_Cyrl_AZ", "goog.labs.i18n.ListFormatSymbols_az_Latn", "goog.labs.i18n.ListFormatSymbols_az_Latn_AZ", "goog.labs.i18n.ListFormatSymbols_bas", "goog.labs.i18n.ListFormatSymbols_bas_CM", "goog.labs.i18n.ListFormatSymbols_be", 
"goog.labs.i18n.ListFormatSymbols_be_BY", "goog.labs.i18n.ListFormatSymbols_bem", "goog.labs.i18n.ListFormatSymbols_bem_ZM", "goog.labs.i18n.ListFormatSymbols_bez", "goog.labs.i18n.ListFormatSymbols_bez_TZ", "goog.labs.i18n.ListFormatSymbols_bg_BG", "goog.labs.i18n.ListFormatSymbols_bm", "goog.labs.i18n.ListFormatSymbols_bm_Latn", "goog.labs.i18n.ListFormatSymbols_bm_Latn_ML", "goog.labs.i18n.ListFormatSymbols_bn_BD", "goog.labs.i18n.ListFormatSymbols_bn_IN", "goog.labs.i18n.ListFormatSymbols_bo", 
"goog.labs.i18n.ListFormatSymbols_bo_CN", "goog.labs.i18n.ListFormatSymbols_bo_IN", "goog.labs.i18n.ListFormatSymbols_br_FR", "goog.labs.i18n.ListFormatSymbols_brx", "goog.labs.i18n.ListFormatSymbols_brx_IN", "goog.labs.i18n.ListFormatSymbols_bs", "goog.labs.i18n.ListFormatSymbols_bs_Cyrl", "goog.labs.i18n.ListFormatSymbols_bs_Cyrl_BA", "goog.labs.i18n.ListFormatSymbols_bs_Latn", "goog.labs.i18n.ListFormatSymbols_bs_Latn_BA", "goog.labs.i18n.ListFormatSymbols_ca_AD", "goog.labs.i18n.ListFormatSymbols_ca_ES", 
"goog.labs.i18n.ListFormatSymbols_ca_FR", "goog.labs.i18n.ListFormatSymbols_ca_IT", "goog.labs.i18n.ListFormatSymbols_cgg", "goog.labs.i18n.ListFormatSymbols_cgg_UG", "goog.labs.i18n.ListFormatSymbols_chr_US", "goog.labs.i18n.ListFormatSymbols_cs_CZ", "goog.labs.i18n.ListFormatSymbols_cy_GB", "goog.labs.i18n.ListFormatSymbols_da_DK", "goog.labs.i18n.ListFormatSymbols_da_GL", "goog.labs.i18n.ListFormatSymbols_dav", "goog.labs.i18n.ListFormatSymbols_dav_KE", "goog.labs.i18n.ListFormatSymbols_de_BE", 
"goog.labs.i18n.ListFormatSymbols_de_DE", "goog.labs.i18n.ListFormatSymbols_de_LI", "goog.labs.i18n.ListFormatSymbols_de_LU", "goog.labs.i18n.ListFormatSymbols_dje", "goog.labs.i18n.ListFormatSymbols_dje_NE", "goog.labs.i18n.ListFormatSymbols_dsb", "goog.labs.i18n.ListFormatSymbols_dsb_DE", "goog.labs.i18n.ListFormatSymbols_dua", "goog.labs.i18n.ListFormatSymbols_dua_CM", "goog.labs.i18n.ListFormatSymbols_dyo", "goog.labs.i18n.ListFormatSymbols_dyo_SN", "goog.labs.i18n.ListFormatSymbols_dz", "goog.labs.i18n.ListFormatSymbols_dz_BT", 
"goog.labs.i18n.ListFormatSymbols_ebu", "goog.labs.i18n.ListFormatSymbols_ebu_KE", "goog.labs.i18n.ListFormatSymbols_ee", "goog.labs.i18n.ListFormatSymbols_ee_GH", "goog.labs.i18n.ListFormatSymbols_ee_TG", "goog.labs.i18n.ListFormatSymbols_el_CY", "goog.labs.i18n.ListFormatSymbols_el_GR", "goog.labs.i18n.ListFormatSymbols_en_001", "goog.labs.i18n.ListFormatSymbols_en_150", "goog.labs.i18n.ListFormatSymbols_en_AG", "goog.labs.i18n.ListFormatSymbols_en_AI", "goog.labs.i18n.ListFormatSymbols_en_AS", 
"goog.labs.i18n.ListFormatSymbols_en_BB", "goog.labs.i18n.ListFormatSymbols_en_BE", "goog.labs.i18n.ListFormatSymbols_en_BM", "goog.labs.i18n.ListFormatSymbols_en_BS", "goog.labs.i18n.ListFormatSymbols_en_BW", "goog.labs.i18n.ListFormatSymbols_en_BZ", "goog.labs.i18n.ListFormatSymbols_en_CA", "goog.labs.i18n.ListFormatSymbols_en_CC", "goog.labs.i18n.ListFormatSymbols_en_CK", "goog.labs.i18n.ListFormatSymbols_en_CM", "goog.labs.i18n.ListFormatSymbols_en_CX", "goog.labs.i18n.ListFormatSymbols_en_DG", 
"goog.labs.i18n.ListFormatSymbols_en_DM", "goog.labs.i18n.ListFormatSymbols_en_ER", "goog.labs.i18n.ListFormatSymbols_en_FJ", "goog.labs.i18n.ListFormatSymbols_en_FK", "goog.labs.i18n.ListFormatSymbols_en_FM", "goog.labs.i18n.ListFormatSymbols_en_GD", "goog.labs.i18n.ListFormatSymbols_en_GG", "goog.labs.i18n.ListFormatSymbols_en_GH", "goog.labs.i18n.ListFormatSymbols_en_GI", "goog.labs.i18n.ListFormatSymbols_en_GM", "goog.labs.i18n.ListFormatSymbols_en_GU", "goog.labs.i18n.ListFormatSymbols_en_GY", 
"goog.labs.i18n.ListFormatSymbols_en_HK", "goog.labs.i18n.ListFormatSymbols_en_IM", "goog.labs.i18n.ListFormatSymbols_en_IO", "goog.labs.i18n.ListFormatSymbols_en_JE", "goog.labs.i18n.ListFormatSymbols_en_JM", "goog.labs.i18n.ListFormatSymbols_en_KE", "goog.labs.i18n.ListFormatSymbols_en_KI", "goog.labs.i18n.ListFormatSymbols_en_KN", "goog.labs.i18n.ListFormatSymbols_en_KY", "goog.labs.i18n.ListFormatSymbols_en_LC", "goog.labs.i18n.ListFormatSymbols_en_LR", "goog.labs.i18n.ListFormatSymbols_en_LS", 
"goog.labs.i18n.ListFormatSymbols_en_MG", "goog.labs.i18n.ListFormatSymbols_en_MH", "goog.labs.i18n.ListFormatSymbols_en_MO", "goog.labs.i18n.ListFormatSymbols_en_MP", "goog.labs.i18n.ListFormatSymbols_en_MS", "goog.labs.i18n.ListFormatSymbols_en_MT", "goog.labs.i18n.ListFormatSymbols_en_MU", "goog.labs.i18n.ListFormatSymbols_en_MW", "goog.labs.i18n.ListFormatSymbols_en_MY", "goog.labs.i18n.ListFormatSymbols_en_NA", "goog.labs.i18n.ListFormatSymbols_en_NF", "goog.labs.i18n.ListFormatSymbols_en_NG", 
"goog.labs.i18n.ListFormatSymbols_en_NR", "goog.labs.i18n.ListFormatSymbols_en_NU", "goog.labs.i18n.ListFormatSymbols_en_NZ", "goog.labs.i18n.ListFormatSymbols_en_PG", "goog.labs.i18n.ListFormatSymbols_en_PH", "goog.labs.i18n.ListFormatSymbols_en_PK", "goog.labs.i18n.ListFormatSymbols_en_PN", "goog.labs.i18n.ListFormatSymbols_en_PR", "goog.labs.i18n.ListFormatSymbols_en_PW", "goog.labs.i18n.ListFormatSymbols_en_RW", "goog.labs.i18n.ListFormatSymbols_en_SB", "goog.labs.i18n.ListFormatSymbols_en_SC", 
"goog.labs.i18n.ListFormatSymbols_en_SD", "goog.labs.i18n.ListFormatSymbols_en_SH", "goog.labs.i18n.ListFormatSymbols_en_SL", "goog.labs.i18n.ListFormatSymbols_en_SS", "goog.labs.i18n.ListFormatSymbols_en_SX", "goog.labs.i18n.ListFormatSymbols_en_SZ", "goog.labs.i18n.ListFormatSymbols_en_TC", "goog.labs.i18n.ListFormatSymbols_en_TK", "goog.labs.i18n.ListFormatSymbols_en_TO", "goog.labs.i18n.ListFormatSymbols_en_TT", "goog.labs.i18n.ListFormatSymbols_en_TV", "goog.labs.i18n.ListFormatSymbols_en_TZ", 
"goog.labs.i18n.ListFormatSymbols_en_UG", "goog.labs.i18n.ListFormatSymbols_en_UM", "goog.labs.i18n.ListFormatSymbols_en_US_POSIX", "goog.labs.i18n.ListFormatSymbols_en_VC", "goog.labs.i18n.ListFormatSymbols_en_VG", "goog.labs.i18n.ListFormatSymbols_en_VI", "goog.labs.i18n.ListFormatSymbols_en_VU", "goog.labs.i18n.ListFormatSymbols_en_WS", "goog.labs.i18n.ListFormatSymbols_en_ZM", "goog.labs.i18n.ListFormatSymbols_en_ZW", "goog.labs.i18n.ListFormatSymbols_eo", "goog.labs.i18n.ListFormatSymbols_es_AR", 
"goog.labs.i18n.ListFormatSymbols_es_BO", "goog.labs.i18n.ListFormatSymbols_es_CL", "goog.labs.i18n.ListFormatSymbols_es_CO", "goog.labs.i18n.ListFormatSymbols_es_CR", "goog.labs.i18n.ListFormatSymbols_es_CU", "goog.labs.i18n.ListFormatSymbols_es_DO", "goog.labs.i18n.ListFormatSymbols_es_EA", "goog.labs.i18n.ListFormatSymbols_es_EC", "goog.labs.i18n.ListFormatSymbols_es_GQ", "goog.labs.i18n.ListFormatSymbols_es_GT", "goog.labs.i18n.ListFormatSymbols_es_HN", "goog.labs.i18n.ListFormatSymbols_es_IC", 
"goog.labs.i18n.ListFormatSymbols_es_MX", "goog.labs.i18n.ListFormatSymbols_es_NI", "goog.labs.i18n.ListFormatSymbols_es_PA", "goog.labs.i18n.ListFormatSymbols_es_PE", "goog.labs.i18n.ListFormatSymbols_es_PH", "goog.labs.i18n.ListFormatSymbols_es_PR", "goog.labs.i18n.ListFormatSymbols_es_PY", "goog.labs.i18n.ListFormatSymbols_es_SV", "goog.labs.i18n.ListFormatSymbols_es_US", "goog.labs.i18n.ListFormatSymbols_es_UY", "goog.labs.i18n.ListFormatSymbols_es_VE", "goog.labs.i18n.ListFormatSymbols_et_EE", 
"goog.labs.i18n.ListFormatSymbols_eu_ES", "goog.labs.i18n.ListFormatSymbols_ewo", "goog.labs.i18n.ListFormatSymbols_ewo_CM", "goog.labs.i18n.ListFormatSymbols_fa_AF", "goog.labs.i18n.ListFormatSymbols_fa_IR", "goog.labs.i18n.ListFormatSymbols_ff", "goog.labs.i18n.ListFormatSymbols_ff_CM", "goog.labs.i18n.ListFormatSymbols_ff_GN", "goog.labs.i18n.ListFormatSymbols_ff_MR", "goog.labs.i18n.ListFormatSymbols_ff_SN", "goog.labs.i18n.ListFormatSymbols_fi_FI", "goog.labs.i18n.ListFormatSymbols_fil_PH", 
"goog.labs.i18n.ListFormatSymbols_fo", "goog.labs.i18n.ListFormatSymbols_fo_FO", "goog.labs.i18n.ListFormatSymbols_fr_BE", "goog.labs.i18n.ListFormatSymbols_fr_BF", "goog.labs.i18n.ListFormatSymbols_fr_BI", "goog.labs.i18n.ListFormatSymbols_fr_BJ", "goog.labs.i18n.ListFormatSymbols_fr_BL", "goog.labs.i18n.ListFormatSymbols_fr_CD", "goog.labs.i18n.ListFormatSymbols_fr_CF", "goog.labs.i18n.ListFormatSymbols_fr_CG", "goog.labs.i18n.ListFormatSymbols_fr_CH", "goog.labs.i18n.ListFormatSymbols_fr_CI", 
"goog.labs.i18n.ListFormatSymbols_fr_CM", "goog.labs.i18n.ListFormatSymbols_fr_DJ", "goog.labs.i18n.ListFormatSymbols_fr_DZ", "goog.labs.i18n.ListFormatSymbols_fr_FR", "goog.labs.i18n.ListFormatSymbols_fr_GA", "goog.labs.i18n.ListFormatSymbols_fr_GF", "goog.labs.i18n.ListFormatSymbols_fr_GN", "goog.labs.i18n.ListFormatSymbols_fr_GP", "goog.labs.i18n.ListFormatSymbols_fr_GQ", "goog.labs.i18n.ListFormatSymbols_fr_HT", "goog.labs.i18n.ListFormatSymbols_fr_KM", "goog.labs.i18n.ListFormatSymbols_fr_LU", 
"goog.labs.i18n.ListFormatSymbols_fr_MA", "goog.labs.i18n.ListFormatSymbols_fr_MC", "goog.labs.i18n.ListFormatSymbols_fr_MF", "goog.labs.i18n.ListFormatSymbols_fr_MG", "goog.labs.i18n.ListFormatSymbols_fr_ML", "goog.labs.i18n.ListFormatSymbols_fr_MQ", "goog.labs.i18n.ListFormatSymbols_fr_MR", "goog.labs.i18n.ListFormatSymbols_fr_MU", "goog.labs.i18n.ListFormatSymbols_fr_NC", "goog.labs.i18n.ListFormatSymbols_fr_NE", "goog.labs.i18n.ListFormatSymbols_fr_PF", "goog.labs.i18n.ListFormatSymbols_fr_PM", 
"goog.labs.i18n.ListFormatSymbols_fr_RE", "goog.labs.i18n.ListFormatSymbols_fr_RW", "goog.labs.i18n.ListFormatSymbols_fr_SC", "goog.labs.i18n.ListFormatSymbols_fr_SN", "goog.labs.i18n.ListFormatSymbols_fr_SY", "goog.labs.i18n.ListFormatSymbols_fr_TD", "goog.labs.i18n.ListFormatSymbols_fr_TG", "goog.labs.i18n.ListFormatSymbols_fr_TN", "goog.labs.i18n.ListFormatSymbols_fr_VU", "goog.labs.i18n.ListFormatSymbols_fr_WF", "goog.labs.i18n.ListFormatSymbols_fr_YT", "goog.labs.i18n.ListFormatSymbols_fur", 
"goog.labs.i18n.ListFormatSymbols_fur_IT", "goog.labs.i18n.ListFormatSymbols_fy", "goog.labs.i18n.ListFormatSymbols_fy_NL", "goog.labs.i18n.ListFormatSymbols_ga_IE", "goog.labs.i18n.ListFormatSymbols_gd", "goog.labs.i18n.ListFormatSymbols_gd_GB", "goog.labs.i18n.ListFormatSymbols_gl_ES", "goog.labs.i18n.ListFormatSymbols_gsw_CH", "goog.labs.i18n.ListFormatSymbols_gsw_FR", "goog.labs.i18n.ListFormatSymbols_gsw_LI", "goog.labs.i18n.ListFormatSymbols_gu_IN", "goog.labs.i18n.ListFormatSymbols_guz", "goog.labs.i18n.ListFormatSymbols_guz_KE", 
"goog.labs.i18n.ListFormatSymbols_gv", "goog.labs.i18n.ListFormatSymbols_gv_IM", "goog.labs.i18n.ListFormatSymbols_ha", "goog.labs.i18n.ListFormatSymbols_ha_Latn", "goog.labs.i18n.ListFormatSymbols_ha_Latn_GH", "goog.labs.i18n.ListFormatSymbols_ha_Latn_NE", "goog.labs.i18n.ListFormatSymbols_ha_Latn_NG", "goog.labs.i18n.ListFormatSymbols_haw_US", "goog.labs.i18n.ListFormatSymbols_he_IL", "goog.labs.i18n.ListFormatSymbols_hi_IN", "goog.labs.i18n.ListFormatSymbols_hr_BA", "goog.labs.i18n.ListFormatSymbols_hr_HR", 
"goog.labs.i18n.ListFormatSymbols_hsb", "goog.labs.i18n.ListFormatSymbols_hsb_DE", "goog.labs.i18n.ListFormatSymbols_hu_HU", "goog.labs.i18n.ListFormatSymbols_hy_AM", "goog.labs.i18n.ListFormatSymbols_id_ID", "goog.labs.i18n.ListFormatSymbols_ig", "goog.labs.i18n.ListFormatSymbols_ig_NG", "goog.labs.i18n.ListFormatSymbols_ii", "goog.labs.i18n.ListFormatSymbols_ii_CN", "goog.labs.i18n.ListFormatSymbols_is_IS", "goog.labs.i18n.ListFormatSymbols_it_CH", "goog.labs.i18n.ListFormatSymbols_it_IT", "goog.labs.i18n.ListFormatSymbols_it_SM", 
"goog.labs.i18n.ListFormatSymbols_ja_JP", "goog.labs.i18n.ListFormatSymbols_jgo", "goog.labs.i18n.ListFormatSymbols_jgo_CM", "goog.labs.i18n.ListFormatSymbols_jmc", "goog.labs.i18n.ListFormatSymbols_jmc_TZ", "goog.labs.i18n.ListFormatSymbols_ka_GE", "goog.labs.i18n.ListFormatSymbols_kab", "goog.labs.i18n.ListFormatSymbols_kab_DZ", "goog.labs.i18n.ListFormatSymbols_kam", "goog.labs.i18n.ListFormatSymbols_kam_KE", "goog.labs.i18n.ListFormatSymbols_kde", "goog.labs.i18n.ListFormatSymbols_kde_TZ", "goog.labs.i18n.ListFormatSymbols_kea", 
"goog.labs.i18n.ListFormatSymbols_kea_CV", "goog.labs.i18n.ListFormatSymbols_khq", "goog.labs.i18n.ListFormatSymbols_khq_ML", "goog.labs.i18n.ListFormatSymbols_ki", "goog.labs.i18n.ListFormatSymbols_ki_KE", "goog.labs.i18n.ListFormatSymbols_kk_Cyrl", "goog.labs.i18n.ListFormatSymbols_kk_Cyrl_KZ", "goog.labs.i18n.ListFormatSymbols_kkj", "goog.labs.i18n.ListFormatSymbols_kkj_CM", "goog.labs.i18n.ListFormatSymbols_kl", "goog.labs.i18n.ListFormatSymbols_kl_GL", "goog.labs.i18n.ListFormatSymbols_kln", 
"goog.labs.i18n.ListFormatSymbols_kln_KE", "goog.labs.i18n.ListFormatSymbols_km_KH", "goog.labs.i18n.ListFormatSymbols_kn_IN", "goog.labs.i18n.ListFormatSymbols_ko_KP", "goog.labs.i18n.ListFormatSymbols_ko_KR", "goog.labs.i18n.ListFormatSymbols_kok", "goog.labs.i18n.ListFormatSymbols_kok_IN", "goog.labs.i18n.ListFormatSymbols_ks", "goog.labs.i18n.ListFormatSymbols_ks_Arab", "goog.labs.i18n.ListFormatSymbols_ks_Arab_IN", "goog.labs.i18n.ListFormatSymbols_ksb", "goog.labs.i18n.ListFormatSymbols_ksb_TZ", 
"goog.labs.i18n.ListFormatSymbols_ksf", "goog.labs.i18n.ListFormatSymbols_ksf_CM", "goog.labs.i18n.ListFormatSymbols_ksh", "goog.labs.i18n.ListFormatSymbols_ksh_DE", "goog.labs.i18n.ListFormatSymbols_kw", "goog.labs.i18n.ListFormatSymbols_kw_GB", "goog.labs.i18n.ListFormatSymbols_ky_Cyrl", "goog.labs.i18n.ListFormatSymbols_ky_Cyrl_KG", "goog.labs.i18n.ListFormatSymbols_lag", "goog.labs.i18n.ListFormatSymbols_lag_TZ", "goog.labs.i18n.ListFormatSymbols_lb", "goog.labs.i18n.ListFormatSymbols_lb_LU", 
"goog.labs.i18n.ListFormatSymbols_lg", "goog.labs.i18n.ListFormatSymbols_lg_UG", "goog.labs.i18n.ListFormatSymbols_lkt", "goog.labs.i18n.ListFormatSymbols_lkt_US", "goog.labs.i18n.ListFormatSymbols_ln_AO", "goog.labs.i18n.ListFormatSymbols_ln_CD", "goog.labs.i18n.ListFormatSymbols_ln_CF", "goog.labs.i18n.ListFormatSymbols_ln_CG", "goog.labs.i18n.ListFormatSymbols_lo_LA", "goog.labs.i18n.ListFormatSymbols_lt_LT", "goog.labs.i18n.ListFormatSymbols_lu", "goog.labs.i18n.ListFormatSymbols_lu_CD", "goog.labs.i18n.ListFormatSymbols_luo", 
"goog.labs.i18n.ListFormatSymbols_luo_KE", "goog.labs.i18n.ListFormatSymbols_luy", "goog.labs.i18n.ListFormatSymbols_luy_KE", "goog.labs.i18n.ListFormatSymbols_lv_LV", "goog.labs.i18n.ListFormatSymbols_mas", "goog.labs.i18n.ListFormatSymbols_mas_KE", "goog.labs.i18n.ListFormatSymbols_mas_TZ", "goog.labs.i18n.ListFormatSymbols_mer", "goog.labs.i18n.ListFormatSymbols_mer_KE", "goog.labs.i18n.ListFormatSymbols_mfe", "goog.labs.i18n.ListFormatSymbols_mfe_MU", "goog.labs.i18n.ListFormatSymbols_mg", "goog.labs.i18n.ListFormatSymbols_mg_MG", 
"goog.labs.i18n.ListFormatSymbols_mgh", "goog.labs.i18n.ListFormatSymbols_mgh_MZ", "goog.labs.i18n.ListFormatSymbols_mgo", "goog.labs.i18n.ListFormatSymbols_mgo_CM", "goog.labs.i18n.ListFormatSymbols_mk_MK", "goog.labs.i18n.ListFormatSymbols_ml_IN", "goog.labs.i18n.ListFormatSymbols_mn_Cyrl", "goog.labs.i18n.ListFormatSymbols_mn_Cyrl_MN", "goog.labs.i18n.ListFormatSymbols_mr_IN", "goog.labs.i18n.ListFormatSymbols_ms_Latn", "goog.labs.i18n.ListFormatSymbols_ms_Latn_BN", "goog.labs.i18n.ListFormatSymbols_ms_Latn_MY", 
"goog.labs.i18n.ListFormatSymbols_ms_Latn_SG", "goog.labs.i18n.ListFormatSymbols_mt_MT", "goog.labs.i18n.ListFormatSymbols_mua", "goog.labs.i18n.ListFormatSymbols_mua_CM", "goog.labs.i18n.ListFormatSymbols_my_MM", "goog.labs.i18n.ListFormatSymbols_naq", "goog.labs.i18n.ListFormatSymbols_naq_NA", "goog.labs.i18n.ListFormatSymbols_nb_NO", "goog.labs.i18n.ListFormatSymbols_nb_SJ", "goog.labs.i18n.ListFormatSymbols_nd", "goog.labs.i18n.ListFormatSymbols_nd_ZW", "goog.labs.i18n.ListFormatSymbols_ne_IN", 
"goog.labs.i18n.ListFormatSymbols_ne_NP", "goog.labs.i18n.ListFormatSymbols_nl_AW", "goog.labs.i18n.ListFormatSymbols_nl_BE", "goog.labs.i18n.ListFormatSymbols_nl_BQ", "goog.labs.i18n.ListFormatSymbols_nl_CW", "goog.labs.i18n.ListFormatSymbols_nl_NL", "goog.labs.i18n.ListFormatSymbols_nl_SR", "goog.labs.i18n.ListFormatSymbols_nl_SX", "goog.labs.i18n.ListFormatSymbols_nmg", "goog.labs.i18n.ListFormatSymbols_nmg_CM", "goog.labs.i18n.ListFormatSymbols_nn", "goog.labs.i18n.ListFormatSymbols_nn_NO", "goog.labs.i18n.ListFormatSymbols_nnh", 
"goog.labs.i18n.ListFormatSymbols_nnh_CM", "goog.labs.i18n.ListFormatSymbols_nus", "goog.labs.i18n.ListFormatSymbols_nus_SD", "goog.labs.i18n.ListFormatSymbols_nyn", "goog.labs.i18n.ListFormatSymbols_nyn_UG", "goog.labs.i18n.ListFormatSymbols_om", "goog.labs.i18n.ListFormatSymbols_om_ET", "goog.labs.i18n.ListFormatSymbols_om_KE", "goog.labs.i18n.ListFormatSymbols_or_IN", "goog.labs.i18n.ListFormatSymbols_os", "goog.labs.i18n.ListFormatSymbols_os_GE", "goog.labs.i18n.ListFormatSymbols_os_RU", "goog.labs.i18n.ListFormatSymbols_pa_Arab", 
"goog.labs.i18n.ListFormatSymbols_pa_Arab_PK", "goog.labs.i18n.ListFormatSymbols_pa_Guru", "goog.labs.i18n.ListFormatSymbols_pa_Guru_IN", "goog.labs.i18n.ListFormatSymbols_pl_PL", "goog.labs.i18n.ListFormatSymbols_ps", "goog.labs.i18n.ListFormatSymbols_ps_AF", "goog.labs.i18n.ListFormatSymbols_pt_AO", "goog.labs.i18n.ListFormatSymbols_pt_CV", "goog.labs.i18n.ListFormatSymbols_pt_GW", "goog.labs.i18n.ListFormatSymbols_pt_MO", "goog.labs.i18n.ListFormatSymbols_pt_MZ", "goog.labs.i18n.ListFormatSymbols_pt_ST", 
"goog.labs.i18n.ListFormatSymbols_pt_TL", "goog.labs.i18n.ListFormatSymbols_qu", "goog.labs.i18n.ListFormatSymbols_qu_BO", "goog.labs.i18n.ListFormatSymbols_qu_EC", "goog.labs.i18n.ListFormatSymbols_qu_PE", "goog.labs.i18n.ListFormatSymbols_rm", "goog.labs.i18n.ListFormatSymbols_rm_CH", "goog.labs.i18n.ListFormatSymbols_rn", "goog.labs.i18n.ListFormatSymbols_rn_BI", "goog.labs.i18n.ListFormatSymbols_ro_MD", "goog.labs.i18n.ListFormatSymbols_ro_RO", "goog.labs.i18n.ListFormatSymbols_rof", "goog.labs.i18n.ListFormatSymbols_rof_TZ", 
"goog.labs.i18n.ListFormatSymbols_ru_BY", "goog.labs.i18n.ListFormatSymbols_ru_KG", "goog.labs.i18n.ListFormatSymbols_ru_KZ", "goog.labs.i18n.ListFormatSymbols_ru_MD", "goog.labs.i18n.ListFormatSymbols_ru_RU", "goog.labs.i18n.ListFormatSymbols_ru_UA", "goog.labs.i18n.ListFormatSymbols_rw", "goog.labs.i18n.ListFormatSymbols_rw_RW", "goog.labs.i18n.ListFormatSymbols_rwk", "goog.labs.i18n.ListFormatSymbols_rwk_TZ", "goog.labs.i18n.ListFormatSymbols_sah", "goog.labs.i18n.ListFormatSymbols_sah_RU", "goog.labs.i18n.ListFormatSymbols_saq", 
"goog.labs.i18n.ListFormatSymbols_saq_KE", "goog.labs.i18n.ListFormatSymbols_sbp", "goog.labs.i18n.ListFormatSymbols_sbp_TZ", "goog.labs.i18n.ListFormatSymbols_se", "goog.labs.i18n.ListFormatSymbols_se_FI", "goog.labs.i18n.ListFormatSymbols_se_NO", "goog.labs.i18n.ListFormatSymbols_se_SE", "goog.labs.i18n.ListFormatSymbols_seh", "goog.labs.i18n.ListFormatSymbols_seh_MZ", "goog.labs.i18n.ListFormatSymbols_ses", "goog.labs.i18n.ListFormatSymbols_ses_ML", "goog.labs.i18n.ListFormatSymbols_sg", "goog.labs.i18n.ListFormatSymbols_sg_CF", 
"goog.labs.i18n.ListFormatSymbols_shi", "goog.labs.i18n.ListFormatSymbols_shi_Latn", "goog.labs.i18n.ListFormatSymbols_shi_Latn_MA", "goog.labs.i18n.ListFormatSymbols_shi_Tfng", "goog.labs.i18n.ListFormatSymbols_shi_Tfng_MA", "goog.labs.i18n.ListFormatSymbols_si_LK", "goog.labs.i18n.ListFormatSymbols_sk_SK", "goog.labs.i18n.ListFormatSymbols_sl_SI", "goog.labs.i18n.ListFormatSymbols_smn", "goog.labs.i18n.ListFormatSymbols_smn_FI", "goog.labs.i18n.ListFormatSymbols_sn", "goog.labs.i18n.ListFormatSymbols_sn_ZW", 
"goog.labs.i18n.ListFormatSymbols_so", "goog.labs.i18n.ListFormatSymbols_so_DJ", "goog.labs.i18n.ListFormatSymbols_so_ET", "goog.labs.i18n.ListFormatSymbols_so_KE", "goog.labs.i18n.ListFormatSymbols_so_SO", "goog.labs.i18n.ListFormatSymbols_sq_AL", "goog.labs.i18n.ListFormatSymbols_sq_MK", "goog.labs.i18n.ListFormatSymbols_sq_XK", "goog.labs.i18n.ListFormatSymbols_sr_Cyrl", "goog.labs.i18n.ListFormatSymbols_sr_Cyrl_BA", "goog.labs.i18n.ListFormatSymbols_sr_Cyrl_ME", "goog.labs.i18n.ListFormatSymbols_sr_Cyrl_RS", 
"goog.labs.i18n.ListFormatSymbols_sr_Cyrl_XK", "goog.labs.i18n.ListFormatSymbols_sr_Latn", "goog.labs.i18n.ListFormatSymbols_sr_Latn_BA", "goog.labs.i18n.ListFormatSymbols_sr_Latn_ME", "goog.labs.i18n.ListFormatSymbols_sr_Latn_RS", "goog.labs.i18n.ListFormatSymbols_sr_Latn_XK", "goog.labs.i18n.ListFormatSymbols_sv_AX", "goog.labs.i18n.ListFormatSymbols_sv_FI", "goog.labs.i18n.ListFormatSymbols_sv_SE", "goog.labs.i18n.ListFormatSymbols_sw_CD", "goog.labs.i18n.ListFormatSymbols_sw_KE", "goog.labs.i18n.ListFormatSymbols_sw_TZ", 
"goog.labs.i18n.ListFormatSymbols_sw_UG", "goog.labs.i18n.ListFormatSymbols_ta_IN", "goog.labs.i18n.ListFormatSymbols_ta_LK", "goog.labs.i18n.ListFormatSymbols_ta_MY", "goog.labs.i18n.ListFormatSymbols_ta_SG", "goog.labs.i18n.ListFormatSymbols_te_IN", "goog.labs.i18n.ListFormatSymbols_teo", "goog.labs.i18n.ListFormatSymbols_teo_KE", "goog.labs.i18n.ListFormatSymbols_teo_UG", "goog.labs.i18n.ListFormatSymbols_th_TH", "goog.labs.i18n.ListFormatSymbols_ti", "goog.labs.i18n.ListFormatSymbols_ti_ER", 
"goog.labs.i18n.ListFormatSymbols_ti_ET", "goog.labs.i18n.ListFormatSymbols_to", "goog.labs.i18n.ListFormatSymbols_to_TO", "goog.labs.i18n.ListFormatSymbols_tr_CY", "goog.labs.i18n.ListFormatSymbols_tr_TR", "goog.labs.i18n.ListFormatSymbols_twq", "goog.labs.i18n.ListFormatSymbols_twq_NE", "goog.labs.i18n.ListFormatSymbols_tzm", "goog.labs.i18n.ListFormatSymbols_tzm_Latn", "goog.labs.i18n.ListFormatSymbols_tzm_Latn_MA", "goog.labs.i18n.ListFormatSymbols_ug", "goog.labs.i18n.ListFormatSymbols_ug_Arab", 
"goog.labs.i18n.ListFormatSymbols_ug_Arab_CN", "goog.labs.i18n.ListFormatSymbols_uk_UA", "goog.labs.i18n.ListFormatSymbols_ur_IN", "goog.labs.i18n.ListFormatSymbols_ur_PK", "goog.labs.i18n.ListFormatSymbols_uz_Arab", "goog.labs.i18n.ListFormatSymbols_uz_Arab_AF", "goog.labs.i18n.ListFormatSymbols_uz_Cyrl", "goog.labs.i18n.ListFormatSymbols_uz_Cyrl_UZ", "goog.labs.i18n.ListFormatSymbols_uz_Latn", "goog.labs.i18n.ListFormatSymbols_uz_Latn_UZ", "goog.labs.i18n.ListFormatSymbols_vai", "goog.labs.i18n.ListFormatSymbols_vai_Latn", 
"goog.labs.i18n.ListFormatSymbols_vai_Latn_LR", "goog.labs.i18n.ListFormatSymbols_vai_Vaii", "goog.labs.i18n.ListFormatSymbols_vai_Vaii_LR", "goog.labs.i18n.ListFormatSymbols_vi_VN", "goog.labs.i18n.ListFormatSymbols_vun", "goog.labs.i18n.ListFormatSymbols_vun_TZ", "goog.labs.i18n.ListFormatSymbols_wae", "goog.labs.i18n.ListFormatSymbols_wae_CH", "goog.labs.i18n.ListFormatSymbols_xog", "goog.labs.i18n.ListFormatSymbols_xog_UG", "goog.labs.i18n.ListFormatSymbols_yav", "goog.labs.i18n.ListFormatSymbols_yav_CM", 
"goog.labs.i18n.ListFormatSymbols_yi", "goog.labs.i18n.ListFormatSymbols_yi_001", "goog.labs.i18n.ListFormatSymbols_yo", "goog.labs.i18n.ListFormatSymbols_yo_BJ", "goog.labs.i18n.ListFormatSymbols_yo_NG", "goog.labs.i18n.ListFormatSymbols_zgh", "goog.labs.i18n.ListFormatSymbols_zgh_MA", "goog.labs.i18n.ListFormatSymbols_zh_Hans", "goog.labs.i18n.ListFormatSymbols_zh_Hans_CN", "goog.labs.i18n.ListFormatSymbols_zh_Hans_HK", "goog.labs.i18n.ListFormatSymbols_zh_Hans_MO", "goog.labs.i18n.ListFormatSymbols_zh_Hans_SG", 
"goog.labs.i18n.ListFormatSymbols_zh_Hant", "goog.labs.i18n.ListFormatSymbols_zh_Hant_HK", "goog.labs.i18n.ListFormatSymbols_zh_Hant_MO", "goog.labs.i18n.ListFormatSymbols_zh_Hant_TW", "goog.labs.i18n.ListFormatSymbols_zu_ZA"], ["goog.labs.i18n.ListFormatSymbols"], false);
goog.addDependency("labs/iterable/iterable.js", ["goog.labs.iterable"], [], true);
goog.addDependency("labs/iterable/iterable_test.js", ["goog.labs.iterableTest"], ["goog.labs.iterable", "goog.testing.jsunit", "goog.testing.recordFunction"], true);
goog.addDependency("labs/mock/mock.js", ["goog.labs.mock", "goog.labs.mock.VerificationError"], ["goog.array", "goog.asserts", "goog.debug", "goog.debug.Error", "goog.functions", "goog.object"], false);
goog.addDependency("labs/mock/mock_test.js", ["goog.labs.mockTest"], ["goog.array", "goog.labs.mock", "goog.labs.mock.VerificationError", "goog.labs.testing.AnythingMatcher", "goog.labs.testing.GreaterThanMatcher", "goog.string", "goog.testing.jsunit"], false);
goog.addDependency("labs/net/image.js", ["goog.labs.net.image"], ["goog.Promise", "goog.events.EventHandler", "goog.events.EventType", "goog.net.EventType", "goog.userAgent"], false);
goog.addDependency("labs/net/image_test.js", ["goog.labs.net.imageTest"], ["goog.labs.net.image", "goog.string", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("labs/net/webchannel.js", ["goog.net.WebChannel"], ["goog.events", "goog.events.Event"], false);
goog.addDependency("labs/net/webchannel/basetestchannel.js", ["goog.labs.net.webChannel.BaseTestChannel"], ["goog.labs.net.webChannel.Channel", "goog.labs.net.webChannel.ChannelRequest", "goog.labs.net.webChannel.requestStats", "goog.labs.net.webChannel.requestStats.Stat"], false);
goog.addDependency("labs/net/webchannel/channel.js", ["goog.labs.net.webChannel.Channel"], [], false);
goog.addDependency("labs/net/webchannel/channelrequest.js", ["goog.labs.net.webChannel.ChannelRequest"], ["goog.Timer", "goog.async.Throttle", "goog.events.EventHandler", "goog.labs.net.webChannel.requestStats", "goog.labs.net.webChannel.requestStats.ServerReachability", "goog.labs.net.webChannel.requestStats.Stat", "goog.net.ErrorCode", "goog.net.EventType", "goog.net.XmlHttp", "goog.object", "goog.uri.utils.StandardQueryParam", "goog.userAgent"], false);
goog.addDependency("labs/net/webchannel/channelrequest_test.js", ["goog.labs.net.webChannel.channelRequestTest"], ["goog.Uri", "goog.functions", "goog.labs.net.webChannel.ChannelRequest", "goog.labs.net.webChannel.WebChannelDebug", "goog.labs.net.webChannel.requestStats", "goog.labs.net.webChannel.requestStats.ServerReachability", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.net.XhrIo", "goog.testing.recordFunction"], false);
goog.addDependency("labs/net/webchannel/connectionstate.js", ["goog.labs.net.webChannel.ConnectionState"], [], false);
goog.addDependency("labs/net/webchannel/forwardchannelrequestpool.js", ["goog.labs.net.webChannel.ForwardChannelRequestPool"], ["goog.array", "goog.string", "goog.structs.Set"], false);
goog.addDependency("labs/net/webchannel/forwardchannelrequestpool_test.js", ["goog.labs.net.webChannel.forwardChannelRequestPoolTest"], ["goog.labs.net.webChannel.ChannelRequest", "goog.labs.net.webChannel.ForwardChannelRequestPool", "goog.testing.PropertyReplacer", "goog.testing.asserts", "goog.testing.jsunit"], false);
goog.addDependency("labs/net/webchannel/netutils.js", ["goog.labs.net.webChannel.netUtils"], ["goog.Uri", "goog.labs.net.webChannel.WebChannelDebug"], false);
goog.addDependency("labs/net/webchannel/requeststats.js", ["goog.labs.net.webChannel.requestStats", "goog.labs.net.webChannel.requestStats.Event", "goog.labs.net.webChannel.requestStats.ServerReachability", "goog.labs.net.webChannel.requestStats.ServerReachabilityEvent", "goog.labs.net.webChannel.requestStats.Stat", "goog.labs.net.webChannel.requestStats.StatEvent", "goog.labs.net.webChannel.requestStats.TimingEvent"], ["goog.events.Event", "goog.events.EventTarget"], false);
goog.addDependency("labs/net/webchannel/webchannelbase.js", ["goog.labs.net.webChannel.WebChannelBase"], ["goog.Uri", "goog.array", "goog.asserts", "goog.debug.TextFormatter", "goog.json", "goog.labs.net.webChannel.BaseTestChannel", "goog.labs.net.webChannel.Channel", "goog.labs.net.webChannel.ChannelRequest", "goog.labs.net.webChannel.ConnectionState", "goog.labs.net.webChannel.ForwardChannelRequestPool", "goog.labs.net.webChannel.WebChannelDebug", "goog.labs.net.webChannel.Wire", "goog.labs.net.webChannel.WireV8", 
"goog.labs.net.webChannel.netUtils", "goog.labs.net.webChannel.requestStats", "goog.labs.net.webChannel.requestStats.Stat", "goog.log", "goog.net.XhrIo", "goog.object", "goog.string", "goog.structs", "goog.structs.CircularBuffer"], false);
goog.addDependency("labs/net/webchannel/webchannelbase_test.js", ["goog.labs.net.webChannel.webChannelBaseTest"], ["goog.Timer", "goog.array", "goog.dom", "goog.functions", "goog.json", "goog.labs.net.webChannel.ChannelRequest", "goog.labs.net.webChannel.ForwardChannelRequestPool", "goog.labs.net.webChannel.WebChannelBase", "goog.labs.net.webChannel.WebChannelBaseTransport", "goog.labs.net.webChannel.WebChannelDebug", "goog.labs.net.webChannel.Wire", "goog.labs.net.webChannel.netUtils", "goog.labs.net.webChannel.requestStats", 
"goog.labs.net.webChannel.requestStats.Stat", "goog.structs.Map", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.asserts", "goog.testing.jsunit"], false);
goog.addDependency("labs/net/webchannel/webchannelbasetransport.js", ["goog.labs.net.webChannel.WebChannelBaseTransport"], ["goog.asserts", "goog.events.EventTarget", "goog.labs.net.webChannel.ChannelRequest", "goog.labs.net.webChannel.WebChannelBase", "goog.log", "goog.net.WebChannel", "goog.net.WebChannelTransport", "goog.object", "goog.string.path"], false);
goog.addDependency("labs/net/webchannel/webchannelbasetransport_test.js", ["goog.labs.net.webChannel.webChannelBaseTransportTest"], ["goog.events", "goog.functions", "goog.labs.net.webChannel.ChannelRequest", "goog.labs.net.webChannel.WebChannelBaseTransport", "goog.net.WebChannel", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("labs/net/webchannel/webchanneldebug.js", ["goog.labs.net.webChannel.WebChannelDebug"], ["goog.json", "goog.log"], false);
goog.addDependency("labs/net/webchannel/wire.js", ["goog.labs.net.webChannel.Wire"], [], false);
goog.addDependency("labs/net/webchannel/wirev8.js", ["goog.labs.net.webChannel.WireV8"], ["goog.asserts", "goog.json", "goog.json.NativeJsonProcessor", "goog.structs"], false);
goog.addDependency("labs/net/webchannel/wirev8_test.js", ["goog.labs.net.webChannel.WireV8Test"], ["goog.labs.net.webChannel.WireV8", "goog.testing.jsunit"], false);
goog.addDependency("labs/net/webchanneltransport.js", ["goog.net.WebChannelTransport"], [], false);
goog.addDependency("labs/net/webchanneltransportfactory.js", ["goog.net.createWebChannelTransport"], ["goog.functions", "goog.labs.net.webChannel.WebChannelBaseTransport"], false);
goog.addDependency("labs/net/xhr.js", ["goog.labs.net.xhr", "goog.labs.net.xhr.Error", "goog.labs.net.xhr.HttpError", "goog.labs.net.xhr.Options", "goog.labs.net.xhr.PostData", "goog.labs.net.xhr.ResponseType", "goog.labs.net.xhr.TimeoutError"], ["goog.Promise", "goog.debug.Error", "goog.json", "goog.net.HttpStatus", "goog.net.XmlHttp", "goog.string", "goog.uri.utils", "goog.userAgent"], false);
goog.addDependency("labs/net/xhr_test.js", ["goog.labs.net.xhrTest"], ["goog.Promise", "goog.labs.net.xhr", "goog.net.WrapperXmlHttpFactory", "goog.net.XmlHttp", "goog.testing.MockClock", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("labs/object/object.js", ["goog.labs.object"], [], false);
goog.addDependency("labs/object/object_test.js", ["goog.labs.objectTest"], ["goog.labs.object", "goog.testing.jsunit"], false);
goog.addDependency("labs/pubsub/broadcastpubsub.js", ["goog.labs.pubsub.BroadcastPubSub"], ["goog.Disposable", "goog.Timer", "goog.array", "goog.async.run", "goog.events.EventHandler", "goog.events.EventType", "goog.json", "goog.log", "goog.math", "goog.pubsub.PubSub", "goog.storage.Storage", "goog.storage.mechanism.HTML5LocalStorage", "goog.string", "goog.userAgent"], false);
goog.addDependency("labs/pubsub/broadcastpubsub_test.js", ["goog.labs.pubsub.BroadcastPubSubTest"], ["goog.array", "goog.debug.Logger", "goog.json", "goog.labs.pubsub.BroadcastPubSub", "goog.storage.Storage", "goog.structs.Map", "goog.testing.MockClock", "goog.testing.MockControl", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.testing.mockmatchers", "goog.testing.mockmatchers.ArgumentMatcher", "goog.testing.recordFunction", "goog.userAgent"], false);
goog.addDependency("labs/storage/boundedcollectablestorage.js", ["goog.labs.storage.BoundedCollectableStorage"], ["goog.array", "goog.asserts", "goog.iter", "goog.storage.CollectableStorage", "goog.storage.ErrorCode", "goog.storage.ExpiringStorage"], false);
goog.addDependency("labs/storage/boundedcollectablestorage_test.js", ["goog.labs.storage.BoundedCollectableStorageTest"], ["goog.labs.storage.BoundedCollectableStorage", "goog.storage.collectableStorageTester", "goog.storage.storage_test", "goog.testing.MockClock", "goog.testing.jsunit", "goog.testing.storage.FakeMechanism"], false);
goog.addDependency("labs/structs/map.js", ["goog.labs.structs.Map"], ["goog.array", "goog.asserts", "goog.labs.object", "goog.object"], false);
goog.addDependency("labs/structs/map_perf.js", ["goog.labs.structs.MapPerf"], ["goog.asserts", "goog.dom", "goog.dom.TagName", "goog.labs.structs.Map", "goog.structs.Map", "goog.testing.PerformanceTable", "goog.testing.jsunit"], false);
goog.addDependency("labs/structs/map_test.js", ["goog.labs.structs.MapTest"], ["goog.labs.structs.Map", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("labs/structs/multimap.js", ["goog.labs.structs.Multimap"], ["goog.array", "goog.labs.object", "goog.labs.structs.Map"], false);
goog.addDependency("labs/structs/multimap_test.js", ["goog.labs.structs.MultimapTest"], ["goog.labs.structs.Map", "goog.labs.structs.Multimap", "goog.testing.jsunit"], false);
goog.addDependency("labs/style/pixeldensitymonitor.js", ["goog.labs.style.PixelDensityMonitor", "goog.labs.style.PixelDensityMonitor.Density", "goog.labs.style.PixelDensityMonitor.EventType"], ["goog.events", "goog.events.EventTarget"], false);
goog.addDependency("labs/style/pixeldensitymonitor_test.js", ["goog.labs.style.PixelDensityMonitorTest"], ["goog.array", "goog.dom.DomHelper", "goog.events", "goog.labs.style.PixelDensityMonitor", "goog.testing.MockControl", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("labs/testing/assertthat.js", ["goog.labs.testing.MatcherError", "goog.labs.testing.assertThat"], ["goog.debug.Error"], false);
goog.addDependency("labs/testing/assertthat_test.js", ["goog.labs.testing.assertThatTest"], ["goog.labs.testing.MatcherError", "goog.labs.testing.assertThat", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("labs/testing/decoratormatcher.js", ["goog.labs.testing.AnythingMatcher"], ["goog.labs.testing.Matcher"], false);
goog.addDependency("labs/testing/decoratormatcher_test.js", ["goog.labs.testing.decoratorMatcherTest"], ["goog.labs.testing.AnythingMatcher", "goog.labs.testing.GreaterThanMatcher", "goog.labs.testing.MatcherError", "goog.labs.testing.assertThat", "goog.testing.jsunit"], false);
goog.addDependency("labs/testing/dictionarymatcher.js", ["goog.labs.testing.HasEntriesMatcher", "goog.labs.testing.HasEntryMatcher", "goog.labs.testing.HasKeyMatcher", "goog.labs.testing.HasValueMatcher"], ["goog.asserts", "goog.labs.testing.Matcher", "goog.object"], false);
goog.addDependency("labs/testing/dictionarymatcher_test.js", ["goog.labs.testing.dictionaryMatcherTest"], ["goog.labs.testing.HasEntryMatcher", "goog.labs.testing.MatcherError", "goog.labs.testing.assertThat", "goog.testing.jsunit"], false);
goog.addDependency("labs/testing/environment.js", ["goog.labs.testing.Environment"], ["goog.array", "goog.debug.Console", "goog.testing.MockClock", "goog.testing.MockControl", "goog.testing.TestCase", "goog.testing.jsunit"], false);
goog.addDependency("labs/testing/environment_test.js", ["goog.labs.testing.environmentTest"], ["goog.labs.testing.Environment", "goog.testing.MockControl", "goog.testing.TestCase", "goog.testing.jsunit"], false);
goog.addDependency("labs/testing/environment_usage_test.js", ["goog.labs.testing.environmentUsageTest"], ["goog.labs.testing.Environment"], false);
goog.addDependency("labs/testing/logicmatcher.js", ["goog.labs.testing.AllOfMatcher", "goog.labs.testing.AnyOfMatcher", "goog.labs.testing.IsNotMatcher"], ["goog.array", "goog.labs.testing.Matcher"], false);
goog.addDependency("labs/testing/logicmatcher_test.js", ["goog.labs.testing.logicMatcherTest"], ["goog.labs.testing.AllOfMatcher", "goog.labs.testing.GreaterThanMatcher", "goog.labs.testing.MatcherError", "goog.labs.testing.assertThat", "goog.testing.jsunit"], false);
goog.addDependency("labs/testing/matcher.js", ["goog.labs.testing.Matcher"], [], false);
goog.addDependency("labs/testing/numbermatcher.js", ["goog.labs.testing.CloseToMatcher", "goog.labs.testing.EqualToMatcher", "goog.labs.testing.GreaterThanEqualToMatcher", "goog.labs.testing.GreaterThanMatcher", "goog.labs.testing.LessThanEqualToMatcher", "goog.labs.testing.LessThanMatcher"], ["goog.asserts", "goog.labs.testing.Matcher"], false);
goog.addDependency("labs/testing/numbermatcher_test.js", ["goog.labs.testing.numberMatcherTest"], ["goog.labs.testing.LessThanMatcher", "goog.labs.testing.MatcherError", "goog.labs.testing.assertThat", "goog.testing.jsunit"], false);
goog.addDependency("labs/testing/objectmatcher.js", ["goog.labs.testing.HasPropertyMatcher", "goog.labs.testing.InstanceOfMatcher", "goog.labs.testing.IsNullMatcher", "goog.labs.testing.IsNullOrUndefinedMatcher", "goog.labs.testing.IsUndefinedMatcher", "goog.labs.testing.ObjectEqualsMatcher"], ["goog.labs.testing.Matcher"], false);
goog.addDependency("labs/testing/objectmatcher_test.js", ["goog.labs.testing.objectMatcherTest"], ["goog.labs.testing.MatcherError", "goog.labs.testing.ObjectEqualsMatcher", "goog.labs.testing.assertThat", "goog.testing.jsunit"], false);
goog.addDependency("labs/testing/stringmatcher.js", ["goog.labs.testing.ContainsStringMatcher", "goog.labs.testing.EndsWithMatcher", "goog.labs.testing.EqualToIgnoringWhitespaceMatcher", "goog.labs.testing.EqualsMatcher", "goog.labs.testing.RegexMatcher", "goog.labs.testing.StartsWithMatcher", "goog.labs.testing.StringContainsInOrderMatcher"], ["goog.asserts", "goog.labs.testing.Matcher", "goog.string"], false);
goog.addDependency("labs/testing/stringmatcher_test.js", ["goog.labs.testing.stringMatcherTest"], ["goog.labs.testing.MatcherError", "goog.labs.testing.StringContainsInOrderMatcher", "goog.labs.testing.assertThat", "goog.testing.jsunit"], false);
goog.addDependency("labs/useragent/browser.js", ["goog.labs.userAgent.browser"], ["goog.array", "goog.labs.userAgent.util", "goog.object", "goog.string"], false);
goog.addDependency("labs/useragent/browser_test.js", ["goog.labs.userAgent.browserTest"], ["goog.labs.userAgent.browser", "goog.labs.userAgent.testAgents", "goog.labs.userAgent.util", "goog.object", "goog.testing.jsunit"], false);
goog.addDependency("labs/useragent/device.js", ["goog.labs.userAgent.device"], ["goog.labs.userAgent.util"], false);
goog.addDependency("labs/useragent/device_test.js", ["goog.labs.userAgent.deviceTest"], ["goog.labs.userAgent.device", "goog.labs.userAgent.testAgents", "goog.labs.userAgent.util", "goog.testing.jsunit"], false);
goog.addDependency("labs/useragent/engine.js", ["goog.labs.userAgent.engine"], ["goog.array", "goog.labs.userAgent.util", "goog.string"], false);
goog.addDependency("labs/useragent/engine_test.js", ["goog.labs.userAgent.engineTest"], ["goog.labs.userAgent.engine", "goog.labs.userAgent.testAgents", "goog.labs.userAgent.util", "goog.testing.jsunit"], false);
goog.addDependency("labs/useragent/platform.js", ["goog.labs.userAgent.platform"], ["goog.labs.userAgent.util", "goog.string"], false);
goog.addDependency("labs/useragent/platform_test.js", ["goog.labs.userAgent.platformTest"], ["goog.labs.userAgent.platform", "goog.labs.userAgent.testAgents", "goog.labs.userAgent.util", "goog.testing.jsunit"], false);
goog.addDependency("labs/useragent/test_agents.js", ["goog.labs.userAgent.testAgents"], [], false);
goog.addDependency("labs/useragent/util.js", ["goog.labs.userAgent.util"], ["goog.string"], false);
goog.addDependency("labs/useragent/util_test.js", ["goog.labs.userAgent.utilTest"], ["goog.functions", "goog.labs.userAgent.testAgents", "goog.labs.userAgent.util", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("locale/countries.js", ["goog.locale.countries"], [], false);
goog.addDependency("locale/countrylanguagenames_test.js", ["goog.locale.countryLanguageNamesTest"], ["goog.locale", "goog.testing.jsunit"], false);
goog.addDependency("locale/defaultlocalenameconstants.js", ["goog.locale.defaultLocaleNameConstants"], [], false);
goog.addDependency("locale/genericfontnames.js", ["goog.locale.genericFontNames"], [], false);
goog.addDependency("locale/genericfontnames_test.js", ["goog.locale.genericFontNamesTest"], ["goog.locale.genericFontNames", "goog.testing.jsunit"], false);
goog.addDependency("locale/genericfontnamesdata.js", ["goog.locale.genericFontNamesData"], [], false);
goog.addDependency("locale/locale.js", ["goog.locale"], ["goog.locale.nativeNameConstants"], false);
goog.addDependency("locale/nativenameconstants.js", ["goog.locale.nativeNameConstants"], [], false);
goog.addDependency("locale/scriptToLanguages.js", ["goog.locale.scriptToLanguages"], ["goog.locale"], false);
goog.addDependency("locale/timezonedetection.js", ["goog.locale.timeZoneDetection"], ["goog.locale.TimeZoneFingerprint"], false);
goog.addDependency("locale/timezonedetection_test.js", ["goog.locale.timeZoneDetectionTest"], ["goog.locale.timeZoneDetection", "goog.testing.jsunit"], false);
goog.addDependency("locale/timezonefingerprint.js", ["goog.locale.TimeZoneFingerprint"], [], false);
goog.addDependency("locale/timezonelist.js", ["goog.locale.TimeZoneList"], ["goog.locale"], false);
goog.addDependency("locale/timezonelist_test.js", ["goog.locale.TimeZoneListTest"], ["goog.locale", "goog.locale.TimeZoneList", "goog.testing.jsunit"], false);
goog.addDependency("log/log.js", ["goog.log", "goog.log.Level", "goog.log.LogRecord", "goog.log.Logger"], ["goog.debug", "goog.debug.LogManager", "goog.debug.LogRecord", "goog.debug.Logger"], false);
goog.addDependency("log/log_test.js", ["goog.logTest"], ["goog.debug.LogManager", "goog.log", "goog.log.Level", "goog.testing.jsunit"], false);
goog.addDependency("math/affinetransform.js", ["goog.math.AffineTransform"], ["goog.math"], false);
goog.addDependency("math/affinetransform_test.js", ["goog.math.AffineTransformTest"], ["goog.array", "goog.math", "goog.math.AffineTransform", "goog.testing.jsunit"], false);
goog.addDependency("math/bezier.js", ["goog.math.Bezier"], ["goog.math", "goog.math.Coordinate"], false);
goog.addDependency("math/bezier_test.js", ["goog.math.BezierTest"], ["goog.math", "goog.math.Bezier", "goog.math.Coordinate", "goog.testing.jsunit"], false);
goog.addDependency("math/box.js", ["goog.math.Box"], ["goog.math.Coordinate"], false);
goog.addDependency("math/box_test.js", ["goog.math.BoxTest"], ["goog.math.Box", "goog.math.Coordinate", "goog.testing.jsunit"], false);
goog.addDependency("math/coordinate.js", ["goog.math.Coordinate"], ["goog.math"], false);
goog.addDependency("math/coordinate3.js", ["goog.math.Coordinate3"], [], false);
goog.addDependency("math/coordinate3_test.js", ["goog.math.Coordinate3Test"], ["goog.math.Coordinate3", "goog.testing.jsunit"], false);
goog.addDependency("math/coordinate_test.js", ["goog.math.CoordinateTest"], ["goog.math.Coordinate", "goog.testing.jsunit"], false);
goog.addDependency("math/exponentialbackoff.js", ["goog.math.ExponentialBackoff"], ["goog.asserts"], false);
goog.addDependency("math/exponentialbackoff_test.js", ["goog.math.ExponentialBackoffTest"], ["goog.math.ExponentialBackoff", "goog.testing.jsunit"], false);
goog.addDependency("math/integer.js", ["goog.math.Integer"], [], false);
goog.addDependency("math/integer_test.js", ["goog.math.IntegerTest"], ["goog.math.Integer", "goog.testing.jsunit"], false);
goog.addDependency("math/interpolator/interpolator1.js", ["goog.math.interpolator.Interpolator1"], [], false);
goog.addDependency("math/interpolator/linear1.js", ["goog.math.interpolator.Linear1"], ["goog.array", "goog.asserts", "goog.math", "goog.math.interpolator.Interpolator1"], false);
goog.addDependency("math/interpolator/linear1_test.js", ["goog.math.interpolator.Linear1Test"], ["goog.math.interpolator.Linear1", "goog.testing.jsunit"], false);
goog.addDependency("math/interpolator/pchip1.js", ["goog.math.interpolator.Pchip1"], ["goog.math", "goog.math.interpolator.Spline1"], false);
goog.addDependency("math/interpolator/pchip1_test.js", ["goog.math.interpolator.Pchip1Test"], ["goog.math.interpolator.Pchip1", "goog.testing.jsunit"], false);
goog.addDependency("math/interpolator/spline1.js", ["goog.math.interpolator.Spline1"], ["goog.array", "goog.asserts", "goog.math", "goog.math.interpolator.Interpolator1", "goog.math.tdma"], false);
goog.addDependency("math/interpolator/spline1_test.js", ["goog.math.interpolator.Spline1Test"], ["goog.math.interpolator.Spline1", "goog.testing.jsunit"], false);
goog.addDependency("math/line.js", ["goog.math.Line"], ["goog.math", "goog.math.Coordinate"], false);
goog.addDependency("math/line_test.js", ["goog.math.LineTest"], ["goog.math.Coordinate", "goog.math.Line", "goog.testing.jsunit"], false);
goog.addDependency("math/long.js", ["goog.math.Long"], [], false);
goog.addDependency("math/long_test.js", ["goog.math.LongTest"], ["goog.math.Long", "goog.testing.jsunit"], false);
goog.addDependency("math/math.js", ["goog.math"], ["goog.array", "goog.asserts"], false);
goog.addDependency("math/math_test.js", ["goog.mathTest"], ["goog.math", "goog.testing.jsunit"], false);
goog.addDependency("math/matrix.js", ["goog.math.Matrix"], ["goog.array", "goog.math", "goog.math.Size", "goog.string"], false);
goog.addDependency("math/matrix_test.js", ["goog.math.MatrixTest"], ["goog.math.Matrix", "goog.testing.jsunit"], false);
goog.addDependency("math/path.js", ["goog.math.Path", "goog.math.Path.Segment"], ["goog.array", "goog.math"], false);
goog.addDependency("math/path_test.js", ["goog.math.PathTest"], ["goog.array", "goog.math.AffineTransform", "goog.math.Path", "goog.testing.jsunit"], false);
goog.addDependency("math/paths.js", ["goog.math.paths"], ["goog.math.Coordinate", "goog.math.Path"], false);
goog.addDependency("math/paths_test.js", ["goog.math.pathsTest"], ["goog.math.Coordinate", "goog.math.paths", "goog.testing.jsunit"], false);
goog.addDependency("math/range.js", ["goog.math.Range"], ["goog.asserts"], false);
goog.addDependency("math/range_test.js", ["goog.math.RangeTest"], ["goog.math.Range", "goog.testing.jsunit"], false);
goog.addDependency("math/rangeset.js", ["goog.math.RangeSet"], ["goog.array", "goog.iter.Iterator", "goog.iter.StopIteration", "goog.math.Range"], false);
goog.addDependency("math/rangeset_test.js", ["goog.math.RangeSetTest"], ["goog.iter", "goog.math.Range", "goog.math.RangeSet", "goog.testing.jsunit"], false);
goog.addDependency("math/rect.js", ["goog.math.Rect"], ["goog.math.Box", "goog.math.Coordinate", "goog.math.Size"], false);
goog.addDependency("math/rect_test.js", ["goog.math.RectTest"], ["goog.math.Box", "goog.math.Coordinate", "goog.math.Rect", "goog.math.Size", "goog.testing.jsunit"], false);
goog.addDependency("math/size.js", ["goog.math.Size"], [], false);
goog.addDependency("math/size_test.js", ["goog.math.SizeTest"], ["goog.math.Size", "goog.testing.jsunit"], false);
goog.addDependency("math/tdma.js", ["goog.math.tdma"], [], false);
goog.addDependency("math/tdma_test.js", ["goog.math.tdmaTest"], ["goog.math.tdma", "goog.testing.jsunit"], false);
goog.addDependency("math/vec2.js", ["goog.math.Vec2"], ["goog.math", "goog.math.Coordinate"], false);
goog.addDependency("math/vec2_test.js", ["goog.math.Vec2Test"], ["goog.math.Vec2", "goog.testing.jsunit"], false);
goog.addDependency("math/vec3.js", ["goog.math.Vec3"], ["goog.math", "goog.math.Coordinate3"], false);
goog.addDependency("math/vec3_test.js", ["goog.math.Vec3Test"], ["goog.math.Coordinate3", "goog.math.Vec3", "goog.testing.jsunit"], false);
goog.addDependency("memoize/memoize.js", ["goog.memoize"], [], false);
goog.addDependency("memoize/memoize_test.js", ["goog.memoizeTest"], ["goog.memoize", "goog.testing.jsunit"], false);
goog.addDependency("messaging/abstractchannel.js", ["goog.messaging.AbstractChannel"], ["goog.Disposable", "goog.json", "goog.log", "goog.messaging.MessageChannel"], false);
goog.addDependency("messaging/abstractchannel_test.js", ["goog.messaging.AbstractChannelTest"], ["goog.messaging.AbstractChannel", "goog.testing.MockControl", "goog.testing.async.MockControl", "goog.testing.jsunit"], false);
goog.addDependency("messaging/bufferedchannel.js", ["goog.messaging.BufferedChannel"], ["goog.Disposable", "goog.Timer", "goog.events", "goog.log", "goog.messaging.MessageChannel", "goog.messaging.MultiChannel"], false);
goog.addDependency("messaging/bufferedchannel_test.js", ["goog.messaging.BufferedChannelTest"], ["goog.debug.Console", "goog.dom", "goog.dom.TagName", "goog.log", "goog.log.Level", "goog.messaging.BufferedChannel", "goog.testing.MockClock", "goog.testing.MockControl", "goog.testing.async.MockControl", "goog.testing.jsunit", "goog.testing.messaging.MockMessageChannel"], false);
goog.addDependency("messaging/deferredchannel.js", ["goog.messaging.DeferredChannel"], ["goog.Disposable", "goog.messaging.MessageChannel"], false);
goog.addDependency("messaging/deferredchannel_test.js", ["goog.messaging.DeferredChannelTest"], ["goog.async.Deferred", "goog.messaging.DeferredChannel", "goog.testing.MockControl", "goog.testing.async.MockControl", "goog.testing.jsunit", "goog.testing.messaging.MockMessageChannel"], false);
goog.addDependency("messaging/loggerclient.js", ["goog.messaging.LoggerClient"], ["goog.Disposable", "goog.debug", "goog.debug.LogManager", "goog.debug.Logger"], false);
goog.addDependency("messaging/loggerclient_test.js", ["goog.messaging.LoggerClientTest"], ["goog.debug", "goog.debug.Logger", "goog.messaging.LoggerClient", "goog.testing.MockControl", "goog.testing.jsunit", "goog.testing.messaging.MockMessageChannel"], false);
goog.addDependency("messaging/loggerserver.js", ["goog.messaging.LoggerServer"], ["goog.Disposable", "goog.log", "goog.log.Level"], false);
goog.addDependency("messaging/loggerserver_test.js", ["goog.messaging.LoggerServerTest"], ["goog.debug.LogManager", "goog.debug.Logger", "goog.log", "goog.log.Level", "goog.messaging.LoggerServer", "goog.testing.MockControl", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.messaging.MockMessageChannel"], false);
goog.addDependency("messaging/messagechannel.js", ["goog.messaging.MessageChannel"], [], false);
goog.addDependency("messaging/messaging.js", ["goog.messaging"], [], false);
goog.addDependency("messaging/messaging_test.js", ["goog.testing.messaging.MockMessageChannelTest"], ["goog.messaging", "goog.testing.MockControl", "goog.testing.jsunit", "goog.testing.messaging.MockMessageChannel"], false);
goog.addDependency("messaging/multichannel.js", ["goog.messaging.MultiChannel", "goog.messaging.MultiChannel.VirtualChannel"], ["goog.Disposable", "goog.log", "goog.messaging.MessageChannel", "goog.object"], false);
goog.addDependency("messaging/multichannel_test.js", ["goog.messaging.MultiChannelTest"], ["goog.messaging.MultiChannel", "goog.testing.MockControl", "goog.testing.jsunit", "goog.testing.messaging.MockMessageChannel", "goog.testing.mockmatchers.IgnoreArgument"], false);
goog.addDependency("messaging/portcaller.js", ["goog.messaging.PortCaller"], ["goog.Disposable", "goog.async.Deferred", "goog.messaging.DeferredChannel", "goog.messaging.PortChannel", "goog.messaging.PortNetwork", "goog.object"], false);
goog.addDependency("messaging/portcaller_test.js", ["goog.messaging.PortCallerTest"], ["goog.events.EventTarget", "goog.messaging.PortCaller", "goog.messaging.PortNetwork", "goog.testing.MockControl", "goog.testing.jsunit", "goog.testing.messaging.MockMessageChannel"], false);
goog.addDependency("messaging/portchannel.js", ["goog.messaging.PortChannel"], ["goog.Timer", "goog.array", "goog.async.Deferred", "goog.debug", "goog.events", "goog.events.EventType", "goog.json", "goog.log", "goog.messaging.AbstractChannel", "goog.messaging.DeferredChannel", "goog.object", "goog.string", "goog.userAgent"], false);
goog.addDependency("messaging/portnetwork.js", ["goog.messaging.PortNetwork"], [], false);
goog.addDependency("messaging/portoperator.js", ["goog.messaging.PortOperator"], ["goog.Disposable", "goog.asserts", "goog.log", "goog.messaging.PortChannel", "goog.messaging.PortNetwork", "goog.object"], false);
goog.addDependency("messaging/portoperator_test.js", ["goog.messaging.PortOperatorTest"], ["goog.messaging.PortNetwork", "goog.messaging.PortOperator", "goog.testing.MockControl", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.messaging.MockMessageChannel", "goog.testing.messaging.MockMessagePort"], false);
goog.addDependency("messaging/respondingchannel.js", ["goog.messaging.RespondingChannel"], ["goog.Disposable", "goog.log", "goog.messaging.MultiChannel"], false);
goog.addDependency("messaging/respondingchannel_test.js", ["goog.messaging.RespondingChannelTest"], ["goog.messaging.RespondingChannel", "goog.testing.MockControl", "goog.testing.jsunit", "goog.testing.messaging.MockMessageChannel"], false);
goog.addDependency("messaging/testdata/portchannel_worker.js", ["goog.messaging.testdata.portchannel_worker"], ["goog.messaging.PortChannel"], false);
goog.addDependency("messaging/testdata/portnetwork_worker1.js", ["goog.messaging.testdata.portnetwork_worker1"], ["goog.messaging.PortCaller", "goog.messaging.PortChannel"], false);
goog.addDependency("messaging/testdata/portnetwork_worker2.js", ["goog.messaging.testdata.portnetwork_worker2"], ["goog.messaging.PortCaller", "goog.messaging.PortChannel"], false);
goog.addDependency("module/abstractmoduleloader.js", ["goog.module.AbstractModuleLoader"], ["goog.module"], false);
goog.addDependency("module/basemodule.js", ["goog.module.BaseModule"], ["goog.Disposable", "goog.module"], false);
goog.addDependency("module/loader.js", ["goog.module.Loader"], ["goog.Timer", "goog.array", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.module", "goog.object"], false);
goog.addDependency("module/module.js", ["goog.module"], [], false);
goog.addDependency("module/moduleinfo.js", ["goog.module.ModuleInfo"], ["goog.Disposable", "goog.async.throwException", "goog.functions", "goog.module", "goog.module.BaseModule", "goog.module.ModuleLoadCallback"], false);
goog.addDependency("module/moduleinfo_test.js", ["goog.module.ModuleInfoTest"], ["goog.module.BaseModule", "goog.module.ModuleInfo", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("module/moduleloadcallback.js", ["goog.module.ModuleLoadCallback"], ["goog.debug.entryPointRegistry", "goog.module"], false);
goog.addDependency("module/moduleloadcallback_test.js", ["goog.module.ModuleLoadCallbackTest"], ["goog.debug.ErrorHandler", "goog.debug.entryPointRegistry", "goog.functions", "goog.module.ModuleLoadCallback", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("module/moduleloader.js", ["goog.module.ModuleLoader"], ["goog.Timer", "goog.array", "goog.events", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventTarget", "goog.labs.userAgent.browser", "goog.log", "goog.module.AbstractModuleLoader", "goog.net.BulkLoader", "goog.net.EventType", "goog.net.jsloader", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("module/moduleloader_test.js", ["goog.module.ModuleLoaderTest"], ["goog.Promise", "goog.array", "goog.dom", "goog.dom.TagName", "goog.events", "goog.functions", "goog.module.ModuleLoader", "goog.module.ModuleManager", "goog.net.BulkLoader", "goog.net.XmlHttp", "goog.object", "goog.testing.PropertyReplacer", "goog.testing.events.EventObserver", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("module/modulemanager.js", ["goog.module.ModuleManager", "goog.module.ModuleManager.CallbackType", "goog.module.ModuleManager.FailureType"], ["goog.Disposable", "goog.array", "goog.asserts", "goog.async.Deferred", "goog.debug.Trace", "goog.dispose", "goog.log", "goog.module", "goog.module.ModuleInfo", "goog.module.ModuleLoadCallback", "goog.object"], false);
goog.addDependency("module/modulemanager_test.js", ["goog.module.ModuleManagerTest"], ["goog.array", "goog.functions", "goog.module.BaseModule", "goog.module.ModuleManager", "goog.testing", "goog.testing.MockClock", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("module/testdata/modA_1.js", ["goog.module.testdata.modA_1"], [], false);
goog.addDependency("module/testdata/modA_2.js", ["goog.module.testdata.modA_2"], ["goog.module.ModuleManager"], false);
goog.addDependency("module/testdata/modB_1.js", ["goog.module.testdata.modB_1"], ["goog.module.ModuleManager"], false);
goog.addDependency("net/browserchannel.js", ["goog.net.BrowserChannel", "goog.net.BrowserChannel.Error", "goog.net.BrowserChannel.Event", "goog.net.BrowserChannel.Handler", "goog.net.BrowserChannel.LogSaver", "goog.net.BrowserChannel.QueuedMap", "goog.net.BrowserChannel.ServerReachability", "goog.net.BrowserChannel.ServerReachabilityEvent", "goog.net.BrowserChannel.Stat", "goog.net.BrowserChannel.StatEvent", "goog.net.BrowserChannel.State", "goog.net.BrowserChannel.TimingEvent"], ["goog.Uri", "goog.array", 
"goog.asserts", "goog.debug.TextFormatter", "goog.events.Event", "goog.events.EventTarget", "goog.json", "goog.json.EvalJsonProcessor", "goog.log", "goog.net.BrowserTestChannel", "goog.net.ChannelDebug", "goog.net.ChannelRequest", "goog.net.XhrIo", "goog.net.tmpnetwork", "goog.object", "goog.string", "goog.structs", "goog.structs.CircularBuffer"], false);
goog.addDependency("net/browserchannel_test.js", ["goog.net.BrowserChannelTest"], ["goog.Timer", "goog.array", "goog.dom", "goog.functions", "goog.json", "goog.net.BrowserChannel", "goog.net.ChannelDebug", "goog.net.ChannelRequest", "goog.net.tmpnetwork", "goog.structs.Map", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.asserts", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("net/browsertestchannel.js", ["goog.net.BrowserTestChannel"], ["goog.json.EvalJsonProcessor", "goog.net.ChannelRequest", "goog.net.ChannelRequest.Error", "goog.net.tmpnetwork", "goog.string.Parser"], false);
goog.addDependency("net/bulkloader.js", ["goog.net.BulkLoader"], ["goog.events.EventHandler", "goog.events.EventTarget", "goog.log", "goog.net.BulkLoaderHelper", "goog.net.EventType", "goog.net.XhrIo"], false);
goog.addDependency("net/bulkloader_test.js", ["goog.net.BulkLoaderTest"], ["goog.events.Event", "goog.events.EventHandler", "goog.net.BulkLoader", "goog.net.EventType", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("net/bulkloaderhelper.js", ["goog.net.BulkLoaderHelper"], ["goog.Disposable"], false);
goog.addDependency("net/channeldebug.js", ["goog.net.ChannelDebug"], ["goog.json", "goog.log"], false);
goog.addDependency("net/channelrequest.js", ["goog.net.ChannelRequest", "goog.net.ChannelRequest.Error"], ["goog.Timer", "goog.async.Throttle", "goog.dom.TagName", "goog.dom.safe", "goog.events.EventHandler", "goog.html.SafeUrl", "goog.html.uncheckedconversions", "goog.net.ErrorCode", "goog.net.EventType", "goog.net.XmlHttp", "goog.object", "goog.string", "goog.string.Const", "goog.userAgent"], false);
goog.addDependency("net/channelrequest_test.js", ["goog.net.ChannelRequestTest"], ["goog.Uri", "goog.functions", "goog.net.BrowserChannel", "goog.net.ChannelDebug", "goog.net.ChannelRequest", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.net.XhrIo", "goog.testing.recordFunction"], false);
goog.addDependency("net/cookies.js", ["goog.net.Cookies", "goog.net.cookies"], [], false);
goog.addDependency("net/cookies_test.js", ["goog.net.cookiesTest"], ["goog.array", "goog.net.cookies", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("net/corsxmlhttpfactory.js", ["goog.net.CorsXmlHttpFactory", "goog.net.IeCorsXhrAdapter"], ["goog.net.HttpStatus", "goog.net.XhrLike", "goog.net.XmlHttp", "goog.net.XmlHttpFactory"], false);
goog.addDependency("net/corsxmlhttpfactory_test.js", ["goog.net.CorsXmlHttpFactoryTest"], ["goog.net.CorsXmlHttpFactory", "goog.net.IeCorsXhrAdapter", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("net/crossdomainrpc.js", ["goog.net.CrossDomainRpc"], ["goog.Uri", "goog.dom", "goog.dom.TagName", "goog.dom.safe", "goog.events", "goog.events.EventTarget", "goog.events.EventType", "goog.html.legacyconversions", "goog.json", "goog.log", "goog.net.EventType", "goog.net.HttpStatus", "goog.string", "goog.userAgent"], false);
goog.addDependency("net/crossdomainrpc_test.js", ["goog.net.CrossDomainRpcTest"], ["goog.Promise", "goog.log", "goog.net.CrossDomainRpc", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("net/errorcode.js", ["goog.net.ErrorCode"], [], false);
goog.addDependency("net/eventtype.js", ["goog.net.EventType"], [], false);
goog.addDependency("net/filedownloader.js", ["goog.net.FileDownloader", "goog.net.FileDownloader.Error"], ["goog.Disposable", "goog.asserts", "goog.async.Deferred", "goog.crypt.hash32", "goog.debug.Error", "goog.events", "goog.events.EventHandler", "goog.fs", "goog.fs.DirectoryEntry", "goog.fs.Error", "goog.fs.FileSaver", "goog.net.EventType", "goog.net.XhrIo", "goog.net.XhrIoPool", "goog.object"], false);
goog.addDependency("net/filedownloader_test.js", ["goog.net.FileDownloaderTest"], ["goog.fs.Error", "goog.net.ErrorCode", "goog.net.FileDownloader", "goog.net.XhrIo", "goog.testing.PropertyReplacer", "goog.testing.fs", "goog.testing.fs.FileSystem", "goog.testing.jsunit", "goog.testing.net.XhrIoPool"], false);
goog.addDependency("net/httpstatus.js", ["goog.net.HttpStatus"], [], false);
goog.addDependency("net/iframe_xhr_test.js", ["goog.net.iframeXhrTest"], ["goog.Timer", "goog.debug.Console", "goog.debug.LogManager", "goog.debug.Logger", "goog.dom.TagName", "goog.events", "goog.net.IframeIo", "goog.net.XhrIo", "goog.testing.AsyncTestCase", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("net/iframeio.js", ["goog.net.IframeIo", "goog.net.IframeIo.IncrementalDataEvent"], ["goog.Timer", "goog.Uri", "goog.asserts", "goog.debug", "goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.dom.safe", "goog.events", "goog.events.Event", "goog.events.EventTarget", "goog.events.EventType", "goog.html.uncheckedconversions", "goog.json", "goog.log", "goog.log.Level", "goog.net.ErrorCode", "goog.net.EventType", "goog.reflect", "goog.string", "goog.string.Const", "goog.structs", 
"goog.userAgent"], false);
goog.addDependency("net/iframeio_different_base_test.js", ["goog.net.iframeIoDifferentBaseTest"], ["goog.events", "goog.net.EventType", "goog.net.IframeIo", "goog.testing.AsyncTestCase", "goog.testing.jsunit"], false);
goog.addDependency("net/iframeio_test.js", ["goog.net.IframeIoTest"], ["goog.debug", "goog.debug.DivConsole", "goog.debug.LogManager", "goog.dom", "goog.dom.TagName", "goog.events", "goog.events.EventType", "goog.log", "goog.log.Level", "goog.net.IframeIo", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("net/iframeloadmonitor.js", ["goog.net.IframeLoadMonitor"], ["goog.dom", "goog.events", "goog.events.EventTarget", "goog.events.EventType", "goog.userAgent"], false);
goog.addDependency("net/iframeloadmonitor_test.js", ["goog.net.IframeLoadMonitorTest"], ["goog.dom", "goog.dom.TagName", "goog.events", "goog.net.IframeLoadMonitor", "goog.testing.AsyncTestCase", "goog.testing.jsunit"], false);
goog.addDependency("net/imageloader.js", ["goog.net.ImageLoader"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.net.EventType", "goog.object", "goog.userAgent"], false);
goog.addDependency("net/imageloader_test.js", ["goog.net.ImageLoaderTest"], ["goog.Timer", "goog.array", "goog.dispose", "goog.events", "goog.events.Event", "goog.events.EventType", "goog.net.EventType", "goog.net.ImageLoader", "goog.object", "goog.string", "goog.testing.AsyncTestCase", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("net/ipaddress.js", ["goog.net.IpAddress", "goog.net.Ipv4Address", "goog.net.Ipv6Address"], ["goog.array", "goog.math.Integer", "goog.object", "goog.string"], false);
goog.addDependency("net/ipaddress_test.js", ["goog.net.IpAddressTest"], ["goog.math.Integer", "goog.net.IpAddress", "goog.net.Ipv4Address", "goog.net.Ipv6Address", "goog.testing.jsunit"], false);
goog.addDependency("net/jsloader.js", ["goog.net.jsloader", "goog.net.jsloader.Error", "goog.net.jsloader.ErrorCode", "goog.net.jsloader.Options"], ["goog.array", "goog.async.Deferred", "goog.debug.Error", "goog.dom", "goog.dom.TagName"], false);
goog.addDependency("net/jsloader_test.js", ["goog.net.jsloaderTest"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.net.jsloader", "goog.net.jsloader.ErrorCode", "goog.testing.AsyncTestCase", "goog.testing.jsunit"], false);
goog.addDependency("net/jsonp.js", ["goog.net.Jsonp"], ["goog.Uri", "goog.net.jsloader"], false);
goog.addDependency("net/jsonp_test.js", ["goog.net.JsonpTest"], ["goog.net.Jsonp", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.userAgent"], false);
goog.addDependency("net/mockiframeio.js", ["goog.net.MockIFrameIo"], ["goog.events.EventTarget", "goog.json", "goog.net.ErrorCode", "goog.net.EventType", "goog.net.IframeIo"], false);
goog.addDependency("net/multiiframeloadmonitor.js", ["goog.net.MultiIframeLoadMonitor"], ["goog.events", "goog.net.IframeLoadMonitor"], false);
goog.addDependency("net/multiiframeloadmonitor_test.js", ["goog.net.MultiIframeLoadMonitorTest"], ["goog.dom", "goog.dom.TagName", "goog.net.IframeLoadMonitor", "goog.net.MultiIframeLoadMonitor", "goog.testing.AsyncTestCase", "goog.testing.jsunit"], false);
goog.addDependency("net/networkstatusmonitor.js", ["goog.net.NetworkStatusMonitor"], ["goog.events.Listenable"], false);
goog.addDependency("net/networktester.js", ["goog.net.NetworkTester"], ["goog.Timer", "goog.Uri", "goog.log"], false);
goog.addDependency("net/networktester_test.js", ["goog.net.NetworkTesterTest"], ["goog.Uri", "goog.net.NetworkTester", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("net/testdata/jsloader_test1.js", ["goog.net.testdata.jsloader_test1"], [], false);
goog.addDependency("net/testdata/jsloader_test2.js", ["goog.net.testdata.jsloader_test2"], [], false);
goog.addDependency("net/testdata/jsloader_test3.js", ["goog.net.testdata.jsloader_test3"], [], false);
goog.addDependency("net/testdata/jsloader_test4.js", ["goog.net.testdata.jsloader_test4"], [], false);
goog.addDependency("net/tmpnetwork.js", ["goog.net.tmpnetwork"], ["goog.Uri", "goog.net.ChannelDebug"], false);
goog.addDependency("net/websocket.js", ["goog.net.WebSocket", "goog.net.WebSocket.ErrorEvent", "goog.net.WebSocket.EventType", "goog.net.WebSocket.MessageEvent"], ["goog.Timer", "goog.asserts", "goog.debug.entryPointRegistry", "goog.events", "goog.events.Event", "goog.events.EventTarget", "goog.log"], false);
goog.addDependency("net/websocket_test.js", ["goog.net.WebSocketTest"], ["goog.debug.EntryPointMonitor", "goog.debug.ErrorHandler", "goog.debug.entryPointRegistry", "goog.events", "goog.functions", "goog.net.WebSocket", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("net/wrapperxmlhttpfactory.js", ["goog.net.WrapperXmlHttpFactory"], ["goog.net.XhrLike", "goog.net.XmlHttpFactory"], false);
goog.addDependency("net/xhrio.js", ["goog.net.XhrIo", "goog.net.XhrIo.ResponseType"], ["goog.Timer", "goog.array", "goog.debug.entryPointRegistry", "goog.events.EventTarget", "goog.json", "goog.log", "goog.net.ErrorCode", "goog.net.EventType", "goog.net.HttpStatus", "goog.net.XmlHttp", "goog.object", "goog.string", "goog.structs", "goog.structs.Map", "goog.uri.utils", "goog.userAgent"], false);
goog.addDependency("net/xhrio_test.js", ["goog.net.XhrIoTest"], ["goog.Uri", "goog.debug.EntryPointMonitor", "goog.debug.ErrorHandler", "goog.debug.entryPointRegistry", "goog.events", "goog.functions", "goog.net.EventType", "goog.net.WrapperXmlHttpFactory", "goog.net.XhrIo", "goog.net.XmlHttp", "goog.object", "goog.string", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.net.XhrIo", "goog.testing.recordFunction"], false);
goog.addDependency("net/xhriopool.js", ["goog.net.XhrIoPool"], ["goog.net.XhrIo", "goog.structs.PriorityPool"], false);
goog.addDependency("net/xhrlike.js", ["goog.net.XhrLike"], [], false);
goog.addDependency("net/xhrmanager.js", ["goog.net.XhrManager", "goog.net.XhrManager.Event", "goog.net.XhrManager.Request"], ["goog.events", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventTarget", "goog.net.ErrorCode", "goog.net.EventType", "goog.net.XhrIo", "goog.net.XhrIoPool", "goog.structs.Map"], false);
goog.addDependency("net/xhrmanager_test.js", ["goog.net.XhrManagerTest"], ["goog.events", "goog.net.EventType", "goog.net.XhrIo", "goog.net.XhrManager", "goog.testing.jsunit", "goog.testing.net.XhrIoPool", "goog.testing.recordFunction"], false);
goog.addDependency("net/xmlhttp.js", ["goog.net.DefaultXmlHttpFactory", "goog.net.XmlHttp", "goog.net.XmlHttp.OptionType", "goog.net.XmlHttp.ReadyState", "goog.net.XmlHttpDefines"], ["goog.asserts", "goog.net.WrapperXmlHttpFactory", "goog.net.XmlHttpFactory"], false);
goog.addDependency("net/xmlhttpfactory.js", ["goog.net.XmlHttpFactory"], ["goog.net.XhrLike"], false);
goog.addDependency("net/xpc/crosspagechannel.js", ["goog.net.xpc.CrossPageChannel"], ["goog.Uri", "goog.async.Deferred", "goog.async.Delay", "goog.dispose", "goog.dom", "goog.dom.TagName", "goog.events", "goog.events.EventHandler", "goog.events.EventType", "goog.json", "goog.log", "goog.messaging.AbstractChannel", "goog.net.xpc", "goog.net.xpc.CfgFields", "goog.net.xpc.ChannelStates", "goog.net.xpc.CrossPageChannelRole", "goog.net.xpc.DirectTransport", "goog.net.xpc.FrameElementMethodTransport", 
"goog.net.xpc.IframePollingTransport", "goog.net.xpc.IframeRelayTransport", "goog.net.xpc.NativeMessagingTransport", "goog.net.xpc.NixTransport", "goog.net.xpc.TransportTypes", "goog.net.xpc.UriCfgFields", "goog.string", "goog.uri.utils", "goog.userAgent"], false);
goog.addDependency("net/xpc/crosspagechannel_test.js", ["goog.net.xpc.CrossPageChannelTest"], ["goog.Disposable", "goog.Uri", "goog.async.Deferred", "goog.dom", "goog.dom.TagName", "goog.labs.userAgent.browser", "goog.log", "goog.log.Level", "goog.net.xpc", "goog.net.xpc.CfgFields", "goog.net.xpc.CrossPageChannel", "goog.net.xpc.CrossPageChannelRole", "goog.net.xpc.TransportTypes", "goog.object", "goog.testing.AsyncTestCase", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("net/xpc/crosspagechannelrole.js", ["goog.net.xpc.CrossPageChannelRole"], [], false);
goog.addDependency("net/xpc/directtransport.js", ["goog.net.xpc.DirectTransport"], ["goog.Timer", "goog.async.Deferred", "goog.events.EventHandler", "goog.log", "goog.net.xpc", "goog.net.xpc.CfgFields", "goog.net.xpc.CrossPageChannelRole", "goog.net.xpc.Transport", "goog.net.xpc.TransportTypes", "goog.object"], false);
goog.addDependency("net/xpc/directtransport_test.js", ["goog.net.xpc.DirectTransportTest"], ["goog.Promise", "goog.dom", "goog.dom.TagName", "goog.labs.userAgent.browser", "goog.log", "goog.log.Level", "goog.net.xpc", "goog.net.xpc.CfgFields", "goog.net.xpc.CrossPageChannel", "goog.net.xpc.CrossPageChannelRole", "goog.net.xpc.TransportTypes", "goog.testing.jsunit"], false);
goog.addDependency("net/xpc/frameelementmethodtransport.js", ["goog.net.xpc.FrameElementMethodTransport"], ["goog.log", "goog.net.xpc", "goog.net.xpc.CrossPageChannelRole", "goog.net.xpc.Transport", "goog.net.xpc.TransportTypes"], false);
goog.addDependency("net/xpc/iframepollingtransport.js", ["goog.net.xpc.IframePollingTransport", "goog.net.xpc.IframePollingTransport.Receiver", "goog.net.xpc.IframePollingTransport.Sender"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.log", "goog.log.Level", "goog.net.xpc", "goog.net.xpc.CfgFields", "goog.net.xpc.CrossPageChannelRole", "goog.net.xpc.Transport", "goog.net.xpc.TransportTypes", "goog.userAgent"], false);
goog.addDependency("net/xpc/iframepollingtransport_test.js", ["goog.net.xpc.IframePollingTransportTest"], ["goog.Timer", "goog.dom", "goog.dom.TagName", "goog.functions", "goog.net.xpc.CfgFields", "goog.net.xpc.CrossPageChannel", "goog.net.xpc.CrossPageChannelRole", "goog.net.xpc.TransportTypes", "goog.object", "goog.testing.MockClock", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("net/xpc/iframerelaytransport.js", ["goog.net.xpc.IframeRelayTransport"], ["goog.dom", "goog.dom.TagName", "goog.dom.safe", "goog.events", "goog.html.SafeHtml", "goog.log", "goog.log.Level", "goog.net.xpc", "goog.net.xpc.CfgFields", "goog.net.xpc.Transport", "goog.net.xpc.TransportTypes", "goog.string", "goog.string.Const", "goog.userAgent"], false);
goog.addDependency("net/xpc/nativemessagingtransport.js", ["goog.net.xpc.NativeMessagingTransport"], ["goog.Timer", "goog.asserts", "goog.async.Deferred", "goog.events", "goog.events.EventHandler", "goog.log", "goog.net.xpc", "goog.net.xpc.CrossPageChannelRole", "goog.net.xpc.Transport", "goog.net.xpc.TransportTypes"], false);
goog.addDependency("net/xpc/nativemessagingtransport_test.js", ["goog.net.xpc.NativeMessagingTransportTest"], ["goog.dom", "goog.events", "goog.net.xpc", "goog.net.xpc.CfgFields", "goog.net.xpc.CrossPageChannel", "goog.net.xpc.CrossPageChannelRole", "goog.net.xpc.NativeMessagingTransport", "goog.testing.jsunit"], false);
goog.addDependency("net/xpc/nixtransport.js", ["goog.net.xpc.NixTransport"], ["goog.log", "goog.net.xpc", "goog.net.xpc.CfgFields", "goog.net.xpc.CrossPageChannelRole", "goog.net.xpc.Transport", "goog.net.xpc.TransportTypes", "goog.reflect"], false);
goog.addDependency("net/xpc/relay.js", ["goog.net.xpc.relay"], [], false);
goog.addDependency("net/xpc/transport.js", ["goog.net.xpc.Transport"], ["goog.Disposable", "goog.dom", "goog.net.xpc.TransportNames"], false);
goog.addDependency("net/xpc/xpc.js", ["goog.net.xpc", "goog.net.xpc.CfgFields", "goog.net.xpc.ChannelStates", "goog.net.xpc.TransportNames", "goog.net.xpc.TransportTypes", "goog.net.xpc.UriCfgFields"], ["goog.log"], false);
goog.addDependency("object/object.js", ["goog.object"], [], false);
goog.addDependency("object/object_test.js", ["goog.objectTest"], ["goog.functions", "goog.object", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("positioning/absoluteposition.js", ["goog.positioning.AbsolutePosition"], ["goog.math.Coordinate", "goog.positioning", "goog.positioning.AbstractPosition"], false);
goog.addDependency("positioning/abstractposition.js", ["goog.positioning.AbstractPosition"], [], false);
goog.addDependency("positioning/anchoredposition.js", ["goog.positioning.AnchoredPosition"], ["goog.positioning", "goog.positioning.AbstractPosition"], false);
goog.addDependency("positioning/anchoredposition_test.js", ["goog.positioning.AnchoredPositionTest"], ["goog.dom", "goog.positioning.AnchoredPosition", "goog.positioning.Corner", "goog.positioning.Overflow", "goog.style", "goog.testing.jsunit"], false);
goog.addDependency("positioning/anchoredviewportposition.js", ["goog.positioning.AnchoredViewportPosition"], ["goog.positioning", "goog.positioning.AnchoredPosition", "goog.positioning.Overflow", "goog.positioning.OverflowStatus"], false);
goog.addDependency("positioning/anchoredviewportposition_test.js", ["goog.positioning.AnchoredViewportPositionTest"], ["goog.dom", "goog.math.Box", "goog.positioning.AnchoredViewportPosition", "goog.positioning.Corner", "goog.positioning.OverflowStatus", "goog.style", "goog.testing.jsunit"], false);
goog.addDependency("positioning/clientposition.js", ["goog.positioning.ClientPosition"], ["goog.asserts", "goog.dom", "goog.math.Coordinate", "goog.positioning", "goog.positioning.AbstractPosition", "goog.style"], false);
goog.addDependency("positioning/clientposition_test.js", ["goog.positioning.clientPositionTest"], ["goog.dom", "goog.dom.TagName", "goog.positioning.ClientPosition", "goog.positioning.Corner", "goog.style", "goog.testing.jsunit"], false);
goog.addDependency("positioning/menuanchoredposition.js", ["goog.positioning.MenuAnchoredPosition"], ["goog.positioning.AnchoredViewportPosition", "goog.positioning.Overflow"], false);
goog.addDependency("positioning/menuanchoredposition_test.js", ["goog.positioning.MenuAnchoredPositionTest"], ["goog.dom", "goog.dom.TagName", "goog.positioning.Corner", "goog.positioning.MenuAnchoredPosition", "goog.testing.jsunit"], false);
goog.addDependency("positioning/positioning.js", ["goog.positioning", "goog.positioning.Corner", "goog.positioning.CornerBit", "goog.positioning.Overflow", "goog.positioning.OverflowStatus"], ["goog.asserts", "goog.dom", "goog.dom.TagName", "goog.math.Coordinate", "goog.math.Rect", "goog.math.Size", "goog.style", "goog.style.bidi"], false);
goog.addDependency("positioning/positioning_test.js", ["goog.positioningTest"], ["goog.dom", "goog.dom.DomHelper", "goog.dom.TagName", "goog.math.Box", "goog.math.Coordinate", "goog.math.Size", "goog.positioning", "goog.positioning.Corner", "goog.positioning.Overflow", "goog.positioning.OverflowStatus", "goog.style", "goog.testing.ExpectedFailures", "goog.testing.jsunit", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("positioning/viewportclientposition.js", ["goog.positioning.ViewportClientPosition"], ["goog.dom", "goog.math.Coordinate", "goog.positioning", "goog.positioning.ClientPosition", "goog.positioning.Overflow", "goog.positioning.OverflowStatus", "goog.style"], false);
goog.addDependency("positioning/viewportclientposition_test.js", ["goog.positioning.ViewportClientPositionTest"], ["goog.dom", "goog.positioning.Corner", "goog.positioning.Overflow", "goog.positioning.ViewportClientPosition", "goog.style", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("positioning/viewportposition.js", ["goog.positioning.ViewportPosition"], ["goog.math.Coordinate", "goog.positioning", "goog.positioning.AbstractPosition", "goog.positioning.Corner", "goog.style"], false);
goog.addDependency("promise/promise.js", ["goog.Promise"], ["goog.Thenable", "goog.asserts", "goog.async.FreeList", "goog.async.run", "goog.async.throwException", "goog.debug.Error", "goog.promise.Resolver"], false);
goog.addDependency("promise/promise_test.js", ["goog.PromiseTest"], ["goog.Promise", "goog.Thenable", "goog.Timer", "goog.functions", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("promise/resolver.js", ["goog.promise.Resolver"], [], false);
goog.addDependency("promise/testsuiteadapter.js", ["goog.promise.testSuiteAdapter"], ["goog.Promise"], false);
goog.addDependency("promise/thenable.js", ["goog.Thenable"], [], false);
goog.addDependency("proto/proto.js", ["goog.proto"], ["goog.proto.Serializer"], false);
goog.addDependency("proto/serializer.js", ["goog.proto.Serializer"], ["goog.json.Serializer", "goog.string"], false);
goog.addDependency("proto/serializer_test.js", ["goog.protoTest"], ["goog.proto", "goog.testing.jsunit"], false);
goog.addDependency("proto2/descriptor.js", ["goog.proto2.Descriptor", "goog.proto2.Metadata"], ["goog.array", "goog.asserts", "goog.object", "goog.string"], false);
goog.addDependency("proto2/descriptor_test.js", ["goog.proto2.DescriptorTest"], ["goog.proto2.Descriptor", "goog.proto2.Message", "goog.testing.jsunit"], false);
goog.addDependency("proto2/fielddescriptor.js", ["goog.proto2.FieldDescriptor"], ["goog.asserts", "goog.string"], false);
goog.addDependency("proto2/fielddescriptor_test.js", ["goog.proto2.FieldDescriptorTest"], ["goog.proto2.FieldDescriptor", "goog.proto2.Message", "goog.testing.jsunit"], false);
goog.addDependency("proto2/lazydeserializer.js", ["goog.proto2.LazyDeserializer"], ["goog.asserts", "goog.proto2.Message", "goog.proto2.Serializer"], false);
goog.addDependency("proto2/message.js", ["goog.proto2.Message"], ["goog.asserts", "goog.proto2.Descriptor", "goog.proto2.FieldDescriptor"], false);
goog.addDependency("proto2/message_test.js", ["goog.proto2.MessageTest"], ["goog.testing.jsunit", "proto2.TestAllTypes", "proto2.TestAllTypes.NestedEnum", "proto2.TestAllTypes.NestedMessage", "proto2.TestAllTypes.OptionalGroup", "proto2.TestAllTypes.RepeatedGroup"], false);
goog.addDependency("proto2/objectserializer.js", ["goog.proto2.ObjectSerializer"], ["goog.asserts", "goog.proto2.FieldDescriptor", "goog.proto2.Serializer", "goog.string"], false);
goog.addDependency("proto2/objectserializer_test.js", ["goog.proto2.ObjectSerializerTest"], ["goog.proto2.ObjectSerializer", "goog.proto2.Serializer", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "proto2.TestAllTypes"], false);
goog.addDependency("proto2/package_test.pb.js", ["someprotopackage.TestPackageTypes"], ["goog.proto2.Message", "proto2.TestAllTypes"], false);
goog.addDependency("proto2/pbliteserializer.js", ["goog.proto2.PbLiteSerializer"], ["goog.asserts", "goog.proto2.FieldDescriptor", "goog.proto2.LazyDeserializer", "goog.proto2.Serializer"], false);
goog.addDependency("proto2/pbliteserializer_test.js", ["goog.proto2.PbLiteSerializerTest"], ["goog.proto2.PbLiteSerializer", "goog.testing.jsunit", "proto2.TestAllTypes"], false);
goog.addDependency("proto2/proto_test.js", ["goog.proto2.messageTest"], ["goog.proto2.FieldDescriptor", "goog.testing.jsunit", "proto2.TestAllTypes", "someprotopackage.TestPackageTypes"], false);
goog.addDependency("proto2/serializer.js", ["goog.proto2.Serializer"], ["goog.asserts", "goog.proto2.FieldDescriptor", "goog.proto2.Message"], false);
goog.addDependency("proto2/test.pb.js", ["proto2.TestAllTypes", "proto2.TestAllTypes.NestedEnum", "proto2.TestAllTypes.NestedMessage", "proto2.TestAllTypes.OptionalGroup", "proto2.TestAllTypes.RepeatedGroup", "proto2.TestDefaultChild", "proto2.TestDefaultParent"], ["goog.proto2.Message"], false);
goog.addDependency("proto2/textformatserializer.js", ["goog.proto2.TextFormatSerializer"], ["goog.array", "goog.asserts", "goog.json", "goog.math", "goog.object", "goog.proto2.FieldDescriptor", "goog.proto2.Message", "goog.proto2.Serializer", "goog.string"], false);
goog.addDependency("proto2/textformatserializer_test.js", ["goog.proto2.TextFormatSerializerTest"], ["goog.proto2.ObjectSerializer", "goog.proto2.TextFormatSerializer", "goog.testing.jsunit", "proto2.TestAllTypes"], false);
goog.addDependency("proto2/util.js", ["goog.proto2.Util"], ["goog.asserts"], false);
goog.addDependency("pubsub/pubsub.js", ["goog.pubsub.PubSub"], ["goog.Disposable", "goog.array"], false);
goog.addDependency("pubsub/pubsub_test.js", ["goog.pubsub.PubSubTest"], ["goog.array", "goog.pubsub.PubSub", "goog.testing.jsunit"], false);
goog.addDependency("pubsub/topicid.js", ["goog.pubsub.TopicId"], [], false);
goog.addDependency("pubsub/typedpubsub.js", ["goog.pubsub.TypedPubSub"], ["goog.Disposable", "goog.pubsub.PubSub"], false);
goog.addDependency("pubsub/typedpubsub_test.js", ["goog.pubsub.TypedPubSubTest"], ["goog.array", "goog.pubsub.TopicId", "goog.pubsub.TypedPubSub", "goog.testing.jsunit"], false);
goog.addDependency("reflect/reflect.js", ["goog.reflect"], [], false);
goog.addDependency("result/deferredadaptor.js", ["goog.result.DeferredAdaptor"], ["goog.async.Deferred", "goog.result", "goog.result.Result"], false);
goog.addDependency("result/dependentresult.js", ["goog.result.DependentResult"], ["goog.result.Result"], false);
goog.addDependency("result/result_interface.js", ["goog.result.Result"], ["goog.Thenable"], false);
goog.addDependency("result/resultutil.js", ["goog.result"], ["goog.array", "goog.result.DependentResult", "goog.result.Result", "goog.result.SimpleResult"], false);
goog.addDependency("result/simpleresult.js", ["goog.result.SimpleResult", "goog.result.SimpleResult.StateError"], ["goog.Promise", "goog.Thenable", "goog.debug.Error", "goog.result.Result"], false);
goog.addDependency("soy/data.js", ["goog.soy.data.SanitizedContent", "goog.soy.data.SanitizedContentKind"], ["goog.html.SafeHtml", "goog.html.uncheckedconversions", "goog.string.Const"], false);
goog.addDependency("soy/data_test.js", ["goog.soy.dataTest"], ["goog.html.SafeHtml", "goog.soy.testHelper", "goog.testing.jsunit"], false);
goog.addDependency("soy/renderer.js", ["goog.soy.InjectedDataSupplier", "goog.soy.Renderer"], ["goog.asserts", "goog.dom", "goog.soy", "goog.soy.data.SanitizedContent", "goog.soy.data.SanitizedContentKind"], false);
goog.addDependency("soy/renderer_test.js", ["goog.soy.RendererTest"], ["goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.html.SafeHtml", "goog.i18n.bidi.Dir", "goog.soy.Renderer", "goog.soy.data.SanitizedContentKind", "goog.soy.testHelper", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("soy/soy.js", ["goog.soy"], ["goog.asserts", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.soy.data.SanitizedContent", "goog.soy.data.SanitizedContentKind", "goog.string"], false);
goog.addDependency("soy/soy_test.js", ["goog.soyTest"], ["goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.functions", "goog.soy", "goog.soy.testHelper", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("soy/soy_testhelper.js", ["goog.soy.testHelper"], ["goog.dom", "goog.dom.TagName", "goog.i18n.bidi.Dir", "goog.soy.data.SanitizedContent", "goog.soy.data.SanitizedContentKind", "goog.string", "goog.userAgent"], false);
goog.addDependency("spell/spellcheck.js", ["goog.spell.SpellCheck", "goog.spell.SpellCheck.WordChangedEvent"], ["goog.Timer", "goog.events.Event", "goog.events.EventTarget", "goog.structs.Set"], false);
goog.addDependency("spell/spellcheck_test.js", ["goog.spell.SpellCheckTest"], ["goog.spell.SpellCheck", "goog.testing.jsunit"], false);
goog.addDependency("stats/basicstat.js", ["goog.stats.BasicStat"], ["goog.asserts", "goog.log", "goog.string.format", "goog.structs.CircularBuffer"], false);
goog.addDependency("stats/basicstat_test.js", ["goog.stats.BasicStatTest"], ["goog.array", "goog.stats.BasicStat", "goog.string.format", "goog.testing.PseudoRandom", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("storage/collectablestorage.js", ["goog.storage.CollectableStorage"], ["goog.array", "goog.iter", "goog.storage.ErrorCode", "goog.storage.ExpiringStorage", "goog.storage.RichStorage"], false);
goog.addDependency("storage/collectablestorage_test.js", ["goog.storage.CollectableStorageTest"], ["goog.storage.CollectableStorage", "goog.storage.collectableStorageTester", "goog.storage.storage_test", "goog.testing.MockClock", "goog.testing.jsunit", "goog.testing.storage.FakeMechanism"], false);
goog.addDependency("storage/collectablestoragetester.js", ["goog.storage.collectableStorageTester"], ["goog.testing.asserts"], false);
goog.addDependency("storage/encryptedstorage.js", ["goog.storage.EncryptedStorage"], ["goog.crypt", "goog.crypt.Arc4", "goog.crypt.Sha1", "goog.crypt.base64", "goog.json", "goog.json.Serializer", "goog.storage.CollectableStorage", "goog.storage.ErrorCode", "goog.storage.RichStorage"], false);
goog.addDependency("storage/encryptedstorage_test.js", ["goog.storage.EncryptedStorageTest"], ["goog.json", "goog.storage.EncryptedStorage", "goog.storage.ErrorCode", "goog.storage.RichStorage", "goog.storage.collectableStorageTester", "goog.storage.storage_test", "goog.testing.MockClock", "goog.testing.PseudoRandom", "goog.testing.jsunit", "goog.testing.storage.FakeMechanism"], false);
goog.addDependency("storage/errorcode.js", ["goog.storage.ErrorCode"], [], false);
goog.addDependency("storage/expiringstorage.js", ["goog.storage.ExpiringStorage"], ["goog.storage.RichStorage"], false);
goog.addDependency("storage/expiringstorage_test.js", ["goog.storage.ExpiringStorageTest"], ["goog.storage.ExpiringStorage", "goog.storage.storage_test", "goog.testing.MockClock", "goog.testing.jsunit", "goog.testing.storage.FakeMechanism"], false);
goog.addDependency("storage/mechanism/errorcode.js", ["goog.storage.mechanism.ErrorCode"], [], false);
goog.addDependency("storage/mechanism/errorhandlingmechanism.js", ["goog.storage.mechanism.ErrorHandlingMechanism"], ["goog.storage.mechanism.Mechanism"], false);
goog.addDependency("storage/mechanism/errorhandlingmechanism_test.js", ["goog.storage.mechanism.ErrorHandlingMechanismTest"], ["goog.storage.mechanism.ErrorHandlingMechanism", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("storage/mechanism/html5localstorage.js", ["goog.storage.mechanism.HTML5LocalStorage"], ["goog.storage.mechanism.HTML5WebStorage"], false);
goog.addDependency("storage/mechanism/html5localstorage_test.js", ["goog.storage.mechanism.HTML5LocalStorageTest"], ["goog.storage.mechanism.HTML5LocalStorage", "goog.storage.mechanism.mechanismSeparationTester", "goog.storage.mechanism.mechanismSharingTester", "goog.storage.mechanism.mechanismTestDefinition", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("storage/mechanism/html5sessionstorage.js", ["goog.storage.mechanism.HTML5SessionStorage"], ["goog.storage.mechanism.HTML5WebStorage"], false);
goog.addDependency("storage/mechanism/html5sessionstorage_test.js", ["goog.storage.mechanism.HTML5SessionStorageTest"], ["goog.storage.mechanism.HTML5SessionStorage", "goog.storage.mechanism.mechanismSeparationTester", "goog.storage.mechanism.mechanismSharingTester", "goog.storage.mechanism.mechanismTestDefinition", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("storage/mechanism/html5webstorage.js", ["goog.storage.mechanism.HTML5WebStorage"], ["goog.asserts", "goog.iter.Iterator", "goog.iter.StopIteration", "goog.storage.mechanism.ErrorCode", "goog.storage.mechanism.IterableMechanism"], false);
goog.addDependency("storage/mechanism/html5webstorage_test.js", ["goog.storage.mechanism.HTML5MockStorage", "goog.storage.mechanism.HTML5WebStorageTest", "goog.storage.mechanism.MockThrowableStorage"], ["goog.storage.mechanism.ErrorCode", "goog.storage.mechanism.HTML5WebStorage", "goog.testing.jsunit"], false);
goog.addDependency("storage/mechanism/ieuserdata.js", ["goog.storage.mechanism.IEUserData"], ["goog.asserts", "goog.iter.Iterator", "goog.iter.StopIteration", "goog.storage.mechanism.ErrorCode", "goog.storage.mechanism.IterableMechanism", "goog.structs.Map", "goog.userAgent"], false);
goog.addDependency("storage/mechanism/ieuserdata_test.js", ["goog.storage.mechanism.IEUserDataTest"], ["goog.storage.mechanism.IEUserData", "goog.storage.mechanism.mechanismSeparationTester", "goog.storage.mechanism.mechanismSharingTester", "goog.storage.mechanism.mechanismTestDefinition", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("storage/mechanism/iterablemechanism.js", ["goog.storage.mechanism.IterableMechanism"], ["goog.array", "goog.asserts", "goog.iter", "goog.storage.mechanism.Mechanism"], false);
goog.addDependency("storage/mechanism/iterablemechanismtester.js", ["goog.storage.mechanism.iterableMechanismTester"], ["goog.iter.Iterator", "goog.storage.mechanism.IterableMechanism", "goog.testing.asserts"], false);
goog.addDependency("storage/mechanism/mechanism.js", ["goog.storage.mechanism.Mechanism"], [], false);
goog.addDependency("storage/mechanism/mechanismfactory.js", ["goog.storage.mechanism.mechanismfactory"], ["goog.storage.mechanism.HTML5LocalStorage", "goog.storage.mechanism.HTML5SessionStorage", "goog.storage.mechanism.IEUserData", "goog.storage.mechanism.PrefixedMechanism"], false);
goog.addDependency("storage/mechanism/mechanismfactory_test.js", ["goog.storage.mechanism.mechanismfactoryTest"], ["goog.storage.mechanism.mechanismfactory", "goog.testing.jsunit"], false);
goog.addDependency("storage/mechanism/mechanismseparationtester.js", ["goog.storage.mechanism.mechanismSeparationTester"], ["goog.iter.StopIteration", "goog.storage.mechanism.mechanismTestDefinition", "goog.testing.asserts"], false);
goog.addDependency("storage/mechanism/mechanismsharingtester.js", ["goog.storage.mechanism.mechanismSharingTester"], ["goog.iter.StopIteration", "goog.storage.mechanism.mechanismTestDefinition", "goog.testing.asserts"], false);
goog.addDependency("storage/mechanism/mechanismtestdefinition.js", ["goog.storage.mechanism.mechanismTestDefinition"], [], false);
goog.addDependency("storage/mechanism/mechanismtester.js", ["goog.storage.mechanism.mechanismTester"], ["goog.storage.mechanism.ErrorCode", "goog.testing.asserts", "goog.userAgent", "goog.userAgent.product", "goog.userAgent.product.isVersion"], false);
goog.addDependency("storage/mechanism/prefixedmechanism.js", ["goog.storage.mechanism.PrefixedMechanism"], ["goog.iter.Iterator", "goog.storage.mechanism.IterableMechanism"], false);
goog.addDependency("storage/mechanism/prefixedmechanism_test.js", ["goog.storage.mechanism.PrefixedMechanismTest"], ["goog.storage.mechanism.HTML5LocalStorage", "goog.storage.mechanism.PrefixedMechanism", "goog.storage.mechanism.mechanismSeparationTester", "goog.storage.mechanism.mechanismSharingTester", "goog.testing.jsunit"], false);
goog.addDependency("storage/richstorage.js", ["goog.storage.RichStorage", "goog.storage.RichStorage.Wrapper"], ["goog.storage.ErrorCode", "goog.storage.Storage"], false);
goog.addDependency("storage/richstorage_test.js", ["goog.storage.RichStorageTest"], ["goog.storage.ErrorCode", "goog.storage.RichStorage", "goog.storage.storage_test", "goog.testing.jsunit", "goog.testing.storage.FakeMechanism"], false);
goog.addDependency("storage/storage.js", ["goog.storage.Storage"], ["goog.json", "goog.storage.ErrorCode"], false);
goog.addDependency("storage/storage_test.js", ["goog.storage.storage_test"], ["goog.structs.Map", "goog.testing.asserts"], false);
goog.addDependency("string/const.js", ["goog.string.Const"], ["goog.asserts", "goog.string.TypedString"], false);
goog.addDependency("string/const_test.js", ["goog.string.constTest"], ["goog.string.Const", "goog.testing.jsunit"], false);
goog.addDependency("string/linkify.js", ["goog.string.linkify"], ["goog.string"], false);
goog.addDependency("string/linkify_test.js", ["goog.string.linkifyTest"], ["goog.dom.TagName", "goog.string", "goog.string.linkify", "goog.testing.dom", "goog.testing.jsunit"], false);
goog.addDependency("string/newlines.js", ["goog.string.newlines", "goog.string.newlines.Line"], ["goog.array"], false);
goog.addDependency("string/newlines_test.js", ["goog.string.newlinesTest"], ["goog.string.newlines", "goog.testing.jsunit"], false);
goog.addDependency("string/parser.js", ["goog.string.Parser"], [], false);
goog.addDependency("string/path.js", ["goog.string.path"], ["goog.array", "goog.string"], false);
goog.addDependency("string/path_test.js", ["goog.string.pathTest"], ["goog.string.path", "goog.testing.jsunit"], false);
goog.addDependency("string/string.js", ["goog.string", "goog.string.Unicode"], [], false);
goog.addDependency("string/string_test.js", ["goog.stringTest"], ["goog.dom.TagName", "goog.functions", "goog.object", "goog.string", "goog.string.Unicode", "goog.testing.MockControl", "goog.testing.PropertyReplacer", "goog.testing.jsunit"], false);
goog.addDependency("string/stringbuffer.js", ["goog.string.StringBuffer"], [], false);
goog.addDependency("string/stringbuffer_test.js", ["goog.string.StringBufferTest"], ["goog.string.StringBuffer", "goog.testing.jsunit"], false);
goog.addDependency("string/stringformat.js", ["goog.string.format"], ["goog.string"], false);
goog.addDependency("string/stringformat_test.js", ["goog.string.formatTest"], ["goog.string.format", "goog.testing.jsunit"], false);
goog.addDependency("string/stringifier.js", ["goog.string.Stringifier"], [], false);
goog.addDependency("string/typedstring.js", ["goog.string.TypedString"], [], false);
goog.addDependency("structs/avltree.js", ["goog.structs.AvlTree", "goog.structs.AvlTree.Node"], ["goog.structs.Collection"], false);
goog.addDependency("structs/avltree_test.js", ["goog.structs.AvlTreeTest"], ["goog.array", "goog.structs.AvlTree", "goog.testing.jsunit"], false);
goog.addDependency("structs/circularbuffer.js", ["goog.structs.CircularBuffer"], [], false);
goog.addDependency("structs/circularbuffer_test.js", ["goog.structs.CircularBufferTest"], ["goog.structs.CircularBuffer", "goog.testing.jsunit"], false);
goog.addDependency("structs/collection.js", ["goog.structs.Collection"], [], false);
goog.addDependency("structs/collection_test.js", ["goog.structs.CollectionTest"], ["goog.structs.AvlTree", "goog.structs.Set", "goog.testing.jsunit"], false);
goog.addDependency("structs/heap.js", ["goog.structs.Heap"], ["goog.array", "goog.object", "goog.structs.Node"], false);
goog.addDependency("structs/heap_test.js", ["goog.structs.HeapTest"], ["goog.structs", "goog.structs.Heap", "goog.testing.jsunit"], false);
goog.addDependency("structs/inversionmap.js", ["goog.structs.InversionMap"], ["goog.array"], false);
goog.addDependency("structs/inversionmap_test.js", ["goog.structs.InversionMapTest"], ["goog.structs.InversionMap", "goog.testing.jsunit"], false);
goog.addDependency("structs/linkedmap.js", ["goog.structs.LinkedMap"], ["goog.structs.Map"], false);
goog.addDependency("structs/linkedmap_test.js", ["goog.structs.LinkedMapTest"], ["goog.structs.LinkedMap", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("structs/map.js", ["goog.structs.Map"], ["goog.iter.Iterator", "goog.iter.StopIteration", "goog.object"], false);
goog.addDependency("structs/map_test.js", ["goog.structs.MapTest"], ["goog.iter", "goog.structs", "goog.structs.Map", "goog.testing.jsunit"], false);
goog.addDependency("structs/node.js", ["goog.structs.Node"], [], false);
goog.addDependency("structs/pool.js", ["goog.structs.Pool"], ["goog.Disposable", "goog.structs.Queue", "goog.structs.Set"], false);
goog.addDependency("structs/pool_test.js", ["goog.structs.PoolTest"], ["goog.structs.Pool", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("structs/prioritypool.js", ["goog.structs.PriorityPool"], ["goog.structs.Pool", "goog.structs.PriorityQueue"], false);
goog.addDependency("structs/prioritypool_test.js", ["goog.structs.PriorityPoolTest"], ["goog.structs.PriorityPool", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("structs/priorityqueue.js", ["goog.structs.PriorityQueue"], ["goog.structs.Heap"], false);
goog.addDependency("structs/priorityqueue_test.js", ["goog.structs.PriorityQueueTest"], ["goog.structs", "goog.structs.PriorityQueue", "goog.testing.jsunit"], false);
goog.addDependency("structs/quadtree.js", ["goog.structs.QuadTree", "goog.structs.QuadTree.Node", "goog.structs.QuadTree.Point"], ["goog.math.Coordinate"], false);
goog.addDependency("structs/quadtree_test.js", ["goog.structs.QuadTreeTest"], ["goog.structs", "goog.structs.QuadTree", "goog.testing.jsunit"], false);
goog.addDependency("structs/queue.js", ["goog.structs.Queue"], ["goog.array"], false);
goog.addDependency("structs/queue_test.js", ["goog.structs.QueueTest"], ["goog.structs.Queue", "goog.testing.jsunit"], false);
goog.addDependency("structs/set.js", ["goog.structs.Set"], ["goog.structs", "goog.structs.Collection", "goog.structs.Map"], false);
goog.addDependency("structs/set_test.js", ["goog.structs.SetTest"], ["goog.iter", "goog.structs", "goog.structs.Set", "goog.testing.jsunit"], false);
goog.addDependency("structs/simplepool.js", ["goog.structs.SimplePool"], ["goog.Disposable"], false);
goog.addDependency("structs/stringset.js", ["goog.structs.StringSet"], ["goog.asserts", "goog.iter"], false);
goog.addDependency("structs/stringset_test.js", ["goog.structs.StringSetTest"], ["goog.array", "goog.iter", "goog.structs.StringSet", "goog.testing.asserts", "goog.testing.jsunit"], false);
goog.addDependency("structs/structs.js", ["goog.structs"], ["goog.array", "goog.object"], false);
goog.addDependency("structs/structs_test.js", ["goog.structsTest"], ["goog.array", "goog.dom.TagName", "goog.structs", "goog.structs.Map", "goog.structs.Set", "goog.testing.jsunit"], false);
goog.addDependency("structs/treenode.js", ["goog.structs.TreeNode"], ["goog.array", "goog.asserts", "goog.structs.Node"], false);
goog.addDependency("structs/treenode_test.js", ["goog.structs.TreeNodeTest"], ["goog.structs.TreeNode", "goog.testing.jsunit"], false);
goog.addDependency("structs/trie.js", ["goog.structs.Trie"], ["goog.object", "goog.structs"], false);
goog.addDependency("structs/trie_test.js", ["goog.structs.TrieTest"], ["goog.object", "goog.structs", "goog.structs.Trie", "goog.testing.jsunit"], false);
goog.addDependency("structs/weak/weak.js", ["goog.structs.weak"], ["goog.userAgent"], false);
goog.addDependency("structs/weak/weak_test.js", ["goog.structs.weakTest"], ["goog.array", "goog.structs.weak", "goog.testing.jsunit"], false);
goog.addDependency("style/bidi.js", ["goog.style.bidi"], ["goog.dom", "goog.style", "goog.userAgent"], false);
goog.addDependency("style/bidi_test.js", ["goog.style.bidiTest"], ["goog.dom", "goog.style", "goog.style.bidi", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("style/cursor.js", ["goog.style.cursor"], ["goog.userAgent"], false);
goog.addDependency("style/cursor_test.js", ["goog.style.cursorTest"], ["goog.style.cursor", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("style/style.js", ["goog.style"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.vendor", "goog.math.Box", "goog.math.Coordinate", "goog.math.Rect", "goog.math.Size", "goog.object", "goog.string", "goog.userAgent"], false);
goog.addDependency("style/style_document_scroll_test.js", ["goog.style.style_document_scroll_test"], ["goog.dom", "goog.style", "goog.testing.jsunit"], false);
goog.addDependency("style/style_test.js", ["goog.style_test"], ["goog.array", "goog.color", "goog.dom", "goog.dom.TagName", "goog.events.BrowserEvent", "goog.labs.userAgent.util", "goog.math.Box", "goog.math.Coordinate", "goog.math.Rect", "goog.math.Size", "goog.object", "goog.string", "goog.style", "goog.testing.ExpectedFailures", "goog.testing.MockUserAgent", "goog.testing.asserts", "goog.testing.jsunit", "goog.userAgent", "goog.userAgent.product", "goog.userAgentTestUtil", "goog.userAgentTestUtil.UserAgents"], 
false);
goog.addDependency("style/style_webkit_scrollbars_test.js", ["goog.style.webkitScrollbarsTest"], ["goog.asserts", "goog.style", "goog.styleScrollbarTester", "goog.testing.ExpectedFailures", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("style/stylescrollbartester.js", ["goog.styleScrollbarTester"], ["goog.dom", "goog.dom.TagName", "goog.style", "goog.testing.asserts"], false);
goog.addDependency("style/transform.js", ["goog.style.transform"], ["goog.functions", "goog.math.Coordinate", "goog.math.Coordinate3", "goog.style", "goog.userAgent", "goog.userAgent.product.isVersion"], false);
goog.addDependency("style/transform_test.js", ["goog.style.transformTest"], ["goog.dom", "goog.dom.TagName", "goog.style.transform", "goog.testing.jsunit", "goog.userAgent", "goog.userAgent.product.isVersion"], false);
goog.addDependency("style/transition.js", ["goog.style.transition", "goog.style.transition.Css3Property"], ["goog.array", "goog.asserts", "goog.dom.TagName", "goog.dom.safe", "goog.dom.vendor", "goog.functions", "goog.html.SafeHtml", "goog.style", "goog.userAgent"], false);
goog.addDependency("style/transition_test.js", ["goog.style.transitionTest"], ["goog.style", "goog.style.transition", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("test_module.js", ["goog.test_module"], ["goog.test_module_dep"], true);
goog.addDependency("test_module_dep.js", ["goog.test_module_dep"], [], true);
goog.addDependency("testing/asserts.js", ["goog.testing.JsUnitException", "goog.testing.asserts", "goog.testing.asserts.ArrayLike"], ["goog.testing.stacktrace"], false);
goog.addDependency("testing/asserts_test.js", ["goog.testing.assertsTest"], ["goog.array", "goog.dom", "goog.iter.Iterator", "goog.iter.StopIteration", "goog.labs.userAgent.browser", "goog.string", "goog.structs.Map", "goog.structs.Set", "goog.testing.asserts", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("testing/async/mockcontrol.js", ["goog.testing.async.MockControl"], ["goog.asserts", "goog.async.Deferred", "goog.debug", "goog.testing.asserts", "goog.testing.mockmatchers.IgnoreArgument"], false);
goog.addDependency("testing/async/mockcontrol_test.js", ["goog.testing.async.MockControlTest"], ["goog.async.Deferred", "goog.testing.MockControl", "goog.testing.asserts", "goog.testing.async.MockControl", "goog.testing.jsunit"], false);
goog.addDependency("testing/asynctestcase.js", ["goog.testing.AsyncTestCase", "goog.testing.AsyncTestCase.ControlBreakingException"], ["goog.testing.TestCase", "goog.testing.asserts"], false);
goog.addDependency("testing/asynctestcase_async_test.js", ["goog.testing.AsyncTestCaseAsyncTest"], ["goog.testing.AsyncTestCase", "goog.testing.jsunit"], false);
goog.addDependency("testing/asynctestcase_noasync_test.js", ["goog.testing.AsyncTestCaseSyncTest"], ["goog.testing.AsyncTestCase", "goog.testing.jsunit"], false);
goog.addDependency("testing/asynctestcase_test.js", ["goog.testing.AsyncTestCaseTest"], ["goog.debug.Error", "goog.testing.AsyncTestCase", "goog.testing.asserts", "goog.testing.jsunit"], false);
goog.addDependency("testing/benchmark.js", ["goog.testing.benchmark"], ["goog.dom", "goog.dom.TagName", "goog.testing.PerformanceTable", "goog.testing.PerformanceTimer", "goog.testing.TestCase"], false);
goog.addDependency("testing/continuationtestcase.js", ["goog.testing.ContinuationTestCase", "goog.testing.ContinuationTestCase.Step", "goog.testing.ContinuationTestCase.Test"], ["goog.array", "goog.events.EventHandler", "goog.testing.TestCase", "goog.testing.asserts"], false);
goog.addDependency("testing/continuationtestcase_test.js", ["goog.testing.ContinuationTestCaseTest"], ["goog.events", "goog.events.EventTarget", "goog.testing.ContinuationTestCase", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.TestCase", "goog.testing.jsunit"], false);
goog.addDependency("testing/deferredtestcase.js", ["goog.testing.DeferredTestCase"], ["goog.testing.AsyncTestCase", "goog.testing.TestCase"], false);
goog.addDependency("testing/deferredtestcase_test.js", ["goog.testing.DeferredTestCaseTest"], ["goog.async.Deferred", "goog.testing.DeferredTestCase", "goog.testing.TestCase", "goog.testing.TestRunner", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("testing/dom.js", ["goog.testing.dom"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.InputType", "goog.dom.NodeIterator", "goog.dom.NodeType", "goog.dom.TagIterator", "goog.dom.TagName", "goog.dom.classlist", "goog.iter", "goog.object", "goog.string", "goog.style", "goog.testing.asserts", "goog.userAgent"], false);
goog.addDependency("testing/dom_test.js", ["goog.testing.domTest"], ["goog.dom", "goog.dom.TagName", "goog.testing.dom", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("testing/editor/dom.js", ["goog.testing.editor.dom"], ["goog.dom.NodeType", "goog.dom.TagIterator", "goog.dom.TagWalkType", "goog.iter", "goog.string", "goog.testing.asserts"], false);
goog.addDependency("testing/editor/dom_test.js", ["goog.testing.editor.domTest"], ["goog.dom", "goog.dom.TagName", "goog.functions", "goog.testing.editor.dom", "goog.testing.jsunit"], false);
goog.addDependency("testing/editor/fieldmock.js", ["goog.testing.editor.FieldMock"], ["goog.dom", "goog.dom.Range", "goog.editor.Field", "goog.testing.LooseMock", "goog.testing.mockmatchers"], false);
goog.addDependency("testing/editor/testhelper.js", ["goog.testing.editor.TestHelper"], ["goog.Disposable", "goog.dom", "goog.dom.Range", "goog.editor.BrowserFeature", "goog.editor.node", "goog.editor.plugins.AbstractBubblePlugin", "goog.testing.dom"], false);
goog.addDependency("testing/editor/testhelper_test.js", ["goog.testing.editor.TestHelperTest"], ["goog.dom", "goog.dom.TagName", "goog.editor.node", "goog.testing.editor.TestHelper", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("testing/events/eventobserver.js", ["goog.testing.events.EventObserver"], ["goog.array"], false);
goog.addDependency("testing/events/eventobserver_test.js", ["goog.testing.events.EventObserverTest"], ["goog.array", "goog.events", "goog.events.Event", "goog.events.EventTarget", "goog.testing.events.EventObserver", "goog.testing.jsunit"], false);
goog.addDependency("testing/events/events.js", ["goog.testing.events", "goog.testing.events.Event"], ["goog.Disposable", "goog.asserts", "goog.dom.NodeType", "goog.events", "goog.events.BrowserEvent", "goog.events.BrowserFeature", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.object", "goog.style", "goog.userAgent"], false);
goog.addDependency("testing/events/events_test.js", ["goog.testing.eventsTest"], ["goog.array", "goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.events", "goog.events.EventType", "goog.events.KeyCodes", "goog.math.Coordinate", "goog.string", "goog.style", "goog.testing.PropertyReplacer", "goog.testing.events", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.userAgent"], false);
goog.addDependency("testing/events/matchers.js", ["goog.testing.events.EventMatcher"], ["goog.events.Event", "goog.testing.mockmatchers.ArgumentMatcher"], false);
goog.addDependency("testing/events/matchers_test.js", ["goog.testing.events.EventMatcherTest"], ["goog.events.Event", "goog.testing.events.EventMatcher", "goog.testing.jsunit"], false);
goog.addDependency("testing/events/onlinehandler.js", ["goog.testing.events.OnlineHandler"], ["goog.events.EventTarget", "goog.net.NetworkStatusMonitor"], false);
goog.addDependency("testing/events/onlinehandler_test.js", ["goog.testing.events.OnlineHandlerTest"], ["goog.events", "goog.net.NetworkStatusMonitor", "goog.testing.events.EventObserver", "goog.testing.events.OnlineHandler", "goog.testing.jsunit"], false);
goog.addDependency("testing/expectedfailures.js", ["goog.testing.ExpectedFailures"], ["goog.debug.DivConsole", "goog.dom", "goog.dom.TagName", "goog.events", "goog.events.EventType", "goog.log", "goog.style", "goog.testing.JsUnitException", "goog.testing.TestCase", "goog.testing.asserts"], false);
goog.addDependency("testing/expectedfailures_test.js", ["goog.testing.ExpectedFailuresTest"], ["goog.debug.Logger", "goog.testing.ExpectedFailures", "goog.testing.JsUnitException", "goog.testing.jsunit"], false);
goog.addDependency("testing/fs/blob.js", ["goog.testing.fs.Blob"], ["goog.crypt.base64"], false);
goog.addDependency("testing/fs/blob_test.js", ["goog.testing.fs.BlobTest"], ["goog.testing.fs.Blob", "goog.testing.jsunit"], false);
goog.addDependency("testing/fs/directoryentry_test.js", ["goog.testing.fs.DirectoryEntryTest"], ["goog.array", "goog.fs.DirectoryEntry", "goog.fs.Error", "goog.testing.MockClock", "goog.testing.fs.FileSystem", "goog.testing.jsunit"], false);
goog.addDependency("testing/fs/entry.js", ["goog.testing.fs.DirectoryEntry", "goog.testing.fs.Entry", "goog.testing.fs.FileEntry"], ["goog.Timer", "goog.array", "goog.asserts", "goog.async.Deferred", "goog.fs.DirectoryEntry", "goog.fs.DirectoryEntryImpl", "goog.fs.Entry", "goog.fs.Error", "goog.fs.FileEntry", "goog.functions", "goog.object", "goog.string", "goog.testing.fs.File", "goog.testing.fs.FileWriter"], false);
goog.addDependency("testing/fs/entry_test.js", ["goog.testing.fs.EntryTest"], ["goog.fs.DirectoryEntry", "goog.fs.Error", "goog.testing.MockClock", "goog.testing.fs.FileSystem", "goog.testing.jsunit"], false);
goog.addDependency("testing/fs/file.js", ["goog.testing.fs.File"], ["goog.testing.fs.Blob"], false);
goog.addDependency("testing/fs/fileentry_test.js", ["goog.testing.fs.FileEntryTest"], ["goog.testing.MockClock", "goog.testing.fs.FileEntry", "goog.testing.fs.FileSystem", "goog.testing.jsunit"], false);
goog.addDependency("testing/fs/filereader.js", ["goog.testing.fs.FileReader"], ["goog.Timer", "goog.events.EventTarget", "goog.fs.Error", "goog.fs.FileReader", "goog.testing.fs.ProgressEvent"], false);
goog.addDependency("testing/fs/filereader_test.js", ["goog.testing.fs.FileReaderTest"], ["goog.Promise", "goog.array", "goog.events", "goog.fs.Error", "goog.fs.FileReader", "goog.object", "goog.testing.events.EventObserver", "goog.testing.fs.FileReader", "goog.testing.fs.FileSystem", "goog.testing.jsunit"], false);
goog.addDependency("testing/fs/filesystem.js", ["goog.testing.fs.FileSystem"], ["goog.fs.FileSystem", "goog.testing.fs.DirectoryEntry"], false);
goog.addDependency("testing/fs/filewriter.js", ["goog.testing.fs.FileWriter"], ["goog.Timer", "goog.events.EventTarget", "goog.fs.Error", "goog.fs.FileSaver", "goog.string", "goog.testing.fs.ProgressEvent"], false);
goog.addDependency("testing/fs/filewriter_test.js", ["goog.testing.fs.FileWriterTest"], ["goog.Promise", "goog.array", "goog.events", "goog.fs.Error", "goog.fs.FileSaver", "goog.object", "goog.testing.MockClock", "goog.testing.events.EventObserver", "goog.testing.fs.Blob", "goog.testing.fs.FileSystem", "goog.testing.jsunit"], false);
goog.addDependency("testing/fs/fs.js", ["goog.testing.fs"], ["goog.Timer", "goog.array", "goog.async.Deferred", "goog.fs", "goog.testing.fs.Blob", "goog.testing.fs.FileSystem"], false);
goog.addDependency("testing/fs/fs_test.js", ["goog.testing.fsTest"], ["goog.testing.AsyncTestCase", "goog.testing.fs", "goog.testing.fs.Blob", "goog.testing.jsunit"], false);
goog.addDependency("testing/fs/integration_test.js", ["goog.testing.fs.integrationTest"], ["goog.async.Deferred", "goog.async.DeferredList", "goog.events", "goog.fs", "goog.fs.DirectoryEntry", "goog.fs.Error", "goog.fs.FileSaver", "goog.testing.AsyncTestCase", "goog.testing.PropertyReplacer", "goog.testing.fs", "goog.testing.jsunit"], false);
goog.addDependency("testing/fs/progressevent.js", ["goog.testing.fs.ProgressEvent"], ["goog.events.Event"], false);
goog.addDependency("testing/functionmock.js", ["goog.testing", "goog.testing.FunctionMock", "goog.testing.GlobalFunctionMock", "goog.testing.MethodMock"], ["goog.object", "goog.testing.LooseMock", "goog.testing.Mock", "goog.testing.PropertyReplacer", "goog.testing.StrictMock"], false);
goog.addDependency("testing/functionmock_test.js", ["goog.testing.FunctionMockTest"], ["goog.array", "goog.string", "goog.testing", "goog.testing.FunctionMock", "goog.testing.Mock", "goog.testing.StrictMock", "goog.testing.asserts", "goog.testing.jsunit", "goog.testing.mockmatchers"], false);
goog.addDependency("testing/graphics.js", ["goog.testing.graphics"], ["goog.graphics.Path", "goog.testing.asserts"], false);
goog.addDependency("testing/i18n/asserts.js", ["goog.testing.i18n.asserts"], ["goog.testing.jsunit"], false);
goog.addDependency("testing/i18n/asserts_test.js", ["goog.testing.i18n.assertsTest"], ["goog.testing.ExpectedFailures", "goog.testing.i18n.asserts"], false);
goog.addDependency("testing/jsunit.js", ["goog.testing.jsunit"], ["goog.dom.TagName", "goog.testing.TestCase", "goog.testing.TestRunner"], false);
goog.addDependency("testing/loosemock.js", ["goog.testing.LooseExpectationCollection", "goog.testing.LooseMock"], ["goog.array", "goog.structs.Map", "goog.testing.Mock"], false);
goog.addDependency("testing/loosemock_test.js", ["goog.testing.LooseMockTest"], ["goog.testing.LooseMock", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.mockmatchers"], false);
goog.addDependency("testing/messaging/mockmessagechannel.js", ["goog.testing.messaging.MockMessageChannel"], ["goog.messaging.AbstractChannel", "goog.testing.asserts"], false);
goog.addDependency("testing/messaging/mockmessageevent.js", ["goog.testing.messaging.MockMessageEvent"], ["goog.events.BrowserEvent", "goog.events.EventType", "goog.testing.events.Event"], false);
goog.addDependency("testing/messaging/mockmessageport.js", ["goog.testing.messaging.MockMessagePort"], ["goog.events.EventTarget"], false);
goog.addDependency("testing/messaging/mockportnetwork.js", ["goog.testing.messaging.MockPortNetwork"], ["goog.messaging.PortNetwork", "goog.testing.messaging.MockMessageChannel"], false);
goog.addDependency("testing/mock.js", ["goog.testing.Mock", "goog.testing.MockExpectation"], ["goog.array", "goog.object", "goog.testing.JsUnitException", "goog.testing.MockInterface", "goog.testing.mockmatchers"], false);
goog.addDependency("testing/mock_test.js", ["goog.testing.MockTest"], ["goog.array", "goog.testing", "goog.testing.Mock", "goog.testing.MockControl", "goog.testing.MockExpectation", "goog.testing.jsunit"], false);
goog.addDependency("testing/mockclassfactory.js", ["goog.testing.MockClassFactory", "goog.testing.MockClassRecord"], ["goog.array", "goog.object", "goog.testing.LooseMock", "goog.testing.StrictMock", "goog.testing.TestCase", "goog.testing.mockmatchers"], false);
goog.addDependency("testing/mockclassfactory_test.js", ["fake.BaseClass", "fake.ChildClass", "goog.testing.MockClassFactoryTest"], ["goog.testing", "goog.testing.MockClassFactory", "goog.testing.jsunit"], false);
goog.addDependency("testing/mockclock.js", ["goog.testing.MockClock"], ["goog.Disposable", "goog.async.run", "goog.testing.PropertyReplacer", "goog.testing.events", "goog.testing.events.Event", "goog.testing.watchers"], false);
goog.addDependency("testing/mockclock_test.js", ["goog.testing.MockClockTest"], ["goog.Promise", "goog.Timer", "goog.events", "goog.functions", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordFunction"], false);
goog.addDependency("testing/mockcontrol.js", ["goog.testing.MockControl"], ["goog.array", "goog.testing", "goog.testing.LooseMock", "goog.testing.StrictMock"], false);
goog.addDependency("testing/mockcontrol_test.js", ["goog.testing.MockControlTest"], ["goog.testing.Mock", "goog.testing.MockControl", "goog.testing.jsunit"], false);
goog.addDependency("testing/mockinterface.js", ["goog.testing.MockInterface"], [], false);
goog.addDependency("testing/mockmatchers.js", ["goog.testing.mockmatchers", "goog.testing.mockmatchers.ArgumentMatcher", "goog.testing.mockmatchers.IgnoreArgument", "goog.testing.mockmatchers.InstanceOf", "goog.testing.mockmatchers.ObjectEquals", "goog.testing.mockmatchers.RegexpMatch", "goog.testing.mockmatchers.SaveArgument", "goog.testing.mockmatchers.TypeOf"], ["goog.array", "goog.dom", "goog.testing.asserts"], false);
goog.addDependency("testing/mockmatchers_test.js", ["goog.testing.mockmatchersTest"], ["goog.dom", "goog.dom.TagName", "goog.testing.jsunit", "goog.testing.mockmatchers", "goog.testing.mockmatchers.ArgumentMatcher"], false);
goog.addDependency("testing/mockrandom.js", ["goog.testing.MockRandom"], ["goog.Disposable"], false);
goog.addDependency("testing/mockrandom_test.js", ["goog.testing.MockRandomTest"], ["goog.testing.MockRandom", "goog.testing.jsunit"], false);
goog.addDependency("testing/mockrange.js", ["goog.testing.MockRange"], ["goog.dom.AbstractRange", "goog.testing.LooseMock"], false);
goog.addDependency("testing/mockrange_test.js", ["goog.testing.MockRangeTest"], ["goog.testing.MockRange", "goog.testing.jsunit"], false);
goog.addDependency("testing/mockstorage.js", ["goog.testing.MockStorage"], ["goog.structs.Map"], false);
goog.addDependency("testing/mockstorage_test.js", ["goog.testing.MockStorageTest"], ["goog.testing.MockStorage", "goog.testing.jsunit"], false);
goog.addDependency("testing/mockuseragent.js", ["goog.testing.MockUserAgent"], ["goog.Disposable", "goog.labs.userAgent.util", "goog.testing.PropertyReplacer", "goog.userAgent"], false);
goog.addDependency("testing/mockuseragent_test.js", ["goog.testing.MockUserAgentTest"], ["goog.dispose", "goog.testing.MockUserAgent", "goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("testing/multitestrunner.js", ["goog.testing.MultiTestRunner", "goog.testing.MultiTestRunner.TestFrame"], ["goog.Timer", "goog.array", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events.EventHandler", "goog.functions", "goog.string", "goog.ui.Component", "goog.ui.ServerChart", "goog.ui.TableSorter"], false);
goog.addDependency("testing/net/xhrio.js", ["goog.testing.net.XhrIo"], ["goog.array", "goog.dom.xml", "goog.events", "goog.events.EventTarget", "goog.json", "goog.net.ErrorCode", "goog.net.EventType", "goog.net.HttpStatus", "goog.net.XhrIo", "goog.net.XmlHttp", "goog.object", "goog.structs.Map"], false);
goog.addDependency("testing/net/xhrio_test.js", ["goog.testing.net.XhrIoTest"], ["goog.dom.xml", "goog.events", "goog.events.Event", "goog.net.ErrorCode", "goog.net.EventType", "goog.net.XmlHttp", "goog.object", "goog.testing.MockControl", "goog.testing.asserts", "goog.testing.jsunit", "goog.testing.mockmatchers.InstanceOf", "goog.testing.net.XhrIo"], false);
goog.addDependency("testing/net/xhriopool.js", ["goog.testing.net.XhrIoPool"], ["goog.net.XhrIoPool", "goog.testing.net.XhrIo"], false);
goog.addDependency("testing/objectpropertystring.js", ["goog.testing.ObjectPropertyString"], [], false);
goog.addDependency("testing/performancetable.js", ["goog.testing.PerformanceTable"], ["goog.dom", "goog.dom.TagName", "goog.testing.PerformanceTimer"], false);
goog.addDependency("testing/performancetimer.js", ["goog.testing.PerformanceTimer", "goog.testing.PerformanceTimer.Task"], ["goog.array", "goog.async.Deferred", "goog.math"], false);
goog.addDependency("testing/performancetimer_test.js", ["goog.testing.PerformanceTimerTest"], ["goog.async.Deferred", "goog.dom", "goog.math", "goog.testing.MockClock", "goog.testing.PerformanceTimer", "goog.testing.jsunit"], false);
goog.addDependency("testing/propertyreplacer.js", ["goog.testing.PropertyReplacer"], ["goog.testing.ObjectPropertyString", "goog.userAgent"], false);
goog.addDependency("testing/propertyreplacer_test.js", ["goog.testing.PropertyReplacerTest"], ["goog.dom.TagName", "goog.testing.PropertyReplacer", "goog.testing.asserts", "goog.testing.jsunit"], false);
goog.addDependency("testing/proto2/proto2.js", ["goog.testing.proto2"], ["goog.proto2.Message", "goog.proto2.ObjectSerializer", "goog.testing.asserts"], false);
goog.addDependency("testing/proto2/proto2_test.js", ["goog.testing.proto2Test"], ["goog.testing.jsunit", "goog.testing.proto2", "proto2.TestAllTypes"], false);
goog.addDependency("testing/pseudorandom.js", ["goog.testing.PseudoRandom"], ["goog.Disposable"], false);
goog.addDependency("testing/pseudorandom_test.js", ["goog.testing.PseudoRandomTest"], ["goog.testing.PseudoRandom", "goog.testing.jsunit"], false);
goog.addDependency("testing/recordfunction.js", ["goog.testing.FunctionCall", "goog.testing.recordConstructor", "goog.testing.recordFunction"], ["goog.testing.asserts"], false);
goog.addDependency("testing/recordfunction_test.js", ["goog.testing.recordFunctionTest"], ["goog.functions", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.recordConstructor", "goog.testing.recordFunction"], false);
goog.addDependency("testing/shardingtestcase.js", ["goog.testing.ShardingTestCase"], ["goog.asserts", "goog.testing.TestCase"], false);
goog.addDependency("testing/shardingtestcase_test.js", ["goog.testing.ShardingTestCaseTest"], ["goog.testing.ShardingTestCase", "goog.testing.TestCase", "goog.testing.asserts", "goog.testing.jsunit"], false);
goog.addDependency("testing/singleton.js", ["goog.testing.singleton"], [], false);
goog.addDependency("testing/singleton_test.js", ["goog.testing.singletonTest"], ["goog.testing.asserts", "goog.testing.jsunit", "goog.testing.singleton"], false);
goog.addDependency("testing/stacktrace.js", ["goog.testing.stacktrace", "goog.testing.stacktrace.Frame"], [], false);
goog.addDependency("testing/stacktrace_test.js", ["goog.testing.stacktraceTest"], ["goog.functions", "goog.string", "goog.testing.ExpectedFailures", "goog.testing.PropertyReplacer", "goog.testing.StrictMock", "goog.testing.asserts", "goog.testing.jsunit", "goog.testing.stacktrace", "goog.testing.stacktrace.Frame", "goog.userAgent"], false);
goog.addDependency("testing/storage/fakemechanism.js", ["goog.testing.storage.FakeMechanism"], ["goog.storage.mechanism.IterableMechanism", "goog.structs.Map"], false);
goog.addDependency("testing/strictmock.js", ["goog.testing.StrictMock"], ["goog.array", "goog.testing.Mock"], false);
goog.addDependency("testing/strictmock_test.js", ["goog.testing.StrictMockTest"], ["goog.testing.StrictMock", "goog.testing.jsunit"], false);
goog.addDependency("testing/style/layoutasserts.js", ["goog.testing.style.layoutasserts"], ["goog.style", "goog.testing.asserts", "goog.testing.style"], false);
goog.addDependency("testing/style/layoutasserts_test.js", ["goog.testing.style.layoutassertsTest"], ["goog.dom", "goog.dom.TagName", "goog.style", "goog.testing.jsunit", "goog.testing.style.layoutasserts"], false);
goog.addDependency("testing/style/style.js", ["goog.testing.style"], ["goog.dom", "goog.math.Rect", "goog.style"], false);
goog.addDependency("testing/style/style_test.js", ["goog.testing.styleTest"], ["goog.dom", "goog.dom.TagName", "goog.style", "goog.testing.jsunit", "goog.testing.style"], false);
goog.addDependency("testing/testcase.js", ["goog.testing.TestCase", "goog.testing.TestCase.Error", "goog.testing.TestCase.Order", "goog.testing.TestCase.Result", "goog.testing.TestCase.Test"], ["goog.Promise", "goog.Thenable", "goog.dom.TagName", "goog.object", "goog.testing.asserts", "goog.testing.stacktrace"], false);
goog.addDependency("testing/testcase_test.js", ["goog.testing.TestCaseTest"], ["goog.Promise", "goog.testing.MockRandom", "goog.testing.TestCase", "goog.testing.jsunit"], false);
goog.addDependency("testing/testqueue.js", ["goog.testing.TestQueue"], [], false);
goog.addDependency("testing/testrunner.js", ["goog.testing.TestRunner"], ["goog.dom.TagName", "goog.testing.TestCase"], false);
goog.addDependency("testing/testsuite.js", ["goog.testing.testSuite"], ["goog.testing.TestCase"], false);
goog.addDependency("testing/ui/rendererasserts.js", ["goog.testing.ui.rendererasserts"], ["goog.testing.asserts", "goog.ui.ControlRenderer"], false);
goog.addDependency("testing/ui/rendererasserts_test.js", ["goog.testing.ui.rendererassertsTest"], ["goog.testing.asserts", "goog.testing.jsunit", "goog.testing.ui.rendererasserts", "goog.ui.ControlRenderer"], false);
goog.addDependency("testing/ui/rendererharness.js", ["goog.testing.ui.RendererHarness"], ["goog.Disposable", "goog.dom.NodeType", "goog.testing.asserts", "goog.testing.dom"], false);
goog.addDependency("testing/ui/style.js", ["goog.testing.ui.style"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.classlist", "goog.testing.asserts"], false);
goog.addDependency("testing/ui/style_test.js", ["goog.testing.ui.styleTest"], ["goog.dom", "goog.testing.jsunit", "goog.testing.ui.style"], false);
goog.addDependency("testing/watchers.js", ["goog.testing.watchers"], [], false);
goog.addDependency("timer/timer.js", ["goog.Timer"], ["goog.Promise", "goog.events.EventTarget"], false);
goog.addDependency("timer/timer_test.js", ["goog.TimerTest"], ["goog.Promise", "goog.Timer", "goog.events", "goog.testing.MockClock", "goog.testing.jsunit"], false);
goog.addDependency("tweak/entries.js", ["goog.tweak.BaseEntry", "goog.tweak.BasePrimitiveSetting", "goog.tweak.BaseSetting", "goog.tweak.BooleanGroup", "goog.tweak.BooleanInGroupSetting", "goog.tweak.BooleanSetting", "goog.tweak.ButtonAction", "goog.tweak.NumericSetting", "goog.tweak.StringSetting"], ["goog.array", "goog.asserts", "goog.log", "goog.object"], false);
goog.addDependency("tweak/entries_test.js", ["goog.tweak.BaseEntryTest"], ["goog.testing.MockControl", "goog.testing.jsunit", "goog.tweak.testhelpers"], false);
goog.addDependency("tweak/registry.js", ["goog.tweak.Registry"], ["goog.array", "goog.asserts", "goog.log", "goog.string", "goog.tweak.BasePrimitiveSetting", "goog.tweak.BaseSetting", "goog.tweak.BooleanSetting", "goog.tweak.NumericSetting", "goog.tweak.StringSetting", "goog.uri.utils"], false);
goog.addDependency("tweak/registry_test.js", ["goog.tweak.RegistryTest"], ["goog.asserts.AssertionError", "goog.testing.jsunit", "goog.tweak", "goog.tweak.testhelpers"], false);
goog.addDependency("tweak/testhelpers.js", ["goog.tweak.testhelpers"], ["goog.tweak", "goog.tweak.BooleanGroup", "goog.tweak.BooleanInGroupSetting", "goog.tweak.BooleanSetting", "goog.tweak.ButtonAction", "goog.tweak.NumericSetting", "goog.tweak.Registry", "goog.tweak.StringSetting"], false);
goog.addDependency("tweak/tweak.js", ["goog.tweak", "goog.tweak.ConfigParams"], ["goog.asserts", "goog.tweak.BaseSetting", "goog.tweak.BooleanGroup", "goog.tweak.BooleanInGroupSetting", "goog.tweak.BooleanSetting", "goog.tweak.ButtonAction", "goog.tweak.NumericSetting", "goog.tweak.Registry", "goog.tweak.StringSetting"], false);
goog.addDependency("tweak/tweakui.js", ["goog.tweak.EntriesPanel", "goog.tweak.TweakUi"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.safe", "goog.html.SafeHtml", "goog.object", "goog.string.Const", "goog.style", "goog.tweak", "goog.tweak.BaseEntry", "goog.tweak.BooleanGroup", "goog.tweak.BooleanInGroupSetting", "goog.tweak.BooleanSetting", "goog.tweak.ButtonAction", "goog.tweak.NumericSetting", "goog.tweak.StringSetting", "goog.ui.Zippy", "goog.userAgent"], false);
goog.addDependency("tweak/tweakui_test.js", ["goog.tweak.TweakUiTest"], ["goog.dom", "goog.dom.TagName", "goog.string", "goog.testing.jsunit", "goog.tweak", "goog.tweak.TweakUi", "goog.tweak.testhelpers"], false);
goog.addDependency("ui/abstractspellchecker.js", ["goog.ui.AbstractSpellChecker", "goog.ui.AbstractSpellChecker.AsyncResult"], ["goog.a11y.aria", "goog.array", "goog.asserts", "goog.dom", "goog.dom.InputType", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.dom.selection", "goog.events", "goog.events.Event", "goog.events.EventType", "goog.math.Coordinate", "goog.spell.SpellCheck", "goog.structs.Set", "goog.style", "goog.ui.Component", "goog.ui.MenuItem", "goog.ui.MenuSeparator", 
"goog.ui.PopupMenu"], false);
goog.addDependency("ui/ac/ac.js", ["goog.ui.ac"], ["goog.ui.ac.ArrayMatcher", "goog.ui.ac.AutoComplete", "goog.ui.ac.InputHandler", "goog.ui.ac.Renderer"], false);
goog.addDependency("ui/ac/ac_test.js", ["goog.ui.acTest"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.NodeType", "goog.dom.classlist", "goog.dom.selection", "goog.events", "goog.events.BrowserEvent", "goog.events.Event", "goog.events.EventType", "goog.events.KeyCodes", "goog.style", "goog.testing.MockClock", "goog.testing.jsunit", "goog.ui.ac", "goog.userAgent"], false);
goog.addDependency("ui/ac/arraymatcher.js", ["goog.ui.ac.ArrayMatcher"], ["goog.string"], false);
goog.addDependency("ui/ac/arraymatcher_test.js", ["goog.ui.ac.ArrayMatcherTest"], ["goog.testing.jsunit", "goog.ui.ac.ArrayMatcher"], false);
goog.addDependency("ui/ac/autocomplete.js", ["goog.ui.ac.AutoComplete", "goog.ui.ac.AutoComplete.EventType"], ["goog.array", "goog.asserts", "goog.events", "goog.events.EventTarget", "goog.object"], false);
goog.addDependency("ui/ac/autocomplete_test.js", ["goog.ui.ac.AutoCompleteTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.events.EventHandler", "goog.events.EventTarget", "goog.string", "goog.testing.MockControl", "goog.testing.events", "goog.testing.jsunit", "goog.testing.mockmatchers", "goog.ui.ac.AutoComplete", "goog.ui.ac.InputHandler", "goog.ui.ac.RenderOptions", "goog.ui.ac.Renderer"], false);
goog.addDependency("ui/ac/cachingmatcher.js", ["goog.ui.ac.CachingMatcher"], ["goog.array", "goog.async.Throttle", "goog.ui.ac.ArrayMatcher", "goog.ui.ac.RenderOptions"], false);
goog.addDependency("ui/ac/cachingmatcher_test.js", ["goog.ui.ac.CachingMatcherTest"], ["goog.testing.MockControl", "goog.testing.jsunit", "goog.testing.mockmatchers", "goog.ui.ac.CachingMatcher"], false);
goog.addDependency("ui/ac/inputhandler.js", ["goog.ui.ac.InputHandler"], ["goog.Disposable", "goog.Timer", "goog.a11y.aria", "goog.dom", "goog.dom.selection", "goog.events.EventHandler", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.string", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("ui/ac/inputhandler_test.js", ["goog.ui.ac.InputHandlerTest"], ["goog.dom.selection", "goog.events.BrowserEvent", "goog.events.Event", "goog.events.EventTarget", "goog.events.KeyCodes", "goog.functions", "goog.object", "goog.testing.MockClock", "goog.testing.jsunit", "goog.ui.ac.InputHandler", "goog.userAgent"], false);
goog.addDependency("ui/ac/remote.js", ["goog.ui.ac.Remote"], ["goog.ui.ac.AutoComplete", "goog.ui.ac.InputHandler", "goog.ui.ac.RemoteArrayMatcher", "goog.ui.ac.Renderer"], false);
goog.addDependency("ui/ac/remotearraymatcher.js", ["goog.ui.ac.RemoteArrayMatcher"], ["goog.Disposable", "goog.Uri", "goog.events", "goog.json", "goog.net.EventType", "goog.net.XhrIo"], false);
goog.addDependency("ui/ac/remotearraymatcher_test.js", ["goog.ui.ac.RemoteArrayMatcherTest"], ["goog.json", "goog.net.XhrIo", "goog.testing.MockControl", "goog.testing.jsunit", "goog.testing.net.XhrIo", "goog.ui.ac.RemoteArrayMatcher"], false);
goog.addDependency("ui/ac/renderer.js", ["goog.ui.ac.Renderer", "goog.ui.ac.Renderer.CustomRenderer"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.array", "goog.asserts", "goog.dispose", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.EventTarget", "goog.events.EventType", "goog.fx.dom.FadeInAndShow", "goog.fx.dom.FadeOutAndHide", "goog.positioning", "goog.positioning.Corner", "goog.positioning.Overflow", "goog.string", 
"goog.style", "goog.ui.IdGenerator", "goog.ui.ac.AutoComplete"], false);
goog.addDependency("ui/ac/renderer_test.js", ["goog.ui.ac.RendererTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.fx.dom.FadeInAndShow", "goog.fx.dom.FadeOutAndHide", "goog.string", "goog.style", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.ui.ac.AutoComplete", "goog.ui.ac.Renderer"], false);
goog.addDependency("ui/ac/renderoptions.js", ["goog.ui.ac.RenderOptions"], [], false);
goog.addDependency("ui/ac/richinputhandler.js", ["goog.ui.ac.RichInputHandler"], ["goog.ui.ac.InputHandler"], false);
goog.addDependency("ui/ac/richremote.js", ["goog.ui.ac.RichRemote"], ["goog.ui.ac.AutoComplete", "goog.ui.ac.Remote", "goog.ui.ac.Renderer", "goog.ui.ac.RichInputHandler", "goog.ui.ac.RichRemoteArrayMatcher"], false);
goog.addDependency("ui/ac/richremotearraymatcher.js", ["goog.ui.ac.RichRemoteArrayMatcher"], ["goog.dom.safe", "goog.html.legacyconversions", "goog.json", "goog.ui.ac.RemoteArrayMatcher"], false);
goog.addDependency("ui/activitymonitor.js", ["goog.ui.ActivityMonitor"], ["goog.array", "goog.asserts", "goog.dom", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType"], false);
goog.addDependency("ui/activitymonitor_test.js", ["goog.ui.ActivityMonitorTest"], ["goog.dom", "goog.events", "goog.events.Event", "goog.events.EventType", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.events", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.ui.ActivityMonitor"], false);
goog.addDependency("ui/advancedtooltip.js", ["goog.ui.AdvancedTooltip"], ["goog.events", "goog.events.EventType", "goog.math.Box", "goog.math.Coordinate", "goog.style", "goog.ui.Tooltip", "goog.userAgent"], false);
goog.addDependency("ui/advancedtooltip_test.js", ["goog.ui.AdvancedTooltipTest"], ["goog.dom", "goog.dom.TagName", "goog.events.Event", "goog.events.EventType", "goog.math.Box", "goog.math.Coordinate", "goog.style", "goog.testing.MockClock", "goog.testing.events", "goog.testing.jsunit", "goog.ui.AdvancedTooltip", "goog.ui.Tooltip", "goog.userAgent"], false);
goog.addDependency("ui/animatedzippy.js", ["goog.ui.AnimatedZippy"], ["goog.dom", "goog.dom.TagName", "goog.events", "goog.fx.Animation", "goog.fx.Transition", "goog.fx.easing", "goog.ui.Zippy", "goog.ui.ZippyEvent"], false);
goog.addDependency("ui/animatedzippy_test.js", ["goog.ui.AnimatedZippyTest"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.asserts", "goog.dom", "goog.events", "goog.functions", "goog.fx.Animation", "goog.fx.Transition", "goog.testing.PropertyReplacer", "goog.testing.asserts", "goog.testing.jsunit", "goog.ui.AnimatedZippy", "goog.ui.Zippy"], false);
goog.addDependency("ui/attachablemenu.js", ["goog.ui.AttachableMenu"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.array", "goog.asserts", "goog.dom", "goog.dom.classlist", "goog.events.Event", "goog.events.KeyCodes", "goog.string", "goog.style", "goog.ui.ItemEvent", "goog.ui.MenuBase", "goog.ui.PopupBase", "goog.userAgent"], false);
goog.addDependency("ui/bidiinput.js", ["goog.ui.BidiInput"], ["goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.events", "goog.events.InputHandler", "goog.i18n.bidi", "goog.ui.Component"], false);
goog.addDependency("ui/bidiinput_test.js", ["goog.ui.BidiInputTest"], ["goog.dom", "goog.testing.jsunit", "goog.ui.BidiInput"], false);
goog.addDependency("ui/bubble.js", ["goog.ui.Bubble"], ["goog.Timer", "goog.dom.safe", "goog.events", "goog.events.EventType", "goog.html.SafeHtml", "goog.html.legacyconversions", "goog.math.Box", "goog.positioning", "goog.positioning.AbsolutePosition", "goog.positioning.AnchoredPosition", "goog.positioning.Corner", "goog.positioning.CornerBit", "goog.string.Const", "goog.style", "goog.ui.Component", "goog.ui.Popup"], false);
goog.addDependency("ui/button.js", ["goog.ui.Button", "goog.ui.Button.Side"], ["goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.ui.ButtonRenderer", "goog.ui.ButtonSide", "goog.ui.Component", "goog.ui.Control", "goog.ui.NativeButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/button_test.js", ["goog.ui.ButtonTest"], ["goog.dom", "goog.dom.classlist", "goog.events", "goog.events.Event", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Button", "goog.ui.ButtonRenderer", "goog.ui.ButtonSide", "goog.ui.Component", "goog.ui.NativeButtonRenderer"], false);
goog.addDependency("ui/buttonrenderer.js", ["goog.ui.ButtonRenderer"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.asserts", "goog.ui.ButtonSide", "goog.ui.Component", "goog.ui.ControlRenderer"], false);
goog.addDependency("ui/buttonrenderer_test.js", ["goog.ui.ButtonRendererTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.testing.ExpectedFailures", "goog.testing.jsunit", "goog.testing.ui.rendererasserts", "goog.ui.Button", "goog.ui.ButtonRenderer", "goog.ui.ButtonSide", "goog.ui.Component"], false);
goog.addDependency("ui/buttonside.js", ["goog.ui.ButtonSide"], [], false);
goog.addDependency("ui/charcounter.js", ["goog.ui.CharCounter", "goog.ui.CharCounter.Display"], ["goog.dom", "goog.events", "goog.events.EventTarget", "goog.events.InputHandler"], false);
goog.addDependency("ui/charcounter_test.js", ["goog.ui.CharCounterTest"], ["goog.dom", "goog.testing.asserts", "goog.testing.jsunit", "goog.ui.CharCounter", "goog.userAgent"], false);
goog.addDependency("ui/charpicker.js", ["goog.ui.CharPicker"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.array", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventType", "goog.events.InputHandler", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.i18n.CharListDecompressor", "goog.i18n.uChar", "goog.structs.Set", "goog.style", "goog.ui.Button", "goog.ui.Component", "goog.ui.ContainerScroller", 
"goog.ui.FlatButtonRenderer", "goog.ui.HoverCard", "goog.ui.LabelInput", "goog.ui.Menu", "goog.ui.MenuButton", "goog.ui.MenuItem", "goog.ui.Tooltip"], false);
goog.addDependency("ui/charpicker_test.js", ["goog.ui.CharPickerTest"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.dispose", "goog.dom", "goog.events.Event", "goog.events.EventType", "goog.i18n.CharPickerData", "goog.i18n.uChar.NameFetcher", "goog.testing.MockControl", "goog.testing.events", "goog.testing.jsunit", "goog.testing.mockmatchers", "goog.ui.CharPicker", "goog.ui.FlatButtonRenderer"], false);
goog.addDependency("ui/checkbox.js", ["goog.ui.Checkbox", "goog.ui.Checkbox.State"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.events.EventType", "goog.events.KeyCodes", "goog.string", "goog.ui.CheckboxRenderer", "goog.ui.Component", "goog.ui.Control", "goog.ui.registry"], false);
goog.addDependency("ui/checkbox_test.js", ["goog.ui.CheckboxTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.KeyCodes", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Checkbox", "goog.ui.CheckboxRenderer", "goog.ui.Component", "goog.ui.ControlRenderer", "goog.ui.decorate"], false);
goog.addDependency("ui/checkboxmenuitem.js", ["goog.ui.CheckBoxMenuItem"], ["goog.ui.MenuItem", "goog.ui.registry"], false);
goog.addDependency("ui/checkboxrenderer.js", ["goog.ui.CheckboxRenderer"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.array", "goog.asserts", "goog.dom.TagName", "goog.dom.classlist", "goog.object", "goog.ui.ControlRenderer"], false);
goog.addDependency("ui/colorbutton.js", ["goog.ui.ColorButton"], ["goog.ui.Button", "goog.ui.ColorButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/colorbutton_test.js", ["goog.ui.ColorButtonTest"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.testing.jsunit", "goog.ui.ColorButton", "goog.ui.decorate"], false);
goog.addDependency("ui/colorbuttonrenderer.js", ["goog.ui.ColorButtonRenderer"], ["goog.asserts", "goog.dom.classlist", "goog.functions", "goog.ui.ColorMenuButtonRenderer"], false);
goog.addDependency("ui/colormenubutton.js", ["goog.ui.ColorMenuButton"], ["goog.array", "goog.object", "goog.ui.ColorMenuButtonRenderer", "goog.ui.ColorPalette", "goog.ui.Component", "goog.ui.Menu", "goog.ui.MenuButton", "goog.ui.registry"], false);
goog.addDependency("ui/colormenubuttonrenderer.js", ["goog.ui.ColorMenuButtonRenderer"], ["goog.asserts", "goog.color", "goog.dom.TagName", "goog.dom.classlist", "goog.ui.MenuButtonRenderer", "goog.userAgent"], false);
goog.addDependency("ui/colormenubuttonrenderer_test.js", ["goog.ui.ColorMenuButtonTest"], ["goog.dom", "goog.dom.TagName", "goog.testing.jsunit", "goog.testing.ui.RendererHarness", "goog.testing.ui.rendererasserts", "goog.ui.ColorMenuButton", "goog.ui.ColorMenuButtonRenderer", "goog.userAgent"], false);
goog.addDependency("ui/colorpalette.js", ["goog.ui.ColorPalette"], ["goog.array", "goog.color", "goog.dom.TagName", "goog.style", "goog.ui.Palette", "goog.ui.PaletteRenderer"], false);
goog.addDependency("ui/colorpalette_test.js", ["goog.ui.ColorPaletteTest"], ["goog.color", "goog.dom.TagName", "goog.testing.jsunit", "goog.ui.ColorPalette"], false);
goog.addDependency("ui/colorpicker.js", ["goog.ui.ColorPicker", "goog.ui.ColorPicker.EventType"], ["goog.ui.ColorPalette", "goog.ui.Component"], false);
goog.addDependency("ui/colorsplitbehavior.js", ["goog.ui.ColorSplitBehavior"], ["goog.ui.ColorMenuButton", "goog.ui.SplitBehavior"], false);
goog.addDependency("ui/combobox.js", ["goog.ui.ComboBox", "goog.ui.ComboBoxItem"], ["goog.Timer", "goog.asserts", "goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.dom.classlist", "goog.events.EventType", "goog.events.InputHandler", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.log", "goog.positioning.Corner", "goog.positioning.MenuAnchoredPosition", "goog.string", "goog.style", "goog.ui.Component", "goog.ui.ItemEvent", "goog.ui.LabelInput", "goog.ui.Menu", "goog.ui.MenuItem", 
"goog.ui.MenuSeparator", "goog.ui.registry", "goog.userAgent"], false);
goog.addDependency("ui/combobox_test.js", ["goog.ui.ComboBoxTest"], ["goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events.KeyCodes", "goog.testing.MockClock", "goog.testing.events", "goog.testing.jsunit", "goog.ui.ComboBox", "goog.ui.ComboBoxItem", "goog.ui.Component", "goog.ui.ControlRenderer", "goog.ui.LabelInput", "goog.ui.Menu", "goog.ui.MenuItem"], false);
goog.addDependency("ui/component.js", ["goog.ui.Component", "goog.ui.Component.Error", "goog.ui.Component.EventType", "goog.ui.Component.State"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.events.EventHandler", "goog.events.EventTarget", "goog.object", "goog.style", "goog.ui.IdGenerator"], false);
goog.addDependency("ui/component_test.js", ["goog.ui.ComponentTest"], ["goog.dom", "goog.dom.DomHelper", "goog.dom.NodeType", "goog.dom.TagName", "goog.events.EventTarget", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.ui.Component"], false);
goog.addDependency("ui/container.js", ["goog.ui.Container", "goog.ui.Container.EventType", "goog.ui.Container.Orientation"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.asserts", "goog.dom", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.object", "goog.style", "goog.ui.Component", "goog.ui.ContainerRenderer", "goog.ui.Control"], false);
goog.addDependency("ui/container_test.js", ["goog.ui.ContainerTest"], ["goog.a11y.aria", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.Event", "goog.events.KeyCodes", "goog.events.KeyEvent", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.Container", "goog.ui.Control"], false);
goog.addDependency("ui/containerrenderer.js", ["goog.ui.ContainerRenderer"], ["goog.a11y.aria", "goog.array", "goog.asserts", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.string", "goog.style", "goog.ui.registry", "goog.userAgent"], false);
goog.addDependency("ui/containerrenderer_test.js", ["goog.ui.ContainerRendererTest"], ["goog.dom", "goog.dom.TagName", "goog.style", "goog.testing.ExpectedFailures", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.testing.ui.rendererasserts", "goog.ui.Container", "goog.ui.ContainerRenderer", "goog.userAgent"], false);
goog.addDependency("ui/containerscroller.js", ["goog.ui.ContainerScroller"], ["goog.Disposable", "goog.Timer", "goog.events.EventHandler", "goog.style", "goog.ui.Component", "goog.ui.Container"], false);
goog.addDependency("ui/containerscroller_test.js", ["goog.ui.ContainerScrollerTest"], ["goog.dom", "goog.testing.MockClock", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Container", "goog.ui.ContainerScroller"], false);
goog.addDependency("ui/control.js", ["goog.ui.Control"], ["goog.Disposable", "goog.array", "goog.dom", "goog.events.BrowserEvent", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.string", "goog.ui.Component", "goog.ui.ControlContent", "goog.ui.ControlRenderer", "goog.ui.decorate", "goog.ui.registry", "goog.userAgent"], false);
goog.addDependency("ui/control_test.js", ["goog.ui.ControlTest"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.array", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.BrowserEvent", "goog.events.KeyCodes", "goog.object", "goog.string", "goog.style", "goog.testing.ExpectedFailures", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.Control", "goog.ui.ControlRenderer", "goog.ui.registry", "goog.userAgent"], 
false);
goog.addDependency("ui/controlcontent.js", ["goog.ui.ControlContent"], [], false);
goog.addDependency("ui/controlrenderer.js", ["goog.ui.ControlRenderer"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.array", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.object", "goog.string", "goog.style", "goog.ui.Component", "goog.userAgent"], false);
goog.addDependency("ui/controlrenderer_test.js", ["goog.ui.ControlRendererTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.object", "goog.style", "goog.testing.ExpectedFailures", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.Control", "goog.ui.ControlRenderer", "goog.userAgent"], false);
goog.addDependency("ui/cookieeditor.js", ["goog.ui.CookieEditor"], ["goog.asserts", "goog.dom", "goog.dom.TagName", "goog.events.EventType", "goog.net.cookies", "goog.string", "goog.style", "goog.ui.Component"], false);
goog.addDependency("ui/cookieeditor_test.js", ["goog.ui.CookieEditorTest"], ["goog.dom", "goog.events.Event", "goog.events.EventType", "goog.net.cookies", "goog.testing.events", "goog.testing.jsunit", "goog.ui.CookieEditor"], false);
goog.addDependency("ui/css3buttonrenderer.js", ["goog.ui.Css3ButtonRenderer"], ["goog.asserts", "goog.dom.TagName", "goog.dom.classlist", "goog.ui.Button", "goog.ui.ButtonRenderer", "goog.ui.Component", "goog.ui.INLINE_BLOCK_CLASSNAME", "goog.ui.registry"], false);
goog.addDependency("ui/css3menubuttonrenderer.js", ["goog.ui.Css3MenuButtonRenderer"], ["goog.dom", "goog.dom.TagName", "goog.ui.INLINE_BLOCK_CLASSNAME", "goog.ui.MenuButton", "goog.ui.MenuButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/cssnames.js", ["goog.ui.INLINE_BLOCK_CLASSNAME"], [], false);
goog.addDependency("ui/custombutton.js", ["goog.ui.CustomButton"], ["goog.ui.Button", "goog.ui.CustomButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/custombuttonrenderer.js", ["goog.ui.CustomButtonRenderer"], ["goog.a11y.aria.Role", "goog.asserts", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.string", "goog.ui.ButtonRenderer", "goog.ui.INLINE_BLOCK_CLASSNAME"], false);
goog.addDependency("ui/customcolorpalette.js", ["goog.ui.CustomColorPalette"], ["goog.color", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.ui.ColorPalette", "goog.ui.Component"], false);
goog.addDependency("ui/customcolorpalette_test.js", ["goog.ui.CustomColorPaletteTest"], ["goog.dom.TagName", "goog.dom.classlist", "goog.testing.jsunit", "goog.ui.CustomColorPalette"], false);
goog.addDependency("ui/datepicker.js", ["goog.ui.DatePicker", "goog.ui.DatePicker.Events", "goog.ui.DatePickerEvent"], ["goog.a11y.aria", "goog.asserts", "goog.date.Date", "goog.date.DateRange", "goog.date.Interval", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.events.Event", "goog.events.EventType", "goog.events.KeyHandler", "goog.i18n.DateTimeFormat", "goog.i18n.DateTimePatterns", "goog.i18n.DateTimeSymbols", "goog.style", "goog.ui.Component", "goog.ui.DefaultDatePickerRenderer", 
"goog.ui.IdGenerator"], false);
goog.addDependency("ui/datepicker_test.js", ["goog.ui.DatePickerTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.date.Date", "goog.date.DateRange", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.i18n.DateTimeSymbols", "goog.i18n.DateTimeSymbols_en_US", "goog.i18n.DateTimeSymbols_zh_HK", "goog.style", "goog.testing.jsunit", "goog.ui.DatePicker"], false);
goog.addDependency("ui/datepickerrenderer.js", ["goog.ui.DatePickerRenderer"], [], false);
goog.addDependency("ui/decorate.js", ["goog.ui.decorate"], ["goog.ui.registry"], false);
goog.addDependency("ui/decorate_test.js", ["goog.ui.decorateTest"], ["goog.testing.jsunit", "goog.ui.decorate", "goog.ui.registry"], false);
goog.addDependency("ui/defaultdatepickerrenderer.js", ["goog.ui.DefaultDatePickerRenderer"], ["goog.dom", "goog.dom.TagName", "goog.ui.DatePickerRenderer"], false);
goog.addDependency("ui/dialog.js", ["goog.ui.Dialog", "goog.ui.Dialog.ButtonSet", "goog.ui.Dialog.ButtonSet.DefaultButtons", "goog.ui.Dialog.DefaultButtonCaptions", "goog.ui.Dialog.DefaultButtonKeys", "goog.ui.Dialog.Event", "goog.ui.Dialog.EventType"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.asserts", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.dom.safe", "goog.events", "goog.events.Event", "goog.events.EventType", "goog.events.KeyCodes", 
"goog.fx.Dragger", "goog.html.SafeHtml", "goog.html.legacyconversions", "goog.math.Rect", "goog.string", "goog.structs.Map", "goog.style", "goog.ui.ModalPopup"], false);
goog.addDependency("ui/dialog_test.js", ["goog.ui.DialogTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.EventType", "goog.events.KeyCodes", "goog.fx.css3", "goog.html.SafeHtml", "goog.html.testing", "goog.style", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.events", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.ui.Dialog", "goog.userAgent"], false);
goog.addDependency("ui/dimensionpicker.js", ["goog.ui.DimensionPicker"], ["goog.events.EventType", "goog.events.KeyCodes", "goog.math.Size", "goog.ui.Component", "goog.ui.Control", "goog.ui.DimensionPickerRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/dimensionpicker_test.js", ["goog.ui.DimensionPickerTest"], ["goog.dom", "goog.dom.TagName", "goog.events.KeyCodes", "goog.math.Size", "goog.testing.jsunit", "goog.testing.ui.rendererasserts", "goog.ui.DimensionPicker", "goog.ui.DimensionPickerRenderer"], false);
goog.addDependency("ui/dimensionpickerrenderer.js", ["goog.ui.DimensionPickerRenderer"], ["goog.a11y.aria.Announcer", "goog.a11y.aria.LivePriority", "goog.dom", "goog.dom.TagName", "goog.i18n.bidi", "goog.style", "goog.ui.ControlRenderer", "goog.userAgent"], false);
goog.addDependency("ui/dimensionpickerrenderer_test.js", ["goog.ui.DimensionPickerRendererTest"], ["goog.a11y.aria.LivePriority", "goog.array", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.ui.DimensionPicker", "goog.ui.DimensionPickerRenderer"], false);
goog.addDependency("ui/dragdropdetector.js", ["goog.ui.DragDropDetector", "goog.ui.DragDropDetector.EventType", "goog.ui.DragDropDetector.ImageDropEvent", "goog.ui.DragDropDetector.LinkDropEvent"], ["goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.math.Coordinate", "goog.string", "goog.style", "goog.userAgent"], false);
goog.addDependency("ui/drilldownrow.js", ["goog.ui.DrilldownRow"], ["goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.dom.safe", "goog.html.SafeHtml", "goog.html.legacyconversions", "goog.ui.Component"], false);
goog.addDependency("ui/drilldownrow_test.js", ["goog.ui.DrilldownRowTest"], ["goog.dom", "goog.dom.TagName", "goog.html.SafeHtml", "goog.testing.jsunit", "goog.ui.DrilldownRow"], false);
goog.addDependency("ui/editor/abstractdialog.js", ["goog.ui.editor.AbstractDialog", "goog.ui.editor.AbstractDialog.Builder", "goog.ui.editor.AbstractDialog.EventType"], ["goog.asserts", "goog.dom", "goog.dom.classlist", "goog.events.EventTarget", "goog.string", "goog.ui.Dialog", "goog.ui.PopupBase"], false);
goog.addDependency("ui/editor/abstractdialog_test.js", ["goog.ui.editor.AbstractDialogTest"], ["goog.dom", "goog.dom.DomHelper", "goog.dom.TagName", "goog.dom.classlist", "goog.events.Event", "goog.events.EventHandler", "goog.events.KeyCodes", "goog.testing.MockControl", "goog.testing.events", "goog.testing.jsunit", "goog.testing.mockmatchers.ArgumentMatcher", "goog.ui.editor.AbstractDialog", "goog.userAgent"], false);
goog.addDependency("ui/editor/bubble.js", ["goog.ui.editor.Bubble"], ["goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.ViewportSizeMonitor", "goog.dom.classlist", "goog.editor.style", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.functions", "goog.log", "goog.math.Box", "goog.object", "goog.positioning", "goog.positioning.Corner", "goog.positioning.Overflow", "goog.positioning.OverflowStatus", "goog.string", "goog.style", "goog.ui.Component", "goog.ui.PopupBase", 
"goog.userAgent"], false);
goog.addDependency("ui/editor/bubble_test.js", ["goog.ui.editor.BubbleTest"], ["goog.dom", "goog.dom.TagName", "goog.events", "goog.events.EventType", "goog.positioning.Corner", "goog.positioning.OverflowStatus", "goog.string", "goog.style", "goog.testing.editor.TestHelper", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.editor.Bubble"], false);
goog.addDependency("ui/editor/defaulttoolbar.js", ["goog.ui.editor.ButtonDescriptor", "goog.ui.editor.DefaultToolbar"], ["goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.editor.Command", "goog.style", "goog.ui.editor.ToolbarFactory", "goog.ui.editor.messages", "goog.userAgent"], false);
goog.addDependency("ui/editor/linkdialog.js", ["goog.ui.editor.LinkDialog", "goog.ui.editor.LinkDialog.BeforeTestLinkEvent", "goog.ui.editor.LinkDialog.EventType", "goog.ui.editor.LinkDialog.OkEvent"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.dom.safe", "goog.editor.BrowserFeature", "goog.editor.Link", "goog.editor.focus", "goog.editor.node", "goog.events.Event", "goog.events.EventHandler", "goog.events.InputHandler", "goog.html.SafeHtml", 
"goog.string", "goog.string.Unicode", "goog.style", "goog.ui.Button", "goog.ui.Component", "goog.ui.LinkButtonRenderer", "goog.ui.editor.AbstractDialog", "goog.ui.editor.TabPane", "goog.ui.editor.messages", "goog.userAgent", "goog.window"], false);
goog.addDependency("ui/editor/linkdialog_test.js", ["goog.ui.editor.LinkDialogTest"], ["goog.dom", "goog.dom.DomHelper", "goog.dom.TagName", "goog.editor.BrowserFeature", "goog.editor.Link", "goog.events", "goog.events.EventHandler", "goog.events.EventType", "goog.events.KeyCodes", "goog.style", "goog.testing.MockControl", "goog.testing.PropertyReplacer", "goog.testing.dom", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.testing.mockmatchers", "goog.testing.mockmatchers.ArgumentMatcher", 
"goog.ui.editor.AbstractDialog", "goog.ui.editor.LinkDialog", "goog.ui.editor.messages", "goog.userAgent"], false);
goog.addDependency("ui/editor/messages.js", ["goog.ui.editor.messages"], ["goog.html.uncheckedconversions", "goog.string.Const"], false);
goog.addDependency("ui/editor/tabpane.js", ["goog.ui.editor.TabPane"], ["goog.asserts", "goog.dom.InputType", "goog.dom.TagName", "goog.dom.classlist", "goog.events.EventHandler", "goog.events.EventType", "goog.style", "goog.ui.Component", "goog.ui.Control", "goog.ui.Tab", "goog.ui.TabBar"], false);
goog.addDependency("ui/editor/toolbarcontroller.js", ["goog.ui.editor.ToolbarController"], ["goog.editor.Field", "goog.events.EventHandler", "goog.events.EventTarget", "goog.ui.Component"], false);
goog.addDependency("ui/editor/toolbarfactory.js", ["goog.ui.editor.ToolbarFactory"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.string", "goog.string.Unicode", "goog.style", "goog.ui.Component", "goog.ui.Container", "goog.ui.Option", "goog.ui.Toolbar", "goog.ui.ToolbarButton", "goog.ui.ToolbarColorMenuButton", "goog.ui.ToolbarMenuButton", "goog.ui.ToolbarRenderer", "goog.ui.ToolbarSelect", "goog.userAgent"], false);
goog.addDependency("ui/editor/toolbarfactory_test.js", ["goog.ui.editor.ToolbarFactoryTest"], ["goog.dom", "goog.testing.ExpectedFailures", "goog.testing.editor.TestHelper", "goog.testing.jsunit", "goog.ui.editor.ToolbarFactory", "goog.userAgent"], false);
goog.addDependency("ui/emoji/emoji.js", ["goog.ui.emoji.Emoji"], [], false);
goog.addDependency("ui/emoji/emojipalette.js", ["goog.ui.emoji.EmojiPalette"], ["goog.events.EventType", "goog.net.ImageLoader", "goog.ui.Palette", "goog.ui.emoji.Emoji", "goog.ui.emoji.EmojiPaletteRenderer"], false);
goog.addDependency("ui/emoji/emojipaletterenderer.js", ["goog.ui.emoji.EmojiPaletteRenderer"], ["goog.a11y.aria", "goog.asserts", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.style", "goog.ui.PaletteRenderer", "goog.ui.emoji.Emoji"], false);
goog.addDependency("ui/emoji/emojipicker.js", ["goog.ui.emoji.EmojiPicker"], ["goog.dom.TagName", "goog.style", "goog.ui.Component", "goog.ui.TabPane", "goog.ui.emoji.Emoji", "goog.ui.emoji.EmojiPalette", "goog.ui.emoji.EmojiPaletteRenderer", "goog.ui.emoji.ProgressiveEmojiPaletteRenderer"], false);
goog.addDependency("ui/emoji/emojipicker_test.js", ["goog.ui.emoji.EmojiPickerTest"], ["goog.dom.TagName", "goog.dom.classlist", "goog.events.EventHandler", "goog.style", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.emoji.Emoji", "goog.ui.emoji.EmojiPicker", "goog.ui.emoji.SpriteInfo"], false);
goog.addDependency("ui/emoji/fast_nonprogressive_emojipicker_test.js", ["goog.ui.emoji.FastNonProgressiveEmojiPickerTest"], ["goog.dom.classlist", "goog.events", "goog.events.EventType", "goog.net.EventType", "goog.style", "goog.testing.AsyncTestCase", "goog.testing.jsunit", "goog.ui.emoji.Emoji", "goog.ui.emoji.EmojiPicker", "goog.ui.emoji.SpriteInfo", "goog.userAgent"], false);
goog.addDependency("ui/emoji/fast_progressive_emojipicker_test.js", ["goog.ui.emoji.FastProgressiveEmojiPickerTest"], ["goog.dom.classlist", "goog.events", "goog.events.EventType", "goog.net.EventType", "goog.style", "goog.testing.AsyncTestCase", "goog.testing.jsunit", "goog.ui.emoji.Emoji", "goog.ui.emoji.EmojiPicker", "goog.ui.emoji.SpriteInfo"], false);
goog.addDependency("ui/emoji/popupemojipicker.js", ["goog.ui.emoji.PopupEmojiPicker"], ["goog.events.EventType", "goog.positioning.AnchoredPosition", "goog.positioning.Corner", "goog.ui.Component", "goog.ui.Popup", "goog.ui.emoji.EmojiPicker"], false);
goog.addDependency("ui/emoji/popupemojipicker_test.js", ["goog.ui.emoji.PopupEmojiPickerTest"], ["goog.dom", "goog.testing.jsunit", "goog.ui.emoji.PopupEmojiPicker"], false);
goog.addDependency("ui/emoji/progressiveemojipaletterenderer.js", ["goog.ui.emoji.ProgressiveEmojiPaletteRenderer"], ["goog.dom.TagName", "goog.style", "goog.ui.emoji.EmojiPaletteRenderer"], false);
goog.addDependency("ui/emoji/spriteinfo.js", ["goog.ui.emoji.SpriteInfo"], [], false);
goog.addDependency("ui/emoji/spriteinfo_test.js", ["goog.ui.emoji.SpriteInfoTest"], ["goog.testing.jsunit", "goog.ui.emoji.SpriteInfo"], false);
goog.addDependency("ui/filteredmenu.js", ["goog.ui.FilteredMenu"], ["goog.a11y.aria", "goog.a11y.aria.AutoCompleteValues", "goog.a11y.aria.State", "goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.events", "goog.events.EventType", "goog.events.InputHandler", "goog.events.KeyCodes", "goog.object", "goog.string", "goog.style", "goog.ui.Component", "goog.ui.FilterObservingMenuItem", "goog.ui.Menu", "goog.ui.MenuItem", "goog.userAgent"], false);
goog.addDependency("ui/filteredmenu_test.js", ["goog.ui.FilteredMenuTest"], ["goog.a11y.aria", "goog.a11y.aria.AutoCompleteValues", "goog.a11y.aria.State", "goog.dom", "goog.dom.TagName", "goog.events", "goog.events.EventType", "goog.events.KeyCodes", "goog.math.Rect", "goog.style", "goog.testing.events", "goog.testing.jsunit", "goog.ui.FilteredMenu", "goog.ui.MenuItem"], false);
goog.addDependency("ui/filterobservingmenuitem.js", ["goog.ui.FilterObservingMenuItem"], ["goog.ui.FilterObservingMenuItemRenderer", "goog.ui.MenuItem", "goog.ui.registry"], false);
goog.addDependency("ui/filterobservingmenuitemrenderer.js", ["goog.ui.FilterObservingMenuItemRenderer"], ["goog.ui.MenuItemRenderer"], false);
goog.addDependency("ui/flatbuttonrenderer.js", ["goog.ui.FlatButtonRenderer"], ["goog.a11y.aria.Role", "goog.asserts", "goog.dom.TagName", "goog.dom.classlist", "goog.ui.Button", "goog.ui.ButtonRenderer", "goog.ui.INLINE_BLOCK_CLASSNAME", "goog.ui.registry"], false);
goog.addDependency("ui/flatmenubuttonrenderer.js", ["goog.ui.FlatMenuButtonRenderer"], ["goog.dom", "goog.dom.TagName", "goog.style", "goog.ui.FlatButtonRenderer", "goog.ui.INLINE_BLOCK_CLASSNAME", "goog.ui.Menu", "goog.ui.MenuButton", "goog.ui.MenuRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/formpost.js", ["goog.ui.FormPost"], ["goog.array", "goog.dom.InputType", "goog.dom.TagName", "goog.dom.safe", "goog.html.SafeHtml", "goog.ui.Component"], false);
goog.addDependency("ui/formpost_test.js", ["goog.ui.FormPostTest"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.object", "goog.testing.jsunit", "goog.ui.FormPost", "goog.userAgent.product", "goog.userAgent.product.isVersion"], false);
goog.addDependency("ui/gauge.js", ["goog.ui.Gauge", "goog.ui.GaugeColoredRange"], ["goog.a11y.aria", "goog.asserts", "goog.dom.TagName", "goog.events", "goog.fx.Animation", "goog.fx.Transition", "goog.fx.easing", "goog.graphics", "goog.graphics.Font", "goog.graphics.Path", "goog.graphics.SolidFill", "goog.math", "goog.ui.Component", "goog.ui.GaugeTheme"], false);
goog.addDependency("ui/gaugetheme.js", ["goog.ui.GaugeTheme"], ["goog.graphics.LinearGradient", "goog.graphics.SolidFill", "goog.graphics.Stroke"], false);
goog.addDependency("ui/hovercard.js", ["goog.ui.HoverCard", "goog.ui.HoverCard.EventType", "goog.ui.HoverCard.TriggerEvent"], ["goog.array", "goog.dom", "goog.events", "goog.events.Event", "goog.events.EventType", "goog.ui.AdvancedTooltip", "goog.ui.PopupBase", "goog.ui.Tooltip"], false);
goog.addDependency("ui/hovercard_test.js", ["goog.ui.HoverCardTest"], ["goog.dom", "goog.events", "goog.math.Coordinate", "goog.style", "goog.testing.MockClock", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.ui.HoverCard"], false);
goog.addDependency("ui/hsvapalette.js", ["goog.ui.HsvaPalette"], ["goog.array", "goog.color.alpha", "goog.dom.TagName", "goog.events", "goog.events.EventType", "goog.style", "goog.ui.Component", "goog.ui.HsvPalette"], false);
goog.addDependency("ui/hsvapalette_test.js", ["goog.ui.HsvaPaletteTest"], ["goog.color.alpha", "goog.dom.TagName", "goog.dom.classlist", "goog.events.Event", "goog.math.Coordinate", "goog.style", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.ui.HsvaPalette", "goog.userAgent"], false);
goog.addDependency("ui/hsvpalette.js", ["goog.ui.HsvPalette"], ["goog.color", "goog.dom.InputType", "goog.dom.TagName", "goog.events", "goog.events.EventType", "goog.events.InputHandler", "goog.style", "goog.style.bidi", "goog.ui.Component", "goog.userAgent"], false);
goog.addDependency("ui/hsvpalette_test.js", ["goog.ui.HsvPaletteTest"], ["goog.color", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.Event", "goog.math.Coordinate", "goog.style", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.HsvPalette", "goog.userAgent"], false);
goog.addDependency("ui/idgenerator.js", ["goog.ui.IdGenerator"], [], false);
goog.addDependency("ui/idletimer.js", ["goog.ui.IdleTimer"], ["goog.Timer", "goog.events", "goog.events.EventTarget", "goog.structs.Set", "goog.ui.ActivityMonitor"], false);
goog.addDependency("ui/idletimer_test.js", ["goog.ui.IdleTimerTest"], ["goog.events", "goog.testing.MockClock", "goog.testing.jsunit", "goog.ui.IdleTimer", "goog.ui.MockActivityMonitor"], false);
goog.addDependency("ui/iframemask.js", ["goog.ui.IframeMask"], ["goog.Disposable", "goog.Timer", "goog.dom", "goog.dom.iframe", "goog.events.EventHandler", "goog.style"], false);
goog.addDependency("ui/iframemask_test.js", ["goog.ui.IframeMaskTest"], ["goog.dom", "goog.dom.TagName", "goog.dom.iframe", "goog.structs.Pool", "goog.style", "goog.testing.MockClock", "goog.testing.StrictMock", "goog.testing.jsunit", "goog.ui.IframeMask", "goog.ui.Popup", "goog.ui.PopupBase", "goog.userAgent"], false);
goog.addDependency("ui/imagelessbuttonrenderer.js", ["goog.ui.ImagelessButtonRenderer"], ["goog.dom.TagName", "goog.dom.classlist", "goog.ui.Button", "goog.ui.Component", "goog.ui.CustomButtonRenderer", "goog.ui.INLINE_BLOCK_CLASSNAME", "goog.ui.registry"], false);
goog.addDependency("ui/imagelessmenubuttonrenderer.js", ["goog.ui.ImagelessMenuButtonRenderer"], ["goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.ui.INLINE_BLOCK_CLASSNAME", "goog.ui.MenuButton", "goog.ui.MenuButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/inputdatepicker.js", ["goog.ui.InputDatePicker"], ["goog.date.DateTime", "goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.string", "goog.ui.Component", "goog.ui.DatePicker", "goog.ui.LabelInput", "goog.ui.PopupBase", "goog.ui.PopupDatePicker"], false);
goog.addDependency("ui/inputdatepicker_test.js", ["goog.ui.InputDatePickerTest"], ["goog.dom", "goog.i18n.DateTimeFormat", "goog.i18n.DateTimeParse", "goog.testing.jsunit", "goog.ui.InputDatePicker"], false);
goog.addDependency("ui/itemevent.js", ["goog.ui.ItemEvent"], ["goog.events.Event"], false);
goog.addDependency("ui/keyboardshortcuthandler.js", ["goog.ui.KeyboardShortcutEvent", "goog.ui.KeyboardShortcutHandler", "goog.ui.KeyboardShortcutHandler.EventType"], ["goog.Timer", "goog.array", "goog.asserts", "goog.dom.TagName", "goog.events", "goog.events.Event", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyNames", "goog.object", "goog.userAgent"], false);
goog.addDependency("ui/keyboardshortcuthandler_test.js", ["goog.ui.KeyboardShortcutHandlerTest"], ["goog.dom", "goog.events", "goog.events.BrowserEvent", "goog.events.KeyCodes", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.StrictMock", "goog.testing.events", "goog.testing.jsunit", "goog.ui.KeyboardShortcutHandler", "goog.userAgent"], false);
goog.addDependency("ui/labelinput.js", ["goog.ui.LabelInput"], ["goog.Timer", "goog.a11y.aria", "goog.a11y.aria.State", "goog.asserts", "goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.dom.classlist", "goog.events.EventHandler", "goog.events.EventType", "goog.ui.Component", "goog.userAgent"], false);
goog.addDependency("ui/labelinput_test.js", ["goog.ui.LabelInputTest"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.dom", "goog.dom.classlist", "goog.events.EventType", "goog.testing.MockClock", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.ui.LabelInput", "goog.userAgent"], false);
goog.addDependency("ui/linkbuttonrenderer.js", ["goog.ui.LinkButtonRenderer"], ["goog.ui.Button", "goog.ui.FlatButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/media/flashobject.js", ["goog.ui.media.FlashObject", "goog.ui.media.FlashObject.ScriptAccessLevel", "goog.ui.media.FlashObject.Wmodes"], ["goog.asserts", "goog.dom.TagName", "goog.dom.safe", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventType", "goog.html.SafeUrl", "goog.html.TrustedResourceUrl", "goog.html.flash", "goog.html.legacyconversions", "goog.log", "goog.object", "goog.string", "goog.structs.Map", "goog.style", "goog.ui.Component", "goog.userAgent", 
"goog.userAgent.flash"], false);
goog.addDependency("ui/media/flashobject_test.js", ["goog.ui.media.FlashObjectTest"], ["goog.dom", "goog.dom.DomHelper", "goog.dom.TagName", "goog.events", "goog.events.Event", "goog.events.EventType", "goog.html.SafeUrl", "goog.testing.MockControl", "goog.testing.events", "goog.testing.jsunit", "goog.ui.media.FlashObject", "goog.userAgent"], false);
goog.addDependency("ui/media/flickr.js", ["goog.ui.media.FlickrSet", "goog.ui.media.FlickrSetModel"], ["goog.html.TrustedResourceUrl", "goog.string.Const", "goog.ui.media.FlashObject", "goog.ui.media.Media", "goog.ui.media.MediaModel", "goog.ui.media.MediaRenderer"], false);
goog.addDependency("ui/media/flickr_test.js", ["goog.ui.media.FlickrSetTest"], ["goog.dom", "goog.dom.TagName", "goog.html.testing", "goog.testing.jsunit", "goog.ui.media.FlashObject", "goog.ui.media.FlickrSet", "goog.ui.media.FlickrSetModel", "goog.ui.media.Media"], false);
goog.addDependency("ui/media/googlevideo.js", ["goog.ui.media.GoogleVideo", "goog.ui.media.GoogleVideoModel"], ["goog.string", "goog.ui.media.FlashObject", "goog.ui.media.Media", "goog.ui.media.MediaModel", "goog.ui.media.MediaRenderer"], false);
goog.addDependency("ui/media/googlevideo_test.js", ["goog.ui.media.GoogleVideoTest"], ["goog.dom", "goog.dom.TagName", "goog.testing.jsunit", "goog.ui.media.FlashObject", "goog.ui.media.GoogleVideo", "goog.ui.media.GoogleVideoModel", "goog.ui.media.Media"], false);
goog.addDependency("ui/media/media.js", ["goog.ui.media.Media", "goog.ui.media.MediaRenderer"], ["goog.asserts", "goog.dom.TagName", "goog.style", "goog.ui.Component", "goog.ui.Control", "goog.ui.ControlRenderer"], false);
goog.addDependency("ui/media/media_test.js", ["goog.ui.media.MediaTest"], ["goog.dom", "goog.dom.TagName", "goog.math.Size", "goog.testing.jsunit", "goog.ui.ControlRenderer", "goog.ui.media.Media", "goog.ui.media.MediaModel", "goog.ui.media.MediaRenderer"], false);
goog.addDependency("ui/media/mediamodel.js", ["goog.ui.media.MediaModel", "goog.ui.media.MediaModel.Category", "goog.ui.media.MediaModel.Credit", "goog.ui.media.MediaModel.Credit.Role", "goog.ui.media.MediaModel.Credit.Scheme", "goog.ui.media.MediaModel.Medium", "goog.ui.media.MediaModel.MimeType", "goog.ui.media.MediaModel.Player", "goog.ui.media.MediaModel.SubTitle", "goog.ui.media.MediaModel.Thumbnail"], ["goog.array", "goog.html.TrustedResourceUrl", "goog.html.legacyconversions"], false);
goog.addDependency("ui/media/mediamodel_test.js", ["goog.ui.media.MediaModelTest"], ["goog.testing.jsunit", "goog.ui.media.MediaModel"], false);
goog.addDependency("ui/media/mp3.js", ["goog.ui.media.Mp3"], ["goog.string", "goog.ui.media.FlashObject", "goog.ui.media.Media", "goog.ui.media.MediaRenderer"], false);
goog.addDependency("ui/media/mp3_test.js", ["goog.ui.media.Mp3Test"], ["goog.dom", "goog.dom.TagName", "goog.testing.jsunit", "goog.ui.media.FlashObject", "goog.ui.media.Media", "goog.ui.media.MediaModel", "goog.ui.media.Mp3"], false);
goog.addDependency("ui/media/photo.js", ["goog.ui.media.Photo"], ["goog.dom.TagName", "goog.ui.media.Media", "goog.ui.media.MediaRenderer"], false);
goog.addDependency("ui/media/photo_test.js", ["goog.ui.media.PhotoTest"], ["goog.dom", "goog.dom.TagName", "goog.testing.jsunit", "goog.ui.media.MediaModel", "goog.ui.media.Photo"], false);
goog.addDependency("ui/media/picasa.js", ["goog.ui.media.PicasaAlbum", "goog.ui.media.PicasaAlbumModel"], ["goog.html.TrustedResourceUrl", "goog.string.Const", "goog.ui.media.FlashObject", "goog.ui.media.Media", "goog.ui.media.MediaModel", "goog.ui.media.MediaRenderer"], false);
goog.addDependency("ui/media/picasa_test.js", ["goog.ui.media.PicasaTest"], ["goog.dom", "goog.dom.TagName", "goog.testing.jsunit", "goog.ui.media.FlashObject", "goog.ui.media.Media", "goog.ui.media.PicasaAlbum", "goog.ui.media.PicasaAlbumModel"], false);
goog.addDependency("ui/media/vimeo.js", ["goog.ui.media.Vimeo", "goog.ui.media.VimeoModel"], ["goog.string", "goog.ui.media.FlashObject", "goog.ui.media.Media", "goog.ui.media.MediaModel", "goog.ui.media.MediaRenderer"], false);
goog.addDependency("ui/media/vimeo_test.js", ["goog.ui.media.VimeoTest"], ["goog.dom", "goog.dom.TagName", "goog.testing.jsunit", "goog.ui.media.FlashObject", "goog.ui.media.Media", "goog.ui.media.Vimeo", "goog.ui.media.VimeoModel"], false);
goog.addDependency("ui/media/youtube.js", ["goog.ui.media.Youtube", "goog.ui.media.YoutubeModel"], ["goog.dom.TagName", "goog.string", "goog.ui.Component", "goog.ui.media.FlashObject", "goog.ui.media.Media", "goog.ui.media.MediaModel", "goog.ui.media.MediaRenderer"], false);
goog.addDependency("ui/media/youtube_test.js", ["goog.ui.media.YoutubeTest"], ["goog.dom", "goog.dom.TagName", "goog.testing.jsunit", "goog.ui.media.FlashObject", "goog.ui.media.Youtube", "goog.ui.media.YoutubeModel"], false);
goog.addDependency("ui/menu.js", ["goog.ui.Menu", "goog.ui.Menu.EventType"], ["goog.dom.TagName", "goog.math.Coordinate", "goog.string", "goog.style", "goog.ui.Component.EventType", "goog.ui.Component.State", "goog.ui.Container", "goog.ui.Container.Orientation", "goog.ui.MenuHeader", "goog.ui.MenuItem", "goog.ui.MenuRenderer", "goog.ui.MenuSeparator"], false);
goog.addDependency("ui/menu_test.js", ["goog.ui.MenuTest"], ["goog.dom", "goog.events", "goog.math.Coordinate", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.Menu"], false);
goog.addDependency("ui/menubar.js", ["goog.ui.menuBar"], ["goog.ui.Container", "goog.ui.MenuBarRenderer"], false);
goog.addDependency("ui/menubardecorator.js", ["goog.ui.menuBarDecorator"], ["goog.ui.MenuBarRenderer", "goog.ui.menuBar", "goog.ui.registry"], false);
goog.addDependency("ui/menubarrenderer.js", ["goog.ui.MenuBarRenderer"], ["goog.a11y.aria.Role", "goog.ui.Container", "goog.ui.ContainerRenderer"], false);
goog.addDependency("ui/menubase.js", ["goog.ui.MenuBase"], ["goog.events.EventHandler", "goog.events.EventType", "goog.events.KeyHandler", "goog.ui.Popup"], false);
goog.addDependency("ui/menubutton.js", ["goog.ui.MenuButton"], ["goog.Timer", "goog.a11y.aria", "goog.a11y.aria.State", "goog.asserts", "goog.dom", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.math.Box", "goog.math.Rect", "goog.positioning", "goog.positioning.Corner", "goog.positioning.MenuAnchoredPosition", "goog.positioning.Overflow", "goog.style", "goog.ui.Button", "goog.ui.Component", "goog.ui.IdGenerator", "goog.ui.Menu", "goog.ui.MenuButtonRenderer", "goog.ui.MenuItem", 
"goog.ui.MenuRenderer", "goog.ui.registry", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("ui/menubutton_test.js", ["goog.ui.MenuButtonTest"], ["goog.Timer", "goog.a11y.aria", "goog.a11y.aria.State", "goog.dom", "goog.dom.TagName", "goog.events", "goog.events.Event", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.positioning", "goog.positioning.Corner", "goog.positioning.MenuAnchoredPosition", "goog.positioning.Overflow", "goog.style", "goog.testing.ExpectedFailures", "goog.testing.PropertyReplacer", "goog.testing.events", "goog.testing.jsunit", 
"goog.testing.recordFunction", "goog.ui.Component", "goog.ui.Menu", "goog.ui.MenuButton", "goog.ui.MenuItem", "goog.ui.SubMenu", "goog.userAgent", "goog.userAgent.product", "goog.userAgent.product.isVersion"], false);
goog.addDependency("ui/menubuttonrenderer.js", ["goog.ui.MenuButtonRenderer"], ["goog.dom", "goog.dom.TagName", "goog.style", "goog.ui.CustomButtonRenderer", "goog.ui.INLINE_BLOCK_CLASSNAME", "goog.ui.Menu", "goog.ui.MenuRenderer"], false);
goog.addDependency("ui/menubuttonrenderer_test.js", ["goog.ui.MenuButtonRendererTest"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.testing.jsunit", "goog.testing.ui.rendererasserts", "goog.ui.MenuButton", "goog.ui.MenuButtonRenderer", "goog.userAgent"], false);
goog.addDependency("ui/menuheader.js", ["goog.ui.MenuHeader"], ["goog.ui.Component", "goog.ui.Control", "goog.ui.MenuHeaderRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/menuheaderrenderer.js", ["goog.ui.MenuHeaderRenderer"], ["goog.ui.ControlRenderer"], false);
goog.addDependency("ui/menuitem.js", ["goog.ui.MenuItem"], ["goog.a11y.aria.Role", "goog.array", "goog.dom", "goog.dom.classlist", "goog.math.Coordinate", "goog.string", "goog.ui.Component", "goog.ui.Control", "goog.ui.MenuItemRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/menuitem_test.js", ["goog.ui.MenuItemTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.array", "goog.dom", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.events.KeyCodes", "goog.math.Coordinate", "goog.testing.events", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.ui.Component", "goog.ui.MenuItem", "goog.ui.MenuItemRenderer"], false);
goog.addDependency("ui/menuitemrenderer.js", ["goog.ui.MenuItemRenderer"], ["goog.a11y.aria.Role", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.ui.Component", "goog.ui.ControlRenderer"], false);
goog.addDependency("ui/menuitemrenderer_test.js", ["goog.ui.MenuItemRendererTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.dom", "goog.dom.classlist", "goog.testing.jsunit", "goog.testing.ui.rendererasserts", "goog.ui.Component", "goog.ui.MenuItem", "goog.ui.MenuItemRenderer"], false);
goog.addDependency("ui/menurenderer.js", ["goog.ui.MenuRenderer"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.ui.ContainerRenderer", "goog.ui.Separator"], false);
goog.addDependency("ui/menuseparator.js", ["goog.ui.MenuSeparator"], ["goog.ui.MenuSeparatorRenderer", "goog.ui.Separator", "goog.ui.registry"], false);
goog.addDependency("ui/menuseparatorrenderer.js", ["goog.ui.MenuSeparatorRenderer"], ["goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.ui.ControlRenderer"], false);
goog.addDependency("ui/menuseparatorrenderer_test.js", ["goog.ui.MenuSeparatorRendererTest"], ["goog.dom", "goog.testing.jsunit", "goog.ui.MenuSeparator", "goog.ui.MenuSeparatorRenderer"], false);
goog.addDependency("ui/mockactivitymonitor.js", ["goog.ui.MockActivityMonitor"], ["goog.events.EventType", "goog.ui.ActivityMonitor"], false);
goog.addDependency("ui/mockactivitymonitor_test.js", ["goog.ui.MockActivityMonitorTest"], ["goog.events", "goog.functions", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.ui.ActivityMonitor", "goog.ui.MockActivityMonitor"], false);
goog.addDependency("ui/modalariavisibilityhelper.js", ["goog.ui.ModalAriaVisibilityHelper"], ["goog.a11y.aria", "goog.a11y.aria.State"], false);
goog.addDependency("ui/modalariavisibilityhelper_test.js", ["goog.ui.ModalAriaVisibilityHelperTest"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.dom", "goog.string", "goog.testing.jsunit", "goog.ui.ModalAriaVisibilityHelper"], false);
goog.addDependency("ui/modalpopup.js", ["goog.ui.ModalPopup"], ["goog.Timer", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.dom.iframe", "goog.events", "goog.events.EventType", "goog.events.FocusHandler", "goog.fx.Transition", "goog.string", "goog.style", "goog.ui.Component", "goog.ui.ModalAriaVisibilityHelper", "goog.ui.PopupBase", "goog.userAgent"], false);
goog.addDependency("ui/modalpopup_test.js", ["goog.ui.ModalPopupTest"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.dispose", "goog.dom", "goog.dom.TagName", "goog.events", "goog.events.EventTarget", "goog.fx.Transition", "goog.fx.css3", "goog.string", "goog.style", "goog.testing.MockClock", "goog.testing.jsunit", "goog.ui.ModalPopup", "goog.ui.PopupBase"], false);
goog.addDependency("ui/nativebuttonrenderer.js", ["goog.ui.NativeButtonRenderer"], ["goog.asserts", "goog.dom.InputType", "goog.dom.TagName", "goog.dom.classlist", "goog.events.EventType", "goog.ui.ButtonRenderer", "goog.ui.Component"], false);
goog.addDependency("ui/nativebuttonrenderer_test.js", ["goog.ui.NativeButtonRendererTest"], ["goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.testing.ExpectedFailures", "goog.testing.events", "goog.testing.jsunit", "goog.testing.ui.rendererasserts", "goog.ui.Button", "goog.ui.Component", "goog.ui.NativeButtonRenderer", "goog.userAgent"], false);
goog.addDependency("ui/option.js", ["goog.ui.Option"], ["goog.ui.Component", "goog.ui.MenuItem", "goog.ui.registry"], false);
goog.addDependency("ui/palette.js", ["goog.ui.Palette"], ["goog.array", "goog.dom", "goog.events", "goog.events.EventType", "goog.events.KeyCodes", "goog.math.Size", "goog.ui.Component", "goog.ui.Control", "goog.ui.PaletteRenderer", "goog.ui.SelectionModel"], false);
goog.addDependency("ui/palette_test.js", ["goog.ui.PaletteTest"], ["goog.a11y.aria", "goog.dom", "goog.events", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyEvent", "goog.testing.events.Event", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.ui.Component", "goog.ui.Container", "goog.ui.Palette"], false);
goog.addDependency("ui/paletterenderer.js", ["goog.ui.PaletteRenderer"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.array", "goog.asserts", "goog.dom", "goog.dom.NodeIterator", "goog.dom.NodeType", "goog.dom.TagName", "goog.dom.classlist", "goog.iter", "goog.style", "goog.ui.ControlRenderer", "goog.userAgent"], false);
goog.addDependency("ui/paletterenderer_test.js", ["goog.ui.PaletteRendererTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.array", "goog.dom", "goog.dom.TagName", "goog.testing.jsunit", "goog.ui.Palette", "goog.ui.PaletteRenderer"], false);
goog.addDependency("ui/plaintextspellchecker.js", ["goog.ui.PlainTextSpellChecker"], ["goog.Timer", "goog.a11y.aria", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.events.EventHandler", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.spell.SpellCheck", "goog.style", "goog.ui.AbstractSpellChecker", "goog.ui.Component", "goog.userAgent"], false);
goog.addDependency("ui/plaintextspellchecker_test.js", ["goog.ui.PlainTextSpellCheckerTest"], ["goog.Timer", "goog.dom", "goog.events.KeyCodes", "goog.spell.SpellCheck", "goog.testing.events", "goog.testing.jsunit", "goog.ui.PlainTextSpellChecker"], false);
goog.addDependency("ui/popup.js", ["goog.ui.Popup"], ["goog.math.Box", "goog.positioning.Corner", "goog.style", "goog.ui.PopupBase"], false);
goog.addDependency("ui/popup_test.js", ["goog.ui.PopupTest"], ["goog.positioning.AnchoredPosition", "goog.positioning.Corner", "goog.style", "goog.testing.jsunit", "goog.ui.Popup", "goog.userAgent"], false);
goog.addDependency("ui/popupbase.js", ["goog.ui.PopupBase", "goog.ui.PopupBase.EventType", "goog.ui.PopupBase.Type"], ["goog.Timer", "goog.array", "goog.dom", "goog.dom.TagName", "goog.events", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.fx.Transition", "goog.style", "goog.userAgent"], false);
goog.addDependency("ui/popupbase_test.js", ["goog.ui.PopupBaseTest"], ["goog.dom", "goog.dom.TagName", "goog.events", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.fx.Transition", "goog.fx.css3", "goog.testing.MockClock", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.ui.PopupBase"], false);
goog.addDependency("ui/popupcolorpicker.js", ["goog.ui.PopupColorPicker"], ["goog.asserts", "goog.dom.classlist", "goog.events.EventType", "goog.positioning.AnchoredPosition", "goog.positioning.Corner", "goog.ui.ColorPicker", "goog.ui.Component", "goog.ui.Popup"], false);
goog.addDependency("ui/popupcolorpicker_test.js", ["goog.ui.PopupColorPickerTest"], ["goog.dom", "goog.events", "goog.testing.events", "goog.testing.jsunit", "goog.ui.ColorPicker", "goog.ui.PopupColorPicker"], false);
goog.addDependency("ui/popupdatepicker.js", ["goog.ui.PopupDatePicker"], ["goog.events.EventType", "goog.positioning.AnchoredPosition", "goog.positioning.Corner", "goog.positioning.Overflow", "goog.style", "goog.ui.Component", "goog.ui.DatePicker", "goog.ui.Popup", "goog.ui.PopupBase"], false);
goog.addDependency("ui/popupdatepicker_test.js", ["goog.ui.PopupDatePickerTest"], ["goog.events", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.ui.PopupBase", "goog.ui.PopupDatePicker"], false);
goog.addDependency("ui/popupmenu.js", ["goog.ui.PopupMenu"], ["goog.events", "goog.events.BrowserEvent", "goog.events.EventType", "goog.events.KeyCodes", "goog.positioning.AnchoredViewportPosition", "goog.positioning.Corner", "goog.positioning.MenuAnchoredPosition", "goog.positioning.Overflow", "goog.positioning.ViewportClientPosition", "goog.structs.Map", "goog.style", "goog.ui.Component", "goog.ui.Menu", "goog.ui.PopupBase", "goog.userAgent"], false);
goog.addDependency("ui/popupmenu_test.js", ["goog.ui.PopupMenuTest"], ["goog.dom", "goog.events.EventHandler", "goog.events.EventType", "goog.events.KeyCodes", "goog.math.Box", "goog.math.Coordinate", "goog.positioning.Corner", "goog.style", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Menu", "goog.ui.MenuItem", "goog.ui.PopupMenu"], false);
goog.addDependency("ui/progressbar.js", ["goog.ui.ProgressBar", "goog.ui.ProgressBar.Orientation"], ["goog.a11y.aria", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.EventType", "goog.ui.Component", "goog.ui.RangeModel", "goog.userAgent"], false);
goog.addDependency("ui/prompt.js", ["goog.ui.Prompt"], ["goog.Timer", "goog.dom", "goog.dom.InputType", "goog.dom.TagName", "goog.events", "goog.events.EventType", "goog.functions", "goog.html.SafeHtml", "goog.html.legacyconversions", "goog.ui.Component", "goog.ui.Dialog", "goog.userAgent"], false);
goog.addDependency("ui/prompt_test.js", ["goog.ui.PromptTest"], ["goog.dom.selection", "goog.events.InputHandler", "goog.events.KeyCodes", "goog.functions", "goog.string", "goog.testing.events", "goog.testing.jsunit", "goog.ui.BidiInput", "goog.ui.Dialog", "goog.ui.Prompt", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("ui/rangemodel.js", ["goog.ui.RangeModel"], ["goog.events.EventTarget", "goog.ui.Component"], false);
goog.addDependency("ui/rangemodel_test.js", ["goog.ui.RangeModelTest"], ["goog.testing.jsunit", "goog.ui.RangeModel"], false);
goog.addDependency("ui/ratings.js", ["goog.ui.Ratings", "goog.ui.Ratings.EventType"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.asserts", "goog.dom.TagName", "goog.dom.classlist", "goog.events.EventType", "goog.ui.Component"], false);
goog.addDependency("ui/registry.js", ["goog.ui.registry"], ["goog.asserts", "goog.dom.classlist"], false);
goog.addDependency("ui/registry_test.js", ["goog.ui.registryTest"], ["goog.object", "goog.testing.jsunit", "goog.ui.registry"], false);
goog.addDependency("ui/richtextspellchecker.js", ["goog.ui.RichTextSpellChecker"], ["goog.Timer", "goog.asserts", "goog.dom", "goog.dom.NodeType", "goog.dom.Range", "goog.events.EventHandler", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.math.Coordinate", "goog.spell.SpellCheck", "goog.string.StringBuffer", "goog.style", "goog.ui.AbstractSpellChecker", "goog.ui.Component", "goog.ui.PopupMenu"], false);
goog.addDependency("ui/richtextspellchecker_test.js", ["goog.ui.RichTextSpellCheckerTest"], ["goog.dom.Range", "goog.dom.TagName", "goog.dom.classlist", "goog.events.KeyCodes", "goog.object", "goog.spell.SpellCheck", "goog.testing.MockClock", "goog.testing.events", "goog.testing.jsunit", "goog.ui.RichTextSpellChecker"], false);
goog.addDependency("ui/roundedpanel.js", ["goog.ui.BaseRoundedPanel", "goog.ui.CssRoundedPanel", "goog.ui.GraphicsRoundedPanel", "goog.ui.RoundedPanel", "goog.ui.RoundedPanel.Corner"], ["goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.graphics", "goog.graphics.Path", "goog.graphics.SolidFill", "goog.graphics.Stroke", "goog.math", "goog.math.Coordinate", "goog.style", "goog.ui.Component", "goog.userAgent"], false);
goog.addDependency("ui/roundedpanel_test.js", ["goog.ui.RoundedPanelTest"], ["goog.testing.jsunit", "goog.ui.CssRoundedPanel", "goog.ui.GraphicsRoundedPanel", "goog.ui.RoundedPanel", "goog.userAgent"], false);
goog.addDependency("ui/roundedtabrenderer.js", ["goog.ui.RoundedTabRenderer"], ["goog.dom", "goog.dom.TagName", "goog.ui.Tab", "goog.ui.TabBar", "goog.ui.TabRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/scrollfloater.js", ["goog.ui.ScrollFloater", "goog.ui.ScrollFloater.EventType"], ["goog.array", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events.EventType", "goog.style", "goog.ui.Component", "goog.userAgent"], false);
goog.addDependency("ui/scrollfloater_test.js", ["goog.ui.ScrollFloaterTest"], ["goog.dom", "goog.events", "goog.style", "goog.testing.jsunit", "goog.ui.ScrollFloater"], false);
goog.addDependency("ui/select.js", ["goog.ui.Select"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.array", "goog.events.EventType", "goog.ui.Component", "goog.ui.IdGenerator", "goog.ui.MenuButton", "goog.ui.MenuItem", "goog.ui.MenuRenderer", "goog.ui.SelectionModel", "goog.ui.registry"], false);
goog.addDependency("ui/select_test.js", ["goog.ui.SelectTest"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.dom", "goog.events", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.ui.Component", "goog.ui.CustomButtonRenderer", "goog.ui.Menu", "goog.ui.MenuItem", "goog.ui.Select", "goog.ui.Separator"], false);
goog.addDependency("ui/selectionmenubutton.js", ["goog.ui.SelectionMenuButton", "goog.ui.SelectionMenuButton.SelectionState"], ["goog.dom.InputType", "goog.dom.TagName", "goog.events.EventType", "goog.style", "goog.ui.Component", "goog.ui.MenuButton", "goog.ui.MenuItem", "goog.ui.registry"], false);
goog.addDependency("ui/selectionmenubutton_test.js", ["goog.ui.SelectionMenuButtonTest"], ["goog.dom", "goog.events", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.SelectionMenuButton"], false);
goog.addDependency("ui/selectionmodel.js", ["goog.ui.SelectionModel"], ["goog.array", "goog.events.EventTarget", "goog.events.EventType"], false);
goog.addDependency("ui/selectionmodel_test.js", ["goog.ui.SelectionModelTest"], ["goog.array", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.ui.SelectionModel"], false);
goog.addDependency("ui/separator.js", ["goog.ui.Separator"], ["goog.a11y.aria", "goog.asserts", "goog.ui.Component", "goog.ui.Control", "goog.ui.MenuSeparatorRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/serverchart.js", ["goog.ui.ServerChart", "goog.ui.ServerChart.AxisDisplayType", "goog.ui.ServerChart.ChartType", "goog.ui.ServerChart.EncodingType", "goog.ui.ServerChart.Event", "goog.ui.ServerChart.LegendPosition", "goog.ui.ServerChart.MaximumValue", "goog.ui.ServerChart.MultiAxisAlignment", "goog.ui.ServerChart.MultiAxisType", "goog.ui.ServerChart.UriParam", "goog.ui.ServerChart.UriTooLongEvent"], ["goog.Uri", "goog.array", "goog.asserts", "goog.dom.TagName", "goog.events.Event", 
"goog.string", "goog.ui.Component"], false);
goog.addDependency("ui/serverchart_test.js", ["goog.ui.ServerChartTest"], ["goog.Uri", "goog.events", "goog.testing.jsunit", "goog.ui.ServerChart"], false);
goog.addDependency("ui/slider.js", ["goog.ui.Slider", "goog.ui.Slider.Orientation"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.dom", "goog.dom.TagName", "goog.ui.SliderBase"], false);
goog.addDependency("ui/sliderbase.js", ["goog.ui.SliderBase", "goog.ui.SliderBase.AnimationFactory", "goog.ui.SliderBase.Orientation"], ["goog.Timer", "goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.array", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.EventType", "goog.events.KeyCodes", "goog.events.KeyHandler", "goog.events.MouseWheelHandler", "goog.functions", "goog.fx.AnimationParallelQueue", "goog.fx.Dragger", "goog.fx.Transition", 
"goog.fx.dom.ResizeHeight", "goog.fx.dom.ResizeWidth", "goog.fx.dom.Slide", "goog.math", "goog.math.Coordinate", "goog.style", "goog.style.bidi", "goog.ui.Component", "goog.ui.RangeModel"], false);
goog.addDependency("ui/sliderbase_test.js", ["goog.ui.SliderBaseTest"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.EventType", "goog.events.KeyCodes", "goog.fx.Animation", "goog.math.Coordinate", "goog.style", "goog.style.bidi", "goog.testing.MockClock", "goog.testing.MockControl", "goog.testing.events", "goog.testing.jsunit", "goog.testing.mockmatchers", "goog.testing.recordFunction", "goog.ui.Component", "goog.ui.SliderBase", 
"goog.userAgent"], false);
goog.addDependency("ui/splitbehavior.js", ["goog.ui.SplitBehavior", "goog.ui.SplitBehavior.DefaultHandlers"], ["goog.Disposable", "goog.asserts", "goog.dispose", "goog.dom.NodeType", "goog.dom.classlist", "goog.events.EventHandler", "goog.ui.ButtonSide", "goog.ui.Component", "goog.ui.decorate", "goog.ui.registry"], false);
goog.addDependency("ui/splitbehavior_test.js", ["goog.ui.SplitBehaviorTest"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.events", "goog.events.Event", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.CustomButton", "goog.ui.Menu", "goog.ui.MenuButton", "goog.ui.MenuItem", "goog.ui.SplitBehavior", "goog.ui.decorate"], false);
goog.addDependency("ui/splitpane.js", ["goog.ui.SplitPane", "goog.ui.SplitPane.Orientation"], ["goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events.EventType", "goog.fx.Dragger", "goog.math.Rect", "goog.math.Size", "goog.style", "goog.ui.Component", "goog.userAgent"], false);
goog.addDependency("ui/splitpane_test.js", ["goog.ui.SplitPaneTest"], ["goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.math.Size", "goog.style", "goog.testing.events", "goog.testing.jsunit", "goog.testing.recordFunction", "goog.ui.Component", "goog.ui.SplitPane"], false);
goog.addDependency("ui/style/app/buttonrenderer.js", ["goog.ui.style.app.ButtonRenderer"], ["goog.dom.TagName", "goog.dom.classlist", "goog.ui.Button", "goog.ui.CustomButtonRenderer", "goog.ui.INLINE_BLOCK_CLASSNAME", "goog.ui.registry"], false);
goog.addDependency("ui/style/app/buttonrenderer_test.js", ["goog.ui.style.app.ButtonRendererTest"], ["goog.dom", "goog.testing.jsunit", "goog.testing.ui.style", "goog.ui.Button", "goog.ui.Component", "goog.ui.style.app.ButtonRenderer", "goog.userAgent"], false);
goog.addDependency("ui/style/app/menubuttonrenderer.js", ["goog.ui.style.app.MenuButtonRenderer"], ["goog.a11y.aria.Role", "goog.array", "goog.dom", "goog.dom.TagName", "goog.style", "goog.ui.Menu", "goog.ui.MenuRenderer", "goog.ui.style.app.ButtonRenderer"], false);
goog.addDependency("ui/style/app/menubuttonrenderer_test.js", ["goog.ui.style.app.MenuButtonRendererTest"], ["goog.dom", "goog.testing.jsunit", "goog.testing.ui.style", "goog.ui.Component", "goog.ui.MenuButton", "goog.ui.style.app.MenuButtonRenderer"], false);
goog.addDependency("ui/style/app/primaryactionbuttonrenderer.js", ["goog.ui.style.app.PrimaryActionButtonRenderer"], ["goog.ui.Button", "goog.ui.registry", "goog.ui.style.app.ButtonRenderer"], false);
goog.addDependency("ui/style/app/primaryactionbuttonrenderer_test.js", ["goog.ui.style.app.PrimaryActionButtonRendererTest"], ["goog.dom", "goog.testing.jsunit", "goog.testing.ui.style", "goog.ui.Button", "goog.ui.Component", "goog.ui.style.app.PrimaryActionButtonRenderer"], false);
goog.addDependency("ui/submenu.js", ["goog.ui.SubMenu"], ["goog.Timer", "goog.asserts", "goog.dom", "goog.dom.classlist", "goog.events.KeyCodes", "goog.positioning.AnchoredViewportPosition", "goog.positioning.Corner", "goog.style", "goog.ui.Component", "goog.ui.Menu", "goog.ui.MenuItem", "goog.ui.SubMenuRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/submenu_test.js", ["goog.ui.SubMenuTest"], ["goog.dom", "goog.dom.classlist", "goog.events", "goog.events.Event", "goog.events.KeyCodes", "goog.functions", "goog.positioning", "goog.positioning.Overflow", "goog.style", "goog.testing.MockClock", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.Menu", "goog.ui.MenuItem", "goog.ui.SubMenu", "goog.ui.SubMenuRenderer"], false);
goog.addDependency("ui/submenurenderer.js", ["goog.ui.SubMenuRenderer"], ["goog.a11y.aria", "goog.a11y.aria.State", "goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.style", "goog.ui.Menu", "goog.ui.MenuItemRenderer"], false);
goog.addDependency("ui/tab.js", ["goog.ui.Tab"], ["goog.ui.Component", "goog.ui.Control", "goog.ui.TabRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/tab_test.js", ["goog.ui.TabTest"], ["goog.dom", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.Tab", "goog.ui.TabRenderer"], false);
goog.addDependency("ui/tabbar.js", ["goog.ui.TabBar", "goog.ui.TabBar.Location"], ["goog.ui.Component.EventType", "goog.ui.Container", "goog.ui.Container.Orientation", "goog.ui.Tab", "goog.ui.TabBarRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/tabbar_test.js", ["goog.ui.TabBarTest"], ["goog.dom", "goog.events", "goog.events.Event", "goog.events.EventType", "goog.events.KeyCodes", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.Container", "goog.ui.Tab", "goog.ui.TabBar", "goog.ui.TabBarRenderer"], false);
goog.addDependency("ui/tabbarrenderer.js", ["goog.ui.TabBarRenderer"], ["goog.a11y.aria.Role", "goog.object", "goog.ui.ContainerRenderer"], false);
goog.addDependency("ui/tabbarrenderer_test.js", ["goog.ui.TabBarRendererTest"], ["goog.a11y.aria.Role", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.testing.jsunit", "goog.testing.ui.rendererasserts", "goog.ui.Container", "goog.ui.TabBar", "goog.ui.TabBarRenderer"], false);
goog.addDependency("ui/tablesorter.js", ["goog.ui.TableSorter", "goog.ui.TableSorter.EventType"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events.EventType", "goog.functions", "goog.ui.Component"], false);
goog.addDependency("ui/tablesorter_test.js", ["goog.ui.TableSorterTest"], ["goog.array", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.testing.events", "goog.testing.jsunit", "goog.ui.TableSorter"], false);
goog.addDependency("ui/tabpane.js", ["goog.ui.TabPane", "goog.ui.TabPane.Events", "goog.ui.TabPane.TabLocation", "goog.ui.TabPane.TabPage", "goog.ui.TabPaneEvent"], ["goog.asserts", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.events.Event", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.style"], false);
goog.addDependency("ui/tabpane_test.js", ["goog.ui.TabPaneTest"], ["goog.dom", "goog.testing.jsunit", "goog.ui.TabPane"], false);
goog.addDependency("ui/tabrenderer.js", ["goog.ui.TabRenderer"], ["goog.a11y.aria.Role", "goog.ui.Component", "goog.ui.ControlRenderer"], false);
goog.addDependency("ui/tabrenderer_test.js", ["goog.ui.TabRendererTest"], ["goog.a11y.aria.Role", "goog.dom", "goog.dom.classlist", "goog.testing.dom", "goog.testing.jsunit", "goog.testing.ui.rendererasserts", "goog.ui.Tab", "goog.ui.TabRenderer"], false);
goog.addDependency("ui/textarea.js", ["goog.ui.Textarea", "goog.ui.Textarea.EventType"], ["goog.asserts", "goog.dom", "goog.dom.classlist", "goog.events.EventType", "goog.style", "goog.ui.Control", "goog.ui.TextareaRenderer", "goog.userAgent"], false);
goog.addDependency("ui/textarea_test.js", ["goog.ui.TextareaTest"], ["goog.dom", "goog.dom.classlist", "goog.events", "goog.style", "goog.testing.ExpectedFailures", "goog.testing.events.EventObserver", "goog.testing.jsunit", "goog.ui.Textarea", "goog.ui.TextareaRenderer", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("ui/textarearenderer.js", ["goog.ui.TextareaRenderer"], ["goog.dom.TagName", "goog.ui.Component", "goog.ui.ControlRenderer"], false);
goog.addDependency("ui/togglebutton.js", ["goog.ui.ToggleButton"], ["goog.ui.Button", "goog.ui.Component", "goog.ui.CustomButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/toolbar.js", ["goog.ui.Toolbar"], ["goog.ui.Container", "goog.ui.ToolbarRenderer"], false);
goog.addDependency("ui/toolbar_test.js", ["goog.ui.ToolbarTest"], ["goog.a11y.aria", "goog.dom", "goog.events.EventType", "goog.testing.events", "goog.testing.events.Event", "goog.testing.jsunit", "goog.ui.Toolbar", "goog.ui.ToolbarMenuButton"], false);
goog.addDependency("ui/toolbarbutton.js", ["goog.ui.ToolbarButton"], ["goog.ui.Button", "goog.ui.ToolbarButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/toolbarbuttonrenderer.js", ["goog.ui.ToolbarButtonRenderer"], ["goog.ui.CustomButtonRenderer"], false);
goog.addDependency("ui/toolbarcolormenubutton.js", ["goog.ui.ToolbarColorMenuButton"], ["goog.ui.ColorMenuButton", "goog.ui.ToolbarColorMenuButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/toolbarcolormenubuttonrenderer.js", ["goog.ui.ToolbarColorMenuButtonRenderer"], ["goog.asserts", "goog.dom.classlist", "goog.ui.ColorMenuButtonRenderer", "goog.ui.MenuButtonRenderer", "goog.ui.ToolbarMenuButtonRenderer"], false);
goog.addDependency("ui/toolbarcolormenubuttonrenderer_test.js", ["goog.ui.ToolbarColorMenuButtonRendererTest"], ["goog.dom", "goog.testing.jsunit", "goog.testing.ui.RendererHarness", "goog.testing.ui.rendererasserts", "goog.ui.ToolbarColorMenuButton", "goog.ui.ToolbarColorMenuButtonRenderer"], false);
goog.addDependency("ui/toolbarmenubutton.js", ["goog.ui.ToolbarMenuButton"], ["goog.ui.MenuButton", "goog.ui.ToolbarMenuButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/toolbarmenubuttonrenderer.js", ["goog.ui.ToolbarMenuButtonRenderer"], ["goog.ui.MenuButtonRenderer"], false);
goog.addDependency("ui/toolbarrenderer.js", ["goog.ui.ToolbarRenderer"], ["goog.a11y.aria.Role", "goog.dom.TagName", "goog.ui.Container", "goog.ui.ContainerRenderer", "goog.ui.Separator", "goog.ui.ToolbarSeparatorRenderer"], false);
goog.addDependency("ui/toolbarselect.js", ["goog.ui.ToolbarSelect"], ["goog.ui.Select", "goog.ui.ToolbarMenuButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/toolbarseparator.js", ["goog.ui.ToolbarSeparator"], ["goog.ui.Separator", "goog.ui.ToolbarSeparatorRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/toolbarseparatorrenderer.js", ["goog.ui.ToolbarSeparatorRenderer"], ["goog.asserts", "goog.dom.TagName", "goog.dom.classlist", "goog.ui.INLINE_BLOCK_CLASSNAME", "goog.ui.MenuSeparatorRenderer"], false);
goog.addDependency("ui/toolbarseparatorrenderer_test.js", ["goog.ui.ToolbarSeparatorRendererTest"], ["goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.INLINE_BLOCK_CLASSNAME", "goog.ui.ToolbarSeparator", "goog.ui.ToolbarSeparatorRenderer"], false);
goog.addDependency("ui/toolbartogglebutton.js", ["goog.ui.ToolbarToggleButton"], ["goog.ui.ToggleButton", "goog.ui.ToolbarButtonRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/tooltip.js", ["goog.ui.Tooltip", "goog.ui.Tooltip.CursorTooltipPosition", "goog.ui.Tooltip.ElementTooltipPosition", "goog.ui.Tooltip.State"], ["goog.Timer", "goog.array", "goog.dom", "goog.dom.TagName", "goog.dom.safe", "goog.events", "goog.events.EventType", "goog.events.FocusHandler", "goog.html.legacyconversions", "goog.math.Box", "goog.math.Coordinate", "goog.positioning", "goog.positioning.AnchoredPosition", "goog.positioning.Corner", "goog.positioning.Overflow", "goog.positioning.OverflowStatus", 
"goog.positioning.ViewportPosition", "goog.structs.Set", "goog.style", "goog.ui.Popup", "goog.ui.PopupBase"], false);
goog.addDependency("ui/tooltip_test.js", ["goog.ui.TooltipTest"], ["goog.dom", "goog.dom.TagName", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventType", "goog.events.FocusHandler", "goog.html.testing", "goog.math.Coordinate", "goog.positioning.AbsolutePosition", "goog.style", "goog.testing.MockClock", "goog.testing.PropertyReplacer", "goog.testing.TestQueue", "goog.testing.events", "goog.testing.jsunit", "goog.ui.PopupBase", "goog.ui.Tooltip", "goog.userAgent"], false);
goog.addDependency("ui/tree/basenode.js", ["goog.ui.tree.BaseNode", "goog.ui.tree.BaseNode.EventType"], ["goog.Timer", "goog.a11y.aria", "goog.asserts", "goog.dom.safe", "goog.events.Event", "goog.events.KeyCodes", "goog.html.SafeHtml", "goog.html.SafeStyle", "goog.html.legacyconversions", "goog.string", "goog.string.StringBuffer", "goog.style", "goog.ui.Component"], false);
goog.addDependency("ui/tree/basenode_test.js", ["goog.ui.tree.BaseNodeTest"], ["goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.html.legacyconversions", "goog.html.testing", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.ui.Component", "goog.ui.tree.BaseNode", "goog.ui.tree.TreeControl", "goog.ui.tree.TreeNode"], false);
goog.addDependency("ui/tree/treecontrol.js", ["goog.ui.tree.TreeControl"], ["goog.a11y.aria", "goog.asserts", "goog.dom.classlist", "goog.events.EventType", "goog.events.FocusHandler", "goog.events.KeyHandler", "goog.html.SafeHtml", "goog.log", "goog.ui.tree.BaseNode", "goog.ui.tree.TreeNode", "goog.ui.tree.TypeAhead", "goog.userAgent"], false);
goog.addDependency("ui/tree/treecontrol_test.js", ["goog.ui.tree.TreeControlTest"], ["goog.dom", "goog.testing.jsunit", "goog.ui.tree.TreeControl"], false);
goog.addDependency("ui/tree/treenode.js", ["goog.ui.tree.TreeNode"], ["goog.ui.tree.BaseNode"], false);
goog.addDependency("ui/tree/typeahead.js", ["goog.ui.tree.TypeAhead", "goog.ui.tree.TypeAhead.Offset"], ["goog.array", "goog.events.KeyCodes", "goog.string", "goog.structs.Trie"], false);
goog.addDependency("ui/tree/typeahead_test.js", ["goog.ui.tree.TypeAheadTest"], ["goog.dom", "goog.events.KeyCodes", "goog.testing.jsunit", "goog.ui.tree.TreeControl", "goog.ui.tree.TypeAhead"], false);
goog.addDependency("ui/tristatemenuitem.js", ["goog.ui.TriStateMenuItem", "goog.ui.TriStateMenuItem.State"], ["goog.dom.classlist", "goog.ui.Component", "goog.ui.MenuItem", "goog.ui.TriStateMenuItemRenderer", "goog.ui.registry"], false);
goog.addDependency("ui/tristatemenuitemrenderer.js", ["goog.ui.TriStateMenuItemRenderer"], ["goog.asserts", "goog.dom.classlist", "goog.ui.MenuItemRenderer"], false);
goog.addDependency("ui/twothumbslider.js", ["goog.ui.TwoThumbSlider"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.dom", "goog.dom.TagName", "goog.ui.SliderBase"], false);
goog.addDependency("ui/twothumbslider_test.js", ["goog.ui.TwoThumbSliderTest"], ["goog.testing.jsunit", "goog.ui.SliderBase", "goog.ui.TwoThumbSlider"], false);
goog.addDependency("ui/zippy.js", ["goog.ui.Zippy", "goog.ui.Zippy.Events", "goog.ui.ZippyEvent"], ["goog.a11y.aria", "goog.a11y.aria.Role", "goog.a11y.aria.State", "goog.dom", "goog.dom.classlist", "goog.events.Event", "goog.events.EventHandler", "goog.events.EventTarget", "goog.events.EventType", "goog.events.KeyCodes", "goog.style"], false);
goog.addDependency("ui/zippy_test.js", ["goog.ui.ZippyTest"], ["goog.a11y.aria", "goog.dom", "goog.dom.TagName", "goog.dom.classlist", "goog.events", "goog.object", "goog.testing.events", "goog.testing.jsunit", "goog.ui.Zippy"], false);
goog.addDependency("uri/uri.js", ["goog.Uri", "goog.Uri.QueryData"], ["goog.array", "goog.string", "goog.structs", "goog.structs.Map", "goog.uri.utils", "goog.uri.utils.ComponentIndex", "goog.uri.utils.StandardQueryParam"], false);
goog.addDependency("uri/uri_test.js", ["goog.UriTest"], ["goog.Uri", "goog.testing.jsunit"], false);
goog.addDependency("uri/utils.js", ["goog.uri.utils", "goog.uri.utils.ComponentIndex", "goog.uri.utils.QueryArray", "goog.uri.utils.QueryValue", "goog.uri.utils.StandardQueryParam"], ["goog.asserts", "goog.string", "goog.userAgent"], false);
goog.addDependency("uri/utils_test.js", ["goog.uri.utilsTest"], ["goog.functions", "goog.string", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.uri.utils"], false);
goog.addDependency("useragent/adobereader.js", ["goog.userAgent.adobeReader"], ["goog.string", "goog.userAgent"], false);
goog.addDependency("useragent/adobereader_test.js", ["goog.userAgent.adobeReaderTest"], ["goog.testing.jsunit", "goog.userAgent.adobeReader"], false);
goog.addDependency("useragent/flash.js", ["goog.userAgent.flash"], ["goog.string"], false);
goog.addDependency("useragent/flash_test.js", ["goog.userAgent.flashTest"], ["goog.testing.jsunit", "goog.userAgent.flash"], false);
goog.addDependency("useragent/iphoto.js", ["goog.userAgent.iphoto"], ["goog.string", "goog.userAgent"], false);
goog.addDependency("useragent/jscript.js", ["goog.userAgent.jscript"], ["goog.string"], false);
goog.addDependency("useragent/jscript_test.js", ["goog.userAgent.jscriptTest"], ["goog.testing.jsunit", "goog.userAgent.jscript"], false);
goog.addDependency("useragent/keyboard.js", ["goog.userAgent.keyboard"], ["goog.labs.userAgent.platform"], false);
goog.addDependency("useragent/keyboard_test.js", ["goog.userAgent.keyboardTest"], ["goog.labs.userAgent.testAgents", "goog.labs.userAgent.util", "goog.testing.MockUserAgent", "goog.testing.jsunit", "goog.userAgent.keyboard", "goog.userAgentTestUtil"], false);
goog.addDependency("useragent/platform.js", ["goog.userAgent.platform"], ["goog.string", "goog.userAgent"], false);
goog.addDependency("useragent/platform_test.js", ["goog.userAgent.platformTest"], ["goog.testing.MockUserAgent", "goog.testing.jsunit", "goog.userAgent", "goog.userAgent.platform", "goog.userAgentTestUtil"], false);
goog.addDependency("useragent/product.js", ["goog.userAgent.product"], ["goog.labs.userAgent.browser", "goog.labs.userAgent.platform", "goog.userAgent"], false);
goog.addDependency("useragent/product_isversion.js", ["goog.userAgent.product.isVersion"], ["goog.labs.userAgent.platform", "goog.string", "goog.userAgent", "goog.userAgent.product"], false);
goog.addDependency("useragent/product_test.js", ["goog.userAgent.productTest"], ["goog.array", "goog.labs.userAgent.testAgents", "goog.labs.userAgent.util", "goog.testing.MockUserAgent", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.userAgent", "goog.userAgent.product", "goog.userAgent.product.isVersion", "goog.userAgentTestUtil"], false);
goog.addDependency("useragent/useragent.js", ["goog.userAgent"], ["goog.labs.userAgent.browser", "goog.labs.userAgent.engine", "goog.labs.userAgent.platform", "goog.labs.userAgent.util", "goog.string"], false);
goog.addDependency("useragent/useragent_quirks_test.js", ["goog.userAgentQuirksTest"], ["goog.testing.jsunit", "goog.userAgent"], false);
goog.addDependency("useragent/useragent_test.js", ["goog.userAgentTest"], ["goog.array", "goog.labs.userAgent.platform", "goog.labs.userAgent.testAgents", "goog.labs.userAgent.util", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.userAgent", "goog.userAgentTestUtil"], false);
goog.addDependency("useragent/useragenttestutil.js", ["goog.userAgentTestUtil", "goog.userAgentTestUtil.UserAgents"], ["goog.labs.userAgent.browser", "goog.labs.userAgent.engine", "goog.labs.userAgent.platform", "goog.userAgent", "goog.userAgent.keyboard", "goog.userAgent.platform", "goog.userAgent.product", "goog.userAgent.product.isVersion"], false);
goog.addDependency("vec/float32array.js", ["goog.vec.Float32Array"], [], false);
goog.addDependency("vec/float64array.js", ["goog.vec.Float64Array"], [], false);
goog.addDependency("vec/mat3.js", ["goog.vec.Mat3"], ["goog.vec"], false);
goog.addDependency("vec/mat3d.js", ["goog.vec.mat3d", "goog.vec.mat3d.Type"], ["goog.vec"], false);
goog.addDependency("vec/mat3f.js", ["goog.vec.mat3f", "goog.vec.mat3f.Type"], ["goog.vec"], false);
goog.addDependency("vec/mat4.js", ["goog.vec.Mat4"], ["goog.vec", "goog.vec.Vec3", "goog.vec.Vec4"], false);
goog.addDependency("vec/mat4d.js", ["goog.vec.mat4d", "goog.vec.mat4d.Type"], ["goog.vec", "goog.vec.vec3d", "goog.vec.vec4d"], false);
goog.addDependency("vec/mat4f.js", ["goog.vec.mat4f", "goog.vec.mat4f.Type"], ["goog.vec", "goog.vec.vec3f", "goog.vec.vec4f"], false);
goog.addDependency("vec/matrix3.js", ["goog.vec.Matrix3"], [], false);
goog.addDependency("vec/matrix4.js", ["goog.vec.Matrix4"], ["goog.vec", "goog.vec.Vec3", "goog.vec.Vec4"], false);
goog.addDependency("vec/quaternion.js", ["goog.vec.Quaternion"], ["goog.vec", "goog.vec.Vec3", "goog.vec.Vec4"], false);
goog.addDependency("vec/ray.js", ["goog.vec.Ray"], ["goog.vec.Vec3"], false);
goog.addDependency("vec/vec.js", ["goog.vec", "goog.vec.AnyType", "goog.vec.ArrayType", "goog.vec.Float32", "goog.vec.Float64", "goog.vec.Number"], ["goog.vec.Float32Array", "goog.vec.Float64Array"], false);
goog.addDependency("vec/vec2.js", ["goog.vec.Vec2"], ["goog.vec"], false);
goog.addDependency("vec/vec2d.js", ["goog.vec.vec2d", "goog.vec.vec2d.Type"], ["goog.vec"], false);
goog.addDependency("vec/vec2f.js", ["goog.vec.vec2f", "goog.vec.vec2f.Type"], ["goog.vec"], false);
goog.addDependency("vec/vec3.js", ["goog.vec.Vec3"], ["goog.vec"], false);
goog.addDependency("vec/vec3d.js", ["goog.vec.vec3d", "goog.vec.vec3d.Type"], ["goog.vec"], false);
goog.addDependency("vec/vec3f.js", ["goog.vec.vec3f", "goog.vec.vec3f.Type"], ["goog.vec"], false);
goog.addDependency("vec/vec4.js", ["goog.vec.Vec4"], ["goog.vec"], false);
goog.addDependency("vec/vec4d.js", ["goog.vec.vec4d", "goog.vec.vec4d.Type"], ["goog.vec"], false);
goog.addDependency("vec/vec4f.js", ["goog.vec.vec4f", "goog.vec.vec4f.Type"], ["goog.vec"], false);
goog.addDependency("webgl/webgl.js", ["goog.webgl"], [], false);
goog.addDependency("window/window.js", ["goog.window"], ["goog.dom.TagName", "goog.dom.safe", "goog.html.SafeHtml", "goog.html.SafeUrl", "goog.html.uncheckedconversions", "goog.labs.userAgent.platform", "goog.string", "goog.string.Const", "goog.userAgent"], false);
goog.addDependency("window/window_test.js", ["goog.windowTest"], ["goog.Promise", "goog.dom", "goog.dom.TagName", "goog.events", "goog.functions", "goog.labs.userAgent.browser", "goog.labs.userAgent.engine", "goog.labs.userAgent.platform", "goog.string", "goog.testing.PropertyReplacer", "goog.testing.jsunit", "goog.window"], false);
goog.addDependency("base.js", ["goog"], []);
goog.addDependency("../cljs/core.js", ["cljs.core"], ["goog.string", "goog.object", "goog.string.StringBuffer", "goog.array"]);
goog.addDependency("../clojure/string.js", ["clojure.string"], ["goog.string", "cljs.core", "goog.string.StringBuffer"]);
goog.addDependency("../cljs/tools/reader/impl/utils.js", ["cljs.tools.reader.impl.utils"], ["goog.string", "cljs.core", "clojure.string"]);
goog.addDependency("../cljs/tools/reader/reader_types.js", ["cljs.tools.reader.reader_types"], ["goog.string", "cljs.core", "goog.string.StringBuffer", "cljs.tools.reader.impl.utils"]);
goog.addDependency("../cljs/tools/reader/impl/commons.js", ["cljs.tools.reader.impl.commons"], ["cljs.core", "cljs.tools.reader.reader_types", "cljs.tools.reader.impl.utils"]);
goog.addDependency("../cljs/tools/reader.js", ["cljs.tools.reader"], ["cljs.tools.reader.impl.commons", "goog.string", "cljs.core", "cljs.tools.reader.reader_types", "goog.string.StringBuffer", "cljs.tools.reader.impl.utils", "clojure.string", "goog.array"]);
goog.addDependency("../cljs/env.js", ["cljs.env"], ["cljs.core"]);
goog.addDependency("../clojure/set.js", ["clojure.set"], ["cljs.core"]);
goog.addDependency("../cljs/reader.js", ["cljs.reader"], ["goog.string", "cljs.core", "goog.string.StringBuffer"]);
goog.addDependency("../cljs/tagged_literals.js", ["cljs.tagged_literals"], ["cljs.core", "cljs.reader"]);
goog.addDependency("../cljs/analyzer.js", ["cljs.analyzer"], ["cljs.tools.reader", "goog.string", "cljs.core", "cljs.tools.reader.reader_types", "cljs.env", "clojure.set", "cljs.tagged_literals", "clojure.string", "cljs.reader"]);
goog.addDependency("../cljs/source_map/base64.js", ["cljs.source_map.base64"], ["cljs.core"]);
goog.addDependency("../cljs/source_map/base64_vlq.js", ["cljs.source_map.base64_vlq"], ["cljs.source_map.base64", "cljs.core", "goog.string.StringBuffer", "clojure.string"]);
goog.addDependency("../cljs/source_map.js", ["cljs.source_map"], ["cljs.source_map.base64_vlq", "cljs.core", "goog.object", "clojure.set", "clojure.string"]);
goog.addDependency("../cljs/compiler.js", ["cljs.compiler"], ["cljs.tools.reader", "goog.string", "cljs.core", "cljs.env", "goog.string.StringBuffer", "cljs.analyzer", "cljs.source_map", "clojure.string"]);
goog.addDependency("../clojure/walk.js", ["clojure.walk"], ["cljs.core"]);
goog.addDependency("../cljs/core$macros.js", ["cljs.core$macros"], ["cljs.compiler", "cljs.core", "cljs.env", "clojure.set", "cljs.analyzer", "clojure.walk"]);
goog.addDependency("../cljs/js.js", ["cljs.js"], ["cljs.compiler", "cljs.tools.reader", "cljs.core", "goog.crypt.base64", "cljs.tools.reader.reader_types", "cljs.env", "goog.string.StringBuffer", "cljs.tagged_literals", "cljs.analyzer", "cljs.source_map", "clojure.string", "cljs.core$macros"]);
goog.addDependency("../cljs_bootstrap/repl.js", ["cljs_bootstrap.repl"], ["cljs.js", "cljs.core", "cljs.analyzer", "cljs.reader"]);
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "<br />" : "<br>");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "&amp;").replace(goog.string.LT_RE_, "&lt;").replace(goog.string.GT_RE_, "&gt;").replace(goog.string.QUOT_RE_, "&quot;").replace(goog.string.SINGLE_QUOTE_RE_, "&#39;").replace(goog.string.NULL_RE_, "&#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "&#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("&") != -1) {
      str = str.replace(goog.string.AMP_RE_, "&amp;");
    }
    if (str.indexOf("<") != -1) {
      str = str.replace(goog.string.LT_RE_, "&lt;");
    }
    if (str.indexOf(">") != -1) {
      str = str.replace(goog.string.GT_RE_, "&gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "&quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "&#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "&#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "&#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "&")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "&")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"&amp;":"&", "&lt;":"<", "&gt;":">", "&quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "&";
      case "lt":
        return "<";
      case "gt":
        return ">";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " &#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = a[i] != b[j];
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge") || goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchIE_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchIE_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera", "OPR"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var edge = /Edge\/([\d\.]+)/.exec(userAgent);
  if (edge) {
    return edge[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = "", re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = "0.0";
    }
  } else {
    if (goog.labs.userAgent.platform.isIos()) {
      re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
      var match = re.exec(userAgentString);
      version = match && match[1].replace(/_/g, ".");
    } else {
      if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, ".") : "10";
      } else {
        if (goog.labs.userAgent.platform.isAndroid()) {
          re = /Android\s+([^\);]+)(\)|;)/;
          var match = re.exec(userAgentString);
          version = match && match[1];
        } else {
          if (goog.labs.userAgent.platform.isChromeOS()) {
            re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
            var match = re.exec(userAgentString);
            version = match && match[1];
          }
        }
      }
    }
  }
  return version || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return !!navigator && goog.string.contains(navigator["appVersion"] || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.determineVersion_ = function() {
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  var version = "";
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE && !goog.labs.userAgent.engine.isEdge()) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.IE && goog.labs.userAgent.engine.isEdge()) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    return /WebKit\/(\S+)/.exec(userAgent);
  }
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && (goog.labs.userAgent.engine.isEdge() || goog.userAgent.DOCUMENT_MODE >= documentMode);
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  var mode = goog.userAgent.getDocumentMode_();
  if (!doc || !goog.userAgent.IE || !mode && goog.labs.userAgent.engine.isEdge()) {
    return undefined;
  }
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.crypt.base64");
goog.require("goog.crypt");
goog.require("goog.userAgent");
goog.crypt.base64.byteToCharMap_ = null;
goog.crypt.base64.charToByteMap_ = null;
goog.crypt.base64.byteToCharMapWebSafe_ = null;
goog.crypt.base64.charToByteMapWebSafe_ = null;
goog.crypt.base64.ENCODED_VALS_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789";
goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.ENCODED_VALS_BASE + "+/=";
goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.ENCODED_VALS_BASE + "-_.";
goog.crypt.base64.HAS_NATIVE_SUPPORT = goog.userAgent.GECKO || goog.userAgent.WEBKIT || goog.userAgent.OPERA || typeof goog.global.atob == "function";
goog.crypt.base64.encodeByteArray = function(input, opt_webSafe) {
  if (!goog.isArrayLike(input)) {
    throw Error("encodeByteArray takes an array as a parameter");
  }
  goog.crypt.base64.init_();
  var byteToCharMap = opt_webSafe ? goog.crypt.base64.byteToCharMapWebSafe_ : goog.crypt.base64.byteToCharMap_;
  var output = [];
  for (var i = 0;i < input.length;i += 3) {
    var byte1 = input[i];
    var haveByte2 = i + 1 < input.length;
    var byte2 = haveByte2 ? input[i + 1] : 0;
    var haveByte3 = i + 2 < input.length;
    var byte3 = haveByte3 ? input[i + 2] : 0;
    var outByte1 = byte1 >> 2;
    var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
    var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
    var outByte4 = byte3 & 63;
    if (!haveByte3) {
      outByte4 = 64;
      if (!haveByte2) {
        outByte3 = 64;
      }
    }
    output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
  }
  return output.join("");
};
goog.crypt.base64.encodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.btoa(input);
  }
  return goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(input), opt_webSafe);
};
goog.crypt.base64.decodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.atob(input);
  }
  return goog.crypt.byteArrayToString(goog.crypt.base64.decodeStringToByteArray(input, opt_webSafe));
};
goog.crypt.base64.decodeStringToByteArray = function(input, opt_webSafe) {
  goog.crypt.base64.init_();
  var charToByteMap = opt_webSafe ? goog.crypt.base64.charToByteMapWebSafe_ : goog.crypt.base64.charToByteMap_;
  var output = [];
  for (var i = 0;i < input.length;) {
    var byte1 = charToByteMap[input.charAt(i++)];
    var haveByte2 = i < input.length;
    var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
    ++i;
    var haveByte3 = i < input.length;
    var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    var haveByte4 = i < input.length;
    var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
      throw Error();
    }
    var outByte1 = byte1 << 2 | byte2 >> 4;
    output.push(outByte1);
    if (byte3 != 64) {
      var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
      output.push(outByte2);
      if (byte4 != 64) {
        var outByte3 = byte3 << 6 & 192 | byte4;
        output.push(outByte3);
      }
    }
  }
  return output;
};
goog.crypt.base64.init_ = function() {
  if (!goog.crypt.base64.byteToCharMap_) {
    goog.crypt.base64.byteToCharMap_ = {};
    goog.crypt.base64.charToByteMap_ = {};
    goog.crypt.base64.byteToCharMapWebSafe_ = {};
    goog.crypt.base64.charToByteMapWebSafe_ = {};
    for (var i = 0;i < goog.crypt.base64.ENCODED_VALS.length;i++) {
      goog.crypt.base64.byteToCharMap_[i] = goog.crypt.base64.ENCODED_VALS.charAt(i);
      goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[i]] = i;
      goog.crypt.base64.byteToCharMapWebSafe_[i] = goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i);
      goog.crypt.base64.charToByteMapWebSafe_[goog.crypt.base64.byteToCharMapWebSafe_[i]] = i;
      if (i >= goog.crypt.base64.ENCODED_VALS_BASE.length) {
        goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
        goog.crypt.base64.charToByteMapWebSafe_[goog.crypt.base64.ENCODED_VALS.charAt(i)] = i;
      }
    }
  }
};
goog.provide("goog.crypt");
goog.require("goog.array");
goog.require("goog.asserts");
goog.crypt.stringToByteArray = function(str) {
  var output = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    while (c > 255) {
      output[p++] = c & 255;
      c >>= 8;
    }
    output[p++] = c;
  }
  return output;
};
goog.crypt.byteArrayToString = function(bytes) {
  var CHUNK_SIZE = 8192;
  if (bytes.length < CHUNK_SIZE) {
    return String.fromCharCode.apply(null, bytes);
  }
  var str = "";
  for (var i = 0;i < bytes.length;i += CHUNK_SIZE) {
    var chunk = goog.array.slice(bytes, i, i + CHUNK_SIZE);
    str += String.fromCharCode.apply(null, chunk);
  }
  return str;
};
goog.crypt.byteArrayToHex = function(array) {
  return goog.array.map(array, function(numByte) {
    var hexByte = numByte.toString(16);
    return hexByte.length > 1 ? hexByte : "0" + hexByte;
  }).join("");
};
goog.crypt.hexToByteArray = function(hexString) {
  goog.asserts.assert(hexString.length % 2 == 0, "Key string length must be multiple of 2");
  var arr = [];
  for (var i = 0;i < hexString.length;i += 2) {
    arr.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return arr;
};
goog.crypt.stringToUtf8ByteArray = function(str) {
  str = str.replace(/\r\n/g, "\n");
  var out = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else {
      if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else {
        out[p++] = c >> 12 | 224;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      }
    }
  }
  return out;
};
goog.crypt.utf8ByteArrayToString = function(bytes) {
  var out = [], pos = 0, c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else {
      if (c1 > 191 && c1 < 224) {
        var c2 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
      } else {
        var c2 = bytes[pos++];
        var c3 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
      }
    }
  }
  return out.join("");
};
goog.crypt.xorByteArray = function(bytes1, bytes2) {
  goog.asserts.assert(bytes1.length == bytes2.length, "XOR array lengths must match");
  var result = [];
  for (var i = 0;i < bytes1.length;i++) {
    result.push(bytes1[i] ^ bytes2[i]);
  }
  return result;
};
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3619";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
cljs.core._STAR_ns_STAR_ = null;
cljs.core._STAR_out_STAR_ = null;
cljs.core._STAR_assert_STAR_ = true;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
if (typeof cljs.core._STAR_print_err_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_err_fn_STAR_ = function cljs$core$_STAR_print_err_fn_STAR_(_) {
    throw new Error("No *print-err-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core.set_print_err_fn_BANG_ = function cljs$core$set_print_err_fn_BANG_(f) {
  return cljs.core._STAR_print_err_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var G__6224__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__6224 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__6225__i = 0, G__6225__a = new Array(arguments.length - 0);
        while (G__6225__i < G__6225__a.length) {
          G__6225__a[G__6225__i] = arguments[G__6225__i + 0];
          ++G__6225__i;
        }
        args = new cljs.core.IndexedSeq(G__6225__a, 0);
      }
      return G__6224__delegate.call(this, args);
    };
    G__6224.cljs$lang$maxFixedArity = 0;
    G__6224.cljs$lang$applyTo = function(arglist__6226) {
      var args = cljs.core.seq(arglist__6226);
      return G__6224__delegate(args);
    };
    G__6224.cljs$core$IFn$_invoke$arity$variadic = G__6224__delegate;
    return G__6224;
  }();
  cljs.core._STAR_print_err_fn_STAR_ = function() {
    var G__6227__delegate = function(args) {
      return console.error.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__6227 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__6228__i = 0, G__6228__a = new Array(arguments.length - 0);
        while (G__6228__i < G__6228__a.length) {
          G__6228__a[G__6228__i] = arguments[G__6228__i + 0];
          ++G__6228__i;
        }
        args = new cljs.core.IndexedSeq(G__6228__a, 0);
      }
      return G__6227__delegate.call(this, args);
    };
    G__6227.cljs$lang$maxFixedArity = 0;
    G__6227.cljs$lang$applyTo = function(arglist__6229) {
      var args = cljs.core.seq(arglist__6229);
      return G__6227__delegate(args);
    };
    G__6227.cljs$core$IFn$_invoke$arity$variadic = G__6227__delegate;
    return G__6227;
  }();
  return null;
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (x == null) {
    return true;
  } else {
    if (x === false) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.char_QMARK_ = function cljs$core$char_QMARK_(x) {
  return goog.string.isUnicodeChar(x);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4016__auto__ = ty;
    if (cljs.core.truth_(and__4016__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4016__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4423__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4423__auto__)) {
    var s = temp__4423__auto__;
    return s;
  } else {
    return [cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "=":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "&":"_AMPERSAND_", ":":"_COLON_", "<":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", ">":"_GT_"};
cljs.core.DEMUNGE_MAP = {"_RBRACE_":"}", "_COLON_":":", "_BANG_":"!", "_QMARK_":"?", "_BSLASH_":"\\\\", "_SLASH_":"/", "_PERCENT_":"%", "_PLUS_":"+", "_SHARP_":"#", "_LBRACE_":"{", "_BAR_":"|", "_LBRACK_":"[", "_EQ_":"=", "_":"-", "_TILDE_":"~", "_RBRACK_":"]", "_GT_":">", "_SINGLEQUOTE_":"'", "_CIRCA_":"@", "_AMPERSAND_":"&", "_DOUBLEQUOTE_":'\\"', "_CARET_":"^", "_LT_":"<", "_STAR_":"*"};
cljs.core.DEMUNGE_PATTERN = null;
cljs.core.make_array = function cljs$core$make_array() {
  var args6230 = [];
  var len__5067__auto___6233 = arguments.length;
  var i__5068__auto___6234 = 0;
  while (true) {
    if (i__5068__auto___6234 < len__5067__auto___6233) {
      args6230.push(arguments[i__5068__auto___6234]);
      var G__6235 = i__5068__auto___6234 + 1;
      i__5068__auto___6234 = G__6235;
      continue;
    } else {
    }
    break;
  }
  var G__6232 = args6230.length;
  switch(G__6232) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6230.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4912__auto___6237 = len;
  var i_6238 = 0;
  while (true) {
    if (i_6238 < n__4912__auto___6237) {
      new_arr[i_6238] = arr[i_6238];
      var G__6239 = i_6238 + 1;
      i_6238 = G__6239;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__6240 = i + 1;
      i = G__6240;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget() {
  var args6241 = [];
  var len__5067__auto___6250 = arguments.length;
  var i__5068__auto___6251 = 0;
  while (true) {
    if (i__5068__auto___6251 < len__5067__auto___6250) {
      args6241.push(arguments[i__5068__auto___6251]);
      var G__6252 = i__5068__auto___6251 + 1;
      i__5068__auto___6251 = G__6252;
      continue;
    } else {
    }
    break;
  }
  var G__6246 = args6241.length;
  switch(G__6246) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6241.slice(2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__6247 = cljs.core.aget;
  var G__6248 = array[i];
  var G__6249 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__6247, G__6248, G__6249) : cljs.core.apply.call(null, G__6247, G__6248, G__6249);
};
cljs.core.aget.cljs$lang$applyTo = function(seq6242) {
  var G__6243 = cljs.core.first(seq6242);
  var seq6242__$1 = cljs.core.next(seq6242);
  var G__6244 = cljs.core.first(seq6242__$1);
  var seq6242__$2 = cljs.core.next(seq6242__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__6243, G__6244, seq6242__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset() {
  var args6254 = [];
  var len__5067__auto___6265 = arguments.length;
  var i__5068__auto___6266 = 0;
  while (true) {
    if (i__5068__auto___6266 < len__5067__auto___6265) {
      args6254.push(arguments[i__5068__auto___6266]);
      var G__6267 = i__5068__auto___6266 + 1;
      i__5068__auto___6266 = G__6267;
      continue;
    } else {
    }
    break;
  }
  var G__6260 = args6254.length;
  switch(G__6260) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6254.slice(3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5086__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__6261 = cljs.core.aset;
  var G__6262 = array[idx];
  var G__6263 = idx2;
  var G__6264 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__6261, G__6262, G__6263, G__6264) : cljs.core.apply.call(null, G__6261, G__6262, G__6263, G__6264);
};
cljs.core.aset.cljs$lang$applyTo = function(seq6255) {
  var G__6256 = cljs.core.first(seq6255);
  var seq6255__$1 = cljs.core.next(seq6255);
  var G__6257 = cljs.core.first(seq6255__$1);
  var seq6255__$2 = cljs.core.next(seq6255__$1);
  var G__6258 = cljs.core.first(seq6255__$2);
  var seq6255__$3 = cljs.core.next(seq6255__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__6256, G__6257, G__6258, seq6255__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array() {
  var args6269 = [];
  var len__5067__auto___6275 = arguments.length;
  var i__5068__auto___6276 = 0;
  while (true) {
    if (i__5068__auto___6276 < len__5067__auto___6275) {
      args6269.push(arguments[i__5068__auto___6276]);
      var G__6277 = i__5068__auto___6276 + 1;
      i__5068__auto___6276 = G__6277;
      continue;
    } else {
    }
    break;
  }
  var G__6271 = args6269.length;
  switch(G__6271) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6269.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__6272 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__6273 = [];
  var G__6274 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__6272, G__6273, G__6274) : cljs.core.reduce.call(null, G__6272, G__6273, G__6274);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke() {
  var args__5074__auto__ = [];
  var len__5067__auto___6282 = arguments.length;
  var i__5068__auto___6283 = 0;
  while (true) {
    if (i__5068__auto___6283 < len__5067__auto___6282) {
      args__5074__auto__.push(arguments[i__5068__auto___6283]);
      var G__6284 = i__5068__auto___6283 + 1;
      i__5068__auto___6283 = G__6284;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 2 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5075__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq6279) {
  var G__6280 = cljs.core.first(seq6279);
  var seq6279__$1 = cljs.core.next(seq6279);
  var G__6281 = cljs.core.first(seq6279__$1);
  var seq6279__$2 = cljs.core.next(seq6279__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__6280, G__6281, seq6279__$2);
};
cljs.core.Fn = {};
cljs.core.IFn = {};
cljs.core._invoke = function cljs$core$_invoke() {
  var args6289 = [];
  var len__5067__auto___6292 = arguments.length;
  var i__5068__auto___6293 = 0;
  while (true) {
    if (i__5068__auto___6293 < len__5067__auto___6292) {
      args6289.push(arguments[i__5068__auto___6293]);
      var G__6294 = i__5068__auto___6293 + 1;
      i__5068__auto___6293 = G__6294;
      continue;
    } else {
    }
    break;
  }
  var G__6291 = args6289.length;
  switch(G__6291) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6289.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$1 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4665__auto__.call(null, this$);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(this$) : m__4665__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$2 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__4665__auto__.call(null, this$, a);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, a) : m__4665__auto____$1.call(null, this$, a);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$3 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__4665__auto__.call(null, this$, a, b);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__4665__auto____$1.call(null, this$, a, b);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$4 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$4 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__4665__auto__.call(null, this$, a, b, c);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__4665__auto____$1.call(null, this$, a, b, c);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$5 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$5 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__4665__auto__.call(null, this$, a, b, c, d);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__4665__auto____$1.call(null, this$, a, b, c, d);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$6 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$6 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__4665__auto__.call(null, this$, a, b, c, d, e);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$6 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__4665__auto____$1.call(null, this$, a, b, c, d, e);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$7 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$7 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__4665__auto__.call(null, this$, a, b, c, d, e, f);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$7 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$8 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$8 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$8 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$9 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$9 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$9 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$10 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$10 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$10 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$11 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$11 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$11 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$12 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$12 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$12 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$13 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$13 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$13 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$14 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$14 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$14 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$15 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$15 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$15 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$16 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$16 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$16 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$17 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$17 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$17 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$18 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$18 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$18 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$19 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$19 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$19 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$20 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$20 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$20 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$21 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$21 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$21 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$22 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._invoke[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$22 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__4665__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var m__4665__auto____$1 = cljs.core._invoke["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$22 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__4665__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = {};
cljs.core._clone = function cljs$core$_clone(value) {
  if (!(value == null) && !(value.cljs$core$ICloneable$_clone$arity$1 == null)) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4664__auto__ = value == null ? null : value;
    var m__4665__auto__ = cljs.core._clone[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__4665__auto__.call(null, value);
    } else {
      var m__4665__auto____$1 = cljs.core._clone["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(value) : m__4665__auto____$1.call(null, value);
      } else {
        throw cljs.core.missing_protocol("ICloneable.-clone", value);
      }
    }
  }
};
cljs.core.ICounted = {};
cljs.core._count = function cljs$core$_count(coll) {
  if (!(coll == null) && !(coll.cljs$core$ICounted$_count$arity$1 == null)) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._count[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._count["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ICounted.-count", coll);
      }
    }
  }
};
cljs.core.IEmptyableCollection = {};
cljs.core._empty = function cljs$core$_empty(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._empty[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._empty["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
      }
    }
  }
};
cljs.core.ICollection = {};
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (!(coll == null) && !(coll.cljs$core$ICollection$_conj$arity$2 == null)) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._conj[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__4665__auto__.call(null, coll, o);
    } else {
      var m__4665__auto____$1 = cljs.core._conj["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, o) : m__4665__auto____$1.call(null, coll, o);
      } else {
        throw cljs.core.missing_protocol("ICollection.-conj", coll);
      }
    }
  }
};
cljs.core.IIndexed = {};
cljs.core._nth = function cljs$core$_nth() {
  var args6306 = [];
  var len__5067__auto___6309 = arguments.length;
  var i__5068__auto___6310 = 0;
  while (true) {
    if (i__5068__auto___6310 < len__5067__auto___6309) {
      args6306.push(arguments[i__5068__auto___6310]);
      var G__6311 = i__5068__auto___6310 + 1;
      i__5068__auto___6310 = G__6311;
      continue;
    } else {
    }
    break;
  }
  var G__6308 = args6306.length;
  switch(G__6308) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6306.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$2 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._nth[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__4665__auto__.call(null, coll, n);
    } else {
      var m__4665__auto____$1 = cljs.core._nth["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, n) : m__4665__auto____$1.call(null, coll, n);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$3 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._nth[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__4665__auto__.call(null, coll, n, not_found);
    } else {
      var m__4665__auto____$1 = cljs.core._nth["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__4665__auto____$1.call(null, coll, n, not_found);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = {};
cljs.core.ISeq = {};
cljs.core._first = function cljs$core$_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_first$arity$1 == null)) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._first[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._first["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-first", coll);
      }
    }
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_rest$arity$1 == null)) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._rest[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._rest["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-rest", coll);
      }
    }
  }
};
cljs.core.INext = {};
cljs.core._next = function cljs$core$_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$INext$_next$arity$1 == null)) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._next[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._next["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("INext.-next", coll);
      }
    }
  }
};
cljs.core.ILookup = {};
cljs.core._lookup = function cljs$core$_lookup() {
  var args6321 = [];
  var len__5067__auto___6324 = arguments.length;
  var i__5068__auto___6325 = 0;
  while (true) {
    if (i__5068__auto___6325 < len__5067__auto___6324) {
      args6321.push(arguments[i__5068__auto___6325]);
      var G__6326 = i__5068__auto___6325 + 1;
      i__5068__auto___6325 = G__6326;
      continue;
    } else {
    }
    break;
  }
  var G__6323 = args6321.length;
  switch(G__6323) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6321.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$2 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._lookup[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__4665__auto__.call(null, o, k);
    } else {
      var m__4665__auto____$1 = cljs.core._lookup["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(o, k) : m__4665__auto____$1.call(null, o, k);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$3 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._lookup[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__4665__auto__.call(null, o, k, not_found);
    } else {
      var m__4665__auto____$1 = cljs.core._lookup["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__4665__auto____$1.call(null, o, k, not_found);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = {};
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4665__auto__.call(null, coll, k);
    } else {
      var m__4665__auto____$1 = cljs.core._contains_key_QMARK_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4665__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
      }
    }
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_assoc$arity$3 == null)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._assoc[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__4665__auto__.call(null, coll, k, v);
    } else {
      var m__4665__auto____$1 = cljs.core._assoc["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__4665__auto____$1.call(null, coll, k, v);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
      }
    }
  }
};
cljs.core.IMap = {};
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IMap$_dissoc$arity$2 == null)) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._dissoc[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4665__auto__.call(null, coll, k);
    } else {
      var m__4665__auto____$1 = cljs.core._dissoc["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4665__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IMap.-dissoc", coll);
      }
    }
  }
};
cljs.core.IMapEntry = {};
cljs.core._key = function cljs$core$_key(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_key$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._key[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._key["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-key", coll);
      }
    }
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_val$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._val[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._val["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-val", coll);
      }
    }
  }
};
cljs.core.ISet = {};
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (!(coll == null) && !(coll.cljs$core$ISet$_disjoin$arity$2 == null)) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._disjoin[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__4665__auto__.call(null, coll, v);
    } else {
      var m__4665__auto____$1 = cljs.core._disjoin["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, v) : m__4665__auto____$1.call(null, coll, v);
      } else {
        throw cljs.core.missing_protocol("ISet.-disjoin", coll);
      }
    }
  }
};
cljs.core.IStack = {};
cljs.core._peek = function cljs$core$_peek(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_peek$arity$1 == null)) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._peek[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._peek["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-peek", coll);
      }
    }
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_pop$arity$1 == null)) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._pop[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._pop["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-pop", coll);
      }
    }
  }
};
cljs.core.IVector = {};
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (!(coll == null) && !(coll.cljs$core$IVector$_assoc_n$arity$3 == null)) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._assoc_n[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__4665__auto__.call(null, coll, n, val);
    } else {
      var m__4665__auto____$1 = cljs.core._assoc_n["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__4665__auto____$1.call(null, coll, n, val);
      } else {
        throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
      }
    }
  }
};
cljs.core.IDeref = {};
cljs.core._deref = function cljs$core$_deref(o) {
  if (!(o == null) && !(o.cljs$core$IDeref$_deref$arity$1 == null)) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._deref[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4665__auto__.call(null, o);
    } else {
      var m__4665__auto____$1 = cljs.core._deref["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__4665__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IDeref.-deref", o);
      }
    }
  }
};
cljs.core.IDerefWithTimeout = {};
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (!(o == null) && !(o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__4665__auto__.call(null, o, msec, timeout_val);
    } else {
      var m__4665__auto____$1 = cljs.core._deref_with_timeout["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__4665__auto____$1.call(null, o, msec, timeout_val);
      } else {
        throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
      }
    }
  }
};
cljs.core.IMeta = {};
cljs.core._meta = function cljs$core$_meta(o) {
  if (!(o == null) && !(o.cljs$core$IMeta$_meta$arity$1 == null)) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._meta[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4665__auto__.call(null, o);
    } else {
      var m__4665__auto____$1 = cljs.core._meta["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__4665__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IMeta.-meta", o);
      }
    }
  }
};
cljs.core.IWithMeta = {};
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (!(o == null) && !(o.cljs$core$IWithMeta$_with_meta$arity$2 == null)) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._with_meta[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__4665__auto__.call(null, o, meta);
    } else {
      var m__4665__auto____$1 = cljs.core._with_meta["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(o, meta) : m__4665__auto____$1.call(null, o, meta);
      } else {
        throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
      }
    }
  }
};
cljs.core.IReduce = {};
cljs.core._reduce = function cljs$core$_reduce() {
  var args6350 = [];
  var len__5067__auto___6353 = arguments.length;
  var i__5068__auto___6354 = 0;
  while (true) {
    if (i__5068__auto___6354 < len__5067__auto___6353) {
      args6350.push(arguments[i__5068__auto___6354]);
      var G__6355 = i__5068__auto___6354 + 1;
      i__5068__auto___6354 = G__6355;
      continue;
    } else {
    }
    break;
  }
  var G__6352 = args6350.length;
  switch(G__6352) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6350.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$2 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._reduce[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__4665__auto__.call(null, coll, f);
    } else {
      var m__4665__auto____$1 = cljs.core._reduce["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, f) : m__4665__auto____$1.call(null, coll, f);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$3 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._reduce[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__4665__auto__.call(null, coll, f, start);
    } else {
      var m__4665__auto____$1 = cljs.core._reduce["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__4665__auto____$1.call(null, coll, f, start);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = {};
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (!(coll == null) && !(coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__4665__auto__.call(null, coll, f, init);
    } else {
      var m__4665__auto____$1 = cljs.core._kv_reduce["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__4665__auto____$1.call(null, coll, f, init);
      } else {
        throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
      }
    }
  }
};
cljs.core.IEquiv = {};
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (!(o == null) && !(o.cljs$core$IEquiv$_equiv$arity$2 == null)) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._equiv[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__4665__auto__.call(null, o, other);
    } else {
      var m__4665__auto____$1 = cljs.core._equiv["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(o, other) : m__4665__auto____$1.call(null, o, other);
      } else {
        throw cljs.core.missing_protocol("IEquiv.-equiv", o);
      }
    }
  }
};
cljs.core.IHash = {};
cljs.core._hash = function cljs$core$_hash(o) {
  if (!(o == null) && !(o.cljs$core$IHash$_hash$arity$1 == null)) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._hash[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4665__auto__.call(null, o);
    } else {
      var m__4665__auto____$1 = cljs.core._hash["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__4665__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IHash.-hash", o);
      }
    }
  }
};
cljs.core.ISeqable = {};
cljs.core._seq = function cljs$core$_seq(o) {
  if (!(o == null) && !(o.cljs$core$ISeqable$_seq$arity$1 == null)) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._seq[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4665__auto__.call(null, o);
    } else {
      var m__4665__auto____$1 = cljs.core._seq["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__4665__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("ISeqable.-seq", o);
      }
    }
  }
};
cljs.core.ISequential = {};
cljs.core.IList = {};
cljs.core.IRecord = {};
cljs.core.IReversible = {};
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (!(coll == null) && !(coll.cljs$core$IReversible$_rseq$arity$1 == null)) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._rseq[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._rseq["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IReversible.-rseq", coll);
      }
    }
  }
};
cljs.core.ISorted = {};
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__4665__auto__.call(null, coll, ascending_QMARK_);
    } else {
      var m__4665__auto____$1 = cljs.core._sorted_seq["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__4665__auto____$1.call(null, coll, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
      }
    }
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__4665__auto__.call(null, coll, k, ascending_QMARK_);
    } else {
      var m__4665__auto____$1 = cljs.core._sorted_seq_from["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__4665__auto____$1.call(null, coll, k, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
      }
    }
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_entry_key$arity$2 == null)) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._entry_key[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__4665__auto__.call(null, coll, entry);
    } else {
      var m__4665__auto____$1 = cljs.core._entry_key["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__4665__auto____$1.call(null, coll, entry);
      } else {
        throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
      }
    }
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_comparator$arity$1 == null)) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._comparator[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._comparator["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISorted.-comparator", coll);
      }
    }
  }
};
cljs.core.IWriter = {};
cljs.core._write = function cljs$core$_write(writer, s) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_write$arity$2 == null)) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4664__auto__ = writer == null ? null : writer;
    var m__4665__auto__ = cljs.core._write[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__4665__auto__.call(null, writer, s);
    } else {
      var m__4665__auto____$1 = cljs.core._write["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(writer, s) : m__4665__auto____$1.call(null, writer, s);
      } else {
        throw cljs.core.missing_protocol("IWriter.-write", writer);
      }
    }
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_flush$arity$1 == null)) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4664__auto__ = writer == null ? null : writer;
    var m__4665__auto__ = cljs.core._flush[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__4665__auto__.call(null, writer);
    } else {
      var m__4665__auto____$1 = cljs.core._flush["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(writer) : m__4665__auto____$1.call(null, writer);
      } else {
        throw cljs.core.missing_protocol("IWriter.-flush", writer);
      }
    }
  }
};
cljs.core.IPrintWithWriter = {};
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (!(o == null) && !(o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._pr_writer[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__4665__auto__.call(null, o, writer, opts);
    } else {
      var m__4665__auto____$1 = cljs.core._pr_writer["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__4665__auto____$1.call(null, o, writer, opts);
      } else {
        throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
      }
    }
  }
};
cljs.core.IPending = {};
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (!(d == null) && !(d.cljs$core$IPending$_realized_QMARK_$arity$1 == null)) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4664__auto__ = d == null ? null : d;
    var m__4665__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(d) : m__4665__auto__.call(null, d);
    } else {
      var m__4665__auto____$1 = cljs.core._realized_QMARK_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(d) : m__4665__auto____$1.call(null, d);
      } else {
        throw cljs.core.missing_protocol("IPending.-realized?", d);
      }
    }
  }
};
cljs.core.IWatchable = {};
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._notify_watches[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__4665__auto__.call(null, this$, oldval, newval);
    } else {
      var m__4665__auto____$1 = cljs.core._notify_watches["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__4665__auto____$1.call(null, this$, oldval, newval);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
      }
    }
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_add_watch$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._add_watch[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__4665__auto__.call(null, this$, key, f);
    } else {
      var m__4665__auto____$1 = cljs.core._add_watch["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__4665__auto____$1.call(null, this$, key, f);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
      }
    }
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4664__auto__ = this$ == null ? null : this$;
    var m__4665__auto__ = cljs.core._remove_watch[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__4665__auto__.call(null, this$, key);
    } else {
      var m__4665__auto____$1 = cljs.core._remove_watch["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, key) : m__4665__auto____$1.call(null, this$, key);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
      }
    }
  }
};
cljs.core.IEditableCollection = {};
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._as_transient[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._as_transient["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
      }
    }
  }
};
cljs.core.ITransientCollection = {};
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4664__auto__ = tcoll == null ? null : tcoll;
    var m__4665__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__4665__auto__.call(null, tcoll, val);
    } else {
      var m__4665__auto____$1 = cljs.core._conj_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__4665__auto____$1.call(null, tcoll, val);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
      }
    }
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4664__auto__ = tcoll == null ? null : tcoll;
    var m__4665__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4665__auto__.call(null, tcoll);
    } else {
      var m__4665__auto____$1 = cljs.core._persistent_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4665__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
      }
    }
  }
};
cljs.core.ITransientAssociative = {};
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4664__auto__ = tcoll == null ? null : tcoll;
    var m__4665__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__4665__auto__.call(null, tcoll, key, val);
    } else {
      var m__4665__auto____$1 = cljs.core._assoc_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__4665__auto____$1.call(null, tcoll, key, val);
      } else {
        throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientMap = {};
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4664__auto__ = tcoll == null ? null : tcoll;
    var m__4665__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__4665__auto__.call(null, tcoll, key);
    } else {
      var m__4665__auto____$1 = cljs.core._dissoc_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__4665__auto____$1.call(null, tcoll, key);
      } else {
        throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientVector = {};
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4664__auto__ = tcoll == null ? null : tcoll;
    var m__4665__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__4665__auto__.call(null, tcoll, n, val);
    } else {
      var m__4665__auto____$1 = cljs.core._assoc_n_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__4665__auto____$1.call(null, tcoll, n, val);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
      }
    }
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4664__auto__ = tcoll == null ? null : tcoll;
    var m__4665__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4665__auto__.call(null, tcoll);
    } else {
      var m__4665__auto____$1 = cljs.core._pop_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4665__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
      }
    }
  }
};
cljs.core.ITransientSet = {};
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4664__auto__ = tcoll == null ? null : tcoll;
    var m__4665__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__4665__auto__.call(null, tcoll, v);
    } else {
      var m__4665__auto____$1 = cljs.core._disjoin_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__4665__auto____$1.call(null, tcoll, v);
      } else {
        throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
      }
    }
  }
};
cljs.core.IComparable = {};
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (!(x == null) && !(x.cljs$core$IComparable$_compare$arity$2 == null)) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4664__auto__ = x == null ? null : x;
    var m__4665__auto__ = cljs.core._compare[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__4665__auto__.call(null, x, y);
    } else {
      var m__4665__auto____$1 = cljs.core._compare["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(x, y) : m__4665__auto____$1.call(null, x, y);
      } else {
        throw cljs.core.missing_protocol("IComparable.-compare", x);
      }
    }
  }
};
cljs.core.IChunk = {};
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunk$_drop_first$arity$1 == null)) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._drop_first[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._drop_first["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
      }
    }
  }
};
cljs.core.IChunkedSeq = {};
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._chunked_first[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._chunked_first["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
      }
    }
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._chunked_rest["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
      }
    }
  }
};
cljs.core.IChunkedNext = {};
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._chunked_next[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._chunked_next["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
      }
    }
  }
};
cljs.core.INamed = {};
cljs.core._name = function cljs$core$_name(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_name$arity$1 == null)) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4664__auto__ = x == null ? null : x;
    var m__4665__auto__ = cljs.core._name[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4665__auto__.call(null, x);
    } else {
      var m__4665__auto____$1 = cljs.core._name["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__4665__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-name", x);
      }
    }
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_namespace$arity$1 == null)) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4664__auto__ = x == null ? null : x;
    var m__4665__auto__ = cljs.core._namespace[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4665__auto__.call(null, x);
    } else {
      var m__4665__auto____$1 = cljs.core._namespace["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__4665__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-namespace", x);
      }
    }
  }
};
cljs.core.IAtom = {};
cljs.core.IReset = {};
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IReset$_reset_BANG_$arity$2 == null)) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4665__auto__.call(null, o, new_value);
    } else {
      var m__4665__auto____$1 = cljs.core._reset_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4665__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IReset.-reset!", o);
      }
    }
  }
};
cljs.core.ISwap = {};
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_() {
  var args6411 = [];
  var len__5067__auto___6414 = arguments.length;
  var i__5068__auto___6415 = 0;
  while (true) {
    if (i__5068__auto___6415 < len__5067__auto___6414) {
      args6411.push(arguments[i__5068__auto___6415]);
      var G__6416 = i__5068__auto___6415 + 1;
      i__5068__auto___6415 = G__6416;
      continue;
    } else {
    }
    break;
  }
  var G__6413 = args6411.length;
  switch(G__6413) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6411.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__4665__auto__.call(null, o, f);
    } else {
      var m__4665__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(o, f) : m__4665__auto____$1.call(null, o, f);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__4665__auto__.call(null, o, f, a);
    } else {
      var m__4665__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__4665__auto____$1.call(null, o, f, a);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$4 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__4665__auto__.call(null, o, f, a, b);
    } else {
      var m__4665__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__4665__auto____$1.call(null, o, f, a, b);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$5 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__4665__auto__.call(null, o, f, a, b, xs);
    } else {
      var m__4665__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__4665__auto____$1.call(null, o, f, a, b, xs);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = {};
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4664__auto__ = o == null ? null : o;
    var m__4665__auto__ = cljs.core._vreset_BANG_[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4665__auto__.call(null, o, new_value);
    } else {
      var m__4665__auto____$1 = cljs.core._vreset_BANG_["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4665__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
      }
    }
  }
};
cljs.core.IIterable = {};
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (!(coll == null) && !(coll.cljs$core$IIterable$_iterator$arity$1 == null)) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4664__auto__ = coll == null ? null : coll;
    var m__4665__auto__ = cljs.core._iterator[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto__.call(null, coll);
    } else {
      var m__4665__auto____$1 = cljs.core._iterator["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__4665__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IIterable.-iterator", coll);
      }
    }
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul(4294967295, 5) === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__6422 = i + 2;
        var G__6423 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__6422;
        h1 = G__6423;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__6426 = i + 1;
          var G__6427 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__6426;
          hash = G__6427;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 4194304 || o.cljs$core$IHash$ ? true : false : false) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4016__auto__ = cljs.core.not(a.ns);
      if (and__4016__auto__) {
        return b.ns;
      } else {
        return and__4016__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__6440 = a.ns;
            var G__6441 = b.ns;
            return goog.array.defaultCompare(G__6440, G__6441);
          }();
          if (0 === nsc) {
            var G__6442 = a.name;
            var G__6443 = b.name;
            return goog.array.defaultCompare(G__6442, G__6443);
          } else {
            return nsc;
          }
        }
      } else {
        var G__6444 = a.name;
        var G__6445 = b.name;
        return goog.array.defaultCompare(G__6444, G__6445);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__6447 = null;
  var G__6447__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
  };
  var G__6447__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
  };
  G__6447 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6447__2.call(this, self__, coll);
      case 3:
        return G__6447__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6447.cljs$core$IFn$_invoke$arity$2 = G__6447__2;
  G__6447.cljs$core$IFn$_invoke$arity$3 = G__6447__3;
  return G__6447;
}();
cljs.core.Symbol.prototype.apply = function(self__, args6446) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6446)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4444__auto__ = self__._hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, 
  "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol() {
  var args6448 = [];
  var len__5067__auto___6451 = arguments.length;
  var i__5068__auto___6452 = 0;
  while (true) {
    if (i__5068__auto___6452 < len__5067__auto___6451) {
      args6448.push(arguments[i__5068__auto___6452]);
      var G__6453 = i__5068__auto___6452 + 1;
      i__5068__auto___6452 = G__6453;
      continue;
    } else {
    }
    break;
  }
  var G__6450 = args6448.length;
  switch(G__6450) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6448.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    var idx = name.indexOf("/");
    if (idx === -1) {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    } else {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
    }
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2523137;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.isMacro = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Var(self__.val, self__.sym, new_meta);
};
cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  if (other instanceof cljs.core.Var) {
    var G__6456 = this$__$1.sym;
    var G__6457 = other.sym;
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(G__6456, G__6457) : cljs.core._EQ_.call(null, G__6456, G__6457);
  } else {
    return false;
  }
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__6502 = null;
  var G__6502__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
  };
  var G__6502__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
  };
  var G__6502__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
  };
  var G__6502__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
  };
  var G__6502__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
  };
  var G__6502__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
  };
  var G__6502__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
  };
  var G__6502__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
  };
  var G__6502__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
  };
  var G__6502__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__6502__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__6502__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__6502__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__6502__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__6502__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__6502__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__6502__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__6502__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__6502__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__6502__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__6502__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__6502__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6458 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    var G__6459 = a;
    var G__6460 = b;
    var G__6461 = c;
    var G__6462 = d;
    var G__6463 = e;
    var G__6464 = f;
    var G__6465 = g;
    var G__6466 = h;
    var G__6467 = i;
    var G__6468 = j;
    var G__6469 = k;
    var G__6470 = l;
    var G__6471 = m;
    var G__6472 = n;
    var G__6473 = o;
    var G__6474 = p;
    var G__6475 = q;
    var G__6476 = r;
    var G__6477 = s;
    var G__6478 = t;
    var G__6479 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6458, G__6459, G__6460, G__6461, G__6462, G__6463, G__6464, G__6465, G__6466, G__6467, G__6468, G__6469, G__6470, G__6471, G__6472, G__6473, G__6474, G__6475, G__6476, G__6477, G__6478, G__6479) : cljs.core.apply.call(null, G__6458, G__6459, G__6460, G__6461, G__6462, G__6463, G__6464, G__6465, G__6466, G__6467, G__6468, G__6469, G__6470, G__6471, G__6472, G__6473, G__6474, G__6475, G__6476, 
    G__6477, G__6478, G__6479);
  };
  G__6502 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6502__1.call(this, self__);
      case 2:
        return G__6502__2.call(this, self__, a);
      case 3:
        return G__6502__3.call(this, self__, a, b);
      case 4:
        return G__6502__4.call(this, self__, a, b, c);
      case 5:
        return G__6502__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6502__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6502__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6502__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6502__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6502__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6502__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6502__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6502__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6502__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6502__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6502__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6502__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6502__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6502__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6502__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6502__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6502__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6502.cljs$core$IFn$_invoke$arity$1 = G__6502__1;
  G__6502.cljs$core$IFn$_invoke$arity$2 = G__6502__2;
  G__6502.cljs$core$IFn$_invoke$arity$3 = G__6502__3;
  G__6502.cljs$core$IFn$_invoke$arity$4 = G__6502__4;
  G__6502.cljs$core$IFn$_invoke$arity$5 = G__6502__5;
  G__6502.cljs$core$IFn$_invoke$arity$6 = G__6502__6;
  G__6502.cljs$core$IFn$_invoke$arity$7 = G__6502__7;
  G__6502.cljs$core$IFn$_invoke$arity$8 = G__6502__8;
  G__6502.cljs$core$IFn$_invoke$arity$9 = G__6502__9;
  G__6502.cljs$core$IFn$_invoke$arity$10 = G__6502__10;
  G__6502.cljs$core$IFn$_invoke$arity$11 = G__6502__11;
  G__6502.cljs$core$IFn$_invoke$arity$12 = G__6502__12;
  G__6502.cljs$core$IFn$_invoke$arity$13 = G__6502__13;
  G__6502.cljs$core$IFn$_invoke$arity$14 = G__6502__14;
  G__6502.cljs$core$IFn$_invoke$arity$15 = G__6502__15;
  G__6502.cljs$core$IFn$_invoke$arity$16 = G__6502__16;
  G__6502.cljs$core$IFn$_invoke$arity$17 = G__6502__17;
  G__6502.cljs$core$IFn$_invoke$arity$18 = G__6502__18;
  G__6502.cljs$core$IFn$_invoke$arity$19 = G__6502__19;
  G__6502.cljs$core$IFn$_invoke$arity$20 = G__6502__20;
  G__6502.cljs$core$IFn$_invoke$arity$21 = G__6502__21;
  G__6502.cljs$core$IFn$_invoke$arity$22 = G__6502__22;
  return G__6502;
}();
cljs.core.Var.prototype.apply = function(self__, args6455) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6455)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__6480 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  var G__6481 = a;
  var G__6482 = b;
  var G__6483 = c;
  var G__6484 = d;
  var G__6485 = e;
  var G__6486 = f;
  var G__6487 = g;
  var G__6488 = h;
  var G__6489 = i;
  var G__6490 = j;
  var G__6491 = k;
  var G__6492 = l;
  var G__6493 = m;
  var G__6494 = n;
  var G__6495 = o;
  var G__6496 = p;
  var G__6497 = q;
  var G__6498 = r;
  var G__6499 = s;
  var G__6500 = t;
  var G__6501 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6480, G__6481, G__6482, G__6483, G__6484, G__6485, G__6486, G__6487, G__6488, G__6489, G__6490, G__6491, G__6492, G__6493, G__6494, G__6495, G__6496, G__6497, G__6498, G__6499, G__6500, G__6501) : cljs.core.apply.call(null, G__6480, G__6481, G__6482, G__6483, G__6484, G__6485, G__6486, G__6487, G__6488, G__6489, G__6490, G__6491, G__6492, G__6493, G__6494, G__6495, G__6496, G__6497, G__6498, 
  G__6499, G__6500, G__6501);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  if (!(x == null)) {
    if (false || x.cljs$core$IIterable$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  if (!(value == null)) {
    if (value.cljs$lang$protocol_mask$partition1$ & 8192 || value.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!value.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || coll.cljs$core$INext$ ? true : false : false) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_() {
  var args6515 = [];
  var len__5067__auto___6521 = arguments.length;
  var i__5068__auto___6522 = 0;
  while (true) {
    if (i__5068__auto___6522 < len__5067__auto___6521) {
      args6515.push(arguments[i__5068__auto___6522]);
      var G__6523 = i__5068__auto___6522 + 1;
      i__5068__auto___6522 = G__6523;
      continue;
    } else {
    }
    break;
  }
  var G__6520 = args6515.length;
  switch(G__6520) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6515.slice(2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__6525 = y;
        var G__6526 = cljs.core.first(more);
        var G__6527 = cljs.core.next(more);
        x = G__6525;
        y = G__6526;
        more = G__6527;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq6516) {
  var G__6517 = cljs.core.first(seq6516);
  var seq6516__$1 = cljs.core.next(seq6516);
  var G__6518 = cljs.core.first(seq6516__$1);
  var seq6516__$2 = cljs.core.next(seq6516__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__6517, G__6518, seq6516__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(self__.iter) : cljs.core.es6_iterator_seq.call(null, self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6528 = n + 1;
      var G__6529 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6530 = cljs.core.next(coll__$1);
      n = G__6528;
      hash_code = G__6529;
      coll__$1 = G__6530;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6531 = n + 1;
      var G__6532 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6533 = cljs.core.next(coll__$1);
      n = G__6531;
      hash_code = G__6532;
      coll__$1 = G__6533;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__6534 = this$__$1.valueOf();
    var G__6535 = other.valueOf();
    return goog.array.defaultCompare(G__6534, G__6535);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce() {
  var args6536 = [];
  var len__5067__auto___6545 = arguments.length;
  var i__5068__auto___6546 = 0;
  while (true) {
    if (i__5068__auto___6546 < len__5067__auto___6545) {
      args6536.push(arguments[i__5068__auto___6546]);
      var G__6547 = i__5068__auto___6546 + 1;
      i__5068__auto___6546 = G__6547;
      continue;
    } else {
    }
    break;
  }
  var G__6538 = args6536.length;
  switch(G__6538) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6536.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6539 = val;
          var G__6540 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6539, G__6540) : f.call(null, G__6539, G__6540);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6549 = nval;
          var G__6550 = n + 1;
          val = G__6549;
          n = G__6550;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6541 = val__$1;
        var G__6542 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6541, G__6542) : f.call(null, G__6541, G__6542);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6551 = nval;
        var G__6552 = n + 1;
        val__$1 = G__6551;
        n = G__6552;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6543 = val__$1;
        var G__6544 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6543, G__6544) : f.call(null, G__6543, G__6544);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6553 = nval;
        var G__6554 = n + 1;
        val__$1 = G__6553;
        n = G__6554;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce() {
  var args6555 = [];
  var len__5067__auto___6564 = arguments.length;
  var i__5068__auto___6565 = 0;
  while (true) {
    if (i__5068__auto___6565 < len__5067__auto___6564) {
      args6555.push(arguments[i__5068__auto___6565]);
      var G__6566 = i__5068__auto___6565 + 1;
      i__5068__auto___6565 = G__6566;
      continue;
    } else {
    }
    break;
  }
  var G__6557 = args6555.length;
  switch(G__6557) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6555.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6558 = val;
          var G__6559 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6558, G__6559) : f.call(null, G__6558, G__6559);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6568 = nval;
          var G__6569 = n + 1;
          val = G__6568;
          n = G__6569;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6560 = val__$1;
        var G__6561 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6560, G__6561) : f.call(null, G__6560, G__6561);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6570 = nval;
        var G__6571 = n + 1;
        val__$1 = G__6570;
        n = G__6571;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6562 = val__$1;
        var G__6563 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6562, G__6563) : f.call(null, G__6562, G__6563);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6572 = nval;
        var G__6573 = n + 1;
        val__$1 = G__6572;
        n = G__6573;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2 || x.cljs$core$ICounted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16 || x.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__4340__auto__ = 0;
  var y__4341__auto__ = self__.arr.length - self__.i;
  return x__4340__auto__ > y__4341__auto__ ? x__4340__auto__ : y__4341__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq() {
  var args6578 = [];
  var len__5067__auto___6581 = arguments.length;
  var i__5068__auto___6582 = 0;
  while (true) {
    if (i__5068__auto___6582 < len__5067__auto___6581) {
      args6578.push(arguments[i__5068__auto___6582]);
      var G__6583 = i__5068__auto___6582 + 1;
      i__5068__auto___6582 = G__6583;
      continue;
    } else {
    }
    break;
  }
  var G__6580 = args6578.length;
  switch(G__6580) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6578.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq() {
  var args6585 = [];
  var len__5067__auto___6588 = arguments.length;
  var i__5068__auto___6589 = 0;
  while (true) {
    if (i__5068__auto___6589 < len__5067__auto___6588) {
      args6585.push(arguments[i__5068__auto___6589]);
      var G__6590 = i__5068__auto___6589 + 1;
      i__5068__auto___6589 = G__6590;
      continue;
    } else {
    }
    break;
  }
  var G__6587 = args6585.length;
  switch(G__6587) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6585.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__6592 = cljs.core.List.EMPTY;
  var G__6593 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__6592, G__6593) : cljs.core.with_meta.call(null, G__6592, G__6593);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, col__$1) : cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, col__$1) : cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__6594 = sn;
      s = G__6594;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj() {
  var args6595 = [];
  var len__5067__auto___6601 = arguments.length;
  var i__5068__auto___6602 = 0;
  while (true) {
    if (i__5068__auto___6602 < len__5067__auto___6601) {
      args6595.push(arguments[i__5068__auto___6602]);
      var G__6603 = i__5068__auto___6602 + 1;
      i__5068__auto___6602 = G__6603;
      continue;
    } else {
    }
    break;
  }
  var G__6600 = args6595.length;
  switch(G__6600) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6595.slice(2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__6605 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__6606 = cljs.core.first(xs);
      var G__6607 = cljs.core.next(xs);
      coll = G__6605;
      x = G__6606;
      xs = G__6607;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq6596) {
  var G__6597 = cljs.core.first(seq6596);
  var seq6596__$1 = cljs.core.next(seq6596);
  var G__6598 = cljs.core.first(seq6596__$1);
  var seq6596__$2 = cljs.core.next(seq6596__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__6597, G__6598, seq6596__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__6608 = cljs.core.next(s);
      var G__6609 = acc + 1;
      s = G__6608;
      acc = G__6609;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 2 || coll.cljs$core$ICounted$ ? true : false : false) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
            return cljs.core.accumulating_seq_count(coll);
          } else {
            return cljs.core._count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth() {
  var args6614 = [];
  var len__5067__auto___6617 = arguments.length;
  var i__5068__auto___6618 = 0;
  while (true) {
    if (i__5068__auto___6618 < len__5067__auto___6617) {
      args6614.push(arguments[i__5068__auto___6618]);
      var G__6619 = i__5068__auto___6618 + 1;
      i__5068__auto___6618 = G__6619;
      continue;
    } else {
    }
    break;
  }
  var G__6616 = args6614.length;
  switch(G__6616) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6614.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__6621 = cljs.core.next(coll);
            var G__6622 = n - 1;
            coll = G__6621;
            n = G__6622;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__6623 = cljs.core.next(coll);
            var G__6624 = n - 1;
            var G__6625 = not_found;
            coll = G__6623;
            n = G__6624;
            not_found = G__6625;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth() {
  var args6626 = [];
  var len__5067__auto___6633 = arguments.length;
  var i__5068__auto___6634 = 0;
  while (true) {
    if (i__5068__auto___6634 < len__5067__auto___6633) {
      args6626.push(arguments[i__5068__auto___6634]);
      var G__6635 = i__5068__auto___6634 + 1;
      i__5068__auto___6634 = G__6635;
      continue;
    } else {
    }
    break;
  }
  var G__6628 = args6626.length;
  switch(G__6628) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6626.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return null;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return not_found;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__6637 = n__$1 - 1;
      var G__6638 = cljs.core.rest(xs);
      n__$1 = G__6637;
      xs = G__6638;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get() {
  var args6639 = [];
  var len__5067__auto___6644 = arguments.length;
  var i__5068__auto___6645 = 0;
  while (true) {
    if (i__5068__auto___6645 < len__5067__auto___6644) {
      args6639.push(arguments[i__5068__auto___6645]);
      var G__6646 = i__5068__auto___6645 + 1;
      i__5068__auto___6645 = G__6646;
      continue;
    } else {
    }
    break;
  }
  var G__6641 = args6639.length;
  switch(G__6641) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6639.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k | 0];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc() {
  var args6648 = [];
  var len__5067__auto___6655 = arguments.length;
  var i__5068__auto___6656 = 0;
  while (true) {
    if (i__5068__auto___6656 < len__5067__auto___6655) {
      args6648.push(arguments[i__5068__auto___6656]);
      var G__6657 = i__5068__auto___6656 + 1;
      i__5068__auto___6656 = G__6657;
      continue;
    } else {
    }
    break;
  }
  var G__6654 = args6648.length;
  switch(G__6654) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6648.slice(3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5086__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__6659 = ret;
      var G__6660 = cljs.core.first(kvs);
      var G__6661 = cljs.core.second(kvs);
      var G__6662 = cljs.core.nnext(kvs);
      coll = G__6659;
      k = G__6660;
      v = G__6661;
      kvs = G__6662;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq6649) {
  var G__6650 = cljs.core.first(seq6649);
  var seq6649__$1 = cljs.core.next(seq6649);
  var G__6651 = cljs.core.first(seq6649__$1);
  var seq6649__$2 = cljs.core.next(seq6649__$1);
  var G__6652 = cljs.core.first(seq6649__$2);
  var seq6649__$3 = cljs.core.next(seq6649__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__6650, G__6651, G__6652, seq6649__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc() {
  var args6663 = [];
  var len__5067__auto___6669 = arguments.length;
  var i__5068__auto___6670 = 0;
  while (true) {
    if (i__5068__auto___6670 < len__5067__auto___6669) {
      args6663.push(arguments[i__5068__auto___6670]);
      var G__6671 = i__5068__auto___6670 + 1;
      i__5068__auto___6670 = G__6671;
      continue;
    } else {
    }
    break;
  }
  var G__6668 = args6663.length;
  switch(G__6668) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6663.slice(2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__6673 = ret;
        var G__6674 = cljs.core.first(ks);
        var G__6675 = cljs.core.next(ks);
        coll = G__6673;
        k = G__6674;
        ks = G__6675;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq6664) {
  var G__6665 = cljs.core.first(seq6664);
  var seq6664__$1 = cljs.core.next(seq6664);
  var G__6666 = cljs.core.first(seq6664__$1);
  var seq6664__$2 = cljs.core.next(seq6664__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__6665, G__6666, seq6664__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4028__auto__ = goog.isFunction(f);
  if (or__4028__auto__) {
    return or__4028__auto__;
  } else {
    if (!(f == null)) {
      if (false || f.cljs$core$Fn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__6681 = null;
  var G__6681__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__6681__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
  };
  var G__6681__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
  };
  var G__6681__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
  };
  var G__6681__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
  };
  var G__6681__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
  };
  var G__6681__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__6681__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__6681__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__6681__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__6681__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__6681__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__6681__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__6681__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__6681__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__6681__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__6681__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__6681__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__6681__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__6681__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__6681__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__6681__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__6681 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6681__1.call(this, self__);
      case 2:
        return G__6681__2.call(this, self__, a);
      case 3:
        return G__6681__3.call(this, self__, a, b);
      case 4:
        return G__6681__4.call(this, self__, a, b, c);
      case 5:
        return G__6681__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6681__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6681__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6681__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6681__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6681__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6681__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6681__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6681__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6681__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6681__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6681__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6681__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6681__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6681__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6681__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6681__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6681__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6681.cljs$core$IFn$_invoke$arity$1 = G__6681__1;
  G__6681.cljs$core$IFn$_invoke$arity$2 = G__6681__2;
  G__6681.cljs$core$IFn$_invoke$arity$3 = G__6681__3;
  G__6681.cljs$core$IFn$_invoke$arity$4 = G__6681__4;
  G__6681.cljs$core$IFn$_invoke$arity$5 = G__6681__5;
  G__6681.cljs$core$IFn$_invoke$arity$6 = G__6681__6;
  G__6681.cljs$core$IFn$_invoke$arity$7 = G__6681__7;
  G__6681.cljs$core$IFn$_invoke$arity$8 = G__6681__8;
  G__6681.cljs$core$IFn$_invoke$arity$9 = G__6681__9;
  G__6681.cljs$core$IFn$_invoke$arity$10 = G__6681__10;
  G__6681.cljs$core$IFn$_invoke$arity$11 = G__6681__11;
  G__6681.cljs$core$IFn$_invoke$arity$12 = G__6681__12;
  G__6681.cljs$core$IFn$_invoke$arity$13 = G__6681__13;
  G__6681.cljs$core$IFn$_invoke$arity$14 = G__6681__14;
  G__6681.cljs$core$IFn$_invoke$arity$15 = G__6681__15;
  G__6681.cljs$core$IFn$_invoke$arity$16 = G__6681__16;
  G__6681.cljs$core$IFn$_invoke$arity$17 = G__6681__17;
  G__6681.cljs$core$IFn$_invoke$arity$18 = G__6681__18;
  G__6681.cljs$core$IFn$_invoke$arity$19 = G__6681__19;
  G__6681.cljs$core$IFn$_invoke$arity$20 = G__6681__20;
  G__6681.cljs$core$IFn$_invoke$arity$21 = G__6681__21;
  G__6681.cljs$core$IFn$_invoke$arity$22 = G__6681__22;
  return G__6681;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args6680) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6680)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (goog.isFunction(o)) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4016__auto__ = !(o == null);
    if (and__4016__auto__) {
      if (!(o == null)) {
        if (o.cljs$lang$protocol_mask$partition0$ & 131072 || o.cljs$core$IMeta$) {
          return true;
        } else {
          if (!o.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
      }
    } else {
      return and__4016__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj() {
  var args6686 = [];
  var len__5067__auto___6692 = arguments.length;
  var i__5068__auto___6693 = 0;
  while (true) {
    if (i__5068__auto___6693 < len__5067__auto___6692) {
      args6686.push(arguments[i__5068__auto___6693]);
      var G__6694 = i__5068__auto___6693 + 1;
      i__5068__auto___6693 = G__6694;
      continue;
    } else {
    }
    break;
  }
  var G__6691 = args6686.length;
  switch(G__6691) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6686.slice(2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__6696 = ret;
        var G__6697 = cljs.core.first(ks);
        var G__6698 = cljs.core.next(ks);
        coll = G__6696;
        k = G__6697;
        ks = G__6698;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq6687) {
  var G__6688 = cljs.core.first(seq6687);
  var seq6687__$1 = cljs.core.next(seq6687);
  var G__6689 = cljs.core.first(seq6687__$1);
  var seq6687__$2 = cljs.core.next(seq6687__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__6688, G__6689, seq6687__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 8 || x.cljs$core$ICollection$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 4096 || x.cljs$core$ISet$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 512 || x.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16777216 || x.cljs$core$ISequential$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 268435456 || x.cljs$core$ISorted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 524288 || x.cljs$core$IReduce$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 1024 || x.cljs$core$IMap$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 67108864 || x.cljs$core$IRecord$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || x.cljs$core$IVector$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 512 || x.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj() {
  var args6719 = [];
  var len__5067__auto___6725 = arguments.length;
  var i__5068__auto___6726 = 0;
  while (true) {
    if (i__5068__auto___6726 < len__5067__auto___6725) {
      args6719.push(arguments[i__5068__auto___6726]);
      var G__6727 = i__5068__auto___6726 + 1;
      i__5068__auto___6726 = G__6727;
      continue;
    } else {
    }
    break;
  }
  var G__6722 = args6719.length;
  switch(G__6722) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6719.slice(0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__5086__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  return {};
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals) : cljs.core.apply.call(null, goog.object.create, keyvals);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq6720) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq6720));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__6731_6733 = obj;
  var G__6732_6734 = function(G__6731_6733, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__6731_6733, keys);
  goog.object.forEach(G__6731_6733, G__6732_6734);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6735 = i__$1 + 1;
      var G__6736 = j__$1 + 1;
      var G__6737 = len__$1 - 1;
      i__$1 = G__6735;
      j__$1 = G__6736;
      len__$1 = G__6737;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6738 = i__$1 - 1;
      var G__6739 = j__$1 - 1;
      var G__6740 = len__$1 - 1;
      i__$1 = G__6738;
      j__$1 = G__6739;
      len__$1 = G__6740;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    if (!(s == null)) {
      if (s.cljs$lang$protocol_mask$partition0$ & 64 || s.cljs$core$ISeq$) {
        return true;
      } else {
        if (!s.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  if (!(s == null)) {
    if (s.cljs$lang$protocol_mask$partition0$ & 8388608 || s.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!s.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (x == null) {
    return false;
  } else {
    if (x === false) {
      return false;
    } else {
      return true;
    }
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4028__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4028__auto__) {
    return or__4028__auto__;
  } else {
    if (!(f == null)) {
      if (f.cljs$lang$protocol_mask$partition0$ & 1 || f.cljs$core$IFn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_() {
  var args6751 = [];
  var len__5067__auto___6757 = arguments.length;
  var i__5068__auto___6758 = 0;
  while (true) {
    if (i__5068__auto___6758 < len__5067__auto___6757) {
      args6751.push(arguments[i__5068__auto___6758]);
      var G__6759 = i__5068__auto___6758 + 1;
      i__5068__auto___6758 = G__6759;
      continue;
    } else {
    }
    break;
  }
  var G__6756 = args6751.length;
  switch(G__6756) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6751.slice(2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__6761 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__6762 = etc;
          s = G__6761;
          xs = G__6762;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq6752) {
  var G__6753 = cljs.core.first(seq6752);
  var seq6752__$1 = cljs.core.next(seq6752);
  var G__6754 = cljs.core.first(seq6752__$1);
  var seq6752__$2 = cljs.core.next(seq6752__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__6753, G__6754, seq6752__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            return goog.array.defaultCompare(x, y);
          } else {
            throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
          }
        } else {
          if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 2048 || x.cljs$core$IComparable$ ? true : !x.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              return goog.array.defaultCompare(x, y);
            } else {
              throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed() {
  var args6765 = [];
  var len__5067__auto___6768 = arguments.length;
  var i__5068__auto___6769 = 0;
  while (true) {
    if (i__5068__auto___6769 < len__5067__auto___6768) {
      args6765.push(arguments[i__5068__auto___6769]);
      var G__6770 = i__5068__auto___6769 + 1;
      i__5068__auto___6769 = G__6770;
      continue;
    } else {
    }
    break;
  }
  var G__6767 = args6765.length;
  switch(G__6767) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6765.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__6772 = xs;
      var G__6773 = ys;
      var G__6774 = len;
      var G__6775 = n + 1;
      xs = G__6772;
      ys = G__6773;
      len = G__6774;
      n = G__6775;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort() {
  var args6776 = [];
  var len__5067__auto___6781 = arguments.length;
  var i__5068__auto___6782 = 0;
  while (true) {
    if (i__5068__auto___6782 < len__5067__auto___6781) {
      args6776.push(arguments[i__5068__auto___6782]);
      var G__6783 = i__5068__auto___6782 + 1;
      i__5068__auto___6782 = G__6783;
      continue;
    } else {
    }
    break;
  }
  var G__6778 = args6776.length;
  switch(G__6778) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6776.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
    var G__6779_6785 = a;
    var G__6780_6786 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__6779_6785, G__6780_6786);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by() {
  var args6787 = [];
  var len__5067__auto___6790 = arguments.length;
  var i__5068__auto___6791 = 0;
  while (true) {
    if (i__5068__auto___6791 < len__5067__auto___6790) {
      args6787.push(arguments[i__5068__auto___6791]);
      var G__6792 = i__5068__auto___6791 + 1;
      i__5068__auto___6791 = G__6792;
      continue;
    } else {
    }
    break;
  }
  var G__6789 = args6787.length;
  switch(G__6789) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6787.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x), keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y));
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce() {
  var args6794 = [];
  var len__5067__auto___6802 = arguments.length;
  var i__5068__auto___6803 = 0;
  while (true) {
    if (i__5068__auto___6803 < len__5067__auto___6802) {
      args6794.push(arguments[i__5068__auto___6803]);
      var G__6804 = i__5068__auto___6803 + 1;
      i__5068__auto___6803 = G__6804;
      continue;
    } else {
    }
    break;
  }
  var G__6796 = args6794.length;
  switch(G__6796) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6794.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4423__auto__ = cljs.core.seq(coll);
  if (temp__4423__auto__) {
    var s = temp__4423__auto__;
    var G__6797 = f;
    var G__6798 = cljs.core.first(s);
    var G__6799 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__6797, G__6798, G__6799) : cljs.core.reduce.call(null, G__6797, G__6798, G__6799);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__6800 = val__$1;
        var G__6801 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6800, G__6801) : f.call(null, G__6800, G__6801);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6806 = nval;
        var G__6807 = cljs.core.next(coll__$1);
        val__$1 = G__6806;
        coll__$1 = G__6807;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(a) : cljs.core.vec.call(null, a);
};
cljs.core.reduce = function cljs$core$reduce() {
  var args6808 = [];
  var len__5067__auto___6813 = arguments.length;
  var i__5068__auto___6814 = 0;
  while (true) {
    if (i__5068__auto___6814 < len__5067__auto___6813) {
      args6808.push(arguments[i__5068__auto___6814]);
      var G__6815 = i__5068__auto___6814 + 1;
      i__5068__auto___6814 = G__6815;
      continue;
    } else {
    }
    break;
  }
  var G__6810 = args6808.length;
  switch(G__6810) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6808.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing() {
  var args6817 = [];
  var len__5067__auto___6820 = arguments.length;
  var i__5068__auto___6821 = 0;
  while (true) {
    if (i__5068__auto___6821 < len__5067__auto___6820) {
      args6817.push(arguments[i__5068__auto___6821]);
      var G__6822 = i__5068__auto___6821 + 1;
      i__5068__auto___6821 = G__6822;
      continue;
    } else {
    }
    break;
  }
  var G__6819 = args6817.length;
  switch(G__6819) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6817.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__6824 = null;
    var G__6824__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__6824__1 = function(x) {
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
    };
    var G__6824__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
    };
    G__6824 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__6824__0.call(this);
        case 1:
          return G__6824__1.call(this, x);
        case 2:
          return G__6824__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__6824.cljs$core$IFn$_invoke$arity$0 = G__6824__0;
    G__6824.cljs$core$IFn$_invoke$arity$1 = G__6824__1;
    G__6824.cljs$core$IFn$_invoke$arity$2 = G__6824__2;
    return G__6824;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce() {
  var args6825 = [];
  var len__5067__auto___6828 = arguments.length;
  var i__5068__auto___6829 = 0;
  while (true) {
    if (i__5068__auto___6829 < len__5067__auto___6828) {
      args6825.push(arguments[i__5068__auto___6829]);
      var G__6830 = i__5068__auto___6829 + 1;
      i__5068__auto___6829 = G__6830;
      continue;
    } else {
    }
    break;
  }
  var G__6827 = args6825.length;
  switch(G__6827) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6825.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null, ret);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_() {
  var args6832 = [];
  var len__5067__auto___6838 = arguments.length;
  var i__5068__auto___6839 = 0;
  while (true) {
    if (i__5068__auto___6839 < len__5067__auto___6838) {
      args6832.push(arguments[i__5068__auto___6839]);
      var G__6840 = i__5068__auto___6839 + 1;
      i__5068__auto___6839 = G__6840;
      continue;
    } else {
    }
    break;
  }
  var G__6837 = args6832.length;
  switch(G__6837) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6832.slice(2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq6833) {
  var G__6834 = cljs.core.first(seq6833);
  var seq6833__$1 = cljs.core.next(seq6833);
  var G__6835 = cljs.core.first(seq6833__$1);
  var seq6833__$2 = cljs.core.next(seq6833__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__6834, G__6835, seq6833__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_() {
  var args6842 = [];
  var len__5067__auto___6848 = arguments.length;
  var i__5068__auto___6849 = 0;
  while (true) {
    if (i__5068__auto___6849 < len__5067__auto___6848) {
      args6842.push(arguments[i__5068__auto___6849]);
      var G__6850 = i__5068__auto___6849 + 1;
      i__5068__auto___6849 = G__6850;
      continue;
    } else {
    }
    break;
  }
  var G__6847 = args6842.length;
  switch(G__6847) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6842.slice(2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq6843) {
  var G__6844 = cljs.core.first(seq6843);
  var seq6843__$1 = cljs.core.next(seq6843);
  var G__6845 = cljs.core.first(seq6843__$1);
  var seq6843__$2 = cljs.core.next(seq6843__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__6844, G__6845, seq6843__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_() {
  var args6852 = [];
  var len__5067__auto___6858 = arguments.length;
  var i__5068__auto___6859 = 0;
  while (true) {
    if (i__5068__auto___6859 < len__5067__auto___6858) {
      args6852.push(arguments[i__5068__auto___6859]);
      var G__6860 = i__5068__auto___6859 + 1;
      i__5068__auto___6859 = G__6860;
      continue;
    } else {
    }
    break;
  }
  var G__6857 = args6852.length;
  switch(G__6857) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6852.slice(2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq6853) {
  var G__6854 = cljs.core.first(seq6853);
  var seq6853__$1 = cljs.core.next(seq6853);
  var G__6855 = cljs.core.first(seq6853__$1);
  var seq6853__$2 = cljs.core.next(seq6853__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__6854, G__6855, seq6853__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_() {
  var args6862 = [];
  var len__5067__auto___6868 = arguments.length;
  var i__5068__auto___6869 = 0;
  while (true) {
    if (i__5068__auto___6869 < len__5067__auto___6868) {
      args6862.push(arguments[i__5068__auto___6869]);
      var G__6870 = i__5068__auto___6869 + 1;
      i__5068__auto___6869 = G__6870;
      continue;
    } else {
    }
    break;
  }
  var G__6867 = args6862.length;
  switch(G__6867) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6862.slice(2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq6863) {
  var G__6864 = cljs.core.first(seq6863);
  var seq6863__$1 = cljs.core.next(seq6863);
  var G__6865 = cljs.core.first(seq6863__$1);
  var seq6863__$2 = cljs.core.next(seq6863__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__6864, G__6865, seq6863__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_() {
  var args6872 = [];
  var len__5067__auto___6878 = arguments.length;
  var i__5068__auto___6879 = 0;
  while (true) {
    if (i__5068__auto___6879 < len__5067__auto___6878) {
      args6872.push(arguments[i__5068__auto___6879]);
      var G__6880 = i__5068__auto___6879 + 1;
      i__5068__auto___6879 = G__6880;
      continue;
    } else {
    }
    break;
  }
  var G__6877 = args6872.length;
  switch(G__6877) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6872.slice(2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__6882 = y;
        var G__6883 = cljs.core.first(more);
        var G__6884 = cljs.core.next(more);
        x = G__6882;
        y = G__6883;
        more = G__6884;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq6873) {
  var G__6874 = cljs.core.first(seq6873);
  var seq6873__$1 = cljs.core.next(seq6873);
  var G__6875 = cljs.core.first(seq6873__$1);
  var seq6873__$2 = cljs.core.next(seq6873__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__6874, G__6875, seq6873__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_() {
  var args6885 = [];
  var len__5067__auto___6891 = arguments.length;
  var i__5068__auto___6892 = 0;
  while (true) {
    if (i__5068__auto___6892 < len__5067__auto___6891) {
      args6885.push(arguments[i__5068__auto___6892]);
      var G__6893 = i__5068__auto___6892 + 1;
      i__5068__auto___6892 = G__6893;
      continue;
    } else {
    }
    break;
  }
  var G__6890 = args6885.length;
  switch(G__6890) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6885.slice(2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__6895 = y;
        var G__6896 = cljs.core.first(more);
        var G__6897 = cljs.core.next(more);
        x = G__6895;
        y = G__6896;
        more = G__6897;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq6886) {
  var G__6887 = cljs.core.first(seq6886);
  var seq6886__$1 = cljs.core.next(seq6886);
  var G__6888 = cljs.core.first(seq6886__$1);
  var seq6886__$2 = cljs.core.next(seq6886__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__6887, G__6888, seq6886__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_() {
  var args6898 = [];
  var len__5067__auto___6904 = arguments.length;
  var i__5068__auto___6905 = 0;
  while (true) {
    if (i__5068__auto___6905 < len__5067__auto___6904) {
      args6898.push(arguments[i__5068__auto___6905]);
      var G__6906 = i__5068__auto___6905 + 1;
      i__5068__auto___6905 = G__6906;
      continue;
    } else {
    }
    break;
  }
  var G__6903 = args6898.length;
  switch(G__6903) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6898.slice(2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__6908 = y;
        var G__6909 = cljs.core.first(more);
        var G__6910 = cljs.core.next(more);
        x = G__6908;
        y = G__6909;
        more = G__6910;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq6899) {
  var G__6900 = cljs.core.first(seq6899);
  var seq6899__$1 = cljs.core.next(seq6899);
  var G__6901 = cljs.core.first(seq6899__$1);
  var seq6899__$2 = cljs.core.next(seq6899__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__6900, G__6901, seq6899__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_() {
  var args6911 = [];
  var len__5067__auto___6917 = arguments.length;
  var i__5068__auto___6918 = 0;
  while (true) {
    if (i__5068__auto___6918 < len__5067__auto___6917) {
      args6911.push(arguments[i__5068__auto___6918]);
      var G__6919 = i__5068__auto___6918 + 1;
      i__5068__auto___6918 = G__6919;
      continue;
    } else {
    }
    break;
  }
  var G__6916 = args6911.length;
  switch(G__6916) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6911.slice(2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__6921 = y;
        var G__6922 = cljs.core.first(more);
        var G__6923 = cljs.core.next(more);
        x = G__6921;
        y = G__6922;
        more = G__6923;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq6912) {
  var G__6913 = cljs.core.first(seq6912);
  var seq6912__$1 = cljs.core.next(seq6912);
  var G__6914 = cljs.core.first(seq6912__$1);
  var seq6912__$2 = cljs.core.next(seq6912__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__6913, G__6914, seq6912__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max() {
  var args6924 = [];
  var len__5067__auto___6930 = arguments.length;
  var i__5068__auto___6931 = 0;
  while (true) {
    if (i__5068__auto___6931 < len__5067__auto___6930) {
      args6924.push(arguments[i__5068__auto___6931]);
      var G__6932 = i__5068__auto___6931 + 1;
      i__5068__auto___6931 = G__6932;
      continue;
    } else {
    }
    break;
  }
  var G__6929 = args6924.length;
  switch(G__6929) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6924.slice(2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4340__auto__ = x;
  var y__4341__auto__ = y;
  return x__4340__auto__ > y__4341__auto__ ? x__4340__auto__ : y__4341__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__4340__auto__ = x;
    var y__4341__auto__ = y;
    return x__4340__auto__ > y__4341__auto__ ? x__4340__auto__ : y__4341__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq6925) {
  var G__6926 = cljs.core.first(seq6925);
  var seq6925__$1 = cljs.core.next(seq6925);
  var G__6927 = cljs.core.first(seq6925__$1);
  var seq6925__$2 = cljs.core.next(seq6925__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__6926, G__6927, seq6925__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min() {
  var args6934 = [];
  var len__5067__auto___6940 = arguments.length;
  var i__5068__auto___6941 = 0;
  while (true) {
    if (i__5068__auto___6941 < len__5067__auto___6940) {
      args6934.push(arguments[i__5068__auto___6941]);
      var G__6942 = i__5068__auto___6941 + 1;
      i__5068__auto___6941 = G__6942;
      continue;
    } else {
    }
    break;
  }
  var G__6939 = args6934.length;
  switch(G__6939) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6934.slice(2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4347__auto__ = x;
  var y__4348__auto__ = y;
  return x__4347__auto__ < y__4348__auto__ ? x__4347__auto__ : y__4348__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__4347__auto__ = x;
    var y__4348__auto__ = y;
    return x__4347__auto__ < y__4348__auto__ ? x__4347__auto__ : y__4348__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq6935) {
  var G__6936 = cljs.core.first(seq6935);
  var seq6935__$1 = cljs.core.next(seq6935);
  var G__6937 = cljs.core.first(seq6935__$1);
  var seq6935__$2 = cljs.core.next(seq6935__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__6936, G__6937, seq6935__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add() {
  var args6944 = [];
  var len__5067__auto___6950 = arguments.length;
  var i__5068__auto___6951 = 0;
  while (true) {
    if (i__5068__auto___6951 < len__5067__auto___6950) {
      args6944.push(arguments[i__5068__auto___6951]);
      var G__6952 = i__5068__auto___6951 + 1;
      i__5068__auto___6951 = G__6952;
      continue;
    } else {
    }
    break;
  }
  var G__6949 = args6944.length;
  switch(G__6949) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6944.slice(2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq6945) {
  var G__6946 = cljs.core.first(seq6945);
  var seq6945__$1 = cljs.core.next(seq6945);
  var G__6947 = cljs.core.first(seq6945__$1);
  var seq6945__$2 = cljs.core.next(seq6945__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__6946, G__6947, seq6945__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int() {
  var args6954 = [];
  var len__5067__auto___6960 = arguments.length;
  var i__5068__auto___6961 = 0;
  while (true) {
    if (i__5068__auto___6961 < len__5067__auto___6960) {
      args6954.push(arguments[i__5068__auto___6961]);
      var G__6962 = i__5068__auto___6961 + 1;
      i__5068__auto___6961 = G__6962;
      continue;
    } else {
    }
    break;
  }
  var G__6959 = args6954.length;
  switch(G__6959) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6954.slice(2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq6955) {
  var G__6956 = cljs.core.first(seq6955);
  var seq6955__$1 = cljs.core.next(seq6955);
  var G__6957 = cljs.core.first(seq6955__$1);
  var seq6955__$2 = cljs.core.next(seq6955__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__6956, G__6957, seq6955__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int() {
  var args6964 = [];
  var len__5067__auto___6970 = arguments.length;
  var i__5068__auto___6971 = 0;
  while (true) {
    if (i__5068__auto___6971 < len__5067__auto___6970) {
      args6964.push(arguments[i__5068__auto___6971]);
      var G__6972 = i__5068__auto___6971 + 1;
      i__5068__auto___6971 = G__6972;
      continue;
    } else {
    }
    break;
  }
  var G__6969 = args6964.length;
  switch(G__6969) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6964.slice(2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq6965) {
  var G__6966 = cljs.core.first(seq6965);
  var seq6965__$1 = cljs.core.next(seq6965);
  var G__6967 = cljs.core.first(seq6965__$1);
  var seq6965__$2 = cljs.core.next(seq6965__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__6966, G__6967, seq6965__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply() {
  var args6974 = [];
  var len__5067__auto___6980 = arguments.length;
  var i__5068__auto___6981 = 0;
  while (true) {
    if (i__5068__auto___6981 < len__5067__auto___6980) {
      args6974.push(arguments[i__5068__auto___6981]);
      var G__6982 = i__5068__auto___6981 + 1;
      i__5068__auto___6981 = G__6982;
      continue;
    } else {
    }
    break;
  }
  var G__6979 = args6974.length;
  switch(G__6979) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6974.slice(2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq6975) {
  var G__6976 = cljs.core.first(seq6975);
  var seq6975__$1 = cljs.core.next(seq6975);
  var G__6977 = cljs.core.first(seq6975__$1);
  var seq6975__$2 = cljs.core.next(seq6975__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__6976, G__6977, seq6975__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int() {
  var args6984 = [];
  var len__5067__auto___6990 = arguments.length;
  var i__5068__auto___6991 = 0;
  while (true) {
    if (i__5068__auto___6991 < len__5067__auto___6990) {
      args6984.push(arguments[i__5068__auto___6991]);
      var G__6992 = i__5068__auto___6991 + 1;
      i__5068__auto___6991 = G__6992;
      continue;
    } else {
    }
    break;
  }
  var G__6989 = args6984.length;
  switch(G__6989) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6984.slice(2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq6985) {
  var G__6986 = cljs.core.first(seq6985);
  var seq6985__$1 = cljs.core.next(seq6985);
  var G__6987 = cljs.core.first(seq6985__$1);
  var seq6985__$2 = cljs.core.next(seq6985__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__6986, G__6987, seq6985__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x, n) : cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract() {
  var args6994 = [];
  var len__5067__auto___7000 = arguments.length;
  var i__5068__auto___7001 = 0;
  while (true) {
    if (i__5068__auto___7001 < len__5067__auto___7000) {
      args6994.push(arguments[i__5068__auto___7001]);
      var G__7002 = i__5068__auto___7001 + 1;
      i__5068__auto___7001 = G__7002;
      continue;
    } else {
    }
    break;
  }
  var G__6999 = args6994.length;
  switch(G__6999) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args6994.slice(2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq6995) {
  var G__6996 = cljs.core.first(seq6995);
  var seq6995__$1 = cljs.core.next(seq6995);
  var G__6997 = cljs.core.first(seq6995__$1);
  var seq6995__$2 = cljs.core.next(seq6995__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__6996, G__6997, seq6995__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int() {
  var args7004 = [];
  var len__5067__auto___7010 = arguments.length;
  var i__5068__auto___7011 = 0;
  while (true) {
    if (i__5068__auto___7011 < len__5067__auto___7010) {
      args7004.push(arguments[i__5068__auto___7011]);
      var G__7012 = i__5068__auto___7011 + 1;
      i__5068__auto___7011 = G__7012;
      continue;
    } else {
    }
    break;
  }
  var G__7009 = args7004.length;
  switch(G__7009) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7004.slice(2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq7005) {
  var G__7006 = cljs.core.first(seq7005);
  var seq7005__$1 = cljs.core.next(seq7005);
  var G__7007 = cljs.core.first(seq7005__$1);
  var seq7005__$2 = cljs.core.next(seq7005__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__7006, G__7007, seq7005__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    return Math.floor(q);
  } else {
    return Math.ceil(q);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor() {
  var args7014 = [];
  var len__5067__auto___7020 = arguments.length;
  var i__5068__auto___7021 = 0;
  while (true) {
    if (i__5068__auto___7021 < len__5067__auto___7020) {
      args7014.push(arguments[i__5068__auto___7021]);
      var G__7022 = i__5068__auto___7021 + 1;
      i__5068__auto___7021 = G__7022;
      continue;
    } else {
    }
    break;
  }
  var G__7019 = args7014.length;
  switch(G__7019) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7014.slice(2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq7015) {
  var G__7016 = cljs.core.first(seq7015);
  var seq7015__$1 = cljs.core.next(seq7015);
  var G__7017 = cljs.core.first(seq7015__$1);
  var seq7015__$2 = cljs.core.next(seq7015__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__7016, G__7017, seq7015__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and() {
  var args7024 = [];
  var len__5067__auto___7030 = arguments.length;
  var i__5068__auto___7031 = 0;
  while (true) {
    if (i__5068__auto___7031 < len__5067__auto___7030) {
      args7024.push(arguments[i__5068__auto___7031]);
      var G__7032 = i__5068__auto___7031 + 1;
      i__5068__auto___7031 = G__7032;
      continue;
    } else {
    }
    break;
  }
  var G__7029 = args7024.length;
  switch(G__7029) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7024.slice(2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq7025) {
  var G__7026 = cljs.core.first(seq7025);
  var seq7025__$1 = cljs.core.next(seq7025);
  var G__7027 = cljs.core.first(seq7025__$1);
  var seq7025__$2 = cljs.core.next(seq7025__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__7026, G__7027, seq7025__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or() {
  var args7034 = [];
  var len__5067__auto___7040 = arguments.length;
  var i__5068__auto___7041 = 0;
  while (true) {
    if (i__5068__auto___7041 < len__5067__auto___7040) {
      args7034.push(arguments[i__5068__auto___7041]);
      var G__7042 = i__5068__auto___7041 + 1;
      i__5068__auto___7041 = G__7042;
      continue;
    } else {
    }
    break;
  }
  var G__7039 = args7034.length;
  switch(G__7039) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7034.slice(2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq7035) {
  var G__7036 = cljs.core.first(seq7035);
  var seq7035__$1 = cljs.core.next(seq7035);
  var G__7037 = cljs.core.first(seq7035__$1);
  var seq7035__$2 = cljs.core.next(seq7035__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__7036, G__7037, seq7035__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not() {
  var args7044 = [];
  var len__5067__auto___7050 = arguments.length;
  var i__5068__auto___7051 = 0;
  while (true) {
    if (i__5068__auto___7051 < len__5067__auto___7050) {
      args7044.push(arguments[i__5068__auto___7051]);
      var G__7052 = i__5068__auto___7051 + 1;
      i__5068__auto___7051 = G__7052;
      continue;
    } else {
    }
    break;
  }
  var G__7049 = args7044.length;
  switch(G__7049) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7044.slice(2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq7045) {
  var G__7046 = cljs.core.first(seq7045);
  var seq7045__$1 = cljs.core.next(seq7045);
  var G__7047 = cljs.core.first(seq7045__$1);
  var seq7045__$2 = cljs.core.next(seq7045__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__7046, G__7047, seq7045__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_() {
  var args7054 = [];
  var len__5067__auto___7060 = arguments.length;
  var i__5068__auto___7061 = 0;
  while (true) {
    if (i__5068__auto___7061 < len__5067__auto___7060) {
      args7054.push(arguments[i__5068__auto___7061]);
      var G__7062 = i__5068__auto___7061 + 1;
      i__5068__auto___7061 = G__7062;
      continue;
    } else {
    }
    break;
  }
  var G__7059 = args7054.length;
  switch(G__7059) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7054.slice(2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__7064 = y;
        var G__7065 = cljs.core.first(more);
        var G__7066 = cljs.core.next(more);
        x = G__7064;
        y = G__7065;
        more = G__7066;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq7055) {
  var G__7056 = cljs.core.first(seq7055);
  var seq7055__$1 = cljs.core.next(seq7055);
  var G__7057 = cljs.core.first(seq7055__$1);
  var seq7055__$2 = cljs.core.next(seq7055__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7056, G__7057, seq7055__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__7067 = n__$1 - 1;
      var G__7068 = cljs.core.next(xs);
      n__$1 = G__7067;
      xs = G__7068;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str() {
  var args7069 = [];
  var len__5067__auto___7074 = arguments.length;
  var i__5068__auto___7075 = 0;
  while (true) {
    if (i__5068__auto___7075 < len__5067__auto___7074) {
      args7069.push(arguments[i__5068__auto___7075]);
      var G__7076 = i__5068__auto___7075 + 1;
      i__5068__auto___7075 = G__7076;
      continue;
    } else {
    }
    break;
  }
  var G__7073 = args7069.length;
  switch(G__7073) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7069.slice(1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5086__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    return [x].join("");
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__7078 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__7079 = cljs.core.next(more);
      sb = G__7078;
      more = G__7079;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq7070) {
  var G__7071 = cljs.core.first(seq7070);
  var seq7070__$1 = cljs.core.next(seq7070);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__7071, seq7070__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs() {
  var args7080 = [];
  var len__5067__auto___7083 = arguments.length;
  var i__5068__auto___7084 = 0;
  while (true) {
    if (i__5068__auto___7084 < len__5067__auto___7083) {
      args7080.push(arguments[i__5068__auto___7084]);
      var G__7085 = i__5068__auto___7084 + 1;
      i__5068__auto___7084 = G__7085;
      continue;
    } else {
    }
    break;
  }
  var G__7082 = args7080.length;
  switch(G__7082) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7080.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__7087 = cljs.core.next(xs);
            var G__7088 = cljs.core.next(ys);
            xs = G__7087;
            ys = G__7088;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__7089 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__7090 = cljs.core.next(s);
        res = G__7089;
        s = G__7090;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__7091 = (h + (cljs.core.hash(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e)) ^ cljs.core.hash(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__7092 = cljs.core.next(s);
      h = G__7091;
      s = G__7092;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__7093 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__7094 = cljs.core.next(s__$1);
      h = G__7093;
      s__$1 = G__7094;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__7101_7107 = cljs.core.seq(fn_map);
  var chunk__7102_7108 = null;
  var count__7103_7109 = 0;
  var i__7104_7110 = 0;
  while (true) {
    if (i__7104_7110 < count__7103_7109) {
      var vec__7105_7111 = chunk__7102_7108.cljs$core$IIndexed$_nth$arity$2(null, i__7104_7110);
      var key_name_7112 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7105_7111, 0, null);
      var f_7113 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7105_7111, 1, null);
      var str_name_7114 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_7112) : cljs.core.name.call(null, key_name_7112);
      obj[str_name_7114] = f_7113;
      var G__7115 = seq__7101_7107;
      var G__7116 = chunk__7102_7108;
      var G__7117 = count__7103_7109;
      var G__7118 = i__7104_7110 + 1;
      seq__7101_7107 = G__7115;
      chunk__7102_7108 = G__7116;
      count__7103_7109 = G__7117;
      i__7104_7110 = G__7118;
      continue;
    } else {
      var temp__4425__auto___7119 = cljs.core.seq(seq__7101_7107);
      if (temp__4425__auto___7119) {
        var seq__7101_7120__$1 = temp__4425__auto___7119;
        if (cljs.core.chunked_seq_QMARK_(seq__7101_7120__$1)) {
          var c__4812__auto___7121 = cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(seq__7101_7120__$1) : cljs.core.chunk_first.call(null, seq__7101_7120__$1);
          var G__7122 = cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(seq__7101_7120__$1) : cljs.core.chunk_rest.call(null, seq__7101_7120__$1);
          var G__7123 = c__4812__auto___7121;
          var G__7124 = cljs.core.count(c__4812__auto___7121);
          var G__7125 = 0;
          seq__7101_7107 = G__7122;
          chunk__7102_7108 = G__7123;
          count__7103_7109 = G__7124;
          i__7104_7110 = G__7125;
          continue;
        } else {
          var vec__7106_7126 = cljs.core.first(seq__7101_7120__$1);
          var key_name_7127 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7106_7126, 0, null);
          var f_7128 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7106_7126, 1, null);
          var str_name_7129 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_7127) : cljs.core.name.call(null, key_name_7127);
          obj[str_name_7129] = f_7128;
          var G__7130 = cljs.core.next(seq__7101_7120__$1);
          var G__7131 = null;
          var G__7132 = 0;
          var G__7133 = 0;
          seq__7101_7107 = G__7130;
          chunk__7102_7108 = G__7131;
          count__7103_7109 = G__7132;
          i__7104_7110 = G__7133;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 33554432 || x.cljs$core$IList$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
  }
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other)) {
    return cljs.core.seq(other) == null;
  } else {
    return false;
  }
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  if (!(coll == null)) {
    if (coll.cljs$lang$protocol_mask$partition0$ & 134217728 || coll.cljs$core$IReversible$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list() {
  var args__5074__auto__ = [];
  var len__5067__auto___7139 = arguments.length;
  var i__5068__auto___7140 = 0;
  while (true) {
    if (i__5068__auto___7140 < len__5067__auto___7139) {
      args__5074__auto__.push(arguments[i__5068__auto___7140]);
      var G__7141 = i__5068__auto___7140 + 1;
      i__5068__auto___7140 = G__7141;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__7142 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__7142;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__7143 = i - 1;
      var G__7144 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__7143;
      r = G__7144;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq7138) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7138));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4028__auto__ = coll == null;
    if (or__4028__auto__) {
      return or__4028__auto__;
    } else {
      if (!(coll == null)) {
        if (coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4016__auto__ = cljs.core.not(a.ns);
      if (and__4016__auto__) {
        return b.ns;
      } else {
        return and__4016__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__7155 = a.ns;
            var G__7156 = b.ns;
            return goog.array.defaultCompare(G__7155, G__7156);
          }();
          if (0 === nsc) {
            var G__7157 = a.name;
            var G__7158 = b.name;
            return goog.array.defaultCompare(G__7157, G__7158);
          } else {
            return nsc;
          }
        }
      } else {
        var G__7159 = a.name;
        var G__7160 = b.name;
        return goog.array.defaultCompare(G__7159, G__7160);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__7162 = null;
  var G__7162__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__7162__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__7162 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7162__2.call(this, self__, coll);
      case 3:
        return G__7162__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7162.cljs$core$IFn$_invoke$arity$2 = G__7162__2;
  G__7162.cljs$core$IFn$_invoke$arity$3 = G__7162__3;
  return G__7162;
}();
cljs.core.Keyword.prototype.apply = function(self__, args7161) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7161)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4444__auto__ = self__._hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.symbol_identical_QMARK_ = function cljs$core$symbol_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol) {
      return x.str === y.str;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword() {
  var args7165 = [];
  var len__5067__auto___7168 = arguments.length;
  var i__5068__auto___7169 = 0;
  while (true) {
    if (i__5068__auto___7169 < len__5067__auto___7168) {
      args7165.push(arguments[i__5068__auto___7169]);
      var G__7170 = i__5068__auto___7169 + 1;
      i__5068__auto___7169 = G__7170;
      continue;
    } else {
    }
    break;
  }
  var G__7167 = args7165.length;
  switch(G__7167) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7165.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__7172 = ls.sval();
        ls = G__7172;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk() {
  var args7173 = [];
  var len__5067__auto___7176 = arguments.length;
  var i__5068__auto___7177 = 0;
  while (true) {
    if (i__5068__auto___7177 < len__5067__auto___7176) {
      args7173.push(arguments[i__5068__auto___7177]);
      var G__7178 = i__5068__auto___7177 + 1;
      i__5068__auto___7177 = G__7178;
      continue;
    } else {
    }
    break;
  }
  var G__7175 = args7173.length;
  switch(G__7175) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7173.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (!(s == null) ? s.cljs$lang$protocol_mask$partition1$ & 1024 || s.cljs$core$IChunkedNext$ ? true : false : false) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__7182 = cljs.core.next(s__$1);
      s__$1 = G__7182;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_7183 = 0;
  var xs_7184 = cljs.core.seq(coll);
  while (true) {
    if (xs_7184) {
      ret[i_7183] = cljs.core.to_array(cljs.core.first(xs_7184));
      var G__7185 = i_7183 + 1;
      var G__7186 = cljs.core.next(xs_7184);
      i_7183 = G__7185;
      xs_7184 = G__7186;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array() {
  var args7187 = [];
  var len__5067__auto___7190 = arguments.length;
  var i__5068__auto___7191 = 0;
  while (true) {
    if (i__5068__auto___7191 < len__5067__auto___7190) {
      args7187.push(arguments[i__5068__auto___7191]);
      var G__7192 = i__5068__auto___7191 + 1;
      i__5068__auto___7191 = G__7192;
      continue;
    } else {
    }
    break;
  }
  var G__7189 = args7187.length;
  switch(G__7189) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7187.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7194 = i + 1;
        var G__7195 = cljs.core.next(s__$1);
        i = G__7194;
        s__$1 = G__7195;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__4912__auto___7196 = size;
    var i_7197 = 0;
    while (true) {
      if (i_7197 < n__4912__auto___7196) {
        a[i_7197] = init_val_or_seq;
        var G__7198 = i_7197 + 1;
        i_7197 = G__7198;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array() {
  var args7199 = [];
  var len__5067__auto___7202 = arguments.length;
  var i__5068__auto___7203 = 0;
  while (true) {
    if (i__5068__auto___7203 < len__5067__auto___7202) {
      args7199.push(arguments[i__5068__auto___7203]);
      var G__7204 = i__5068__auto___7203 + 1;
      i__5068__auto___7203 = G__7204;
      continue;
    } else {
    }
    break;
  }
  var G__7201 = args7199.length;
  switch(G__7201) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7199.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7206 = i + 1;
        var G__7207 = cljs.core.next(s__$1);
        i = G__7206;
        s__$1 = G__7207;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__4912__auto___7208 = size;
    var i_7209 = 0;
    while (true) {
      if (i_7209 < n__4912__auto___7208) {
        a[i_7209] = init_val_or_seq;
        var G__7210 = i_7209 + 1;
        i_7209 = G__7210;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array() {
  var args7211 = [];
  var len__5067__auto___7214 = arguments.length;
  var i__5068__auto___7215 = 0;
  while (true) {
    if (i__5068__auto___7215 < len__5067__auto___7214) {
      args7211.push(arguments[i__5068__auto___7215]);
      var G__7216 = i__5068__auto___7215 + 1;
      i__5068__auto___7215 = G__7216;
      continue;
    } else {
    }
    break;
  }
  var G__7213 = args7211.length;
  switch(G__7213) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7211.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7218 = i + 1;
        var G__7219 = cljs.core.next(s__$1);
        i = G__7218;
        s__$1 = G__7219;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__4912__auto___7220 = size;
    var i_7221 = 0;
    while (true) {
      if (i_7221 < n__4912__auto___7220) {
        a[i_7221] = init_val_or_seq;
        var G__7222 = i_7221 + 1;
        i_7221 = G__7222;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array() {
  var args7223 = [];
  var len__5067__auto___7226 = arguments.length;
  var i__5068__auto___7227 = 0;
  while (true) {
    if (i__5068__auto___7227 < len__5067__auto___7226) {
      args7223.push(arguments[i__5068__auto___7227]);
      var G__7228 = i__5068__auto___7227 + 1;
      i__5068__auto___7227 = G__7228;
      continue;
    } else {
    }
    break;
  }
  var G__7225 = args7223.length;
  switch(G__7225) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7223.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7230 = i + 1;
        var G__7231 = cljs.core.next(s__$1);
        i = G__7230;
        s__$1 = G__7231;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__4912__auto___7232 = size;
    var i_7233 = 0;
    while (true) {
      if (i_7233 < n__4912__auto___7232) {
        a[i_7233] = init_val_or_seq;
        var G__7234 = i_7233 + 1;
        i_7233 = G__7234;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__7235 = cljs.core.next(s__$1);
        var G__7236 = i - 1;
        var G__7237 = sum + 1;
        s__$1 = G__7235;
        i = G__7236;
        sum = G__7237;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat() {
  var args7239 = [];
  var len__5067__auto___7251 = arguments.length;
  var i__5068__auto___7252 = 0;
  while (true) {
    if (i__5068__auto___7252 < len__5067__auto___7251) {
      args7239.push(arguments[i__5068__auto___7252]);
      var G__7253 = i__5068__auto___7252 + 1;
      i__5068__auto___7252 = G__7253;
      continue;
    } else {
    }
    break;
  }
  var G__7244 = args7239.length;
  switch(G__7244) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7239.slice(2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq7240) {
  var G__7241 = cljs.core.first(seq7240);
  var seq7240__$1 = cljs.core.next(seq7240);
  var G__7242 = cljs.core.first(seq7240__$1);
  var seq7240__$2 = cljs.core.next(seq7240__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__7241, G__7242, seq7240__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_() {
  var args7255 = [];
  var len__5067__auto___7263 = arguments.length;
  var i__5068__auto___7264 = 0;
  while (true) {
    if (i__5068__auto___7264 < len__5067__auto___7263) {
      args7255.push(arguments[i__5068__auto___7264]);
      var G__7265 = i__5068__auto___7264 + 1;
      i__5068__auto___7264 = G__7265;
      continue;
    } else {
    }
    break;
  }
  var G__7262 = args7255.length;
  switch(G__7262) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7255.slice(4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5086__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq7256) {
  var G__7257 = cljs.core.first(seq7256);
  var seq7256__$1 = cljs.core.next(seq7256);
  var G__7258 = cljs.core.first(seq7256__$1);
  var seq7256__$2 = cljs.core.next(seq7256__$1);
  var G__7259 = cljs.core.first(seq7256__$2);
  var seq7256__$3 = cljs.core.next(seq7256__$2);
  var G__7260 = cljs.core.first(seq7256__$3);
  var seq7256__$4 = cljs.core.next(seq7256__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__7257, G__7258, G__7259, G__7260, seq7256__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_() {
  var args7267 = [];
  var len__5067__auto___7273 = arguments.length;
  var i__5068__auto___7274 = 0;
  while (true) {
    if (i__5068__auto___7274 < len__5067__auto___7273) {
      args7267.push(arguments[i__5068__auto___7274]);
      var G__7275 = i__5068__auto___7274 + 1;
      i__5068__auto___7274 = G__7275;
      continue;
    } else {
    }
    break;
  }
  var G__7272 = args7267.length;
  switch(G__7272) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7267.slice(2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__7277 = ntcoll;
      var G__7278 = cljs.core.first(vals);
      var G__7279 = cljs.core.next(vals);
      tcoll = G__7277;
      val = G__7278;
      vals = G__7279;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq7268) {
  var G__7269 = cljs.core.first(seq7268);
  var seq7268__$1 = cljs.core.next(seq7268);
  var G__7270 = cljs.core.first(seq7268__$1);
  var seq7268__$2 = cljs.core.next(seq7268__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7269, G__7270, seq7268__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_() {
  var args7280 = [];
  var len__5067__auto___7287 = arguments.length;
  var i__5068__auto___7288 = 0;
  while (true) {
    if (i__5068__auto___7288 < len__5067__auto___7287) {
      args7280.push(arguments[i__5068__auto___7288]);
      var G__7289 = i__5068__auto___7288 + 1;
      i__5068__auto___7288 = G__7289;
      continue;
    } else {
    }
    break;
  }
  var G__7286 = args7280.length;
  switch(G__7286) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7280.slice(3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5086__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__7291 = ntcoll;
      var G__7292 = cljs.core.first(kvs);
      var G__7293 = cljs.core.second(kvs);
      var G__7294 = cljs.core.nnext(kvs);
      tcoll = G__7291;
      key = G__7292;
      val = G__7293;
      kvs = G__7294;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq7281) {
  var G__7282 = cljs.core.first(seq7281);
  var seq7281__$1 = cljs.core.next(seq7281);
  var G__7283 = cljs.core.first(seq7281__$1);
  var seq7281__$2 = cljs.core.next(seq7281__$1);
  var G__7284 = cljs.core.first(seq7281__$2);
  var seq7281__$3 = cljs.core.next(seq7281__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7282, G__7283, G__7284, seq7281__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_() {
  var args7295 = [];
  var len__5067__auto___7301 = arguments.length;
  var i__5068__auto___7302 = 0;
  while (true) {
    if (i__5068__auto___7302 < len__5067__auto___7301) {
      args7295.push(arguments[i__5068__auto___7302]);
      var G__7303 = i__5068__auto___7302 + 1;
      i__5068__auto___7302 = G__7303;
      continue;
    } else {
    }
    break;
  }
  var G__7300 = args7295.length;
  switch(G__7300) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7295.slice(2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__7305 = ntcoll;
      var G__7306 = cljs.core.first(ks);
      var G__7307 = cljs.core.next(ks);
      tcoll = G__7305;
      key = G__7306;
      ks = G__7307;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq7296) {
  var G__7297 = cljs.core.first(seq7296);
  var seq7296__$1 = cljs.core.next(seq7296);
  var G__7298 = cljs.core.first(seq7296__$1);
  var seq7296__$2 = cljs.core.next(seq7296__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7297, G__7298, seq7296__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_() {
  var args7308 = [];
  var len__5067__auto___7314 = arguments.length;
  var i__5068__auto___7315 = 0;
  while (true) {
    if (i__5068__auto___7315 < len__5067__auto___7314) {
      args7308.push(arguments[i__5068__auto___7315]);
      var G__7316 = i__5068__auto___7315 + 1;
      i__5068__auto___7315 = G__7316;
      continue;
    } else {
    }
    break;
  }
  var G__7313 = args7308.length;
  switch(G__7313) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7308.slice(2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__7318 = ntcoll;
      var G__7319 = cljs.core.first(vals);
      var G__7320 = cljs.core.next(vals);
      tcoll = G__7318;
      val = G__7319;
      vals = G__7320;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq7309) {
  var G__7310 = cljs.core.first(seq7309);
  var seq7309__$1 = cljs.core.next(seq7309);
  var G__7311 = cljs.core.first(seq7309__$1);
  var seq7309__$2 = cljs.core.next(seq7309__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7310, G__7311, seq7309__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a4956 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4956);
      } else {
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a4956) : f.call(null, a4956);
      }
    } else {
      var b4957 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4956, b4957);
        } else {
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a4956, b4957) : f.call(null, a4956, b4957);
        }
      } else {
        var c4958 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4956, b4957, c4958);
          } else {
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a4956, b4957, c4958) : f.call(null, a4956, b4957, c4958);
          }
        } else {
          var d4959 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4956, b4957, c4958, d4959);
            } else {
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a4956, b4957, c4958, d4959) : f.call(null, a4956, b4957, c4958, d4959);
            }
          } else {
            var e4960 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4956, b4957, c4958, d4959, e4960);
              } else {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a4956, b4957, c4958, d4959, e4960) : f.call(null, a4956, b4957, c4958, d4959, e4960);
              }
            } else {
              var f4961 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4956, b4957, c4958, d4959, e4960, f4961);
                } else {
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a4956, b4957, c4958, d4959, e4960, f4961) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961);
                }
              } else {
                var g4962 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4956, b4957, c4958, d4959, e4960, f4961, g4962);
                  } else {
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a4956, b4957, c4958, d4959, e4960, f4961, g4962) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962);
                  }
                } else {
                  var h4963 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963);
                    } else {
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963);
                    }
                  } else {
                    var i4964 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964);
                      } else {
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964);
                      }
                    } else {
                      var j4965 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965);
                        } else {
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965);
                        }
                      } else {
                        var k4966 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966);
                          } else {
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966);
                          }
                        } else {
                          var l4967 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967);
                            } else {
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967);
                            }
                          } else {
                            var m4968 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968);
                              } else {
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968);
                              }
                            } else {
                              var n4969 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969);
                                } else {
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969);
                                }
                              } else {
                                var o4970 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970);
                                  } else {
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970);
                                  }
                                } else {
                                  var p4971 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971);
                                    } else {
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971);
                                    }
                                  } else {
                                    var q4972 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972);
                                      } else {
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972);
                                      }
                                    } else {
                                      var r4973 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972, r4973);
                                        } else {
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972, r4973) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972, r4973);
                                        }
                                      } else {
                                        var s4974 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972, r4973, s4974);
                                          } else {
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972, r4973, s4974) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972, r4973, s4974);
                                          }
                                        } else {
                                          var t4975 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972, r4973, s4974, t4975);
                                            } else {
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972, r4973, s4974, t4975) : f.call(null, a4956, b4957, c4958, d4959, e4960, f4961, g4962, h4963, i4964, j4965, k4966, l4967, m4968, n4969, o4970, p4971, q4972, r4973, s4974, t4975);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply() {
  var args7321 = [];
  var len__5067__auto___7330 = arguments.length;
  var i__5068__auto___7331 = 0;
  while (true) {
    if (i__5068__auto___7331 < len__5067__auto___7330) {
      args7321.push(arguments[i__5068__auto___7331]);
      var G__7332 = i__5068__auto___7331 + 1;
      i__5068__auto___7331 = G__7332;
      continue;
    } else {
    }
    break;
  }
  var G__7329 = args7321.length;
  switch(G__7329) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7321.slice(5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5086__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq7322) {
  var G__7323 = cljs.core.first(seq7322);
  var seq7322__$1 = cljs.core.next(seq7322);
  var G__7324 = cljs.core.first(seq7322__$1);
  var seq7322__$2 = cljs.core.next(seq7322__$1);
  var G__7325 = cljs.core.first(seq7322__$2);
  var seq7322__$3 = cljs.core.next(seq7322__$2);
  var G__7326 = cljs.core.first(seq7322__$3);
  var seq7322__$4 = cljs.core.next(seq7322__$3);
  var G__7327 = cljs.core.first(seq7322__$4);
  var seq7322__$5 = cljs.core.next(seq7322__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__7323, G__7324, G__7325, G__7326, G__7327, seq7322__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta() {
  var args7334 = [];
  var len__5067__auto___7359 = arguments.length;
  var i__5068__auto___7360 = 0;
  while (true) {
    if (i__5068__auto___7360 < len__5067__auto___7359) {
      args7334.push(arguments[i__5068__auto___7360]);
      var G__7361 = i__5068__auto___7360 + 1;
      i__5068__auto___7360 = G__7361;
      continue;
    } else {
    }
    break;
  }
  var G__7343 = args7334.length;
  switch(G__7343) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7334.slice(6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5086__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__7344 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7344) : f.call(null, G__7344);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__7345 = cljs.core.meta(obj);
    var G__7346 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7345, G__7346) : f.call(null, G__7345, G__7346);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__7347 = cljs.core.meta(obj);
    var G__7348 = a;
    var G__7349 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7347, G__7348, G__7349) : f.call(null, G__7347, G__7348, G__7349);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__7350 = cljs.core.meta(obj);
    var G__7351 = a;
    var G__7352 = b;
    var G__7353 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__7350, G__7351, G__7352, G__7353) : f.call(null, G__7350, G__7351, G__7352, G__7353);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__7354 = cljs.core.meta(obj);
    var G__7355 = a;
    var G__7356 = b;
    var G__7357 = c;
    var G__7358 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__7354, G__7355, G__7356, G__7357, G__7358) : f.call(null, G__7354, G__7355, G__7356, G__7357, G__7358);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq7335) {
  var G__7336 = cljs.core.first(seq7335);
  var seq7335__$1 = cljs.core.next(seq7335);
  var G__7337 = cljs.core.first(seq7335__$1);
  var seq7335__$2 = cljs.core.next(seq7335__$1);
  var G__7338 = cljs.core.first(seq7335__$2);
  var seq7335__$3 = cljs.core.next(seq7335__$2);
  var G__7339 = cljs.core.first(seq7335__$3);
  var seq7335__$4 = cljs.core.next(seq7335__$3);
  var G__7340 = cljs.core.first(seq7335__$4);
  var seq7335__$5 = cljs.core.next(seq7335__$4);
  var G__7341 = cljs.core.first(seq7335__$5);
  var seq7335__$6 = cljs.core.next(seq7335__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__7336, G__7337, G__7338, G__7339, G__7340, G__7341, seq7335__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_() {
  var args7363 = [];
  var len__5067__auto___7369 = arguments.length;
  var i__5068__auto___7370 = 0;
  while (true) {
    if (i__5068__auto___7370 < len__5067__auto___7369) {
      args7363.push(arguments[i__5068__auto___7370]);
      var G__7371 = i__5068__auto___7370 + 1;
      i__5068__auto___7370 = G__7371;
      continue;
    } else {
    }
    break;
  }
  var G__7368 = args7363.length;
  switch(G__7368) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7363.slice(2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq7364) {
  var G__7365 = cljs.core.first(seq7364);
  var seq7364__$1 = cljs.core.next(seq7364);
  var G__7366 = cljs.core.first(seq7364__$1);
  var seq7364__$2 = cljs.core.next(seq7364__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7365, G__7366, seq7364__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t7376 !== "undefined") {
  } else {
    cljs.core.t7376 = function(nil_iter, meta7377) {
      this.nil_iter = nil_iter;
      this.meta7377 = meta7377;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t7376.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_7378, meta7377__$1) {
      var self__ = this;
      var _7378__$1 = this;
      return new cljs.core.t7376(self__.nil_iter, meta7377__$1);
    };
    cljs.core.t7376.prototype.cljs$core$IMeta$_meta$arity$1 = function(_7378) {
      var self__ = this;
      var _7378__$1 = this;
      return self__.meta7377;
    };
    cljs.core.t7376.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t7376.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t7376.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t7376.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "nil-iter", "nil-iter", 1101030523, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)), new cljs.core.Symbol(null, "meta7377", "meta7377", 2130413720, null)], 
      null);
    };
    cljs.core.t7376.cljs$lang$type = true;
    cljs.core.t7376.cljs$lang$ctorStr = "cljs.core/t7376";
    cljs.core.t7376.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
      return cljs.core._write(writer__4608__auto__, "cljs.core/t7376");
    };
    cljs.core.__GT_t7376 = function cljs$core$nil_iter_$___GT_t7376(nil_iter__$1, meta7377) {
      return new cljs.core.t7376(nil_iter__$1, meta7377);
    };
  }
  return new cljs.core.t7376(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4016__auto__ = !(lt.stepper == null);
      if (and__4016__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4016__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__7379 = lt;
        var G__7380 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__7379, G__7380) : self__.xform.call(null, G__7379, G__7380);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__7381 = cljs.core.next(iters__$1);
        iters__$1 = G__7381;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4912__auto___7382 = self__.iters.length;
  var i_7383 = 0;
  while (true) {
    if (i_7383 < n__4912__auto___7382) {
      self__.nexts[i_7383] = self__.iters[i_7383].next();
      var G__7384 = i_7383 + 1;
      i_7383 = G__7384;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4016__auto__ = !(lt.stepper == null);
      if (and__4016__auto__) {
        return this$.hasNext();
      } else {
        return and__4016__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper() {
  var args7385 = [];
  var len__5067__auto___7388 = arguments.length;
  var i__5068__auto___7389 = 0;
  while (true) {
    if (i__5068__auto___7389 < len__5067__auto___7388) {
      args7385.push(arguments[i__5068__auto___7389]);
      var G__7390 = i__5068__auto___7389 + 1;
      i__5068__auto___7389 = G__7390;
      continue;
    } else {
    }
    break;
  }
  var G__7387 = args7385.length;
  switch(G__7387) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7385.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  cljs.core.with_meta(new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__7392_7396 = cljs.core.seq(colls);
  var chunk__7393_7397 = null;
  var count__7394_7398 = 0;
  var i__7395_7399 = 0;
  while (true) {
    if (i__7395_7399 < count__7394_7398) {
      var coll_7400 = chunk__7393_7397.cljs$core$IIndexed$_nth$arity$2(null, i__7395_7399);
      iters.push(cljs.core.iter(coll_7400));
      var G__7401 = seq__7392_7396;
      var G__7402 = chunk__7393_7397;
      var G__7403 = count__7394_7398;
      var G__7404 = i__7395_7399 + 1;
      seq__7392_7396 = G__7401;
      chunk__7393_7397 = G__7402;
      count__7394_7398 = G__7403;
      i__7395_7399 = G__7404;
      continue;
    } else {
      var temp__4425__auto___7405 = cljs.core.seq(seq__7392_7396);
      if (temp__4425__auto___7405) {
        var seq__7392_7406__$1 = temp__4425__auto___7405;
        if (cljs.core.chunked_seq_QMARK_(seq__7392_7406__$1)) {
          var c__4812__auto___7407 = cljs.core.chunk_first(seq__7392_7406__$1);
          var G__7408 = cljs.core.chunk_rest(seq__7392_7406__$1);
          var G__7409 = c__4812__auto___7407;
          var G__7410 = cljs.core.count(c__4812__auto___7407);
          var G__7411 = 0;
          seq__7392_7396 = G__7408;
          chunk__7393_7397 = G__7409;
          count__7394_7398 = G__7410;
          i__7395_7399 = G__7411;
          continue;
        } else {
          var coll_7412 = cljs.core.first(seq__7392_7406__$1);
          iters.push(cljs.core.iter(coll_7412));
          var G__7413 = cljs.core.next(seq__7392_7406__$1);
          var G__7414 = null;
          var G__7415 = 0;
          var G__7416 = 0;
          seq__7392_7396 = G__7413;
          chunk__7393_7397 = G__7414;
          count__7394_7398 = G__7415;
          i__7395_7399 = G__7416;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence() {
  var args7417 = [];
  var len__5067__auto___7423 = arguments.length;
  var i__5068__auto___7424 = 0;
  while (true) {
    if (i__5068__auto___7424 < len__5067__auto___7423) {
      args7417.push(arguments[i__5068__auto___7424]);
      var G__7425 = i__5068__auto___7424 + 1;
      i__5068__auto___7424 = G__7425;
      continue;
    } else {
    }
    break;
  }
  var G__7422 = args7417.length;
  switch(G__7422) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7417.slice(2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4028__auto__ = cljs.core.seq(coll);
    if (or__4028__auto__) {
      return or__4028__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq7418) {
  var G__7419 = cljs.core.first(seq7418);
  var seq7418__$1 = cljs.core.next(seq7418);
  var G__7420 = cljs.core.first(seq7418__$1);
  var seq7418__$2 = cljs.core.next(seq7418__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__7419, G__7420, seq7418__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__7428 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__7428) : pred.call(null, G__7428);
      }())) {
        var G__7429 = pred;
        var G__7430 = cljs.core.next(coll);
        pred = G__7429;
        coll = G__7430;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4028__auto__ = function() {
        var G__7434 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__7434) : pred.call(null, G__7434);
      }();
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        var G__7435 = pred;
        var G__7436 = cljs.core.next(coll);
        pred = G__7435;
        coll = G__7436;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__7437 = null;
    var G__7437__0 = function() {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    };
    var G__7437__1 = function(x) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
    };
    var G__7437__2 = function(x, y) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
    };
    var G__7437__3 = function() {
      var G__7438__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__7438 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__7439__i = 0, G__7439__a = new Array(arguments.length - 2);
          while (G__7439__i < G__7439__a.length) {
            G__7439__a[G__7439__i] = arguments[G__7439__i + 2];
            ++G__7439__i;
          }
          zs = new cljs.core.IndexedSeq(G__7439__a, 0);
        }
        return G__7438__delegate.call(this, x, y, zs);
      };
      G__7438.cljs$lang$maxFixedArity = 2;
      G__7438.cljs$lang$applyTo = function(arglist__7440) {
        var x = cljs.core.first(arglist__7440);
        arglist__7440 = cljs.core.next(arglist__7440);
        var y = cljs.core.first(arglist__7440);
        var zs = cljs.core.rest(arglist__7440);
        return G__7438__delegate(x, y, zs);
      };
      G__7438.cljs$core$IFn$_invoke$arity$variadic = G__7438__delegate;
      return G__7438;
    }();
    G__7437 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__7437__0.call(this);
        case 1:
          return G__7437__1.call(this, x);
        case 2:
          return G__7437__2.call(this, x, y);
        default:
          var G__7441 = null;
          if (arguments.length > 2) {
            var G__7442__i = 0, G__7442__a = new Array(arguments.length - 2);
            while (G__7442__i < G__7442__a.length) {
              G__7442__a[G__7442__i] = arguments[G__7442__i + 2];
              ++G__7442__i;
            }
            G__7441 = new cljs.core.IndexedSeq(G__7442__a, 0);
          }
          return G__7437__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7441);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7437.cljs$lang$maxFixedArity = 2;
    G__7437.cljs$lang$applyTo = G__7437__3.cljs$lang$applyTo;
    G__7437.cljs$core$IFn$_invoke$arity$0 = G__7437__0;
    G__7437.cljs$core$IFn$_invoke$arity$1 = G__7437__1;
    G__7437.cljs$core$IFn$_invoke$arity$2 = G__7437__2;
    G__7437.cljs$core$IFn$_invoke$arity$variadic = G__7437__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__7437;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__7443__delegate = function(args) {
      return x;
    };
    var G__7443 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__7444__i = 0, G__7444__a = new Array(arguments.length - 0);
        while (G__7444__i < G__7444__a.length) {
          G__7444__a[G__7444__i] = arguments[G__7444__i + 0];
          ++G__7444__i;
        }
        args = new cljs.core.IndexedSeq(G__7444__a, 0);
      }
      return G__7443__delegate.call(this, args);
    };
    G__7443.cljs$lang$maxFixedArity = 0;
    G__7443.cljs$lang$applyTo = function(arglist__7445) {
      var args = cljs.core.seq(arglist__7445);
      return G__7443__delegate(args);
    };
    G__7443.cljs$core$IFn$_invoke$arity$variadic = G__7443__delegate;
    return G__7443;
  }();
};
cljs.core.comp = function cljs$core$comp() {
  var args7446 = [];
  var len__5067__auto___7473 = arguments.length;
  var i__5068__auto___7474 = 0;
  while (true) {
    if (i__5068__auto___7474 < len__5067__auto___7473) {
      args7446.push(arguments[i__5068__auto___7474]);
      var G__7475 = i__5068__auto___7474 + 1;
      i__5068__auto___7474 = G__7475;
      continue;
    } else {
    }
    break;
  }
  var G__7452 = args7446.length;
  switch(G__7452) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7446.slice(3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5086__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__7477 = null;
    var G__7477__0 = function() {
      var G__7453 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7453) : f.call(null, G__7453);
    };
    var G__7477__1 = function(x) {
      var G__7454 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7454) : f.call(null, G__7454);
    };
    var G__7477__2 = function(x, y) {
      var G__7455 = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7455) : f.call(null, G__7455);
    };
    var G__7477__3 = function(x, y, z) {
      var G__7456 = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7456) : f.call(null, G__7456);
    };
    var G__7477__4 = function() {
      var G__7478__delegate = function(x, y, z, args) {
        var G__7457 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7457) : f.call(null, G__7457);
      };
      var G__7478 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7479__i = 0, G__7479__a = new Array(arguments.length - 3);
          while (G__7479__i < G__7479__a.length) {
            G__7479__a[G__7479__i] = arguments[G__7479__i + 3];
            ++G__7479__i;
          }
          args = new cljs.core.IndexedSeq(G__7479__a, 0);
        }
        return G__7478__delegate.call(this, x, y, z, args);
      };
      G__7478.cljs$lang$maxFixedArity = 3;
      G__7478.cljs$lang$applyTo = function(arglist__7480) {
        var x = cljs.core.first(arglist__7480);
        arglist__7480 = cljs.core.next(arglist__7480);
        var y = cljs.core.first(arglist__7480);
        arglist__7480 = cljs.core.next(arglist__7480);
        var z = cljs.core.first(arglist__7480);
        var args = cljs.core.rest(arglist__7480);
        return G__7478__delegate(x, y, z, args);
      };
      G__7478.cljs$core$IFn$_invoke$arity$variadic = G__7478__delegate;
      return G__7478;
    }();
    G__7477 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__7477__0.call(this);
        case 1:
          return G__7477__1.call(this, x);
        case 2:
          return G__7477__2.call(this, x, y);
        case 3:
          return G__7477__3.call(this, x, y, z);
        default:
          var G__7481 = null;
          if (arguments.length > 3) {
            var G__7482__i = 0, G__7482__a = new Array(arguments.length - 3);
            while (G__7482__i < G__7482__a.length) {
              G__7482__a[G__7482__i] = arguments[G__7482__i + 3];
              ++G__7482__i;
            }
            G__7481 = new cljs.core.IndexedSeq(G__7482__a, 0);
          }
          return G__7477__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7481);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7477.cljs$lang$maxFixedArity = 3;
    G__7477.cljs$lang$applyTo = G__7477__4.cljs$lang$applyTo;
    G__7477.cljs$core$IFn$_invoke$arity$0 = G__7477__0;
    G__7477.cljs$core$IFn$_invoke$arity$1 = G__7477__1;
    G__7477.cljs$core$IFn$_invoke$arity$2 = G__7477__2;
    G__7477.cljs$core$IFn$_invoke$arity$3 = G__7477__3;
    G__7477.cljs$core$IFn$_invoke$arity$variadic = G__7477__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7477;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__7483 = null;
    var G__7483__0 = function() {
      var G__7459 = function() {
        var G__7460 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7460) : g.call(null, G__7460);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7459) : f.call(null, G__7459);
    };
    var G__7483__1 = function(x) {
      var G__7462 = function() {
        var G__7463 = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7463) : g.call(null, G__7463);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7462) : f.call(null, G__7462);
    };
    var G__7483__2 = function(x, y) {
      var G__7465 = function() {
        var G__7466 = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7466) : g.call(null, G__7466);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7465) : f.call(null, G__7465);
    };
    var G__7483__3 = function(x, y, z) {
      var G__7468 = function() {
        var G__7469 = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7469) : g.call(null, G__7469);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7468) : f.call(null, G__7468);
    };
    var G__7483__4 = function() {
      var G__7484__delegate = function(x, y, z, args) {
        var G__7471 = function() {
          var G__7472 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__7472) : g.call(null, G__7472);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7471) : f.call(null, G__7471);
      };
      var G__7484 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7485__i = 0, G__7485__a = new Array(arguments.length - 3);
          while (G__7485__i < G__7485__a.length) {
            G__7485__a[G__7485__i] = arguments[G__7485__i + 3];
            ++G__7485__i;
          }
          args = new cljs.core.IndexedSeq(G__7485__a, 0);
        }
        return G__7484__delegate.call(this, x, y, z, args);
      };
      G__7484.cljs$lang$maxFixedArity = 3;
      G__7484.cljs$lang$applyTo = function(arglist__7486) {
        var x = cljs.core.first(arglist__7486);
        arglist__7486 = cljs.core.next(arglist__7486);
        var y = cljs.core.first(arglist__7486);
        arglist__7486 = cljs.core.next(arglist__7486);
        var z = cljs.core.first(arglist__7486);
        var args = cljs.core.rest(arglist__7486);
        return G__7484__delegate(x, y, z, args);
      };
      G__7484.cljs$core$IFn$_invoke$arity$variadic = G__7484__delegate;
      return G__7484;
    }();
    G__7483 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__7483__0.call(this);
        case 1:
          return G__7483__1.call(this, x);
        case 2:
          return G__7483__2.call(this, x, y);
        case 3:
          return G__7483__3.call(this, x, y, z);
        default:
          var G__7487 = null;
          if (arguments.length > 3) {
            var G__7488__i = 0, G__7488__a = new Array(arguments.length - 3);
            while (G__7488__i < G__7488__a.length) {
              G__7488__a[G__7488__i] = arguments[G__7488__i + 3];
              ++G__7488__i;
            }
            G__7487 = new cljs.core.IndexedSeq(G__7488__a, 0);
          }
          return G__7483__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7487);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7483.cljs$lang$maxFixedArity = 3;
    G__7483.cljs$lang$applyTo = G__7483__4.cljs$lang$applyTo;
    G__7483.cljs$core$IFn$_invoke$arity$0 = G__7483__0;
    G__7483.cljs$core$IFn$_invoke$arity$1 = G__7483__1;
    G__7483.cljs$core$IFn$_invoke$arity$2 = G__7483__2;
    G__7483.cljs$core$IFn$_invoke$arity$3 = G__7483__3;
    G__7483.cljs$core$IFn$_invoke$arity$variadic = G__7483__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7483;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__7489__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__7490 = cljs.core.first(fs__$2).call(null, ret);
            var G__7491 = cljs.core.next(fs__$2);
            ret = G__7490;
            fs__$2 = G__7491;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__7489 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__7492__i = 0, G__7492__a = new Array(arguments.length - 0);
          while (G__7492__i < G__7492__a.length) {
            G__7492__a[G__7492__i] = arguments[G__7492__i + 0];
            ++G__7492__i;
          }
          args = new cljs.core.IndexedSeq(G__7492__a, 0);
        }
        return G__7489__delegate.call(this, args);
      };
      G__7489.cljs$lang$maxFixedArity = 0;
      G__7489.cljs$lang$applyTo = function(arglist__7493) {
        var args = cljs.core.seq(arglist__7493);
        return G__7489__delegate(args);
      };
      G__7489.cljs$core$IFn$_invoke$arity$variadic = G__7489__delegate;
      return G__7489;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq7447) {
  var G__7448 = cljs.core.first(seq7447);
  var seq7447__$1 = cljs.core.next(seq7447);
  var G__7449 = cljs.core.first(seq7447__$1);
  var seq7447__$2 = cljs.core.next(seq7447__$1);
  var G__7450 = cljs.core.first(seq7447__$2);
  var seq7447__$3 = cljs.core.next(seq7447__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__7448, G__7449, G__7450, seq7447__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial() {
  var args7494 = [];
  var len__5067__auto___7502 = arguments.length;
  var i__5068__auto___7503 = 0;
  while (true) {
    if (i__5068__auto___7503 < len__5067__auto___7502) {
      args7494.push(arguments[i__5068__auto___7503]);
      var G__7504 = i__5068__auto___7503 + 1;
      i__5068__auto___7503 = G__7504;
      continue;
    } else {
    }
    break;
  }
  var G__7501 = args7494.length;
  switch(G__7501) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7494.slice(4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5086__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__7506 = null;
    var G__7506__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
    };
    var G__7506__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
    };
    var G__7506__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
    };
    var G__7506__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
    };
    var G__7506__4 = function() {
      var G__7507__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__7507 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7508__i = 0, G__7508__a = new Array(arguments.length - 3);
          while (G__7508__i < G__7508__a.length) {
            G__7508__a[G__7508__i] = arguments[G__7508__i + 3];
            ++G__7508__i;
          }
          args = new cljs.core.IndexedSeq(G__7508__a, 0);
        }
        return G__7507__delegate.call(this, x, y, z, args);
      };
      G__7507.cljs$lang$maxFixedArity = 3;
      G__7507.cljs$lang$applyTo = function(arglist__7509) {
        var x = cljs.core.first(arglist__7509);
        arglist__7509 = cljs.core.next(arglist__7509);
        var y = cljs.core.first(arglist__7509);
        arglist__7509 = cljs.core.next(arglist__7509);
        var z = cljs.core.first(arglist__7509);
        var args = cljs.core.rest(arglist__7509);
        return G__7507__delegate(x, y, z, args);
      };
      G__7507.cljs$core$IFn$_invoke$arity$variadic = G__7507__delegate;
      return G__7507;
    }();
    G__7506 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__7506__0.call(this);
        case 1:
          return G__7506__1.call(this, x);
        case 2:
          return G__7506__2.call(this, x, y);
        case 3:
          return G__7506__3.call(this, x, y, z);
        default:
          var G__7510 = null;
          if (arguments.length > 3) {
            var G__7511__i = 0, G__7511__a = new Array(arguments.length - 3);
            while (G__7511__i < G__7511__a.length) {
              G__7511__a[G__7511__i] = arguments[G__7511__i + 3];
              ++G__7511__i;
            }
            G__7510 = new cljs.core.IndexedSeq(G__7511__a, 0);
          }
          return G__7506__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7510);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7506.cljs$lang$maxFixedArity = 3;
    G__7506.cljs$lang$applyTo = G__7506__4.cljs$lang$applyTo;
    G__7506.cljs$core$IFn$_invoke$arity$0 = G__7506__0;
    G__7506.cljs$core$IFn$_invoke$arity$1 = G__7506__1;
    G__7506.cljs$core$IFn$_invoke$arity$2 = G__7506__2;
    G__7506.cljs$core$IFn$_invoke$arity$3 = G__7506__3;
    G__7506.cljs$core$IFn$_invoke$arity$variadic = G__7506__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7506;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__7512 = null;
    var G__7512__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
    };
    var G__7512__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
    };
    var G__7512__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
    };
    var G__7512__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
    };
    var G__7512__4 = function() {
      var G__7513__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__7513 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7514__i = 0, G__7514__a = new Array(arguments.length - 3);
          while (G__7514__i < G__7514__a.length) {
            G__7514__a[G__7514__i] = arguments[G__7514__i + 3];
            ++G__7514__i;
          }
          args = new cljs.core.IndexedSeq(G__7514__a, 0);
        }
        return G__7513__delegate.call(this, x, y, z, args);
      };
      G__7513.cljs$lang$maxFixedArity = 3;
      G__7513.cljs$lang$applyTo = function(arglist__7515) {
        var x = cljs.core.first(arglist__7515);
        arglist__7515 = cljs.core.next(arglist__7515);
        var y = cljs.core.first(arglist__7515);
        arglist__7515 = cljs.core.next(arglist__7515);
        var z = cljs.core.first(arglist__7515);
        var args = cljs.core.rest(arglist__7515);
        return G__7513__delegate(x, y, z, args);
      };
      G__7513.cljs$core$IFn$_invoke$arity$variadic = G__7513__delegate;
      return G__7513;
    }();
    G__7512 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__7512__0.call(this);
        case 1:
          return G__7512__1.call(this, x);
        case 2:
          return G__7512__2.call(this, x, y);
        case 3:
          return G__7512__3.call(this, x, y, z);
        default:
          var G__7516 = null;
          if (arguments.length > 3) {
            var G__7517__i = 0, G__7517__a = new Array(arguments.length - 3);
            while (G__7517__i < G__7517__a.length) {
              G__7517__a[G__7517__i] = arguments[G__7517__i + 3];
              ++G__7517__i;
            }
            G__7516 = new cljs.core.IndexedSeq(G__7517__a, 0);
          }
          return G__7512__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7516);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7512.cljs$lang$maxFixedArity = 3;
    G__7512.cljs$lang$applyTo = G__7512__4.cljs$lang$applyTo;
    G__7512.cljs$core$IFn$_invoke$arity$0 = G__7512__0;
    G__7512.cljs$core$IFn$_invoke$arity$1 = G__7512__1;
    G__7512.cljs$core$IFn$_invoke$arity$2 = G__7512__2;
    G__7512.cljs$core$IFn$_invoke$arity$3 = G__7512__3;
    G__7512.cljs$core$IFn$_invoke$arity$variadic = G__7512__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7512;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__7518 = null;
    var G__7518__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
    };
    var G__7518__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
    };
    var G__7518__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
    };
    var G__7518__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
    };
    var G__7518__4 = function() {
      var G__7519__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__7519 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7520__i = 0, G__7520__a = new Array(arguments.length - 3);
          while (G__7520__i < G__7520__a.length) {
            G__7520__a[G__7520__i] = arguments[G__7520__i + 3];
            ++G__7520__i;
          }
          args = new cljs.core.IndexedSeq(G__7520__a, 0);
        }
        return G__7519__delegate.call(this, x, y, z, args);
      };
      G__7519.cljs$lang$maxFixedArity = 3;
      G__7519.cljs$lang$applyTo = function(arglist__7521) {
        var x = cljs.core.first(arglist__7521);
        arglist__7521 = cljs.core.next(arglist__7521);
        var y = cljs.core.first(arglist__7521);
        arglist__7521 = cljs.core.next(arglist__7521);
        var z = cljs.core.first(arglist__7521);
        var args = cljs.core.rest(arglist__7521);
        return G__7519__delegate(x, y, z, args);
      };
      G__7519.cljs$core$IFn$_invoke$arity$variadic = G__7519__delegate;
      return G__7519;
    }();
    G__7518 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__7518__0.call(this);
        case 1:
          return G__7518__1.call(this, x);
        case 2:
          return G__7518__2.call(this, x, y);
        case 3:
          return G__7518__3.call(this, x, y, z);
        default:
          var G__7522 = null;
          if (arguments.length > 3) {
            var G__7523__i = 0, G__7523__a = new Array(arguments.length - 3);
            while (G__7523__i < G__7523__a.length) {
              G__7523__a[G__7523__i] = arguments[G__7523__i + 3];
              ++G__7523__i;
            }
            G__7522 = new cljs.core.IndexedSeq(G__7523__a, 0);
          }
          return G__7518__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7522);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7518.cljs$lang$maxFixedArity = 3;
    G__7518.cljs$lang$applyTo = G__7518__4.cljs$lang$applyTo;
    G__7518.cljs$core$IFn$_invoke$arity$0 = G__7518__0;
    G__7518.cljs$core$IFn$_invoke$arity$1 = G__7518__1;
    G__7518.cljs$core$IFn$_invoke$arity$2 = G__7518__2;
    G__7518.cljs$core$IFn$_invoke$arity$3 = G__7518__3;
    G__7518.cljs$core$IFn$_invoke$arity$variadic = G__7518__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7518;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__7524__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__7524 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__7525__i = 0, G__7525__a = new Array(arguments.length - 0);
        while (G__7525__i < G__7525__a.length) {
          G__7525__a[G__7525__i] = arguments[G__7525__i + 0];
          ++G__7525__i;
        }
        args = new cljs.core.IndexedSeq(G__7525__a, 0);
      }
      return G__7524__delegate.call(this, args);
    };
    G__7524.cljs$lang$maxFixedArity = 0;
    G__7524.cljs$lang$applyTo = function(arglist__7526) {
      var args = cljs.core.seq(arglist__7526);
      return G__7524__delegate(args);
    };
    G__7524.cljs$core$IFn$_invoke$arity$variadic = G__7524__delegate;
    return G__7524;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq7495) {
  var G__7496 = cljs.core.first(seq7495);
  var seq7495__$1 = cljs.core.next(seq7495);
  var G__7497 = cljs.core.first(seq7495__$1);
  var seq7495__$2 = cljs.core.next(seq7495__$1);
  var G__7498 = cljs.core.first(seq7495__$2);
  var seq7495__$3 = cljs.core.next(seq7495__$2);
  var G__7499 = cljs.core.first(seq7495__$3);
  var seq7495__$4 = cljs.core.next(seq7495__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__7496, G__7497, G__7498, G__7499, seq7495__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil() {
  var args7527 = [];
  var len__5067__auto___7546 = arguments.length;
  var i__5068__auto___7547 = 0;
  while (true) {
    if (i__5068__auto___7547 < len__5067__auto___7546) {
      args7527.push(arguments[i__5068__auto___7547]);
      var G__7548 = i__5068__auto___7547 + 1;
      i__5068__auto___7547 = G__7548;
      continue;
    } else {
    }
    break;
  }
  var G__7529 = args7527.length;
  switch(G__7529) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7527.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__7550 = null;
    var G__7550__1 = function(a) {
      var G__7530 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7530) : f.call(null, G__7530);
    };
    var G__7550__2 = function(a, b) {
      var G__7531 = a == null ? x : a;
      var G__7532 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7531, G__7532) : f.call(null, G__7531, G__7532);
    };
    var G__7550__3 = function(a, b, c) {
      var G__7533 = a == null ? x : a;
      var G__7534 = b;
      var G__7535 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7533, G__7534, G__7535) : f.call(null, G__7533, G__7534, G__7535);
    };
    var G__7550__4 = function() {
      var G__7551__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__7551 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__7552__i = 0, G__7552__a = new Array(arguments.length - 3);
          while (G__7552__i < G__7552__a.length) {
            G__7552__a[G__7552__i] = arguments[G__7552__i + 3];
            ++G__7552__i;
          }
          ds = new cljs.core.IndexedSeq(G__7552__a, 0);
        }
        return G__7551__delegate.call(this, a, b, c, ds);
      };
      G__7551.cljs$lang$maxFixedArity = 3;
      G__7551.cljs$lang$applyTo = function(arglist__7553) {
        var a = cljs.core.first(arglist__7553);
        arglist__7553 = cljs.core.next(arglist__7553);
        var b = cljs.core.first(arglist__7553);
        arglist__7553 = cljs.core.next(arglist__7553);
        var c = cljs.core.first(arglist__7553);
        var ds = cljs.core.rest(arglist__7553);
        return G__7551__delegate(a, b, c, ds);
      };
      G__7551.cljs$core$IFn$_invoke$arity$variadic = G__7551__delegate;
      return G__7551;
    }();
    G__7550 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__7550__1.call(this, a);
        case 2:
          return G__7550__2.call(this, a, b);
        case 3:
          return G__7550__3.call(this, a, b, c);
        default:
          var G__7554 = null;
          if (arguments.length > 3) {
            var G__7555__i = 0, G__7555__a = new Array(arguments.length - 3);
            while (G__7555__i < G__7555__a.length) {
              G__7555__a[G__7555__i] = arguments[G__7555__i + 3];
              ++G__7555__i;
            }
            G__7554 = new cljs.core.IndexedSeq(G__7555__a, 0);
          }
          return G__7550__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__7554);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7550.cljs$lang$maxFixedArity = 3;
    G__7550.cljs$lang$applyTo = G__7550__4.cljs$lang$applyTo;
    G__7550.cljs$core$IFn$_invoke$arity$1 = G__7550__1;
    G__7550.cljs$core$IFn$_invoke$arity$2 = G__7550__2;
    G__7550.cljs$core$IFn$_invoke$arity$3 = G__7550__3;
    G__7550.cljs$core$IFn$_invoke$arity$variadic = G__7550__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7550;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__7556 = null;
    var G__7556__2 = function(a, b) {
      var G__7536 = a == null ? x : a;
      var G__7537 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7536, G__7537) : f.call(null, G__7536, G__7537);
    };
    var G__7556__3 = function(a, b, c) {
      var G__7538 = a == null ? x : a;
      var G__7539 = b == null ? y : b;
      var G__7540 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7538, G__7539, G__7540) : f.call(null, G__7538, G__7539, G__7540);
    };
    var G__7556__4 = function() {
      var G__7557__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__7557 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__7558__i = 0, G__7558__a = new Array(arguments.length - 3);
          while (G__7558__i < G__7558__a.length) {
            G__7558__a[G__7558__i] = arguments[G__7558__i + 3];
            ++G__7558__i;
          }
          ds = new cljs.core.IndexedSeq(G__7558__a, 0);
        }
        return G__7557__delegate.call(this, a, b, c, ds);
      };
      G__7557.cljs$lang$maxFixedArity = 3;
      G__7557.cljs$lang$applyTo = function(arglist__7559) {
        var a = cljs.core.first(arglist__7559);
        arglist__7559 = cljs.core.next(arglist__7559);
        var b = cljs.core.first(arglist__7559);
        arglist__7559 = cljs.core.next(arglist__7559);
        var c = cljs.core.first(arglist__7559);
        var ds = cljs.core.rest(arglist__7559);
        return G__7557__delegate(a, b, c, ds);
      };
      G__7557.cljs$core$IFn$_invoke$arity$variadic = G__7557__delegate;
      return G__7557;
    }();
    G__7556 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__7556__2.call(this, a, b);
        case 3:
          return G__7556__3.call(this, a, b, c);
        default:
          var G__7560 = null;
          if (arguments.length > 3) {
            var G__7561__i = 0, G__7561__a = new Array(arguments.length - 3);
            while (G__7561__i < G__7561__a.length) {
              G__7561__a[G__7561__i] = arguments[G__7561__i + 3];
              ++G__7561__i;
            }
            G__7560 = new cljs.core.IndexedSeq(G__7561__a, 0);
          }
          return G__7556__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__7560);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7556.cljs$lang$maxFixedArity = 3;
    G__7556.cljs$lang$applyTo = G__7556__4.cljs$lang$applyTo;
    G__7556.cljs$core$IFn$_invoke$arity$2 = G__7556__2;
    G__7556.cljs$core$IFn$_invoke$arity$3 = G__7556__3;
    G__7556.cljs$core$IFn$_invoke$arity$variadic = G__7556__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7556;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__7562 = null;
    var G__7562__2 = function(a, b) {
      var G__7541 = a == null ? x : a;
      var G__7542 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7541, G__7542) : f.call(null, G__7541, G__7542);
    };
    var G__7562__3 = function(a, b, c) {
      var G__7543 = a == null ? x : a;
      var G__7544 = b == null ? y : b;
      var G__7545 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7543, G__7544, G__7545) : f.call(null, G__7543, G__7544, G__7545);
    };
    var G__7562__4 = function() {
      var G__7563__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__7563 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__7564__i = 0, G__7564__a = new Array(arguments.length - 3);
          while (G__7564__i < G__7564__a.length) {
            G__7564__a[G__7564__i] = arguments[G__7564__i + 3];
            ++G__7564__i;
          }
          ds = new cljs.core.IndexedSeq(G__7564__a, 0);
        }
        return G__7563__delegate.call(this, a, b, c, ds);
      };
      G__7563.cljs$lang$maxFixedArity = 3;
      G__7563.cljs$lang$applyTo = function(arglist__7565) {
        var a = cljs.core.first(arglist__7565);
        arglist__7565 = cljs.core.next(arglist__7565);
        var b = cljs.core.first(arglist__7565);
        arglist__7565 = cljs.core.next(arglist__7565);
        var c = cljs.core.first(arglist__7565);
        var ds = cljs.core.rest(arglist__7565);
        return G__7563__delegate(a, b, c, ds);
      };
      G__7563.cljs$core$IFn$_invoke$arity$variadic = G__7563__delegate;
      return G__7563;
    }();
    G__7562 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__7562__2.call(this, a, b);
        case 3:
          return G__7562__3.call(this, a, b, c);
        default:
          var G__7566 = null;
          if (arguments.length > 3) {
            var G__7567__i = 0, G__7567__a = new Array(arguments.length - 3);
            while (G__7567__i < G__7567__a.length) {
              G__7567__a[G__7567__i] = arguments[G__7567__i + 3];
              ++G__7567__i;
            }
            G__7566 = new cljs.core.IndexedSeq(G__7567__a, 0);
          }
          return G__7562__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__7566);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7562.cljs$lang$maxFixedArity = 3;
    G__7562.cljs$lang$applyTo = G__7562__4.cljs$lang$applyTo;
    G__7562.cljs$core$IFn$_invoke$arity$2 = G__7562__2;
    G__7562.cljs$core$IFn$_invoke$arity$3 = G__7562__3;
    G__7562.cljs$core$IFn$_invoke$arity$variadic = G__7562__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__7562;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed() {
  var args7568 = [];
  var len__5067__auto___7601 = arguments.length;
  var i__5068__auto___7602 = 0;
  while (true) {
    if (i__5068__auto___7602 < len__5067__auto___7601) {
      args7568.push(arguments[i__5068__auto___7602]);
      var G__7603 = i__5068__auto___7602 + 1;
      i__5068__auto___7602 = G__7603;
      continue;
    } else {
    }
    break;
  }
  var G__7570 = args7568.length;
  switch(G__7570) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7568.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(-1) : cljs.core.volatile_BANG_.call(null, -1);
    return function(i) {
      return function() {
        var G__7605 = null;
        var G__7605__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__7605__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__7605__2 = function(result, input) {
          var G__7573 = result;
          var G__7574 = function() {
            var G__7575 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__7576 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7575, G__7576) : f.call(null, G__7575, G__7576);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__7573, G__7574) : rf.call(null, G__7573, G__7574);
        };
        G__7605 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__7605__0.call(this);
            case 1:
              return G__7605__1.call(this, result);
            case 2:
              return G__7605__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__7605.cljs$core$IFn$_invoke$arity$0 = G__7605__0;
        G__7605.cljs$core$IFn$_invoke$arity$1 = G__7605__1;
        G__7605.cljs$core$IFn$_invoke$arity$2 = G__7605__2;
        return G__7605;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4912__auto___7606 = size;
          var i_7607 = 0;
          while (true) {
            if (i_7607 < n__4912__auto___7606) {
              cljs.core.chunk_append(b, function() {
                var G__7597 = idx + i_7607;
                var G__7598 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_7607);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7597, G__7598) : f.call(null, G__7597, G__7598);
              }());
              var G__7608 = i_7607 + 1;
              i_7607 = G__7608;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__7599 = idx;
            var G__7600 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7599, G__7600) : f.call(null, G__7599, G__7600);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep() {
  var args7609 = [];
  var len__5067__auto___7614 = arguments.length;
  var i__5068__auto___7615 = 0;
  while (true) {
    if (i__5068__auto___7615 < len__5067__auto___7614) {
      args7609.push(arguments[i__5068__auto___7615]);
      var G__7616 = i__5068__auto___7615 + 1;
      i__5068__auto___7615 = G__7616;
      continue;
    } else {
    }
    break;
  }
  var G__7611 = args7609.length;
  switch(G__7611) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7609.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__7618 = null;
      var G__7618__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__7618__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__7618__2 = function(result, input) {
        var v = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__7618 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__7618__0.call(this);
          case 1:
            return G__7618__1.call(this, result);
          case 2:
            return G__7618__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7618.cljs$core$IFn$_invoke$arity$0 = G__7618__0;
      G__7618.cljs$core$IFn$_invoke$arity$1 = G__7618__1;
      G__7618.cljs$core$IFn$_invoke$arity$2 = G__7618__2;
      return G__7618;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__4912__auto___7619 = size;
        var i_7620 = 0;
        while (true) {
          if (i_7620 < n__4912__auto___7619) {
            var x_7621 = function() {
              var G__7612 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_7620);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7612) : f.call(null, G__7612);
            }();
            if (x_7621 == null) {
            } else {
              cljs.core.chunk_append(b, x_7621);
            }
            var G__7622 = i_7620 + 1;
            i_7620 = G__7622;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__7613 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7613) : f.call(null, G__7613);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__7623 = cljs.core.seq(self__.watches);
  var chunk__7624 = null;
  var count__7625 = 0;
  var i__7626 = 0;
  while (true) {
    if (i__7626 < count__7625) {
      var vec__7627 = chunk__7624.cljs$core$IIndexed$_nth$arity$2(null, i__7626);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7627, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7627, 1, null);
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
      var G__7629 = seq__7623;
      var G__7630 = chunk__7624;
      var G__7631 = count__7625;
      var G__7632 = i__7626 + 1;
      seq__7623 = G__7629;
      chunk__7624 = G__7630;
      count__7625 = G__7631;
      i__7626 = G__7632;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__7623);
      if (temp__4425__auto__) {
        var seq__7623__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__7623__$1)) {
          var c__4812__auto__ = cljs.core.chunk_first(seq__7623__$1);
          var G__7633 = cljs.core.chunk_rest(seq__7623__$1);
          var G__7634 = c__4812__auto__;
          var G__7635 = cljs.core.count(c__4812__auto__);
          var G__7636 = 0;
          seq__7623 = G__7633;
          chunk__7624 = G__7634;
          count__7625 = G__7635;
          i__7626 = G__7636;
          continue;
        } else {
          var vec__7628 = cljs.core.first(seq__7623__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7628, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7628, 1, null);
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
          var G__7637 = cljs.core.next(seq__7623__$1);
          var G__7638 = null;
          var G__7639 = 0;
          var G__7640 = 0;
          seq__7623 = G__7637;
          chunk__7624 = G__7638;
          count__7625 = G__7639;
          i__7626 = G__7640;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom() {
  var args7641 = [];
  var len__5067__auto___7649 = arguments.length;
  var i__5068__auto___7650 = 0;
  while (true) {
    if (i__5068__auto___7650 < len__5067__auto___7649) {
      args7641.push(arguments[i__5068__auto___7650]);
      var G__7651 = i__5068__auto___7650 + 1;
      i__5068__auto___7650 = G__7651;
      continue;
    } else {
    }
    break;
  }
  var G__7645 = args7641.length;
  switch(G__7645) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7641.slice(1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5086__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__7646) {
  var map__7647 = p__7646;
  var map__7647__$1 = (!(map__7647 == null) ? map__7647.cljs$lang$protocol_mask$partition0$ & 64 || map__7647.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__7647) : map__7647;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__7647__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__7647__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq7642) {
  var G__7643 = cljs.core.first(seq7642);
  var seq7642__$1 = cljs.core.next(seq7642);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__7643, seq7642__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__7654 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__7654) : cljs.core.pr_str.call(null, G__7654);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_() {
  var args7655 = [];
  var len__5067__auto___7669 = arguments.length;
  var i__5068__auto___7670 = 0;
  while (true) {
    if (i__5068__auto___7670 < len__5067__auto___7669) {
      args7655.push(arguments[i__5068__auto___7670]);
      var G__7671 = i__5068__auto___7670 + 1;
      i__5068__auto___7670 = G__7671;
      continue;
    } else {
    }
    break;
  }
  var G__7662 = args7655.length;
  switch(G__7662) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7655.slice(4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5086__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__7663 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7663) : f.call(null, G__7663);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__7664 = a.state;
      var G__7665 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7664, G__7665) : f.call(null, G__7664, G__7665);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__7666 = a.state;
      var G__7667 = x;
      var G__7668 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7666, G__7667, G__7668) : f.call(null, G__7666, G__7667, G__7668);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq7656) {
  var G__7657 = cljs.core.first(seq7656);
  var seq7656__$1 = cljs.core.next(seq7656);
  var G__7658 = cljs.core.first(seq7656__$1);
  var seq7656__$2 = cljs.core.next(seq7656__$1);
  var G__7659 = cljs.core.first(seq7656__$2);
  var seq7656__$3 = cljs.core.next(seq7656__$2);
  var G__7660 = cljs.core.first(seq7656__$3);
  var seq7656__$4 = cljs.core.next(seq7656__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7657, G__7658, G__7659, G__7660, seq7656__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed() {
  var args7673 = [];
  var len__5067__auto___7704 = arguments.length;
  var i__5068__auto___7705 = 0;
  while (true) {
    if (i__5068__auto___7705 < len__5067__auto___7704) {
      args7673.push(arguments[i__5068__auto___7705]);
      var G__7706 = i__5068__auto___7705 + 1;
      i__5068__auto___7705 = G__7706;
      continue;
    } else {
    }
    break;
  }
  var G__7675 = args7673.length;
  switch(G__7675) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7673.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__7708 = null;
        var G__7708__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__7708__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__7708__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
          if (v == null) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          }
        };
        G__7708 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__7708__0.call(this);
            case 1:
              return G__7708__1.call(this, result);
            case 2:
              return G__7708__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__7708.cljs$core$IFn$_invoke$arity$0 = G__7708__0;
        G__7708.cljs$core$IFn$_invoke$arity$1 = G__7708__1;
        G__7708.cljs$core$IFn$_invoke$arity$2 = G__7708__2;
        return G__7708;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4912__auto___7709 = size;
          var i_7710 = 0;
          while (true) {
            if (i_7710 < n__4912__auto___7709) {
              var x_7711 = function() {
                var G__7700 = idx + i_7710;
                var G__7701 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_7710);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7700, G__7701) : f.call(null, G__7700, G__7701);
              }();
              if (x_7711 == null) {
              } else {
                cljs.core.chunk_append(b, x_7711);
              }
              var G__7712 = i_7710 + 1;
              i_7710 = G__7712;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__7702 = idx;
            var G__7703 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7702, G__7703) : f.call(null, G__7702, G__7703);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred() {
  var args7719 = [];
  var len__5067__auto___7726 = arguments.length;
  var i__5068__auto___7727 = 0;
  while (true) {
    if (i__5068__auto___7727 < len__5067__auto___7726) {
      args7719.push(arguments[i__5068__auto___7727]);
      var G__7728 = i__5068__auto___7727 + 1;
      i__5068__auto___7727 = G__7728;
      continue;
    } else {
    }
    break;
  }
  var G__7725 = args7719.length;
  switch(G__7725) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7719.slice(3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5086__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4016__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__4016__auto__)) {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        } else {
          return and__4016__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4016__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__4016__auto__)) {
          var and__4016__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
          if (cljs.core.truth_(and__4016__auto____$1)) {
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
          } else {
            return and__4016__auto____$1;
          }
        } else {
          return and__4016__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__7730__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4016__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4016__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4016__auto__;
          }
        }());
      };
      var G__7730 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7731__i = 0, G__7731__a = new Array(arguments.length - 3);
          while (G__7731__i < G__7731__a.length) {
            G__7731__a[G__7731__i] = arguments[G__7731__i + 3];
            ++G__7731__i;
          }
          args = new cljs.core.IndexedSeq(G__7731__a, 0);
        }
        return G__7730__delegate.call(this, x, y, z, args);
      };
      G__7730.cljs$lang$maxFixedArity = 3;
      G__7730.cljs$lang$applyTo = function(arglist__7732) {
        var x = cljs.core.first(arglist__7732);
        arglist__7732 = cljs.core.next(arglist__7732);
        var y = cljs.core.first(arglist__7732);
        arglist__7732 = cljs.core.next(arglist__7732);
        var z = cljs.core.first(arglist__7732);
        var args = cljs.core.rest(arglist__7732);
        return G__7730__delegate(x, y, z, args);
      };
      G__7730.cljs$core$IFn$_invoke$arity$variadic = G__7730__delegate;
      return G__7730;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__7733 = null;
          if (arguments.length > 3) {
            var G__7734__i = 0, G__7734__a = new Array(arguments.length - 3);
            while (G__7734__i < G__7734__a.length) {
              G__7734__a[G__7734__i] = arguments[G__7734__i + 3];
              ++G__7734__i;
            }
            G__7733 = new cljs.core.IndexedSeq(G__7734__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7733);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4016__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4016__auto__)) {
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        } else {
          return and__4016__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4016__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4016__auto__)) {
          var and__4016__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__4016__auto____$1)) {
            var and__4016__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(and__4016__auto____$2)) {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
            } else {
              return and__4016__auto____$2;
            }
          } else {
            return and__4016__auto____$1;
          }
        } else {
          return and__4016__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4016__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4016__auto__)) {
          var and__4016__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__4016__auto____$1)) {
            var and__4016__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
            if (cljs.core.truth_(and__4016__auto____$2)) {
              var and__4016__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
              if (cljs.core.truth_(and__4016__auto____$3)) {
                var and__4016__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4016__auto____$4)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                } else {
                  return and__4016__auto____$4;
                }
              } else {
                return and__4016__auto____$3;
              }
            } else {
              return and__4016__auto____$2;
            }
          } else {
            return and__4016__auto____$1;
          }
        } else {
          return and__4016__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__7735__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4016__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4016__auto__)) {
            return cljs.core.every_QMARK_(function(and__4016__auto__) {
              return function(p1__7713_SHARP_) {
                var and__4016__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__7713_SHARP_) : p1.call(null, p1__7713_SHARP_);
                if (cljs.core.truth_(and__4016__auto____$1)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__7713_SHARP_) : p2.call(null, p1__7713_SHARP_);
                } else {
                  return and__4016__auto____$1;
                }
              };
            }(and__4016__auto__), args);
          } else {
            return and__4016__auto__;
          }
        }());
      };
      var G__7735 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7736__i = 0, G__7736__a = new Array(arguments.length - 3);
          while (G__7736__i < G__7736__a.length) {
            G__7736__a[G__7736__i] = arguments[G__7736__i + 3];
            ++G__7736__i;
          }
          args = new cljs.core.IndexedSeq(G__7736__a, 0);
        }
        return G__7735__delegate.call(this, x, y, z, args);
      };
      G__7735.cljs$lang$maxFixedArity = 3;
      G__7735.cljs$lang$applyTo = function(arglist__7737) {
        var x = cljs.core.first(arglist__7737);
        arglist__7737 = cljs.core.next(arglist__7737);
        var y = cljs.core.first(arglist__7737);
        arglist__7737 = cljs.core.next(arglist__7737);
        var z = cljs.core.first(arglist__7737);
        var args = cljs.core.rest(arglist__7737);
        return G__7735__delegate(x, y, z, args);
      };
      G__7735.cljs$core$IFn$_invoke$arity$variadic = G__7735__delegate;
      return G__7735;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__7738 = null;
          if (arguments.length > 3) {
            var G__7739__i = 0, G__7739__a = new Array(arguments.length - 3);
            while (G__7739__i < G__7739__a.length) {
              G__7739__a[G__7739__i] = arguments[G__7739__i + 3];
              ++G__7739__i;
            }
            G__7738 = new cljs.core.IndexedSeq(G__7739__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7738);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4016__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4016__auto__)) {
          var and__4016__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4016__auto____$1)) {
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          } else {
            return and__4016__auto____$1;
          }
        } else {
          return and__4016__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4016__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4016__auto__)) {
          var and__4016__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4016__auto____$1)) {
            var and__4016__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__4016__auto____$2)) {
              var and__4016__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__4016__auto____$3)) {
                var and__4016__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4016__auto____$4)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                } else {
                  return and__4016__auto____$4;
                }
              } else {
                return and__4016__auto____$3;
              }
            } else {
              return and__4016__auto____$2;
            }
          } else {
            return and__4016__auto____$1;
          }
        } else {
          return and__4016__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4016__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4016__auto__)) {
          var and__4016__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4016__auto____$1)) {
            var and__4016__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__4016__auto____$2)) {
              var and__4016__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__4016__auto____$3)) {
                var and__4016__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4016__auto____$4)) {
                  var and__4016__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(and__4016__auto____$5)) {
                    var and__4016__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                    if (cljs.core.truth_(and__4016__auto____$6)) {
                      var and__4016__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                      if (cljs.core.truth_(and__4016__auto____$7)) {
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                      } else {
                        return and__4016__auto____$7;
                      }
                    } else {
                      return and__4016__auto____$6;
                    }
                  } else {
                    return and__4016__auto____$5;
                  }
                } else {
                  return and__4016__auto____$4;
                }
              } else {
                return and__4016__auto____$3;
              }
            } else {
              return and__4016__auto____$2;
            }
          } else {
            return and__4016__auto____$1;
          }
        } else {
          return and__4016__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__7740__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4016__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4016__auto__)) {
            return cljs.core.every_QMARK_(function(and__4016__auto__) {
              return function(p1__7714_SHARP_) {
                var and__4016__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__7714_SHARP_) : p1.call(null, p1__7714_SHARP_);
                if (cljs.core.truth_(and__4016__auto____$1)) {
                  var and__4016__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__7714_SHARP_) : p2.call(null, p1__7714_SHARP_);
                  if (cljs.core.truth_(and__4016__auto____$2)) {
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__7714_SHARP_) : p3.call(null, p1__7714_SHARP_);
                  } else {
                    return and__4016__auto____$2;
                  }
                } else {
                  return and__4016__auto____$1;
                }
              };
            }(and__4016__auto__), args);
          } else {
            return and__4016__auto__;
          }
        }());
      };
      var G__7740 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7741__i = 0, G__7741__a = new Array(arguments.length - 3);
          while (G__7741__i < G__7741__a.length) {
            G__7741__a[G__7741__i] = arguments[G__7741__i + 3];
            ++G__7741__i;
          }
          args = new cljs.core.IndexedSeq(G__7741__a, 0);
        }
        return G__7740__delegate.call(this, x, y, z, args);
      };
      G__7740.cljs$lang$maxFixedArity = 3;
      G__7740.cljs$lang$applyTo = function(arglist__7742) {
        var x = cljs.core.first(arglist__7742);
        arglist__7742 = cljs.core.next(arglist__7742);
        var y = cljs.core.first(arglist__7742);
        arglist__7742 = cljs.core.next(arglist__7742);
        var z = cljs.core.first(arglist__7742);
        var args = cljs.core.rest(arglist__7742);
        return G__7740__delegate(x, y, z, args);
      };
      G__7740.cljs$core$IFn$_invoke$arity$variadic = G__7740__delegate;
      return G__7740;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__7743 = null;
          if (arguments.length > 3) {
            var G__7744__i = 0, G__7744__a = new Array(arguments.length - 3);
            while (G__7744__i < G__7744__a.length) {
              G__7744__a[G__7744__i] = arguments[G__7744__i + 3];
              ++G__7744__i;
            }
            G__7743 = new cljs.core.IndexedSeq(G__7744__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7743);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__7715_SHARP_) {
            return p1__7715_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7715_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__7715_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__7716_SHARP_) {
            var and__4016__auto__ = p1__7716_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7716_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__7716_SHARP_.call(null, x);
            if (cljs.core.truth_(and__4016__auto__)) {
              return p1__7716_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7716_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__7716_SHARP_.call(null, y);
            } else {
              return and__4016__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__7717_SHARP_) {
            var and__4016__auto__ = p1__7717_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7717_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__7717_SHARP_.call(null, x);
            if (cljs.core.truth_(and__4016__auto__)) {
              var and__4016__auto____$1 = p1__7717_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7717_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__7717_SHARP_.call(null, y);
              if (cljs.core.truth_(and__4016__auto____$1)) {
                return p1__7717_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7717_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__7717_SHARP_.call(null, z);
              } else {
                return and__4016__auto____$1;
              }
            } else {
              return and__4016__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__7745__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__4016__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__4016__auto__)) {
              return cljs.core.every_QMARK_(function(and__4016__auto__, ps__$1) {
                return function(p1__7718_SHARP_) {
                  return cljs.core.every_QMARK_(p1__7718_SHARP_, args);
                };
              }(and__4016__auto__, ps__$1), ps__$1);
            } else {
              return and__4016__auto__;
            }
          }());
        };
        var G__7745 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__7746__i = 0, G__7746__a = new Array(arguments.length - 3);
            while (G__7746__i < G__7746__a.length) {
              G__7746__a[G__7746__i] = arguments[G__7746__i + 3];
              ++G__7746__i;
            }
            args = new cljs.core.IndexedSeq(G__7746__a, 0);
          }
          return G__7745__delegate.call(this, x, y, z, args);
        };
        G__7745.cljs$lang$maxFixedArity = 3;
        G__7745.cljs$lang$applyTo = function(arglist__7747) {
          var x = cljs.core.first(arglist__7747);
          arglist__7747 = cljs.core.next(arglist__7747);
          var y = cljs.core.first(arglist__7747);
          arglist__7747 = cljs.core.next(arglist__7747);
          var z = cljs.core.first(arglist__7747);
          var args = cljs.core.rest(arglist__7747);
          return G__7745__delegate(x, y, z, args);
        };
        G__7745.cljs$core$IFn$_invoke$arity$variadic = G__7745__delegate;
        return G__7745;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__7748 = null;
            if (arguments.length > 3) {
              var G__7749__i = 0, G__7749__a = new Array(arguments.length - 3);
              while (G__7749__i < G__7749__a.length) {
                G__7749__a[G__7749__i] = arguments[G__7749__i + 3];
                ++G__7749__i;
              }
              G__7748 = new cljs.core.IndexedSeq(G__7749__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7748);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq7720) {
  var G__7721 = cljs.core.first(seq7720);
  var seq7720__$1 = cljs.core.next(seq7720);
  var G__7722 = cljs.core.first(seq7720__$1);
  var seq7720__$2 = cljs.core.next(seq7720__$1);
  var G__7723 = cljs.core.first(seq7720__$2);
  var seq7720__$3 = cljs.core.next(seq7720__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__7721, G__7722, G__7723, seq7720__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn() {
  var args7756 = [];
  var len__5067__auto___7763 = arguments.length;
  var i__5068__auto___7764 = 0;
  while (true) {
    if (i__5068__auto___7764 < len__5067__auto___7763) {
      args7756.push(arguments[i__5068__auto___7764]);
      var G__7765 = i__5068__auto___7764 + 1;
      i__5068__auto___7764 = G__7765;
      continue;
    } else {
    }
    break;
  }
  var G__7762 = args7756.length;
  switch(G__7762) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7756.slice(3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5086__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4028__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4028__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        var or__4028__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        if (cljs.core.truth_(or__4028__auto____$1)) {
          return or__4028__auto____$1;
        } else {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__7767__delegate = function(x, y, z, args) {
        var or__4028__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4028__auto__)) {
          return or__4028__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__7767 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7768__i = 0, G__7768__a = new Array(arguments.length - 3);
          while (G__7768__i < G__7768__a.length) {
            G__7768__a[G__7768__i] = arguments[G__7768__i + 3];
            ++G__7768__i;
          }
          args = new cljs.core.IndexedSeq(G__7768__a, 0);
        }
        return G__7767__delegate.call(this, x, y, z, args);
      };
      G__7767.cljs$lang$maxFixedArity = 3;
      G__7767.cljs$lang$applyTo = function(arglist__7769) {
        var x = cljs.core.first(arglist__7769);
        arglist__7769 = cljs.core.next(arglist__7769);
        var y = cljs.core.first(arglist__7769);
        arglist__7769 = cljs.core.next(arglist__7769);
        var z = cljs.core.first(arglist__7769);
        var args = cljs.core.rest(arglist__7769);
        return G__7767__delegate(x, y, z, args);
      };
      G__7767.cljs$core$IFn$_invoke$arity$variadic = G__7767__delegate;
      return G__7767;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__7770 = null;
          if (arguments.length > 3) {
            var G__7771__i = 0, G__7771__a = new Array(arguments.length - 3);
            while (G__7771__i < G__7771__a.length) {
              G__7771__a[G__7771__i] = arguments[G__7771__i + 3];
              ++G__7771__i;
            }
            G__7770 = new cljs.core.IndexedSeq(G__7771__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7770);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4028__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4028__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        var or__4028__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__4028__auto____$1)) {
          return or__4028__auto____$1;
        } else {
          var or__4028__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(or__4028__auto____$2)) {
            return or__4028__auto____$2;
          } else {
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4028__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        var or__4028__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__4028__auto____$1)) {
          return or__4028__auto____$1;
        } else {
          var or__4028__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
          if (cljs.core.truth_(or__4028__auto____$2)) {
            return or__4028__auto____$2;
          } else {
            var or__4028__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(or__4028__auto____$3)) {
              return or__4028__auto____$3;
            } else {
              var or__4028__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4028__auto____$4)) {
                return or__4028__auto____$4;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__7772__delegate = function(x, y, z, args) {
        var or__4028__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4028__auto__)) {
          return or__4028__auto__;
        } else {
          return cljs.core.some(function(or__4028__auto__) {
            return function(p1__7750_SHARP_) {
              var or__4028__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__7750_SHARP_) : p1.call(null, p1__7750_SHARP_);
              if (cljs.core.truth_(or__4028__auto____$1)) {
                return or__4028__auto____$1;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__7750_SHARP_) : p2.call(null, p1__7750_SHARP_);
              }
            };
          }(or__4028__auto__), args);
        }
      };
      var G__7772 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7773__i = 0, G__7773__a = new Array(arguments.length - 3);
          while (G__7773__i < G__7773__a.length) {
            G__7773__a[G__7773__i] = arguments[G__7773__i + 3];
            ++G__7773__i;
          }
          args = new cljs.core.IndexedSeq(G__7773__a, 0);
        }
        return G__7772__delegate.call(this, x, y, z, args);
      };
      G__7772.cljs$lang$maxFixedArity = 3;
      G__7772.cljs$lang$applyTo = function(arglist__7774) {
        var x = cljs.core.first(arglist__7774);
        arglist__7774 = cljs.core.next(arglist__7774);
        var y = cljs.core.first(arglist__7774);
        arglist__7774 = cljs.core.next(arglist__7774);
        var z = cljs.core.first(arglist__7774);
        var args = cljs.core.rest(arglist__7774);
        return G__7772__delegate(x, y, z, args);
      };
      G__7772.cljs$core$IFn$_invoke$arity$variadic = G__7772__delegate;
      return G__7772;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__7775 = null;
          if (arguments.length > 3) {
            var G__7776__i = 0, G__7776__a = new Array(arguments.length - 3);
            while (G__7776__i < G__7776__a.length) {
              G__7776__a[G__7776__i] = arguments[G__7776__i + 3];
              ++G__7776__i;
            }
            G__7775 = new cljs.core.IndexedSeq(G__7776__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7775);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4028__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        var or__4028__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4028__auto____$1)) {
          return or__4028__auto____$1;
        } else {
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4028__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        var or__4028__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4028__auto____$1)) {
          return or__4028__auto____$1;
        } else {
          var or__4028__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__4028__auto____$2)) {
            return or__4028__auto____$2;
          } else {
            var or__4028__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__4028__auto____$3)) {
              return or__4028__auto____$3;
            } else {
              var or__4028__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4028__auto____$4)) {
                return or__4028__auto____$4;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4028__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        var or__4028__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4028__auto____$1)) {
          return or__4028__auto____$1;
        } else {
          var or__4028__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__4028__auto____$2)) {
            return or__4028__auto____$2;
          } else {
            var or__4028__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__4028__auto____$3)) {
              return or__4028__auto____$3;
            } else {
              var or__4028__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4028__auto____$4)) {
                return or__4028__auto____$4;
              } else {
                var or__4028__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                if (cljs.core.truth_(or__4028__auto____$5)) {
                  return or__4028__auto____$5;
                } else {
                  var or__4028__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__4028__auto____$6)) {
                    return or__4028__auto____$6;
                  } else {
                    var or__4028__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                    if (cljs.core.truth_(or__4028__auto____$7)) {
                      return or__4028__auto____$7;
                    } else {
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__7777__delegate = function(x, y, z, args) {
        var or__4028__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4028__auto__)) {
          return or__4028__auto__;
        } else {
          return cljs.core.some(function(or__4028__auto__) {
            return function(p1__7751_SHARP_) {
              var or__4028__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__7751_SHARP_) : p1.call(null, p1__7751_SHARP_);
              if (cljs.core.truth_(or__4028__auto____$1)) {
                return or__4028__auto____$1;
              } else {
                var or__4028__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__7751_SHARP_) : p2.call(null, p1__7751_SHARP_);
                if (cljs.core.truth_(or__4028__auto____$2)) {
                  return or__4028__auto____$2;
                } else {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__7751_SHARP_) : p3.call(null, p1__7751_SHARP_);
                }
              }
            };
          }(or__4028__auto__), args);
        }
      };
      var G__7777 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__7778__i = 0, G__7778__a = new Array(arguments.length - 3);
          while (G__7778__i < G__7778__a.length) {
            G__7778__a[G__7778__i] = arguments[G__7778__i + 3];
            ++G__7778__i;
          }
          args = new cljs.core.IndexedSeq(G__7778__a, 0);
        }
        return G__7777__delegate.call(this, x, y, z, args);
      };
      G__7777.cljs$lang$maxFixedArity = 3;
      G__7777.cljs$lang$applyTo = function(arglist__7779) {
        var x = cljs.core.first(arglist__7779);
        arglist__7779 = cljs.core.next(arglist__7779);
        var y = cljs.core.first(arglist__7779);
        arglist__7779 = cljs.core.next(arglist__7779);
        var z = cljs.core.first(arglist__7779);
        var args = cljs.core.rest(arglist__7779);
        return G__7777__delegate(x, y, z, args);
      };
      G__7777.cljs$core$IFn$_invoke$arity$variadic = G__7777__delegate;
      return G__7777;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__7780 = null;
          if (arguments.length > 3) {
            var G__7781__i = 0, G__7781__a = new Array(arguments.length - 3);
            while (G__7781__i < G__7781__a.length) {
              G__7781__a[G__7781__i] = arguments[G__7781__i + 3];
              ++G__7781__i;
            }
            G__7780 = new cljs.core.IndexedSeq(G__7781__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7780);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__7752_SHARP_) {
            return p1__7752_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7752_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__7752_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__7753_SHARP_) {
            var or__4028__auto__ = p1__7753_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7753_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__7753_SHARP_.call(null, x);
            if (cljs.core.truth_(or__4028__auto__)) {
              return or__4028__auto__;
            } else {
              return p1__7753_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7753_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__7753_SHARP_.call(null, y);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__7754_SHARP_) {
            var or__4028__auto__ = p1__7754_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7754_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__7754_SHARP_.call(null, x);
            if (cljs.core.truth_(or__4028__auto__)) {
              return or__4028__auto__;
            } else {
              var or__4028__auto____$1 = p1__7754_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7754_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__7754_SHARP_.call(null, y);
              if (cljs.core.truth_(or__4028__auto____$1)) {
                return or__4028__auto____$1;
              } else {
                return p1__7754_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__7754_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__7754_SHARP_.call(null, z);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__7782__delegate = function(x, y, z, args) {
          var or__4028__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4028__auto__)) {
            return or__4028__auto__;
          } else {
            return cljs.core.some(function(or__4028__auto__, ps__$1) {
              return function(p1__7755_SHARP_) {
                return cljs.core.some(p1__7755_SHARP_, args);
              };
            }(or__4028__auto__, ps__$1), ps__$1);
          }
        };
        var G__7782 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__7783__i = 0, G__7783__a = new Array(arguments.length - 3);
            while (G__7783__i < G__7783__a.length) {
              G__7783__a[G__7783__i] = arguments[G__7783__i + 3];
              ++G__7783__i;
            }
            args = new cljs.core.IndexedSeq(G__7783__a, 0);
          }
          return G__7782__delegate.call(this, x, y, z, args);
        };
        G__7782.cljs$lang$maxFixedArity = 3;
        G__7782.cljs$lang$applyTo = function(arglist__7784) {
          var x = cljs.core.first(arglist__7784);
          arglist__7784 = cljs.core.next(arglist__7784);
          var y = cljs.core.first(arglist__7784);
          arglist__7784 = cljs.core.next(arglist__7784);
          var z = cljs.core.first(arglist__7784);
          var args = cljs.core.rest(arglist__7784);
          return G__7782__delegate(x, y, z, args);
        };
        G__7782.cljs$core$IFn$_invoke$arity$variadic = G__7782__delegate;
        return G__7782;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__7785 = null;
            if (arguments.length > 3) {
              var G__7786__i = 0, G__7786__a = new Array(arguments.length - 3);
              while (G__7786__i < G__7786__a.length) {
                G__7786__a[G__7786__i] = arguments[G__7786__i + 3];
                ++G__7786__i;
              }
              G__7785 = new cljs.core.IndexedSeq(G__7786__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7785);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq7757) {
  var G__7758 = cljs.core.first(seq7757);
  var seq7757__$1 = cljs.core.next(seq7757);
  var G__7759 = cljs.core.first(seq7757__$1);
  var seq7757__$2 = cljs.core.next(seq7757__$1);
  var G__7760 = cljs.core.first(seq7757__$2);
  var seq7757__$3 = cljs.core.next(seq7757__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__7758, G__7759, G__7760, seq7757__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map() {
  var args7788 = [];
  var len__5067__auto___7808 = arguments.length;
  var i__5068__auto___7809 = 0;
  while (true) {
    if (i__5068__auto___7809 < len__5067__auto___7808) {
      args7788.push(arguments[i__5068__auto___7809]);
      var G__7810 = i__5068__auto___7809 + 1;
      i__5068__auto___7809 = G__7810;
      continue;
    } else {
    }
    break;
  }
  var G__7795 = args7788.length;
  switch(G__7795) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7788.slice(4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5086__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__7812 = null;
      var G__7812__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__7812__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__7812__2 = function(result, input) {
        var G__7796 = result;
        var G__7797 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__7796, G__7797) : rf.call(null, G__7796, G__7797);
      };
      var G__7812__3 = function() {
        var G__7813__delegate = function(result, input, inputs) {
          var G__7798 = result;
          var G__7799 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__7798, G__7799) : rf.call(null, G__7798, G__7799);
        };
        var G__7813 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__7814__i = 0, G__7814__a = new Array(arguments.length - 2);
            while (G__7814__i < G__7814__a.length) {
              G__7814__a[G__7814__i] = arguments[G__7814__i + 2];
              ++G__7814__i;
            }
            inputs = new cljs.core.IndexedSeq(G__7814__a, 0);
          }
          return G__7813__delegate.call(this, result, input, inputs);
        };
        G__7813.cljs$lang$maxFixedArity = 2;
        G__7813.cljs$lang$applyTo = function(arglist__7815) {
          var result = cljs.core.first(arglist__7815);
          arglist__7815 = cljs.core.next(arglist__7815);
          var input = cljs.core.first(arglist__7815);
          var inputs = cljs.core.rest(arglist__7815);
          return G__7813__delegate(result, input, inputs);
        };
        G__7813.cljs$core$IFn$_invoke$arity$variadic = G__7813__delegate;
        return G__7813;
      }();
      G__7812 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__7812__0.call(this);
          case 1:
            return G__7812__1.call(this, result);
          case 2:
            return G__7812__2.call(this, result, input);
          default:
            var G__7816 = null;
            if (arguments.length > 2) {
              var G__7817__i = 0, G__7817__a = new Array(arguments.length - 2);
              while (G__7817__i < G__7817__a.length) {
                G__7817__a[G__7817__i] = arguments[G__7817__i + 2];
                ++G__7817__i;
              }
              G__7816 = new cljs.core.IndexedSeq(G__7817__a, 0);
            }
            return G__7812__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__7816);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7812.cljs$lang$maxFixedArity = 2;
      G__7812.cljs$lang$applyTo = G__7812__3.cljs$lang$applyTo;
      G__7812.cljs$core$IFn$_invoke$arity$0 = G__7812__0;
      G__7812.cljs$core$IFn$_invoke$arity$1 = G__7812__1;
      G__7812.cljs$core$IFn$_invoke$arity$2 = G__7812__2;
      G__7812.cljs$core$IFn$_invoke$arity$variadic = G__7812__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__7812;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__4912__auto___7818 = size;
        var i_7819 = 0;
        while (true) {
          if (i_7819 < n__4912__auto___7818) {
            cljs.core.chunk_append(b, function() {
              var G__7800 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_7819);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7800) : f.call(null, G__7800);
            }());
            var G__7820 = i_7819 + 1;
            i_7819 = G__7820;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__7801 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7801) : f.call(null, G__7801);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__7802 = cljs.core.first(s1);
        var G__7803 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7802, G__7803) : f.call(null, G__7802, G__7803);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__7804 = cljs.core.first(s1);
        var G__7805 = cljs.core.first(s2);
        var G__7806 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7804, G__7805, G__7806) : f.call(null, G__7804, G__7805, G__7806);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__7787_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__7787_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq7789) {
  var G__7790 = cljs.core.first(seq7789);
  var seq7789__$1 = cljs.core.next(seq7789);
  var G__7791 = cljs.core.first(seq7789__$1);
  var seq7789__$2 = cljs.core.next(seq7789__$1);
  var G__7792 = cljs.core.first(seq7789__$2);
  var seq7789__$3 = cljs.core.next(seq7789__$2);
  var G__7793 = cljs.core.first(seq7789__$3);
  var seq7789__$4 = cljs.core.next(seq7789__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__7790, G__7791, G__7792, G__7793, seq7789__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take() {
  var args7821 = [];
  var len__5067__auto___7824 = arguments.length;
  var i__5068__auto___7825 = 0;
  while (true) {
    if (i__5068__auto___7825 < len__5067__auto___7824) {
      args7821.push(arguments[i__5068__auto___7825]);
      var G__7826 = i__5068__auto___7825 + 1;
      i__5068__auto___7825 = G__7826;
      continue;
    } else {
    }
    break;
  }
  var G__7823 = args7821.length;
  switch(G__7823) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7821.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__7828 = null;
        var G__7828__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__7828__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__7828__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__7828 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__7828__0.call(this);
            case 1:
              return G__7828__1.call(this, result);
            case 2:
              return G__7828__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__7828.cljs$core$IFn$_invoke$arity$0 = G__7828__0;
        G__7828.cljs$core$IFn$_invoke$arity$1 = G__7828__1;
        G__7828.cljs$core$IFn$_invoke$arity$2 = G__7828__2;
        return G__7828;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4425__auto__ = cljs.core.seq(coll);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop() {
  var args7829 = [];
  var len__5067__auto___7832 = arguments.length;
  var i__5068__auto___7833 = 0;
  while (true) {
    if (i__5068__auto___7833 < len__5067__auto___7832) {
      args7829.push(arguments[i__5068__auto___7833]);
      var G__7834 = i__5068__auto___7833 + 1;
      i__5068__auto___7833 = G__7834;
      continue;
    } else {
    }
    break;
  }
  var G__7831 = args7829.length;
  switch(G__7831) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7829.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__7836 = null;
        var G__7836__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__7836__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__7836__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__7836 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__7836__0.call(this);
            case 1:
              return G__7836__1.call(this, result);
            case 2:
              return G__7836__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__7836.cljs$core$IFn$_invoke$arity$0 = G__7836__0;
        G__7836.cljs$core$IFn$_invoke$arity$1 = G__7836__1;
        G__7836.cljs$core$IFn$_invoke$arity$2 = G__7836__2;
        return G__7836;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__7837 = n__$1 - 1;
        var G__7838 = cljs.core.rest(s);
        n__$1 = G__7837;
        coll__$1 = G__7838;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last() {
  var args7839 = [];
  var len__5067__auto___7842 = arguments.length;
  var i__5068__auto___7843 = 0;
  while (true) {
    if (i__5068__auto___7843 < len__5067__auto___7842) {
      args7839.push(arguments[i__5068__auto___7843]);
      var G__7844 = i__5068__auto___7843 + 1;
      i__5068__auto___7843 = G__7844;
      continue;
    } else {
    }
    break;
  }
  var G__7841 = args7839.length;
  switch(G__7841) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7839.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__7846 = cljs.core.next(s);
      var G__7847 = cljs.core.next(lead);
      s = G__7846;
      lead = G__7847;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while() {
  var args7848 = [];
  var len__5067__auto___7853 = arguments.length;
  var i__5068__auto___7854 = 0;
  while (true) {
    if (i__5068__auto___7854 < len__5067__auto___7853) {
      args7848.push(arguments[i__5068__auto___7854]);
      var G__7855 = i__5068__auto___7854 + 1;
      i__5068__auto___7854 = G__7855;
      continue;
    } else {
    }
    break;
  }
  var G__7850 = args7848.length;
  switch(G__7850) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7848.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__7857 = null;
        var G__7857__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__7857__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__7857__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__4016__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__4016__auto__)) {
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input);
            } else {
              return and__4016__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__7857 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__7857__0.call(this);
            case 1:
              return G__7857__1.call(this, result);
            case 2:
              return G__7857__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__7857.cljs$core$IFn$_invoke$arity$0 = G__7857__0;
        G__7857.cljs$core$IFn$_invoke$arity$1 = G__7857__1;
        G__7857.cljs$core$IFn$_invoke$arity$2 = G__7857__2;
        return G__7857;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4016__auto__ = s;
        if (and__4016__auto__) {
          var G__7852 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__7852) : pred__$1.call(null, G__7852);
        } else {
          return and__4016__auto__;
        }
      }())) {
        var G__7858 = pred__$1;
        var G__7859 = cljs.core.rest(s);
        pred__$1 = G__7858;
        coll__$1 = G__7859;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat() {
  var args7860 = [];
  var len__5067__auto___7863 = arguments.length;
  var i__5068__auto___7864 = 0;
  while (true) {
    if (i__5068__auto___7864 < len__5067__auto___7863) {
      args7860.push(arguments[i__5068__auto___7864]);
      var G__7865 = i__5068__auto___7864 + 1;
      i__5068__auto___7864 = G__7865;
      continue;
    } else {
    }
    break;
  }
  var G__7862 = args7860.length;
  switch(G__7862) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7860.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly() {
  var args7867 = [];
  var len__5067__auto___7870 = arguments.length;
  var i__5068__auto___7871 = 0;
  while (true) {
    if (i__5068__auto___7871 < len__5067__auto___7870) {
      args7867.push(arguments[i__5068__auto___7871]);
      var G__7872 = i__5068__auto___7871 + 1;
      i__5068__auto___7871 = G__7872;
      continue;
    } else {
    }
    break;
  }
  var G__7869 = args7867.length;
  switch(G__7869) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7867.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave() {
  var args7876 = [];
  var len__5067__auto___7882 = arguments.length;
  var i__5068__auto___7883 = 0;
  while (true) {
    if (i__5068__auto___7883 < len__5067__auto___7882) {
      args7876.push(arguments[i__5068__auto___7883]);
      var G__7884 = i__5068__auto___7883 + 1;
      i__5068__auto___7883 = G__7884;
      continue;
    } else {
    }
    break;
  }
  var G__7881 = args7876.length;
  switch(G__7881) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7876.slice(2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5086__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq7877) {
  var G__7878 = cljs.core.first(seq7877);
  var seq7877__$1 = cljs.core.next(seq7877);
  var G__7879 = cljs.core.first(seq7877__$1);
  var seq7877__$2 = cljs.core.next(seq7877__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__7878, G__7879, seq7877__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose() {
  var args7886 = [];
  var len__5067__auto___7889 = arguments.length;
  var i__5068__auto___7890 = 0;
  while (true) {
    if (i__5068__auto___7890 < len__5067__auto___7889) {
      args7886.push(arguments[i__5068__auto___7890]);
      var G__7891 = i__5068__auto___7890 + 1;
      i__5068__auto___7890 = G__7891;
      continue;
    } else {
    }
    break;
  }
  var G__7888 = args7886.length;
  switch(G__7888) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7886.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__7893 = null;
        var G__7893__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__7893__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__7893__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep);
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr, input) : rf.call(null, sepr, input);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__7893 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__7893__0.call(this);
            case 1:
              return G__7893__1.call(this, result);
            case 2:
              return G__7893__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__7893.cljs$core$IFn$_invoke$arity$0 = G__7893__0;
        G__7893.cljs$core$IFn$_invoke$arity$1 = G__7893__1;
        G__7893.cljs$core$IFn$_invoke$arity$2 = G__7893__2;
        return G__7893;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4423__auto__ = cljs.core.seq(coll);
      if (temp__4423__auto__) {
        var coll__$1 = temp__4423__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat() {
  var args7902 = [];
  var len__5067__auto___7907 = arguments.length;
  var i__5068__auto___7908 = 0;
  while (true) {
    if (i__5068__auto___7908 < len__5067__auto___7907) {
      args7902.push(arguments[i__5068__auto___7908]);
      var G__7909 = i__5068__auto___7908 + 1;
      i__5068__auto___7908 = G__7909;
      continue;
    } else {
    }
    break;
  }
  var G__7906 = args7902.length;
  switch(G__7906) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7902.slice(1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5086__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq7903) {
  var G__7904 = cljs.core.first(seq7903);
  var seq7903__$1 = cljs.core.next(seq7903);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__7904, seq7903__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter() {
  var args7911 = [];
  var len__5067__auto___7915 = arguments.length;
  var i__5068__auto___7916 = 0;
  while (true) {
    if (i__5068__auto___7916 < len__5067__auto___7915) {
      args7911.push(arguments[i__5068__auto___7916]);
      var G__7917 = i__5068__auto___7916 + 1;
      i__5068__auto___7916 = G__7917;
      continue;
    } else {
    }
    break;
  }
  var G__7913 = args7911.length;
  switch(G__7913) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7911.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__7919 = null;
      var G__7919__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__7919__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__7919__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__7919 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__7919__0.call(this);
          case 1:
            return G__7919__1.call(this, result);
          case 2:
            return G__7919__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7919.cljs$core$IFn$_invoke$arity$0 = G__7919__0;
      G__7919.cljs$core$IFn$_invoke$arity$1 = G__7919__1;
      G__7919.cljs$core$IFn$_invoke$arity$2 = G__7919__2;
      return G__7919;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__4912__auto___7920 = size;
        var i_7921 = 0;
        while (true) {
          if (i_7921 < n__4912__auto___7920) {
            if (cljs.core.truth_(function() {
              var G__7914 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_7921);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__7914) : pred.call(null, G__7914);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_7921));
            } else {
            }
            var G__7922 = i_7921 + 1;
            i_7921 = G__7922;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null, f))) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove() {
  var args7923 = [];
  var len__5067__auto___7926 = arguments.length;
  var i__5068__auto___7927 = 0;
  while (true) {
    if (i__5068__auto___7927 < len__5067__auto___7926) {
      args7923.push(arguments[i__5068__auto___7927]);
      var G__7928 = i__5068__auto___7927 + 1;
      i__5068__auto___7927 = G__7928;
      continue;
    } else {
    }
    break;
  }
  var G__7925 = args7923.length;
  switch(G__7925) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7923.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__7930_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__7930_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into() {
  var args7931 = [];
  var len__5067__auto___7936 = arguments.length;
  var i__5068__auto___7937 = 0;
  while (true) {
    if (i__5068__auto___7937 < len__5067__auto___7936) {
      args7931.push(arguments[i__5068__auto___7937]);
      var G__7938 = i__5068__auto___7937 + 1;
      i__5068__auto___7937 = G__7938;
      continue;
    } else {
    }
    break;
  }
  var G__7933 = args7931.length;
  switch(G__7933) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7931.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv() {
  var args7940 = [];
  var len__5067__auto___7948 = arguments.length;
  var i__5068__auto___7949 = 0;
  while (true) {
    if (i__5068__auto___7949 < len__5067__auto___7948) {
      args7940.push(arguments[i__5068__auto___7949]);
      var G__7950 = i__5068__auto___7949 + 1;
      i__5068__auto___7949 = G__7950;
      continue;
    } else {
    }
    break;
  }
  var G__7947 = args7940.length;
  switch(G__7947) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7940.slice(4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5086__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq7941) {
  var G__7942 = cljs.core.first(seq7941);
  var seq7941__$1 = cljs.core.next(seq7941);
  var G__7943 = cljs.core.first(seq7941__$1);
  var seq7941__$2 = cljs.core.next(seq7941__$1);
  var G__7944 = cljs.core.first(seq7941__$2);
  var seq7941__$3 = cljs.core.next(seq7941__$2);
  var G__7945 = cljs.core.first(seq7941__$3);
  var seq7941__$4 = cljs.core.next(seq7941__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__7942, G__7943, G__7944, G__7945, seq7941__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o))) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition() {
  var args7952 = [];
  var len__5067__auto___7955 = arguments.length;
  var i__5068__auto___7956 = 0;
  while (true) {
    if (i__5068__auto___7956 < len__5067__auto___7955) {
      args7952.push(arguments[i__5068__auto___7956]);
      var G__7957 = i__5068__auto___7956 + 1;
      i__5068__auto___7956 = G__7957;
      continue;
    } else {
    }
    break;
  }
  var G__7954 = args7952.length;
  switch(G__7954) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7952.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in() {
  var args7959 = [];
  var len__5067__auto___7963 = arguments.length;
  var i__5068__auto___7964 = 0;
  while (true) {
    if (i__5068__auto___7964 < len__5067__auto___7963) {
      args7959.push(arguments[i__5068__auto___7964]);
      var G__7965 = i__5068__auto___7964 + 1;
      i__5068__auto___7964 = G__7965;
      continue;
    } else {
    }
    break;
  }
  var G__7961 = args7959.length;
  switch(G__7961) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7959.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!(!(m__$1 == null) ? m__$1.cljs$lang$protocol_mask$partition0$ & 256 || m__$1.cljs$core$ILookup$ ? true : !m__$1.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1))) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__7967 = sentinel;
          var G__7968 = m__$2;
          var G__7969 = cljs.core.next(ks__$1);
          sentinel = G__7967;
          m__$1 = G__7968;
          ks__$1 = G__7969;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__7970, v) {
  var vec__7975 = p__7970;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7975, 0, null);
  var ks = cljs.core.nthnext(vec__7975, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in() {
  var args7976 = [];
  var len__5067__auto___8006 = arguments.length;
  var i__5068__auto___8007 = 0;
  while (true) {
    if (i__5068__auto___8007 < len__5067__auto___8006) {
      args7976.push(arguments[i__5068__auto___8007]);
      var G__8008 = i__5068__auto___8007 + 1;
      i__5068__auto___8007 = G__8008;
      continue;
    } else {
    }
    break;
  }
  var G__7985 = args7976.length;
  switch(G__7985) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args7976.slice(6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5086__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__7986, f) {
  var vec__7987 = p__7986;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7987, 0, null);
  var ks = cljs.core.nthnext(vec__7987, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__7988 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__7988) : f.call(null, G__7988);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__7989, f, a) {
  var vec__7990 = p__7989;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7990, 0, null);
  var ks = cljs.core.nthnext(vec__7990, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__7991 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__7992 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7991, G__7992) : f.call(null, G__7991, G__7992);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__7993, f, a, b) {
  var vec__7994 = p__7993;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7994, 0, null);
  var ks = cljs.core.nthnext(vec__7994, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__7995 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__7996 = a;
      var G__7997 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__7995, G__7996, G__7997) : f.call(null, G__7995, G__7996, G__7997);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__7998, f, a, b, c) {
  var vec__7999 = p__7998;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7999, 0, null);
  var ks = cljs.core.nthnext(vec__7999, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__8000 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__8001 = a;
      var G__8002 = b;
      var G__8003 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8000, G__8001, G__8002, G__8003) : f.call(null, G__8000, G__8001, G__8002, G__8003);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__8004, f, a, b, c, args) {
  var vec__8005 = p__8004;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8005, 0, null);
  var ks = cljs.core.nthnext(vec__8005, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq7977) {
  var G__7978 = cljs.core.first(seq7977);
  var seq7977__$1 = cljs.core.next(seq7977);
  var G__7979 = cljs.core.first(seq7977__$1);
  var seq7977__$2 = cljs.core.next(seq7977__$1);
  var G__7980 = cljs.core.first(seq7977__$2);
  var seq7977__$3 = cljs.core.next(seq7977__$2);
  var G__7981 = cljs.core.first(seq7977__$3);
  var seq7977__$4 = cljs.core.next(seq7977__$3);
  var G__7982 = cljs.core.first(seq7977__$4);
  var seq7977__$5 = cljs.core.next(seq7977__$4);
  var G__7983 = cljs.core.first(seq7977__$5);
  var seq7977__$6 = cljs.core.next(seq7977__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__7978, G__7979, G__7980, G__7981, G__7982, G__7983, seq7977__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update() {
  var args8010 = [];
  var len__5067__auto___8030 = arguments.length;
  var i__5068__auto___8031 = 0;
  while (true) {
    if (i__5068__auto___8031 < len__5067__auto___8030) {
      args8010.push(arguments[i__5068__auto___8031]);
      var G__8032 = i__5068__auto___8031 + 1;
      i__5068__auto___8031 = G__8032;
      continue;
    } else {
    }
    break;
  }
  var G__8019 = args8010.length;
  switch(G__8019) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args8010.slice(6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5086__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__8020 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8020) : f.call(null, G__8020);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__8021 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__8022 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8021, G__8022) : f.call(null, G__8021, G__8022);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__8023 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__8024 = x;
    var G__8025 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8023, G__8024, G__8025) : f.call(null, G__8023, G__8024, G__8025);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__8026 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__8027 = x;
    var G__8028 = y;
    var G__8029 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8026, G__8027, G__8028, G__8029) : f.call(null, G__8026, G__8027, G__8028, G__8029);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq8011) {
  var G__8012 = cljs.core.first(seq8011);
  var seq8011__$1 = cljs.core.next(seq8011);
  var G__8013 = cljs.core.first(seq8011__$1);
  var seq8011__$2 = cljs.core.next(seq8011__$1);
  var G__8014 = cljs.core.first(seq8011__$2);
  var seq8011__$3 = cljs.core.next(seq8011__$2);
  var G__8015 = cljs.core.first(seq8011__$3);
  var seq8011__$4 = cljs.core.next(seq8011__$3);
  var G__8016 = cljs.core.first(seq8011__$4);
  var seq8011__$5 = cljs.core.next(seq8011__$4);
  var G__8017 = cljs.core.first(seq8011__$5);
  var seq8011__$6 = cljs.core.next(seq8011__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__8012, G__8013, G__8014, G__8015, G__8016, G__8017, seq8011__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__8034 = ll - 5;
      var G__8035 = r;
      ll = G__8034;
      ret = G__8035;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__8040 = cljs.core.pv_aget(node, 0);
      var G__8041 = level - 5;
      node = G__8040;
      level = G__8041;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__8042 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__8043 = level - 5;
        node = G__8042;
        level = G__8043;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__8053 = init__$2;
              var G__8054 = j + i;
              var G__8055 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8053, G__8054, G__8055) : f.call(null, G__8053, G__8054, G__8055);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__8062 = j + 1;
              var G__8063 = init__$3;
              j = G__8062;
              init__$2 = G__8063;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8064 = i + len;
        var G__8065 = init__$2;
        i = G__8064;
        init__$1 = G__8065;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(self__.root) : cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(self__.tail) : cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__8056 = init__$2;
              var G__8057 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8056, G__8057) : f.call(null, G__8056, G__8057);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__8066 = j + 1;
              var G__8067 = init__$3;
              j = G__8066;
              init__$2 = G__8067;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8068 = i + len;
        var G__8069 = init__$2;
        i = G__8068;
        init__$1 = G__8069;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__8058 = coll__$1;
      var G__8059 = cljs.core.first_array_for_longvec(coll__$1);
      var G__8060 = 0;
      var G__8061 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__8058, G__8059, G__8060, G__8061) : cljs.core.chunked_seq.call(null, G__8058, G__8059, G__8060, G__8061);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4912__auto___8070 = len;
    var i_8071 = 0;
    while (true) {
      if (i_8071 < n__4912__auto___8070) {
        new_tail[i_8071] = self__.tail[i_8071];
        var G__8072 = i_8071 + 1;
        i_8071 = G__8072;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__8073 = null;
  var G__8073__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__8073__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__8073 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8073__2.call(this, self__, k);
      case 3:
        return G__8073__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8073.cljs$core$IFn$_invoke$arity$2 = G__8073__2;
  G__8073.cljs$core$IFn$_invoke$arity$3 = G__8073__3;
  return G__8073;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args8052) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8052)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__8074 = i + 1;
        var G__8075 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__8074;
        out = G__8075;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector() {
  var args__5074__auto__ = [];
  var len__5067__auto___8077 = arguments.length;
  var i__5068__auto___8078 = 0;
  while (true) {
    if (i__5068__auto___8078 < len__5067__auto___8077) {
      args__5074__auto__.push(arguments[i__5068__auto___8078]);
      var G__8079 = i__5068__auto___8078 + 1;
      i__5068__auto___8078 = G__8079;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq8076) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8076));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__8080 = self__.vec;
      var G__8081 = self__.node;
      var G__8082 = self__.i;
      var G__8083 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__8080, G__8081, G__8082, G__8083) : cljs.core.chunked_seq.call(null, G__8080, G__8081, G__8082, G__8083);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__8084 = self__.vec;
    var G__8085 = self__.i + self__.off;
    var G__8086 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__8084, G__8085, G__8086) : cljs.core.subvec.call(null, G__8084, G__8085, G__8086);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__8087 = self__.vec;
    var G__8088 = self__.i + self__.off;
    var G__8089 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__8087, G__8088, G__8089) : cljs.core.subvec.call(null, G__8087, G__8088, G__8089);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__8090 = self__.vec;
      var G__8091 = self__.node;
      var G__8092 = self__.i;
      var G__8093 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__8090, G__8091, G__8092, G__8093) : cljs.core.chunked_seq.call(null, G__8090, G__8091, G__8092, G__8093);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__8094 = self__.vec;
    var G__8095 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__8096 = end;
    var G__8097 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__8094, G__8095, G__8096, G__8097) : cljs.core.chunked_seq.call(null, G__8094, G__8095, G__8096, G__8097);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec, self__.node, self__.i, self__.off, m) : cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__8098 = self__.vec;
    var G__8099 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__8100 = end;
    var G__8101 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__8098, G__8099, G__8100, G__8101) : cljs.core.chunked_seq.call(null, G__8098, G__8099, G__8100, G__8101);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq() {
  var args8102 = [];
  var len__5067__auto___8105 = arguments.length;
  var i__5068__auto___8106 = 0;
  while (true) {
    if (i__5068__auto___8106 < len__5067__auto___8105) {
      args8102.push(arguments[i__5068__auto___8106]);
      var G__8107 = i__5068__auto___8106 + 1;
      i__5068__auto___8106 = G__8107;
      continue;
    } else {
    }
    break;
  }
  var G__8104 = args8102.length;
  switch(G__8104) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8102.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__8110 = init__$1;
        var G__8111 = j;
        var G__8112 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8110, G__8111, G__8112) : f.call(null, G__8110, G__8111, G__8112);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8129 = i + 1;
        var G__8130 = j + 1;
        var G__8131 = init__$2;
        i = G__8129;
        j = G__8130;
        init__$1 = G__8131;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__8113 = self__.meta;
  var G__8114 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__8115 = self__.start;
  var G__8116 = function() {
    var x__4340__auto__ = self__.end;
    var y__4341__auto__ = v_pos + 1;
    return x__4340__auto__ > y__4341__auto__ ? x__4340__auto__ : y__4341__auto__;
  }();
  var G__8117 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__8113, G__8114, G__8115, G__8116, G__8117) : cljs.core.build_subvec.call(null, G__8113, G__8114, G__8115, G__8116, G__8117);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__8118 = self__.meta;
    var G__8119 = self__.v;
    var G__8120 = self__.start;
    var G__8121 = self__.end - 1;
    var G__8122 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__8118, G__8119, G__8120, G__8121, G__8122) : cljs.core.build_subvec.call(null, G__8118, G__8119, G__8120, G__8121, G__8122);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(meta__$1, self__.v, self__.start, self__.end, self__.__hash) : cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__8124 = self__.meta;
  var G__8125 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__8126 = self__.start;
  var G__8127 = self__.end + 1;
  var G__8128 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__8124, G__8125, G__8126, G__8127, G__8128) : cljs.core.build_subvec.call(null, G__8124, G__8125, G__8126, G__8127, G__8128);
};
cljs.core.Subvec.prototype.call = function() {
  var G__8132 = null;
  var G__8132__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__8132__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__8132 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8132__2.call(this, self__, k);
      case 3:
        return G__8132__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8132.cljs$core$IFn$_invoke$arity$2 = G__8132__2;
  G__8132.cljs$core$IFn$_invoke$arity$3 = G__8132__3;
  return G__8132;
}();
cljs.core.Subvec.prototype.apply = function(self__, args8109) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8109)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__8133 = meta;
      var G__8134 = v.v;
      var G__8135 = v.start + start;
      var G__8136 = v.start + end;
      var G__8137 = __hash;
      meta = G__8133;
      v = G__8134;
      start = G__8135;
      end = G__8136;
      __hash = G__8137;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec() {
  var args8138 = [];
  var len__5067__auto___8141 = arguments.length;
  var i__5068__auto___8142 = 0;
  while (true) {
    if (i__5068__auto___8142 < len__5067__auto___8141) {
      args8138.push(arguments[i__5068__auto___8142]);
      var G__8143 = i__5068__auto___8142 + 1;
      i__5068__auto___8142 = G__8143;
      continue;
    } else {
    }
    break;
  }
  var G__8140 = args8138.length;
  switch(G__8140) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8138.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__8156 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__8157 = level - 5;
        node = G__8156;
        level = G__8157;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__8161 = null;
  var G__8161__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8161__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8161 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8161__2.call(this, self__, k);
      case 3:
        return G__8161__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8161.cljs$core$IFn$_invoke$arity$2 = G__8161__2;
  G__8161.cljs$core$IFn$_invoke$arity$3 = G__8161__3;
  return G__8161;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args8158) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8158)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4423__auto__ = cljs.core.next(self__.front);
  if (temp__4423__auto__) {
    var f1 = temp__4423__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4423__auto__ = cljs.core.next(self__.front);
    if (temp__4423__auto__) {
      var f1 = temp__4423__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4028__auto__ = self__.front;
    if (cljs.core.truth_(or__4028__auto__)) {
      return or__4028__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4028__auto__ = self__.rear;
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__8162 = i + incr;
        i = G__8162;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__8163 = i + 1;
      var G__8164 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__8163;
      out = G__8164;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_8169 = 0;
  while (true) {
    if (i_8169 < l) {
      var k_8170 = ks[i_8169];
      new_obj[k_8170] = obj[k_8170];
      var G__8171 = i_8169 + 1;
      i_8169 = G__8171;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__8174 = init__$1;
        var G__8175 = k;
        var G__8176 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8174, G__8175, G__8176) : f.call(null, G__8174, G__8175, G__8176);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8177 = cljs.core.rest(keys__$1);
        var G__8178 = init__$2;
        keys__$1 = G__8177;
        init__$1 = G__8178;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__8172_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__8172_SHARP_, self__.strobj[p1__8172_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__8179 = null;
  var G__8179__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8179__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8179 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8179__2.call(this, self__, k);
      case 3:
        return G__8179__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8179.cljs$core$IFn$_invoke$arity$2 = G__8179__2;
  G__8179.cljs$core$IFn$_invoke$arity$3 = G__8179__3;
  return G__8179;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args8173) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8173)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__8182 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8182, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8182, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__8183 = i + 2;
        i = G__8183;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Keyword && kstr === arr[i].fqn) {
        return i;
      } else {
        var G__8184 = i + 2;
        i = G__8184;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Symbol && kstr === arr[i].str) {
        return i;
      } else {
        var G__8185 = i + 2;
        i = G__8185;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__8186 = i + 2;
        i = G__8186;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__8187 = i + 2;
        i = G__8187;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_8188 = 0;
  while (true) {
    if (i_8188 < l) {
      narr[i_8188] = arr[i_8188];
      var G__8189 = i_8188 + 1;
      i_8188 = G__8189;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__8191 = cljs.core.seq(coll);
  var chunk__8192 = null;
  var count__8193 = 0;
  var i__8194 = 0;
  while (true) {
    if (i__8194 < count__8193) {
      var vec__8195 = chunk__8192.cljs$core$IIndexed$_nth$arity$2(null, i__8194);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8195, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8195, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__8204 = seq__8191;
      var G__8205 = chunk__8192;
      var G__8206 = count__8193;
      var G__8207 = i__8194 + 1;
      seq__8191 = G__8204;
      chunk__8192 = G__8205;
      count__8193 = G__8206;
      i__8194 = G__8207;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8191);
      if (temp__4425__auto__) {
        var seq__8191__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8191__$1)) {
          var c__4812__auto__ = cljs.core.chunk_first(seq__8191__$1);
          var G__8208 = cljs.core.chunk_rest(seq__8191__$1);
          var G__8209 = c__4812__auto__;
          var G__8210 = cljs.core.count(c__4812__auto__);
          var G__8211 = 0;
          seq__8191 = G__8208;
          chunk__8192 = G__8209;
          count__8193 = G__8210;
          i__8194 = G__8211;
          continue;
        } else {
          var vec__8196 = cljs.core.first(seq__8191__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8196, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8196, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__8212 = cljs.core.next(seq__8191__$1);
          var G__8213 = null;
          var G__8214 = 0;
          var G__8215 = 0;
          seq__8191 = G__8212;
          chunk__8192 = G__8213;
          count__8193 = G__8214;
          i__8194 = G__8215;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__8197 = init__$1;
        var G__8198 = self__.arr[i];
        var G__8199 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8197, G__8198, G__8199) : f.call(null, G__8197, G__8198, G__8199);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8216 = i + 2;
        var G__8217 = init__$2;
        i = G__8216;
        init__$1 = G__8217;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (!(other == null) ? other.cljs$lang$protocol_mask$partition0$ & 1024 || other.cljs$core$IMap$ ? true : false : false) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__8218 = i + 2;
              i = G__8218;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__8219 = s + 2;
            var G__8220 = d;
            s = G__8219;
            d = G__8220;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__8221 = s + 2;
            var G__8222 = d + 2;
            s = G__8221;
            d = G__8222;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__8203 = cljs.core.aclone(self__.arr);
        G__8203[idx + 1] = v;
        return G__8203;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__8223 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__8224 = cljs.core.next(es);
          ret = G__8223;
          es = G__8224;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__8225 = null;
  var G__8225__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8225__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8225 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8225__2.call(this, self__, k);
      case 3:
        return G__8225__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8225.cljs$core$IFn$_invoke$arity$2 = G__8225__2;
  G__8225.cljs$core$IFn$_invoke$arity$3 = G__8225__3;
  return G__8225;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args8190) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8190)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_8226 = 0;
    while (true) {
      if (i_8226 < arr__$1.length) {
        var k_8227 = arr__$1[i_8226];
        var v_8228 = arr__$1[i_8226 + 1];
        var idx_8229 = cljs.core.array_index_of(ret, k_8227);
        if (idx_8229 === -1) {
          ret.push(k_8227);
          ret.push(v_8228);
        } else {
        }
        var G__8230 = i_8226 + 2;
        i_8226 = G__8230;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return cljs.core._assoc_BANG_(tcoll__$1, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__8233 = cljs.core.next(es);
          var G__8234 = cljs.core._assoc_BANG_(tcoll__$2, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__8233;
          tcoll__$2 = G__8234;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(self__.len, self__.arr) : cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__8232_8235 = self__.arr;
      G__8232_8235.pop();
      G__8232_8235.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__8236 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__8237 = i + 2;
      out = G__8236;
      i = G__8237;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set() {
  var args8238 = [];
  var len__5067__auto___8243 = arguments.length;
  var i__5068__auto___8244 = 0;
  while (true) {
    if (i__5068__auto___8244 < len__5067__auto___8243) {
      args8238.push(arguments[i__5068__auto___8244]);
      var G__8245 = i__5068__auto___8244 + 1;
      i__5068__auto___8244 = G__8245;
      continue;
    } else {
    }
    break;
  }
  var G__8240 = args8238.length;
  switch(G__8240) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8238.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__8241 = cljs.core.aclone(arr);
  G__8241[i] = a;
  return G__8241;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__8242 = cljs.core.aclone(arr);
  G__8242[i] = a;
  G__8242[j] = b;
  return G__8242;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set() {
  var args8247 = [];
  var len__5067__auto___8250 = arguments.length;
  var i__5068__auto___8251 = 0;
  while (true) {
    if (i__5068__auto___8251 < len__5067__auto___8250) {
      args8247.push(arguments[i__5068__auto___8251]);
      var G__8252 = i__5068__auto___8251 + 1;
      i__5068__auto___8251 = G__8252;
      continue;
    } else {
    }
    break;
  }
  var G__8249 = args8247.length;
  switch(G__8249) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8247.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__8257 = init__$1;
          var G__8258 = k;
          var G__8259 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8257, G__8258, G__8259) : f.call(null, G__8257, G__8258, G__8259);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__8260 = i + 2;
        var G__8261 = init__$2;
        i = G__8260;
        init__$1 = G__8261;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_8275 = 0;
        var j_8276 = 0;
        while (true) {
          if (i_8275 < 32) {
            if ((self__.bitmap >>> i_8275 & 1) === 0) {
              var G__8277 = i_8275 + 1;
              var G__8278 = j_8276;
              i_8275 = G__8277;
              j_8276 = G__8278;
              continue;
            } else {
              nodes[i_8275] = !(self__.arr[j_8276] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_8276]), self__.arr[j_8276], self__.arr[j_8276 + 1], added_leaf_QMARK_) : self__.arr[j_8276 + 1];
              var G__8279 = i_8275 + 1;
              var G__8280 = j_8276 + 2;
              i_8275 = G__8279;
              j_8276 = G__8280;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__8262 = edit__$1;
          var G__8263 = shift + 5;
          var G__8264 = key_or_nil;
          var G__8265 = val_or_node;
          var G__8266 = hash;
          var G__8267 = key;
          var G__8268 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__8262, G__8263, G__8264, G__8265, G__8266, G__8267, G__8268) : cljs.core.create_node.call(null, G__8262, G__8263, G__8264, G__8265, G__8266, G__8267, G__8268);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_8281 = 0;
      var j_8282 = 0;
      while (true) {
        if (i_8281 < 32) {
          if ((self__.bitmap >>> i_8281 & 1) === 0) {
            var G__8283 = i_8281 + 1;
            var G__8284 = j_8282;
            i_8281 = G__8283;
            j_8282 = G__8284;
            continue;
          } else {
            nodes[i_8281] = !(self__.arr[j_8282] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_8282]), self__.arr[j_8282], self__.arr[j_8282 + 1], added_leaf_QMARK_) : self__.arr[j_8282 + 1];
            var G__8285 = i_8281 + 1;
            var G__8286 = j_8282 + 2;
            i_8281 = G__8285;
            j_8282 = G__8286;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__8269 = shift + 5;
          var G__8270 = key_or_nil;
          var G__8271 = val_or_node;
          var G__8272 = hash;
          var G__8273 = key;
          var G__8274 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__8269, G__8270, G__8271, G__8272, G__8273, G__8274) : cljs.core.create_node.call(null, G__8269, G__8270, G__8271, G__8272, G__8273, G__8274);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__8287 = i + 1;
        var G__8288 = j + 2;
        var G__8289 = bitmap | 1 << i;
        i = G__8287;
        j = G__8288;
        bitmap = G__8289;
        continue;
      } else {
        var G__8290 = i + 1;
        var G__8291 = j;
        var G__8292 = bitmap;
        i = G__8290;
        j = G__8291;
        bitmap = G__8292;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
        } else {
          var G__8293 = i + 1;
          var G__8294 = init__$2;
          i = G__8293;
          init__$1 = G__8294;
          continue;
        }
      } else {
        var G__8295 = i + 1;
        var G__8296 = init__$1;
        i = G__8295;
        init__$1 = G__8296;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__8297 = i + 2;
        i = G__8297;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node() {
  var args8298 = [];
  var len__5067__auto___8301 = arguments.length;
  var i__5068__auto___8302 = 0;
  while (true) {
    if (i__5068__auto___8302 < len__5067__auto___8301) {
      args8298.push(arguments[i__5068__auto___8302]);
      var G__8303 = i__5068__auto___8302 + 1;
      i__5068__auto___8302 = G__8303;
      continue;
    } else {
    }
    break;
  }
  var G__8300 = args8298.length;
  switch(G__8300) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8298.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__8305 = self__.nodes;
    var G__8306 = self__.i + 2;
    var G__8307 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__8305, G__8306, G__8307) : cljs.core.create_inode_seq.call(null, G__8305, G__8306, G__8307);
  } else {
    var G__8308 = self__.nodes;
    var G__8309 = self__.i;
    var G__8310 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__8308, G__8309, G__8310) : cljs.core.create_inode_seq.call(null, G__8308, G__8309, G__8310);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq() {
  var args8311 = [];
  var len__5067__auto___8314 = arguments.length;
  var i__5068__auto___8315 = 0;
  while (true) {
    if (i__5068__auto___8315 < len__5067__auto___8314) {
      args8311.push(arguments[i__5068__auto___8315]);
      var G__8316 = i__5068__auto___8315 + 1;
      i__5068__auto___8315 = G__8316;
      continue;
    } else {
    }
    break;
  }
  var G__8313 = args8311.length;
  switch(G__8313) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8311.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4423__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4423__auto__)) {
            var node = temp__4423__auto__;
            var temp__4423__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4423__auto____$1)) {
              var node_seq = temp__4423__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__8318 = j + 2;
              j = G__8318;
              continue;
            }
          } else {
            var G__8319 = j + 2;
            j = G__8319;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__8320 = null;
  var G__8321 = self__.nodes;
  var G__8322 = self__.i;
  var G__8323 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__8320, G__8321, G__8322, G__8323) : cljs.core.create_array_node_seq.call(null, G__8320, G__8321, G__8322, G__8323);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq() {
  var args8324 = [];
  var len__5067__auto___8327 = arguments.length;
  var i__5068__auto___8328 = 0;
  while (true) {
    if (i__5068__auto___8328 < len__5067__auto___8327) {
      args8324.push(arguments[i__5068__auto___8328]);
      var G__8329 = i__5068__auto___8328 + 1;
      i__5068__auto___8328 = G__8329;
      continue;
    } else {
    }
    break;
  }
  var G__8326 = args8324.length;
  switch(G__8326) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8324.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4423__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4423__auto__)) {
          var nj = temp__4423__auto__;
          var temp__4423__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4423__auto____$1)) {
            var ns = temp__4423__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__8331 = j + 1;
            j = G__8331;
            continue;
          }
        } else {
          var G__8332 = j + 1;
          j = G__8332;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__8334 = cljs.core.seq(coll);
  var chunk__8335 = null;
  var count__8336 = 0;
  var i__8337 = 0;
  while (true) {
    if (i__8337 < count__8336) {
      var vec__8338 = chunk__8335.cljs$core$IIndexed$_nth$arity$2(null, i__8337);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8338, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8338, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__8342 = seq__8334;
      var G__8343 = chunk__8335;
      var G__8344 = count__8336;
      var G__8345 = i__8337 + 1;
      seq__8334 = G__8342;
      chunk__8335 = G__8343;
      count__8336 = G__8344;
      i__8337 = G__8345;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8334);
      if (temp__4425__auto__) {
        var seq__8334__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8334__$1)) {
          var c__4812__auto__ = cljs.core.chunk_first(seq__8334__$1);
          var G__8346 = cljs.core.chunk_rest(seq__8334__$1);
          var G__8347 = c__4812__auto__;
          var G__8348 = cljs.core.count(c__4812__auto__);
          var G__8349 = 0;
          seq__8334 = G__8346;
          chunk__8335 = G__8347;
          count__8336 = G__8348;
          i__8337 = G__8349;
          continue;
        } else {
          var vec__8339 = cljs.core.first(seq__8334__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8339, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8339, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__8350 = cljs.core.next(seq__8334__$1);
          var G__8351 = null;
          var G__8352 = 0;
          var G__8353 = 0;
          seq__8334 = G__8350;
          chunk__8335 = G__8351;
          count__8336 = G__8352;
          i__8337 = G__8353;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, self__.nil_val) : f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__8354 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__8355 = cljs.core.next(es);
          ret = G__8354;
          es = G__8355;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__8356 = null;
  var G__8356__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8356__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8356 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8356__2.call(this, self__, k);
      case 3:
        return G__8356__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8356.cljs$core$IFn$_invoke$arity$2 = G__8356__2;
  G__8356.cljs$core$IFn$_invoke$arity$3 = G__8356__3;
  return G__8356;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args8333) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8333)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", 
  "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__8357 = i + 2;
      var G__8358 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__8357;
      ret = G__8358;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__8359 = i + 1;
      var G__8360 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__8359;
      out = G__8360;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__8362 = cljs.core.next(es);
          var G__8363 = tcoll__$1.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__8362;
          tcoll__$1 = G__8363;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, 
  "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__8364 = ascending_QMARK_ ? t.left : t.right;
      var G__8365 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__8364;
      stack__$1 = G__8365;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), cljs.core.with_meta(new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, 
  "cnt", "cnt", 1924510325, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = function() {
      var G__8375 = init__$1;
      var G__8376 = node.key;
      var G__8377 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8375, G__8376, G__8377) : f.call(null, G__8375, G__8376, G__8377);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$3) : cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__8379 = null;
  var G__8379__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8379__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8379 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8379__2.call(this, self__, k);
      case 3:
        return G__8379__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8379.cljs$core$IFn$_invoke$arity$2 = G__8379__2;
  G__8379.cljs$core$IFn$_invoke$arity$3 = G__8379__3;
  return G__8379;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args8378) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8378)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__8381 = null;
  var G__8381__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8381__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8381 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8381__2.call(this, self__, k);
      case 3:
        return G__8381__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8381.cljs$core$IFn$_invoke$arity$2 = G__8381__2;
  G__8381.cljs$core$IFn$_invoke$arity$3 = G__8381__3;
  return G__8381;
}();
cljs.core.RedNode.prototype.apply = function(self__, args8380) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8380)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__8394 = k;
      var G__8395 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__8394, G__8395) : comp.call(null, G__8394, G__8395);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__8414 = k;
      var G__8415 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__8414, G__8415) : comp.call(null, G__8414, G__8415);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__8425 = cljs.core.seq(coll);
  var chunk__8426 = null;
  var count__8427 = 0;
  var i__8428 = 0;
  while (true) {
    if (i__8428 < count__8427) {
      var vec__8429 = chunk__8426.cljs$core$IIndexed$_nth$arity$2(null, i__8428);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8429, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8429, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__8435 = seq__8425;
      var G__8436 = chunk__8426;
      var G__8437 = count__8427;
      var G__8438 = i__8428 + 1;
      seq__8425 = G__8435;
      chunk__8426 = G__8436;
      count__8427 = G__8437;
      i__8428 = G__8438;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8425);
      if (temp__4425__auto__) {
        var seq__8425__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8425__$1)) {
          var c__4812__auto__ = cljs.core.chunk_first(seq__8425__$1);
          var G__8439 = cljs.core.chunk_rest(seq__8425__$1);
          var G__8440 = c__4812__auto__;
          var G__8441 = cljs.core.count(c__4812__auto__);
          var G__8442 = 0;
          seq__8425 = G__8439;
          chunk__8426 = G__8440;
          count__8427 = G__8441;
          i__8428 = G__8442;
          continue;
        } else {
          var vec__8430 = cljs.core.first(seq__8425__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8430, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8430, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__8443 = cljs.core.next(seq__8425__$1);
          var G__8444 = null;
          var G__8445 = 0;
          var G__8446 = 0;
          seq__8425 = G__8443;
          chunk__8426 = G__8444;
          count__8427 = G__8445;
          i__8428 = G__8446;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__8431 = k;
        var G__8432 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__8431, G__8432) : self__.comp.call(null, G__8431, G__8432);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__8447 = t.left;
          t = G__8447;
          continue;
        } else {
          var G__8448 = t.right;
          t = G__8448;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__8449 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__8450 = cljs.core.next(es);
          ret = G__8449;
          es = G__8450;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__8451 = null;
  var G__8451__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8451__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8451 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8451__2.call(this, self__, k);
      case 3:
        return G__8451__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8451.cljs$core$IFn$_invoke$arity$2 = G__8451__2;
  G__8451.cljs$core$IFn$_invoke$arity$3 = G__8451__3;
  return G__8451;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args8424) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8424)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__8433 = k;
          var G__8434 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__8433, G__8434) : self__.comp.call(null, G__8433, G__8434);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__8452 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__8453 = t.left;
              stack = G__8452;
              t = G__8453;
              continue;
            } else {
              var G__8454 = stack;
              var G__8455 = t.right;
              stack = G__8454;
              t = G__8455;
              continue;
            }
          } else {
            if (c > 0) {
              var G__8456 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__8457 = t.right;
              stack = G__8456;
              t = G__8457;
              continue;
            } else {
              var G__8458 = stack;
              var G__8459 = t.left;
              stack = G__8458;
              t = G__8459;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map() {
  var args__5074__auto__ = [];
  var len__5067__auto___8461 = arguments.length;
  var i__5068__auto___8462 = 0;
  while (true) {
    if (i__5068__auto___8462 < len__5067__auto___8461) {
      args__5074__auto__.push(arguments[i__5068__auto___8462]);
      var G__8463 = i__5068__auto___8462 + 1;
      i__5068__auto___8462 = G__8463;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__8464 = cljs.core.nnext(in$);
      var G__8465 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__8464;
      out = G__8465;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq8460) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8460));
};
cljs.core.array_map = function cljs$core$array_map() {
  var args__5074__auto__ = [];
  var len__5067__auto___8467 = arguments.length;
  var i__5068__auto___8468 = 0;
  while (true) {
    if (i__5068__auto___8468 < len__5067__auto___8467) {
      args__5074__auto__.push(arguments[i__5068__auto___8468]);
      var G__8469 = i__5068__auto___8468 + 1;
      i__5068__auto___8468 = G__8469;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq8466) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8466));
};
cljs.core.obj_map = function cljs$core$obj_map() {
  var args__5074__auto__ = [];
  var len__5067__auto___8473 = arguments.length;
  var i__5068__auto___8474 = 0;
  while (true) {
    if (i__5068__auto___8474 < len__5067__auto___8473) {
      args__5074__auto__.push(arguments[i__5068__auto___8474]);
      var G__8475 = i__5068__auto___8474 + 1;
      i__5068__auto___8474 = G__8475;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = {};
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__8476 = cljs.core.nnext(kvs);
      kvs = G__8476;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq8470) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8470));
};
cljs.core.sorted_map = function cljs$core$sorted_map() {
  var args__5074__auto__ = [];
  var len__5067__auto___8478 = arguments.length;
  var i__5068__auto___8479 = 0;
  while (true) {
    if (i__5068__auto___8479 < len__5067__auto___8478) {
      args__5074__auto__.push(arguments[i__5068__auto___8479]);
      var G__8480 = i__5068__auto___8479 + 1;
      i__5068__auto___8479 = G__8480;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__8481 = cljs.core.nnext(in$);
      var G__8482 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__8481;
      out = G__8482;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq8477) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8477));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by() {
  var args__5074__auto__ = [];
  var len__5067__auto___8485 = arguments.length;
  var i__5068__auto___8486 = 0;
  while (true) {
    if (i__5068__auto___8486 < len__5067__auto___8485) {
      args__5074__auto__.push(arguments[i__5068__auto___8486]);
      var G__8487 = i__5068__auto___8486 + 1;
      i__5068__auto___8486 = G__8487;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 1 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5075__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__8488 = cljs.core.nnext(in$);
      var G__8489 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__8488;
      out = G__8489;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq8483) {
  var G__8484 = cljs.core.first(seq8483);
  var seq8483__$1 = cljs.core.next(seq8483);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__8484, seq8483__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge() {
  var args__5074__auto__ = [];
  var len__5067__auto___8497 = arguments.length;
  var i__5068__auto___8498 = 0;
  while (true) {
    if (i__5068__auto___8498 < len__5067__auto___8497) {
      args__5074__auto__.push(arguments[i__5068__auto___8498]);
      var G__8499 = i__5068__auto___8498 + 1;
      i__5068__auto___8498 = G__8499;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__8494_SHARP_, p2__8495_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4028__auto__ = p1__8494_SHARP_;
        if (cljs.core.truth_(or__4028__auto__)) {
          return or__4028__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__8495_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq8496) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8496));
};
cljs.core.merge_with = function cljs$core$merge_with() {
  var args__5074__auto__ = [];
  var len__5067__auto___8504 = arguments.length;
  var i__5068__auto___8505 = 0;
  while (true) {
    if (i__5068__auto___8505 < len__5067__auto___8504) {
      args__5074__auto__.push(arguments[i__5068__auto___8505]);
      var G__8506 = i__5068__auto___8505 + 1;
      i__5068__auto___8505 = G__8506;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 1 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5075__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__8502 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__8503 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8502, G__8503) : f.call(null, G__8502, G__8503);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__4028__auto__ = m1;
          if (cljs.core.truth_(or__4028__auto__)) {
            return or__4028__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq8500) {
  var G__8501 = cljs.core.first(seq8500);
  var seq8500__$1 = cljs.core.next(seq8500);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__8501, seq8500__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__8507 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__8508 = cljs.core.next(keys);
      ret = G__8507;
      keys = G__8508;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__8511 = cljs.core.seq(coll);
  var chunk__8512 = null;
  var count__8513 = 0;
  var i__8514 = 0;
  while (true) {
    if (i__8514 < count__8513) {
      var vec__8515 = chunk__8512.cljs$core$IIndexed$_nth$arity$2(null, i__8514);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8515, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8515, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__8517 = seq__8511;
      var G__8518 = chunk__8512;
      var G__8519 = count__8513;
      var G__8520 = i__8514 + 1;
      seq__8511 = G__8517;
      chunk__8512 = G__8518;
      count__8513 = G__8519;
      i__8514 = G__8520;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8511);
      if (temp__4425__auto__) {
        var seq__8511__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8511__$1)) {
          var c__4812__auto__ = cljs.core.chunk_first(seq__8511__$1);
          var G__8521 = cljs.core.chunk_rest(seq__8511__$1);
          var G__8522 = c__4812__auto__;
          var G__8523 = cljs.core.count(c__4812__auto__);
          var G__8524 = 0;
          seq__8511 = G__8521;
          chunk__8512 = G__8522;
          count__8513 = G__8523;
          i__8514 = G__8524;
          continue;
        } else {
          var vec__8516 = cljs.core.first(seq__8511__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8516, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8516, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__8525 = cljs.core.next(seq__8511__$1);
          var G__8526 = null;
          var G__8527 = 0;
          var G__8528 = 0;
          seq__8511 = G__8525;
          chunk__8512 = G__8526;
          count__8513 = G__8527;
          i__8514 = G__8528;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__8509_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__8509_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__8529 = null;
  var G__8529__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8529__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8529 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8529__2.call(this, self__, k);
      case 3:
        return G__8529__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8529.cljs$core$IFn$_invoke$arity$2 = G__8529__2;
  G__8529.cljs$core$IFn$_invoke$arity$3 = G__8529__3;
  return G__8529;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args8510) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8510)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__8530 = i + 1;
        var G__8531 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__8530;
        out = G__8531;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__8532 = i + 1;
        var G__8533 = cljs.core._conj_BANG_(out, items[i]);
        i = G__8532;
        out = G__8533;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__8535 = null;
  var G__8535__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__8535__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__8535 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8535__2.call(this, self__, k);
      case 3:
        return G__8535__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8535.cljs$core$IFn$_invoke$arity$2 = G__8535__2;
  G__8535.cljs$core$IFn$_invoke$arity$3 = G__8535__3;
  return G__8535;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args8534) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8534)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__8538 = cljs.core.seq(coll);
  var chunk__8539 = null;
  var count__8540 = 0;
  var i__8541 = 0;
  while (true) {
    if (i__8541 < count__8540) {
      var vec__8542 = chunk__8539.cljs$core$IIndexed$_nth$arity$2(null, i__8541);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8542, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8542, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__8544 = seq__8538;
      var G__8545 = chunk__8539;
      var G__8546 = count__8540;
      var G__8547 = i__8541 + 1;
      seq__8538 = G__8544;
      chunk__8539 = G__8545;
      count__8540 = G__8546;
      i__8541 = G__8547;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8538);
      if (temp__4425__auto__) {
        var seq__8538__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8538__$1)) {
          var c__4812__auto__ = cljs.core.chunk_first(seq__8538__$1);
          var G__8548 = cljs.core.chunk_rest(seq__8538__$1);
          var G__8549 = c__4812__auto__;
          var G__8550 = cljs.core.count(c__4812__auto__);
          var G__8551 = 0;
          seq__8538 = G__8548;
          chunk__8539 = G__8549;
          count__8540 = G__8550;
          i__8541 = G__8551;
          continue;
        } else {
          var vec__8543 = cljs.core.first(seq__8538__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8543, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8543, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__8552 = cljs.core.next(seq__8538__$1);
          var G__8553 = null;
          var G__8554 = 0;
          var G__8555 = 0;
          seq__8538 = G__8552;
          chunk__8539 = G__8553;
          count__8540 = G__8554;
          i__8541 = G__8555;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__8536_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__8536_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__8556 = null;
  var G__8556__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__8556__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__8556 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8556__2.call(this, self__, k);
      case 3:
        return G__8556__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8556.cljs$core$IFn$_invoke$arity$2 = G__8556__2;
  G__8556.cljs$core$IFn$_invoke$arity$3 = G__8556__3;
  return G__8556;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args8537) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8537)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4906__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4906__auto__.length) {
        var G__8557 = i + 1;
        var G__8558 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__8557;
        res = G__8558;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__8559 = cljs.core.next(in$__$1);
          var G__8560 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__8559;
          out = G__8560;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set() {
  var args8561 = [];
  var len__5067__auto___8565 = arguments.length;
  var i__5068__auto___8566 = 0;
  while (true) {
    if (i__5068__auto___8566 < len__5067__auto___8565) {
      args8561.push(arguments[i__5068__auto___8566]);
      var G__8567 = i__5068__auto___8566 + 1;
      i__5068__auto___8566 = G__8567;
      continue;
    } else {
    }
    break;
  }
  var G__8564 = args8561.length;
  switch(G__8564) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args8561.slice(0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5086__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq8562) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8562));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set() {
  var args__5074__auto__ = [];
  var len__5067__auto___8570 = arguments.length;
  var i__5068__auto___8571 = 0;
  while (true) {
    if (i__5068__auto___8571 < len__5067__auto___8570) {
      args__5074__auto__.push(arguments[i__5068__auto___8571]);
      var G__8572 = i__5068__auto___8571 + 1;
      i__5068__auto___8571 = G__8572;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq8569) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8569));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by() {
  var args__5074__auto__ = [];
  var len__5067__auto___8575 = arguments.length;
  var i__5068__auto___8576 = 0;
  while (true) {
    if (i__5068__auto___8576 < len__5067__auto___8575) {
      args__5074__auto__.push(arguments[i__5068__auto___8576]);
      var G__8577 = i__5068__auto___8576 + 1;
      i__5068__auto___8576 = G__8577;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 1 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5075__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq8573) {
  var G__8574 = cljs.core.first(seq8573);
  var seq8573__$1 = cljs.core.next(seq8573);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__8574, seq8573__$1);
};
cljs.core.replace = function cljs$core$replace() {
  var args8580 = [];
  var len__5067__auto___8583 = arguments.length;
  var i__5068__auto___8584 = 0;
  while (true) {
    if (i__5068__auto___8584 < len__5067__auto___8583) {
      args8580.push(arguments[i__5068__auto___8584]);
      var G__8585 = i__5068__auto___8584 + 1;
      i__5068__auto___8584 = G__8585;
      continue;
    } else {
    }
    break;
  }
  var G__8582 = args8580.length;
  switch(G__8582) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8580.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__8578_SHARP_) {
    var temp__4423__auto__ = cljs.core.find(smap, p1__8578_SHARP_);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var e = temp__4423__auto__;
      return cljs.core.val(e);
    } else {
      return p1__8578_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4423__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__8579_SHARP_) {
      var temp__4423__auto__ = cljs.core.find(smap, p1__8579_SHARP_);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var e = temp__4423__auto__;
        return cljs.core.second(e);
      } else {
        return p1__8579_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct() {
  var args8587 = [];
  var len__5067__auto___8596 = arguments.length;
  var i__5068__auto___8597 = 0;
  while (true) {
    if (i__5068__auto___8597 < len__5067__auto___8596) {
      args8587.push(arguments[i__5068__auto___8597]);
      var G__8598 = i__5068__auto___8597 + 1;
      i__5068__auto___8597 = G__8598;
      continue;
    } else {
    }
    break;
  }
  var G__8589 = args8587.length;
  switch(G__8589) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8587.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__8600 = null;
        var G__8600__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8600__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__8600__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(seen) : cljs.core.deref.call(null, seen), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__8600 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8600__0.call(this);
            case 1:
              return G__8600__1.call(this, result);
            case 2:
              return G__8600__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8600.cljs$core$IFn$_invoke$arity$0 = G__8600__0;
        G__8600.cljs$core$IFn$_invoke$arity$1 = G__8600__1;
        G__8600.cljs$core$IFn$_invoke$arity$2 = G__8600__2;
        return G__8600;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__8594, seen__$1) {
        while (true) {
          var vec__8595 = p__8594;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8595, 0, null);
          var xs__$1 = vec__8595;
          var temp__4425__auto__ = cljs.core.seq(xs__$1);
          if (temp__4425__auto__) {
            var s = temp__4425__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__8601 = cljs.core.rest(s);
              var G__8602 = seen__$1;
              p__8594 = G__8601;
              seen__$1 = G__8602;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__8603 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__8604 = cljs.core.next(s__$1);
      ret = G__8603;
      s__$1 = G__8604;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__8607 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__8608 = cljs.core.next(ks);
      var G__8609 = cljs.core.next(vs);
      map = G__8607;
      ks = G__8608;
      vs = G__8609;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key() {
  var args8612 = [];
  var len__5067__auto___8619 = arguments.length;
  var i__5068__auto___8620 = 0;
  while (true) {
    if (i__5068__auto___8620 < len__5067__auto___8619) {
      args8612.push(arguments[i__5068__auto___8620]);
      var G__8621 = i__5068__auto___8620 + 1;
      i__5068__auto___8620 = G__8621;
      continue;
    } else {
    }
    break;
  }
  var G__8618 = args8612.length;
  switch(G__8618) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args8612.slice(3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5086__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__8610_SHARP_, p2__8611_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__8610_SHARP_, p2__8611_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq8613) {
  var G__8614 = cljs.core.first(seq8613);
  var seq8613__$1 = cljs.core.next(seq8613);
  var G__8615 = cljs.core.first(seq8613__$1);
  var seq8613__$2 = cljs.core.next(seq8613__$1);
  var G__8616 = cljs.core.first(seq8613__$2);
  var seq8613__$3 = cljs.core.next(seq8613__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__8614, G__8615, G__8616, seq8613__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key() {
  var args8625 = [];
  var len__5067__auto___8632 = arguments.length;
  var i__5068__auto___8633 = 0;
  while (true) {
    if (i__5068__auto___8633 < len__5067__auto___8632) {
      args8625.push(arguments[i__5068__auto___8633]);
      var G__8634 = i__5068__auto___8633 + 1;
      i__5068__auto___8633 = G__8634;
      continue;
    } else {
    }
    break;
  }
  var G__8631 = args8625.length;
  switch(G__8631) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args8625.slice(3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5086__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__8623_SHARP_, p2__8624_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__8623_SHARP_, p2__8624_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq8626) {
  var G__8627 = cljs.core.first(seq8626);
  var seq8626__$1 = cljs.core.next(seq8626);
  var G__8628 = cljs.core.first(seq8626__$1);
  var seq8626__$2 = cljs.core.next(seq8626__$1);
  var G__8629 = cljs.core.first(seq8626__$2);
  var seq8626__$3 = cljs.core.next(seq8626__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__8627, G__8628, G__8629, seq8626__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all() {
  var args8636 = [];
  var len__5067__auto___8639 = arguments.length;
  var i__5068__auto___8640 = 0;
  while (true) {
    if (i__5068__auto___8640 < len__5067__auto___8639) {
      args8636.push(arguments[i__5068__auto___8640]);
      var G__8641 = i__5068__auto___8640 + 1;
      i__5068__auto___8640 = G__8641;
      continue;
    } else {
    }
    break;
  }
  var G__8638 = args8636.length;
  switch(G__8638) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8636.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__8643 = null;
        var G__8643__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8643__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__8643__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          } else {
            return result;
          }
        };
        G__8643 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8643__0.call(this);
            case 1:
              return G__8643__1.call(this, result);
            case 2:
              return G__8643__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8643.cljs$core$IFn$_invoke$arity$0 = G__8643__0;
        G__8643.cljs$core$IFn$_invoke$arity$1 = G__8643__1;
        G__8643.cljs$core$IFn$_invoke$arity$2 = G__8643__2;
        return G__8643;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while() {
  var args8644 = [];
  var len__5067__auto___8648 = arguments.length;
  var i__5068__auto___8649 = 0;
  while (true) {
    if (i__5068__auto___8649 < len__5067__auto___8648) {
      args8644.push(arguments[i__5068__auto___8649]);
      var G__8650 = i__5068__auto___8649 + 1;
      i__5068__auto___8649 = G__8650;
      continue;
    } else {
    }
    break;
  }
  var G__8646 = args8644.length;
  switch(G__8646) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8644.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__8652 = null;
      var G__8652__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__8652__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__8652__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__8652 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__8652__0.call(this);
          case 1:
            return G__8652__1.call(this, result);
          case 2:
            return G__8652__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8652.cljs$core$IFn$_invoke$arity$0 = G__8652__0;
      G__8652.cljs$core$IFn$_invoke$arity$1 = G__8652__1;
      G__8652.cljs$core$IFn$_invoke$arity$2 = G__8652__2;
      return G__8652;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.truth_(function() {
        var G__8647 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__8647) : pred.call(null, G__8647);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__8661 = function() {
      var G__8663 = cljs.core._entry_key(sc, e);
      var G__8664 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__8663, G__8664) : comp.call(null, G__8663, G__8664);
    }();
    var G__8662 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__8661, G__8662) : test.call(null, G__8661, G__8662);
  };
};
cljs.core.subseq = function cljs$core$subseq() {
  var args8665 = [];
  var len__5067__auto___8670 = arguments.length;
  var i__5068__auto___8671 = 0;
  while (true) {
    if (i__5068__auto___8671 < len__5067__auto___8670) {
      args8665.push(arguments[i__5068__auto___8671]);
      var G__8672 = i__5068__auto___8671 + 1;
      i__5068__auto___8671 = G__8672;
      continue;
    } else {
    }
    break;
  }
  var G__8667 = args8665.length;
  switch(G__8667) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8665.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__8668 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8668, 0, null);
      var s = vec__8668;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__8669 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8669, 0, null);
    var s = vec__8669;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq() {
  var args8674 = [];
  var len__5067__auto___8679 = arguments.length;
  var i__5068__auto___8680 = 0;
  while (true) {
    if (i__5068__auto___8680 < len__5067__auto___8679) {
      args8674.push(arguments[i__5068__auto___8680]);
      var G__8681 = i__5068__auto___8680 + 1;
      i__5068__auto___8680 = G__8681;
      continue;
    } else {
    }
    break;
  }
  var G__8676 = args8674.length;
  switch(G__8676) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8674.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__8677 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8677, 0, null);
      var s = vec__8677;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__8678 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8678, 0, null);
    var s = vec__8678;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__8683 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__8683);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4444__auto__ = self__.__hash;
  if (!(h__4444__auto__ == null)) {
    return h__4444__auto__;
  } else {
    var h__4444__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4444__auto____$1;
    return h__4444__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, i) : f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(ret__$1) : cljs.core.deref.call(null, ret__$1);
      } else {
        var G__8684 = i + self__.step;
        var G__8685 = ret__$1;
        i = G__8684;
        ret = G__8685;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.range = function cljs$core$range() {
  var args8686 = [];
  var len__5067__auto___8689 = arguments.length;
  var i__5068__auto___8690 = 0;
  while (true) {
    if (i__5068__auto___8690 < len__5067__auto___8689) {
      args8686.push(arguments[i__5068__auto___8690]);
      var G__8691 = i__5068__auto___8690 + 1;
      i__5068__auto___8690 = G__8691;
      continue;
    } else {
    }
    break;
  }
  var G__8688 = args8686.length;
  switch(G__8688) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8686.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth() {
  var args8693 = [];
  var len__5067__auto___8696 = arguments.length;
  var i__5068__auto___8697 = 0;
  while (true) {
    if (i__5068__auto___8697 < len__5067__auto___8696) {
      args8693.push(arguments[i__5068__auto___8697]);
      var G__8698 = i__5068__auto___8697 + 1;
      i__5068__auto___8697 = G__8698;
      continue;
    } else {
    }
    break;
  }
  var G__8695 = args8693.length;
  switch(G__8695) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8693.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__8700 = null;
        var G__8700__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8700__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__8700__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__8700 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8700__0.call(this);
            case 1:
              return G__8700__1.call(this, result);
            case 2:
              return G__8700__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8700.cljs$core$IFn$_invoke$arity$0 = G__8700__0;
        G__8700.cljs$core$IFn$_invoke$arity$1 = G__8700__1;
        G__8700.cljs$core$IFn$_invoke$arity$2 = G__8700__2;
        return G__8700;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by() {
  var args8702 = [];
  var len__5067__auto___8705 = arguments.length;
  var i__5068__auto___8706 = 0;
  while (true) {
    if (i__5068__auto___8706 < len__5067__auto___8705) {
      args8702.push(arguments[i__5068__auto___8706]);
      var G__8707 = i__5068__auto___8706 + 1;
      i__5068__auto___8706 = G__8707;
      continue;
    } else {
    }
    break;
  }
  var G__8704 = args8702.length;
  switch(G__8704) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8702.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__8709 = null;
        var G__8709__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8709__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__8709__2 = function(result, input) {
          var pval = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          var val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__8709 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8709__0.call(this);
            case 1:
              return G__8709__1.call(this, result);
            case 2:
              return G__8709__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8709.cljs$core$IFn$_invoke$arity$0 = G__8709__0;
        G__8709.cljs$core$IFn$_invoke$arity$1 = G__8709__1;
        G__8709.cljs$core$IFn$_invoke$arity$2 = G__8709__2;
        return G__8709;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var fst = cljs.core.first(s);
      var fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst);
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4425__auto__) {
        return function(p1__8701_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__8701_SHARP_) : f.call(null, p1__8701_SHARP_));
        };
      }(fst, fv, s, temp__4425__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions() {
  var args8710 = [];
  var len__5067__auto___8715 = arguments.length;
  var i__5068__auto___8716 = 0;
  while (true) {
    if (i__5068__auto___8716 < len__5067__auto___8715) {
      args8710.push(arguments[i__5068__auto___8716]);
      var G__8717 = i__5068__auto___8716 + 1;
      i__5068__auto___8716 = G__8717;
      continue;
    } else {
    }
    break;
  }
  var G__8712 = args8710.length;
  switch(G__8712) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8710.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__8713 = init;
        var G__8714 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8713, G__8714) : f.call(null, G__8713, G__8714);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt() {
  var args8729 = [];
  var len__5067__auto___8736 = arguments.length;
  var i__5068__auto___8737 = 0;
  while (true) {
    if (i__5068__auto___8737 < len__5067__auto___8736) {
      args8729.push(arguments[i__5068__auto___8737]);
      var G__8738 = i__5068__auto___8737 + 1;
      i__5068__auto___8737 = G__8738;
      continue;
    } else {
    }
    break;
  }
  var G__8735 = args8729.length;
  switch(G__8735) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args8729.slice(3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5086__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__8740 = null;
    var G__8740__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
    };
    var G__8740__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
    };
    var G__8740__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
    };
    var G__8740__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
    };
    var G__8740__4 = function() {
      var G__8741__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__8741 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8742__i = 0, G__8742__a = new Array(arguments.length - 3);
          while (G__8742__i < G__8742__a.length) {
            G__8742__a[G__8742__i] = arguments[G__8742__i + 3];
            ++G__8742__i;
          }
          args = new cljs.core.IndexedSeq(G__8742__a, 0);
        }
        return G__8741__delegate.call(this, x, y, z, args);
      };
      G__8741.cljs$lang$maxFixedArity = 3;
      G__8741.cljs$lang$applyTo = function(arglist__8743) {
        var x = cljs.core.first(arglist__8743);
        arglist__8743 = cljs.core.next(arglist__8743);
        var y = cljs.core.first(arglist__8743);
        arglist__8743 = cljs.core.next(arglist__8743);
        var z = cljs.core.first(arglist__8743);
        var args = cljs.core.rest(arglist__8743);
        return G__8741__delegate(x, y, z, args);
      };
      G__8741.cljs$core$IFn$_invoke$arity$variadic = G__8741__delegate;
      return G__8741;
    }();
    G__8740 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8740__0.call(this);
        case 1:
          return G__8740__1.call(this, x);
        case 2:
          return G__8740__2.call(this, x, y);
        case 3:
          return G__8740__3.call(this, x, y, z);
        default:
          var G__8744 = null;
          if (arguments.length > 3) {
            var G__8745__i = 0, G__8745__a = new Array(arguments.length - 3);
            while (G__8745__i < G__8745__a.length) {
              G__8745__a[G__8745__i] = arguments[G__8745__i + 3];
              ++G__8745__i;
            }
            G__8744 = new cljs.core.IndexedSeq(G__8745__a, 0);
          }
          return G__8740__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8744);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8740.cljs$lang$maxFixedArity = 3;
    G__8740.cljs$lang$applyTo = G__8740__4.cljs$lang$applyTo;
    G__8740.cljs$core$IFn$_invoke$arity$0 = G__8740__0;
    G__8740.cljs$core$IFn$_invoke$arity$1 = G__8740__1;
    G__8740.cljs$core$IFn$_invoke$arity$2 = G__8740__2;
    G__8740.cljs$core$IFn$_invoke$arity$3 = G__8740__3;
    G__8740.cljs$core$IFn$_invoke$arity$variadic = G__8740__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8740;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__8746 = null;
    var G__8746__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
    };
    var G__8746__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
    };
    var G__8746__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
    };
    var G__8746__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
    };
    var G__8746__4 = function() {
      var G__8747__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__8747 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8748__i = 0, G__8748__a = new Array(arguments.length - 3);
          while (G__8748__i < G__8748__a.length) {
            G__8748__a[G__8748__i] = arguments[G__8748__i + 3];
            ++G__8748__i;
          }
          args = new cljs.core.IndexedSeq(G__8748__a, 0);
        }
        return G__8747__delegate.call(this, x, y, z, args);
      };
      G__8747.cljs$lang$maxFixedArity = 3;
      G__8747.cljs$lang$applyTo = function(arglist__8749) {
        var x = cljs.core.first(arglist__8749);
        arglist__8749 = cljs.core.next(arglist__8749);
        var y = cljs.core.first(arglist__8749);
        arglist__8749 = cljs.core.next(arglist__8749);
        var z = cljs.core.first(arglist__8749);
        var args = cljs.core.rest(arglist__8749);
        return G__8747__delegate(x, y, z, args);
      };
      G__8747.cljs$core$IFn$_invoke$arity$variadic = G__8747__delegate;
      return G__8747;
    }();
    G__8746 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8746__0.call(this);
        case 1:
          return G__8746__1.call(this, x);
        case 2:
          return G__8746__2.call(this, x, y);
        case 3:
          return G__8746__3.call(this, x, y, z);
        default:
          var G__8750 = null;
          if (arguments.length > 3) {
            var G__8751__i = 0, G__8751__a = new Array(arguments.length - 3);
            while (G__8751__i < G__8751__a.length) {
              G__8751__a[G__8751__i] = arguments[G__8751__i + 3];
              ++G__8751__i;
            }
            G__8750 = new cljs.core.IndexedSeq(G__8751__a, 0);
          }
          return G__8746__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8750);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8746.cljs$lang$maxFixedArity = 3;
    G__8746.cljs$lang$applyTo = G__8746__4.cljs$lang$applyTo;
    G__8746.cljs$core$IFn$_invoke$arity$0 = G__8746__0;
    G__8746.cljs$core$IFn$_invoke$arity$1 = G__8746__1;
    G__8746.cljs$core$IFn$_invoke$arity$2 = G__8746__2;
    G__8746.cljs$core$IFn$_invoke$arity$3 = G__8746__3;
    G__8746.cljs$core$IFn$_invoke$arity$variadic = G__8746__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8746;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__8752 = null;
    var G__8752__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
    };
    var G__8752__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
    };
    var G__8752__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
    };
    var G__8752__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
    };
    var G__8752__4 = function() {
      var G__8753__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__8753 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8754__i = 0, G__8754__a = new Array(arguments.length - 3);
          while (G__8754__i < G__8754__a.length) {
            G__8754__a[G__8754__i] = arguments[G__8754__i + 3];
            ++G__8754__i;
          }
          args = new cljs.core.IndexedSeq(G__8754__a, 0);
        }
        return G__8753__delegate.call(this, x, y, z, args);
      };
      G__8753.cljs$lang$maxFixedArity = 3;
      G__8753.cljs$lang$applyTo = function(arglist__8755) {
        var x = cljs.core.first(arglist__8755);
        arglist__8755 = cljs.core.next(arglist__8755);
        var y = cljs.core.first(arglist__8755);
        arglist__8755 = cljs.core.next(arglist__8755);
        var z = cljs.core.first(arglist__8755);
        var args = cljs.core.rest(arglist__8755);
        return G__8753__delegate(x, y, z, args);
      };
      G__8753.cljs$core$IFn$_invoke$arity$variadic = G__8753__delegate;
      return G__8753;
    }();
    G__8752 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8752__0.call(this);
        case 1:
          return G__8752__1.call(this, x);
        case 2:
          return G__8752__2.call(this, x, y);
        case 3:
          return G__8752__3.call(this, x, y, z);
        default:
          var G__8756 = null;
          if (arguments.length > 3) {
            var G__8757__i = 0, G__8757__a = new Array(arguments.length - 3);
            while (G__8757__i < G__8757__a.length) {
              G__8757__a[G__8757__i] = arguments[G__8757__i + 3];
              ++G__8757__i;
            }
            G__8756 = new cljs.core.IndexedSeq(G__8757__a, 0);
          }
          return G__8752__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8756);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8752.cljs$lang$maxFixedArity = 3;
    G__8752.cljs$lang$applyTo = G__8752__4.cljs$lang$applyTo;
    G__8752.cljs$core$IFn$_invoke$arity$0 = G__8752__0;
    G__8752.cljs$core$IFn$_invoke$arity$1 = G__8752__1;
    G__8752.cljs$core$IFn$_invoke$arity$2 = G__8752__2;
    G__8752.cljs$core$IFn$_invoke$arity$3 = G__8752__3;
    G__8752.cljs$core$IFn$_invoke$arity$variadic = G__8752__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8752;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__8758 = null;
      var G__8758__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__8719_SHARP_, p2__8720_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__8719_SHARP_, p2__8720_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__8720_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__8720_SHARP_.call(null));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__8758__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__8721_SHARP_, p2__8722_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__8721_SHARP_, p2__8722_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__8722_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__8722_SHARP_.call(null, x));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__8758__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__8723_SHARP_, p2__8724_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__8723_SHARP_, p2__8724_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__8724_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__8724_SHARP_.call(null, x, y));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__8758__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__8725_SHARP_, p2__8726_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__8725_SHARP_, p2__8726_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__8726_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__8726_SHARP_.call(null, x, y, z));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__8758__4 = function() {
        var G__8759__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__8727_SHARP_, p2__8728_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__8727_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__8728_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__8759 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__8760__i = 0, G__8760__a = new Array(arguments.length - 3);
            while (G__8760__i < G__8760__a.length) {
              G__8760__a[G__8760__i] = arguments[G__8760__i + 3];
              ++G__8760__i;
            }
            args = new cljs.core.IndexedSeq(G__8760__a, 0);
          }
          return G__8759__delegate.call(this, x, y, z, args);
        };
        G__8759.cljs$lang$maxFixedArity = 3;
        G__8759.cljs$lang$applyTo = function(arglist__8761) {
          var x = cljs.core.first(arglist__8761);
          arglist__8761 = cljs.core.next(arglist__8761);
          var y = cljs.core.first(arglist__8761);
          arglist__8761 = cljs.core.next(arglist__8761);
          var z = cljs.core.first(arglist__8761);
          var args = cljs.core.rest(arglist__8761);
          return G__8759__delegate(x, y, z, args);
        };
        G__8759.cljs$core$IFn$_invoke$arity$variadic = G__8759__delegate;
        return G__8759;
      }();
      G__8758 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__8758__0.call(this);
          case 1:
            return G__8758__1.call(this, x);
          case 2:
            return G__8758__2.call(this, x, y);
          case 3:
            return G__8758__3.call(this, x, y, z);
          default:
            var G__8762 = null;
            if (arguments.length > 3) {
              var G__8763__i = 0, G__8763__a = new Array(arguments.length - 3);
              while (G__8763__i < G__8763__a.length) {
                G__8763__a[G__8763__i] = arguments[G__8763__i + 3];
                ++G__8763__i;
              }
              G__8762 = new cljs.core.IndexedSeq(G__8763__a, 0);
            }
            return G__8758__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8762);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8758.cljs$lang$maxFixedArity = 3;
      G__8758.cljs$lang$applyTo = G__8758__4.cljs$lang$applyTo;
      G__8758.cljs$core$IFn$_invoke$arity$0 = G__8758__0;
      G__8758.cljs$core$IFn$_invoke$arity$1 = G__8758__1;
      G__8758.cljs$core$IFn$_invoke$arity$2 = G__8758__2;
      G__8758.cljs$core$IFn$_invoke$arity$3 = G__8758__3;
      G__8758.cljs$core$IFn$_invoke$arity$variadic = G__8758__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__8758;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq8730) {
  var G__8731 = cljs.core.first(seq8730);
  var seq8730__$1 = cljs.core.next(seq8730);
  var G__8732 = cljs.core.first(seq8730__$1);
  var seq8730__$2 = cljs.core.next(seq8730__$1);
  var G__8733 = cljs.core.first(seq8730__$2);
  var seq8730__$3 = cljs.core.next(seq8730__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__8731, G__8732, G__8733, seq8730__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun() {
  var args8764 = [];
  var len__5067__auto___8767 = arguments.length;
  var i__5068__auto___8768 = 0;
  while (true) {
    if (i__5068__auto___8768 < len__5067__auto___8767) {
      args8764.push(arguments[i__5068__auto___8768]);
      var G__8769 = i__5068__auto___8768 + 1;
      i__5068__auto___8768 = G__8769;
      continue;
    } else {
    }
    break;
  }
  var G__8766 = args8764.length;
  switch(G__8766) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8764.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__8771 = cljs.core.next(coll);
      coll = G__8771;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__8772 = n - 1;
      var G__8773 = cljs.core.next(coll);
      n = G__8772;
      coll = G__8773;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall() {
  var args8774 = [];
  var len__5067__auto___8777 = arguments.length;
  var i__5068__auto___8778 = 0;
  while (true) {
    if (i__5068__auto___8778 < len__5067__auto___8777) {
      args8774.push(arguments[i__5068__auto___8778]);
      var G__8779 = i__5068__auto___8778 + 1;
      i__5068__auto___8778 = G__8779;
      continue;
    } else {
    }
    break;
  }
  var G__8776 = args8774.length;
  switch(G__8776) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8774.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__8782 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8782, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8782, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4028__auto__ = flags;
      if (cljs.core.truth_(or__4028__auto__)) {
        return or__4028__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_8790 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4028__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4028__auto__)) {
              return or__4028__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__8791_8797 = cljs.core.first(coll);
          var G__8792_8798 = writer;
          var G__8793_8799 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__8791_8797, G__8792_8798, G__8793_8799) : print_one.call(null, G__8791_8797, G__8792_8798, G__8793_8799);
        } else {
        }
        var coll_8800__$1 = cljs.core.next(coll);
        var n_8801 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_8800__$1 && (n_8801 == null || !(n_8801 === 0))) {
            cljs.core._write(writer, sep);
            var G__8794_8802 = cljs.core.first(coll_8800__$1);
            var G__8795_8803 = writer;
            var G__8796_8804 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__8794_8802, G__8795_8803, G__8796_8804) : print_one.call(null, G__8794_8802, G__8795_8803, G__8796_8804);
            var G__8805 = cljs.core.next(coll_8800__$1);
            var G__8806 = n_8801 - 1;
            coll_8800__$1 = G__8805;
            n_8801 = G__8806;
            continue;
          } else {
            if (cljs.core.seq(coll_8800__$1) && n_8801 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4028__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4028__auto__)) {
                  return or__4028__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_8790;
  }
};
cljs.core.write_all = function cljs$core$write_all() {
  var args__5074__auto__ = [];
  var len__5067__auto___8813 = arguments.length;
  var i__5068__auto___8814 = 0;
  while (true) {
    if (i__5068__auto___8814 < len__5067__auto___8813) {
      args__5074__auto__.push(arguments[i__5068__auto___8814]);
      var G__8815 = i__5068__auto___8814 + 1;
      i__5068__auto___8814 = G__8815;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 1 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5075__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__8809 = cljs.core.seq(ss);
  var chunk__8810 = null;
  var count__8811 = 0;
  var i__8812 = 0;
  while (true) {
    if (i__8812 < count__8811) {
      var s = chunk__8810.cljs$core$IIndexed$_nth$arity$2(null, i__8812);
      cljs.core._write(writer, s);
      var G__8816 = seq__8809;
      var G__8817 = chunk__8810;
      var G__8818 = count__8811;
      var G__8819 = i__8812 + 1;
      seq__8809 = G__8816;
      chunk__8810 = G__8817;
      count__8811 = G__8818;
      i__8812 = G__8819;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8809);
      if (temp__4425__auto__) {
        var seq__8809__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8809__$1)) {
          var c__4812__auto__ = cljs.core.chunk_first(seq__8809__$1);
          var G__8820 = cljs.core.chunk_rest(seq__8809__$1);
          var G__8821 = c__4812__auto__;
          var G__8822 = cljs.core.count(c__4812__auto__);
          var G__8823 = 0;
          seq__8809 = G__8820;
          chunk__8810 = G__8821;
          count__8811 = G__8822;
          i__8812 = G__8823;
          continue;
        } else {
          var s = cljs.core.first(seq__8809__$1);
          cljs.core._write(writer, s);
          var G__8824 = cljs.core.next(seq__8809__$1);
          var G__8825 = null;
          var G__8826 = 0;
          var G__8827 = 0;
          seq__8809 = G__8824;
          chunk__8810 = G__8825;
          count__8811 = G__8826;
          i__8812 = G__8827;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq8807) {
  var G__8808 = cljs.core.first(seq8807);
  var seq8807__$1 = cljs.core.next(seq8807);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__8808, seq8807__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj8829 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj8829;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.print_meta_QMARK_ = function cljs$core$print_meta_QMARK_(opts, obj) {
  var and__4016__auto__ = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964)));
  if (and__4016__auto__) {
    var and__4016__auto____$1 = !(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || obj.cljs$core$IMeta$ ? true : false : false;
    if (and__4016__auto____$1) {
      return !(cljs.core.meta(obj) == null);
    } else {
      return and__4016__auto____$1;
    }
  } else {
    return and__4016__auto__;
  }
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#<undefined>");
    } else {
      if (cljs.core.print_meta_QMARK_(opts, obj)) {
        cljs.core._write(writer, "^");
        var G__8845_8854 = cljs.core.meta(obj);
        var G__8846_8855 = writer;
        var G__8847_8856 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__8845_8854, G__8846_8855, G__8847_8856) : cljs.core.pr_writer.call(null, G__8845_8854, G__8846_8855, G__8847_8856);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (obj === true || obj === false || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__8849 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__8850 = cljs.core.pr_writer;
                var G__8851 = writer;
                var G__8852 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__8849, G__8850, G__8851, G__8852) : cljs.core.print_map.call(null, G__8849, G__8850, G__8851, G__8852);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (goog.isFunction(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#<", [cljs.core.str(obj)].join(""), ">"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__8857 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__8857;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#<", [cljs.core.str(obj)].join(""), ">"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var alt_impl = temp__4423__auto__;
    var G__8861 = obj;
    var G__8862 = writer;
    var G__8863 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__8861, G__8862, G__8863) : alt_impl.call(null, G__8861, G__8862, G__8863);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__8868 = cljs.core.seq(cljs.core.next(objs));
  var chunk__8869 = null;
  var count__8870 = 0;
  var i__8871 = 0;
  while (true) {
    if (i__8871 < count__8870) {
      var obj = chunk__8869.cljs$core$IIndexed$_nth$arity$2(null, i__8871);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__8872 = seq__8868;
      var G__8873 = chunk__8869;
      var G__8874 = count__8870;
      var G__8875 = i__8871 + 1;
      seq__8868 = G__8872;
      chunk__8869 = G__8873;
      count__8870 = G__8874;
      i__8871 = G__8875;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__8868);
      if (temp__4425__auto__) {
        var seq__8868__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8868__$1)) {
          var c__4812__auto__ = cljs.core.chunk_first(seq__8868__$1);
          var G__8876 = cljs.core.chunk_rest(seq__8868__$1);
          var G__8877 = c__4812__auto__;
          var G__8878 = cljs.core.count(c__4812__auto__);
          var G__8879 = 0;
          seq__8868 = G__8876;
          chunk__8869 = G__8877;
          count__8870 = G__8878;
          i__8871 = G__8879;
          continue;
        } else {
          var obj = cljs.core.first(seq__8868__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__8880 = cljs.core.next(seq__8868__$1);
          var G__8881 = null;
          var G__8882 = 0;
          var G__8883 = 0;
          seq__8868 = G__8880;
          chunk__8869 = G__8881;
          count__8870 = G__8882;
          i__8871 = G__8883;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline() {
  var args8884 = [];
  var len__5067__auto___8887 = arguments.length;
  var i__5068__auto___8888 = 0;
  while (true) {
    if (i__5068__auto___8888 < len__5067__auto___8887) {
      args8884.push(arguments[i__5068__auto___8888]);
      var G__8889 = i__5068__auto___8888 + 1;
      i__5068__auto___8888 = G__8889;
      continue;
    } else {
    }
    break;
  }
  var G__8886 = args8884.length;
  switch(G__8886) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8884.length)].join(""));;
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str() {
  var args__5074__auto__ = [];
  var len__5067__auto___8892 = arguments.length;
  var i__5068__auto___8893 = 0;
  while (true) {
    if (i__5068__auto___8893 < len__5067__auto___8892) {
      args__5074__auto__.push(arguments[i__5068__auto___8893]);
      var G__8894 = i__5068__auto___8893 + 1;
      i__5068__auto___8893 = G__8894;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq8891) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8891));
};
cljs.core.prn_str = function cljs$core$prn_str() {
  var args__5074__auto__ = [];
  var len__5067__auto___8896 = arguments.length;
  var i__5068__auto___8897 = 0;
  while (true) {
    if (i__5068__auto___8897 < len__5067__auto___8896) {
      args__5074__auto__.push(arguments[i__5068__auto___8897]);
      var G__8898 = i__5068__auto___8897 + 1;
      i__5068__auto___8897 = G__8898;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq8895) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8895));
};
cljs.core.pr = function cljs$core$pr() {
  var args__5074__auto__ = [];
  var len__5067__auto___8900 = arguments.length;
  var i__5068__auto___8901 = 0;
  while (true) {
    if (i__5068__auto___8901 < len__5067__auto___8900) {
      args__5074__auto__.push(arguments[i__5068__auto___8901]);
      var G__8902 = i__5068__auto___8901 + 1;
      i__5068__auto___8901 = G__8902;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq8899) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8899));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__8903__i = 0, G__8903__a = new Array(arguments.length - 0);
      while (G__8903__i < G__8903__a.length) {
        G__8903__a[G__8903__i] = arguments[G__8903__i + 0];
        ++G__8903__i;
      }
      objs = new cljs.core.IndexedSeq(G__8903__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__8904) {
    var objs = cljs.core.seq(arglist__8904);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str() {
  var args__5074__auto__ = [];
  var len__5067__auto___8906 = arguments.length;
  var i__5068__auto___8907 = 0;
  while (true) {
    if (i__5068__auto___8907 < len__5067__auto___8906) {
      args__5074__auto__.push(arguments[i__5068__auto___8907]);
      var G__8908 = i__5068__auto___8907 + 1;
      i__5068__auto___8907 = G__8908;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq8905) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8905));
};
cljs.core.println = function cljs$core$println() {
  var args__5074__auto__ = [];
  var len__5067__auto___8910 = arguments.length;
  var i__5068__auto___8911 = 0;
  while (true) {
    if (i__5068__auto___8911 < len__5067__auto___8910) {
      args__5074__auto__.push(arguments[i__5068__auto___8911]);
      var G__8912 = i__5068__auto___8911 + 1;
      i__5068__auto___8911 = G__8912;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq8909) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8909));
};
cljs.core.println_str = function cljs$core$println_str() {
  var args__5074__auto__ = [];
  var len__5067__auto___8914 = arguments.length;
  var i__5068__auto___8915 = 0;
  while (true) {
    if (i__5068__auto___8915 < len__5067__auto___8914) {
      args__5074__auto__.push(arguments[i__5068__auto___8915]);
      var G__8916 = i__5068__auto___8915 + 1;
      i__5068__auto___8915 = G__8916;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq8913) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8913));
};
cljs.core.prn = function cljs$core$prn() {
  var args__5074__auto__ = [];
  var len__5067__auto___8918 = arguments.length;
  var i__5068__auto___8919 = 0;
  while (true) {
    if (i__5068__auto___8919 < len__5067__auto___8918) {
      args__5074__auto__.push(arguments[i__5068__auto___8919]);
      var G__8920 = i__5068__auto___8919 + 1;
      i__5068__auto___8919 = G__8920;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq8917) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8917));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__8927_8933 = cljs.core.key(e);
    var G__8928_8934 = w;
    var G__8929_8935 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__8927_8933, G__8928_8934, G__8929_8935) : print_one.call(null, G__8927_8933, G__8928_8934, G__8929_8935);
    cljs.core._write(w, " ");
    var G__8930 = cljs.core.val(e);
    var G__8931 = w;
    var G__8932 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__8930, G__8931, G__8932) : print_one.call(null, G__8930, G__8931, G__8932);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#<Volatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, ">");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#<Atom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, ">");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_() {
  var args__5074__auto__ = [];
  var len__5067__auto___8939 = arguments.length;
  var i__5068__auto___8940 = 0;
  while (true) {
    if (i__5068__auto___8940 < len__5067__auto___8939) {
      args__5074__auto__.push(arguments[i__5068__auto___8940]);
      var G__8941 = i__5068__auto___8940 + 1;
      i__5068__auto___8940 = G__8941;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 2 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5075__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq8936) {
  var G__8937 = cljs.core.first(seq8936);
  var seq8936__$1 = cljs.core.next(seq8936);
  var G__8938 = cljs.core.first(seq8936__$1);
  var seq8936__$2 = cljs.core.next(seq8936__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8937, G__8938, seq8936__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym() {
  var args8942 = [];
  var len__5067__auto___8945 = arguments.length;
  var i__5068__auto___8946 = 0;
  while (true) {
    if (i__5068__auto___8946 < len__5067__auto___8945) {
      args8942.push(arguments[i__5068__auto___8946]);
      var G__8947 = i__5068__auto___8946 + 1;
      i__5068__auto___8946 = G__8947;
      continue;
    } else {
    }
    break;
  }
  var G__8944 = args8942.length;
  switch(G__8944) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8942.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0) : cljs.core.atom.call(null, 0);
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__8949_SHARP_, p2__8950_SHARP_) {
    var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__8949_SHARP_, p2__8950_SHARP_) : rf.call(null, p1__8949_SHARP_, p2__8950_SHARP_);
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__8951 = null;
      var G__8951__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__8951__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__8951__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__8951 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__8951__0.call(this);
          case 1:
            return G__8951__1.call(this, result);
          case 2:
            return G__8951__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8951.cljs$core$IFn$_invoke$arity$0 = G__8951__0;
      G__8951.cljs$core$IFn$_invoke$arity$1 = G__8951__1;
      G__8951.cljs$core$IFn$_invoke$arity$2 = G__8951__2;
      return G__8951;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe() {
  var args8952 = [];
  var len__5067__auto___8955 = arguments.length;
  var i__5068__auto___8956 = 0;
  while (true) {
    if (i__5068__auto___8956 < len__5067__auto___8955) {
      args8952.push(arguments[i__5068__auto___8956]);
      var G__8957 = i__5068__auto___8956 + 1;
      i__5068__auto___8956 = G__8957;
      continue;
    } else {
    }
    break;
  }
  var G__8954 = args8952.length;
  switch(G__8954) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8952.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__8959 = null;
        var G__8959__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8959__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__8959__2 = function(result, input) {
          var prior = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__8959 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8959__0.call(this);
            case 1:
              return G__8959__1.call(this, result);
            case 2:
              return G__8959__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8959.cljs$core$IFn$_invoke$arity$0 = G__8959__0;
        G__8959.cljs$core$IFn$_invoke$arity$1 = G__8959__1;
        G__8959.cljs$core$IFn$_invoke$arity$2 = G__8959__2;
        return G__8959;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample() {
  var args8960 = [];
  var len__5067__auto___8963 = arguments.length;
  var i__5068__auto___8964 = 0;
  while (true) {
    if (i__5068__auto___8964 < len__5067__auto___8963) {
      args8960.push(arguments[i__5068__auto___8964]);
      var G__8965 = i__5068__auto___8964 + 1;
      i__5068__auto___8964 = G__8965;
      continue;
    } else {
    }
    break;
  }
  var G__8962 = args8960.length;
  switch(G__8962) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8960.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5003__auto__ = this;
  return cljs.core.es6_iterator(this__5003__auto__);
};
cljs.core.eduction = function cljs$core$eduction() {
  var args__5074__auto__ = [];
  var len__5067__auto___8968 = arguments.length;
  var i__5068__auto___8969 = 0;
  while (true) {
    if (i__5068__auto___8969 < len__5067__auto___8968) {
      args__5074__auto__.push(arguments[i__5068__auto___8969]);
      var G__8970 = i__5068__auto___8969 + 1;
      i__5068__auto___8969 = G__8970;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 0 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(0), 0) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__5075__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq8967) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8967));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__8972_SHARP_, p2__8971_SHARP_) {
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__8971_SHARP_) : proc.call(null, p2__8971_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = {};
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4664__auto__ = x == null ? null : x;
    var m__4665__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4665__auto__.call(null, x);
    } else {
      var m__4665__auto____$1 = cljs.core._clj__GT_js["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__4665__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-clj->js", x);
      }
    }
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4664__auto__ = x == null ? null : x;
    var m__4665__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4665__auto__.call(null, x);
    } else {
      var m__4665__auto____$1 = cljs.core._key__GT_js["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__4665__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-key->js", x);
      }
    }
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (!(k == null) ? false || k.cljs$core$IEncodeJS$ ? true : !k.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(k) : cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (!(x == null) ? false || x.cljs$core$IEncodeJS$ ? true : !x.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x)) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = {};
            var seq__8993_9003 = cljs.core.seq(x);
            var chunk__8994_9004 = null;
            var count__8995_9005 = 0;
            var i__8996_9006 = 0;
            while (true) {
              if (i__8996_9006 < count__8995_9005) {
                var vec__8997_9007 = chunk__8994_9004.cljs$core$IIndexed$_nth$arity$2(null, i__8996_9006);
                var k_9008 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8997_9007, 0, null);
                var v_9009 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8997_9007, 1, null);
                m[cljs.core.key__GT_js(k_9008)] = cljs$core$clj__GT_js(v_9009);
                var G__9010 = seq__8993_9003;
                var G__9011 = chunk__8994_9004;
                var G__9012 = count__8995_9005;
                var G__9013 = i__8996_9006 + 1;
                seq__8993_9003 = G__9010;
                chunk__8994_9004 = G__9011;
                count__8995_9005 = G__9012;
                i__8996_9006 = G__9013;
                continue;
              } else {
                var temp__4425__auto___9014 = cljs.core.seq(seq__8993_9003);
                if (temp__4425__auto___9014) {
                  var seq__8993_9015__$1 = temp__4425__auto___9014;
                  if (cljs.core.chunked_seq_QMARK_(seq__8993_9015__$1)) {
                    var c__4812__auto___9016 = cljs.core.chunk_first(seq__8993_9015__$1);
                    var G__9017 = cljs.core.chunk_rest(seq__8993_9015__$1);
                    var G__9018 = c__4812__auto___9016;
                    var G__9019 = cljs.core.count(c__4812__auto___9016);
                    var G__9020 = 0;
                    seq__8993_9003 = G__9017;
                    chunk__8994_9004 = G__9018;
                    count__8995_9005 = G__9019;
                    i__8996_9006 = G__9020;
                    continue;
                  } else {
                    var vec__8998_9021 = cljs.core.first(seq__8993_9015__$1);
                    var k_9022 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8998_9021, 0, null);
                    var v_9023 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8998_9021, 1, null);
                    m[cljs.core.key__GT_js(k_9022)] = cljs$core$clj__GT_js(v_9023);
                    var G__9024 = cljs.core.next(seq__8993_9015__$1);
                    var G__9025 = null;
                    var G__9026 = 0;
                    var G__9027 = 0;
                    seq__8993_9003 = G__9024;
                    chunk__8994_9004 = G__9025;
                    count__8995_9005 = G__9026;
                    i__8996_9006 = G__9027;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__8999_9028 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__9000_9029 = null;
              var count__9001_9030 = 0;
              var i__9002_9031 = 0;
              while (true) {
                if (i__9002_9031 < count__9001_9030) {
                  var x_9032__$1 = chunk__9000_9029.cljs$core$IIndexed$_nth$arity$2(null, i__9002_9031);
                  arr.push(x_9032__$1);
                  var G__9033 = seq__8999_9028;
                  var G__9034 = chunk__9000_9029;
                  var G__9035 = count__9001_9030;
                  var G__9036 = i__9002_9031 + 1;
                  seq__8999_9028 = G__9033;
                  chunk__9000_9029 = G__9034;
                  count__9001_9030 = G__9035;
                  i__9002_9031 = G__9036;
                  continue;
                } else {
                  var temp__4425__auto___9037 = cljs.core.seq(seq__8999_9028);
                  if (temp__4425__auto___9037) {
                    var seq__8999_9038__$1 = temp__4425__auto___9037;
                    if (cljs.core.chunked_seq_QMARK_(seq__8999_9038__$1)) {
                      var c__4812__auto___9039 = cljs.core.chunk_first(seq__8999_9038__$1);
                      var G__9040 = cljs.core.chunk_rest(seq__8999_9038__$1);
                      var G__9041 = c__4812__auto___9039;
                      var G__9042 = cljs.core.count(c__4812__auto___9039);
                      var G__9043 = 0;
                      seq__8999_9028 = G__9040;
                      chunk__9000_9029 = G__9041;
                      count__9001_9030 = G__9042;
                      i__9002_9031 = G__9043;
                      continue;
                    } else {
                      var x_9044__$1 = cljs.core.first(seq__8999_9038__$1);
                      arr.push(x_9044__$1);
                      var G__9045 = cljs.core.next(seq__8999_9038__$1);
                      var G__9046 = null;
                      var G__9047 = 0;
                      var G__9048 = 0;
                      seq__8999_9028 = G__9045;
                      chunk__9000_9029 = G__9046;
                      count__9001_9030 = G__9047;
                      i__9002_9031 = G__9048;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = {};
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (!(x == null) && !(x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4664__auto__ = x == null ? null : x;
    var m__4665__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__4665__auto__.call(null, x, options);
    } else {
      var m__4665__auto____$1 = cljs.core._js__GT_clj["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(x, options) : m__4665__auto____$1.call(null, x, options);
      } else {
        throw cljs.core.missing_protocol("IEncodeClojure.-js->clj", x);
      }
    }
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj() {
  var args9051 = [];
  var len__5067__auto___9076 = arguments.length;
  var i__5068__auto___9077 = 0;
  while (true) {
    if (i__5068__auto___9077 < len__5067__auto___9076) {
      args9051.push(arguments[i__5068__auto___9077]);
      var G__9078 = i__5068__auto___9077 + 1;
      i__5068__auto___9077 = G__9078;
      continue;
    } else {
    }
    break;
  }
  var G__9055 = args9051.length;
  switch(G__9055) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args9051.slice(1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5086__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__9056 = opts;
  var map__9056__$1 = (!(map__9056 == null) ? map__9056.cljs$lang$protocol_mask$partition0$ & 64 || map__9056.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__9056) : map__9056;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9056__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__9056, map__9056__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (!(x__$1 == null) ? false || x__$1.cljs$core$IEncodeClojure$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__4781__auto__ = function(map__9056, map__9056__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__9070(s__9071) {
                      return new cljs.core.LazySeq(null, function(map__9056, map__9056__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__9071__$1 = s__9071;
                          while (true) {
                            var temp__4425__auto__ = cljs.core.seq(s__9071__$1);
                            if (temp__4425__auto__) {
                              var s__9071__$2 = temp__4425__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__9071__$2)) {
                                var c__4779__auto__ = cljs.core.chunk_first(s__9071__$2);
                                var size__4780__auto__ = cljs.core.count(c__4779__auto__);
                                var b__9073 = cljs.core.chunk_buffer(size__4780__auto__);
                                if (function() {
                                  var i__9072 = 0;
                                  while (true) {
                                    if (i__9072 < size__4780__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4779__auto__, i__9072);
                                      cljs.core.chunk_append(b__9073, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null));
                                      var G__9080 = i__9072 + 1;
                                      i__9072 = G__9080;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__9073), cljs$core$thisfn_$_iter__9070(cljs.core.chunk_rest(s__9071__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__9073), null);
                                }
                              } else {
                                var k = cljs.core.first(s__9071__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__9070(cljs.core.rest(s__9071__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__9056, map__9056__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__9056, map__9056__$1, keywordize_keys, keyfn);
                  return iter__4781__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__9056, map__9056__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq9052) {
  var G__9053 = cljs.core.first(seq9052);
  var seq9052__$1 = cljs.core.next(seq9052);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__9053, seq9052__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__9082 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__9082) : cljs.core.atom.call(null, G__9082);
  }();
  return function(mem) {
    return function() {
      var G__9083__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(mem) : cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__9083 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__9084__i = 0, G__9084__a = new Array(arguments.length - 0);
          while (G__9084__i < G__9084__a.length) {
            G__9084__a[G__9084__i] = arguments[G__9084__i + 0];
            ++G__9084__i;
          }
          args = new cljs.core.IndexedSeq(G__9084__a, 0);
        }
        return G__9083__delegate.call(this, args);
      };
      G__9083.cljs$lang$maxFixedArity = 0;
      G__9083.cljs$lang$applyTo = function(arglist__9085) {
        var args = cljs.core.seq(arglist__9085);
        return G__9083__delegate(args);
      };
      G__9083.cljs$core$IFn$_invoke$arity$variadic = G__9083__delegate;
      return G__9083;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline() {
  var args9086 = [];
  var len__5067__auto___9091 = arguments.length;
  var i__5068__auto___9092 = 0;
  while (true) {
    if (i__5068__auto___9092 < len__5067__auto___9091) {
      args9086.push(arguments[i__5068__auto___9092]);
      var G__9093 = i__5068__auto___9092 + 1;
      i__5068__auto___9092 = G__9093;
      continue;
    } else {
    }
    break;
  }
  var G__9090 = args9086.length;
  switch(G__9090) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5086__auto__ = new cljs.core.IndexedSeq(args9086.slice(1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5086__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    if (cljs.core.fn_QMARK_(ret)) {
      var G__9095 = ret;
      f = G__9095;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq9087) {
  var G__9088 = cljs.core.first(seq9087);
  var seq9087__$1 = cljs.core.next(seq9087);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__9088, seq9087__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand() {
  var args9096 = [];
  var len__5067__auto___9099 = arguments.length;
  var i__5068__auto___9100 = 0;
  while (true) {
    if (i__5068__auto___9100 < len__5067__auto___9099) {
      args9096.push(arguments[i__5068__auto___9100]);
      var G__9101 = i__5068__auto___9100 + 1;
      i__5068__auto___9100 = G__9101;
      continue;
    } else {
    }
    break;
  }
  var G__9098 = args9096.length;
  switch(G__9098) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9096.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return Math.random() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__9104 = Math.random() * n;
  return Math.floor(G__9104);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__9106 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__9106) : cljs.core.atom.call(null, G__9106);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_() {
  var args__5074__auto__ = [];
  var len__5067__auto___9109 = arguments.length;
  var i__5068__auto___9110 = 0;
  while (true) {
    if (i__5068__auto___9110 < len__5067__auto___9109) {
      args__5074__auto__.push(arguments[i__5068__auto___9110]);
      var G__9111 = i__5068__auto___9110 + 1;
      i__5068__auto___9110 = G__9111;
      continue;
    } else {
    }
    break;
  }
  var argseq__5075__auto__ = 1 < args__5074__auto__.length ? new cljs.core.IndexedSeq(args__5074__auto__.slice(1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5075__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq9107) {
  var G__9108 = cljs.core.first(seq9107);
  var seq9107__$1 = cljs.core.next(seq9107);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9108, seq9107__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_() {
  var args9112 = [];
  var len__5067__auto___9116 = arguments.length;
  var i__5068__auto___9117 = 0;
  while (true) {
    if (i__5068__auto___9117 < len__5067__auto___9116) {
      args9112.push(arguments[i__5068__auto___9117]);
      var G__9118 = i__5068__auto___9117 + 1;
      i__5068__auto___9117 = G__9118;
      continue;
    } else {
    }
    break;
  }
  var G__9114 = args9112.length;
  switch(G__9114) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9112.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__9115 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9115) : cljs.core.deref.call(null, G__9115);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4028__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4028__auto__) {
    return or__4028__auto__;
  } else {
    var or__4028__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__4028__auto____$1) {
      return or__4028__auto____$1;
    } else {
      var and__4016__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__4016__auto__) {
        var and__4016__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__4016__auto____$1) {
          var and__4016__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__4016__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__9120 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i));
                var G__9121 = i + 1;
                ret = G__9120;
                i = G__9121;
                continue;
              }
              break;
            }
          } else {
            return and__4016__auto____$2;
          }
        } else {
          return and__4016__auto____$1;
        }
      } else {
        return and__4016__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents() {
  var args9122 = [];
  var len__5067__auto___9126 = arguments.length;
  var i__5068__auto___9127 = 0;
  while (true) {
    if (i__5068__auto___9127 < len__5067__auto___9126) {
      args9122.push(arguments[i__5068__auto___9127]);
      var G__9128 = i__5068__auto___9127 + 1;
      i__5068__auto___9127 = G__9128;
      continue;
    } else {
    }
    break;
  }
  var G__9124 = args9122.length;
  switch(G__9124) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9122.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9125 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9125) : cljs.core.deref.call(null, G__9125);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors() {
  var args9130 = [];
  var len__5067__auto___9134 = arguments.length;
  var i__5068__auto___9135 = 0;
  while (true) {
    if (i__5068__auto___9135 < len__5067__auto___9134) {
      args9130.push(arguments[i__5068__auto___9135]);
      var G__9136 = i__5068__auto___9135 + 1;
      i__5068__auto___9135 = G__9136;
      continue;
    } else {
    }
    break;
  }
  var G__9132 = args9130.length;
  switch(G__9132) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9130.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9133 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9133) : cljs.core.deref.call(null, G__9133);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants() {
  var args9138 = [];
  var len__5067__auto___9142 = arguments.length;
  var i__5068__auto___9143 = 0;
  while (true) {
    if (i__5068__auto___9143 < len__5067__auto___9142) {
      args9138.push(arguments[i__5068__auto___9143]);
      var G__9144 = i__5068__auto___9143 + 1;
      i__5068__auto___9143 = G__9144;
      continue;
    } else {
    }
    break;
  }
  var G__9140 = args9138.length;
  switch(G__9140) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9138.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9141 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9141) : cljs.core.deref.call(null, G__9141);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive() {
  var args9146 = [];
  var len__5067__auto___9149 = arguments.length;
  var i__5068__auto___9150 = 0;
  while (true) {
    if (i__5068__auto___9150 < len__5067__auto___9149) {
      args9146.push(arguments[i__5068__auto___9150]);
      var G__9151 = i__5068__auto___9150 + 1;
      i__5068__auto___9150 = G__9151;
      continue;
    } else {
    }
    break;
  }
  var G__9148 = args9146.length;
  switch(G__9148) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9146.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not=", "not=", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
        };
      }(tp, td, ta), m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
    };
  }(tp, td, ta);
  var or__4028__auto__ = cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4028__auto__)) {
    return or__4028__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive() {
  var args9156 = [];
  var len__5067__auto___9159 = arguments.length;
  var i__5068__auto___9160 = 0;
  while (true) {
    if (i__5068__auto___9160 < len__5067__auto___9159) {
      args9156.push(arguments[i__5068__auto___9160]);
      var G__9161 = i__5068__auto___9160 + 1;
      i__5068__auto___9160 = G__9161;
      continue;
    } else {
    }
    break;
  }
  var G__9158 = args9156.length;
  switch(G__9158) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9156.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__9153_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__9153_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__9153_SHARP_), cljs.core.second(p1__9153_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__9154_SHARP_, p2__9155_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__9154_SHARP_, p2__9155_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(prefer_table) : cljs.core.deref.call(null, prefer_table)).call(null, x);
  var or__4028__auto__ = cljs.core.truth_(function() {
    var and__4016__auto__ = xprefs;
    if (cljs.core.truth_(and__4016__auto__)) {
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y);
    } else {
      return and__4016__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4028__auto__)) {
    return or__4028__auto__;
  } else {
    var or__4028__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__9175 = cljs.core.rest(ps);
          ps = G__9175;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4028__auto____$1)) {
      return or__4028__auto____$1;
    } else {
      var or__4028__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__9176 = cljs.core.rest(ps);
            ps = G__9176;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4028__auto____$2)) {
        return or__4028__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4028__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4028__auto__)) {
    return or__4028__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__9179) {
    var vec__9180 = p__9179;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9180, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9180, 1, null);
    var e = vec__9180;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4028__auto__ = be == null;
        if (or__4028__auto__) {
          return or__4028__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -> "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cached_hierarchy) : cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = {};
cljs.core._reset = function cljs$core$_reset(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_reset$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4664__auto__ = mf == null ? null : mf;
    var m__4665__auto__ = cljs.core._reset[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4665__auto__.call(null, mf);
    } else {
      var m__4665__auto____$1 = cljs.core._reset["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__4665__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
      }
    }
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_add_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4664__auto__ = mf == null ? null : mf;
    var m__4665__auto__ = cljs.core._add_method[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__4665__auto__.call(null, mf, dispatch_val, method);
    } else {
      var m__4665__auto____$1 = cljs.core._add_method["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__4665__auto____$1.call(null, mf, dispatch_val, method);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
      }
    }
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4664__auto__ = mf == null ? null : mf;
    var m__4665__auto__ = cljs.core._remove_method[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4665__auto__.call(null, mf, dispatch_val);
    } else {
      var m__4665__auto____$1 = cljs.core._remove_method["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4665__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
      }
    }
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4664__auto__ = mf == null ? null : mf;
    var m__4665__auto__ = cljs.core._prefer_method[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__4665__auto__.call(null, mf, dispatch_val, dispatch_val_y);
    } else {
      var m__4665__auto____$1 = cljs.core._prefer_method["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__4665__auto____$1.call(null, mf, dispatch_val, dispatch_val_y);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
      }
    }
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_get_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4664__auto__ = mf == null ? null : mf;
    var m__4665__auto__ = cljs.core._get_method[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4665__auto__.call(null, mf, dispatch_val);
    } else {
      var m__4665__auto____$1 = cljs.core._get_method["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4665__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
      }
    }
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_methods$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4664__auto__ = mf == null ? null : mf;
    var m__4665__auto__ = cljs.core._methods[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4665__auto__.call(null, mf);
    } else {
      var m__4665__auto____$1 = cljs.core._methods["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__4665__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
      }
    }
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefers$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4664__auto__ = mf == null ? null : mf;
    var m__4665__auto__ = cljs.core._prefers[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4665__auto__.call(null, mf);
    } else {
      var m__4665__auto____$1 = cljs.core._prefers["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__4665__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
      }
    }
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__4664__auto__ = mf == null ? null : mf;
    var m__4665__auto__ = cljs.core._default_dispatch_val[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4665__auto__.call(null, mf);
    } else {
      var m__4665__auto____$1 = cljs.core._default_dispatch_val["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__4665__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
      }
    }
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__4664__auto__ = mf == null ? null : mf;
    var m__4665__auto__ = cljs.core._dispatch_fn[goog.typeOf(x__4664__auto__)];
    if (!(m__4665__auto__ == null)) {
      return m__4665__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4665__auto__.call(null, mf);
    } else {
      var m__4665__auto____$1 = cljs.core._dispatch_fn["_"];
      if (!(m__4665__auto____$1 == null)) {
        return m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4665__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__4665__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
      }
    }
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__9184 = null;
  var G__9184__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__9184__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
  };
  var G__9184__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
  };
  var G__9184__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
  };
  var G__9184__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
  };
  var G__9184__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
  };
  var G__9184__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
  };
  var G__9184__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__9184__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__9184__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__9184__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__9184__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__9184__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__9184__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__9184__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__9184__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__9184__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__9184__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__9184__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__9184__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__9184__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__9184__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__9184 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__9184__1.call(this, self__);
      case 2:
        return G__9184__2.call(this, self__, a);
      case 3:
        return G__9184__3.call(this, self__, a, b);
      case 4:
        return G__9184__4.call(this, self__, a, b, c);
      case 5:
        return G__9184__5.call(this, self__, a, b, c, d);
      case 6:
        return G__9184__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__9184__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__9184__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__9184__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__9184__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__9184__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__9184__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__9184__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__9184__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__9184__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__9184__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__9184__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__9184__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__9184__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__9184__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__9184__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__9184__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9184.cljs$core$IFn$_invoke$arity$1 = G__9184__1;
  G__9184.cljs$core$IFn$_invoke$arity$2 = G__9184__2;
  G__9184.cljs$core$IFn$_invoke$arity$3 = G__9184__3;
  G__9184.cljs$core$IFn$_invoke$arity$4 = G__9184__4;
  G__9184.cljs$core$IFn$_invoke$arity$5 = G__9184__5;
  G__9184.cljs$core$IFn$_invoke$arity$6 = G__9184__6;
  G__9184.cljs$core$IFn$_invoke$arity$7 = G__9184__7;
  G__9184.cljs$core$IFn$_invoke$arity$8 = G__9184__8;
  G__9184.cljs$core$IFn$_invoke$arity$9 = G__9184__9;
  G__9184.cljs$core$IFn$_invoke$arity$10 = G__9184__10;
  G__9184.cljs$core$IFn$_invoke$arity$11 = G__9184__11;
  G__9184.cljs$core$IFn$_invoke$arity$12 = G__9184__12;
  G__9184.cljs$core$IFn$_invoke$arity$13 = G__9184__13;
  G__9184.cljs$core$IFn$_invoke$arity$14 = G__9184__14;
  G__9184.cljs$core$IFn$_invoke$arity$15 = G__9184__15;
  G__9184.cljs$core$IFn$_invoke$arity$16 = G__9184__16;
  G__9184.cljs$core$IFn$_invoke$arity$17 = G__9184__17;
  G__9184.cljs$core$IFn$_invoke$arity$18 = G__9184__18;
  G__9184.cljs$core$IFn$_invoke$arity$19 = G__9184__19;
  G__9184.cljs$core$IFn$_invoke$arity$20 = G__9184__20;
  G__9184.cljs$core$IFn$_invoke$arity$21 = G__9184__21;
  G__9184.cljs$core$IFn$_invoke$arity$22 = G__9184__22;
  return G__9184;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args9183) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9183)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.prefer_table) : cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.cached_hierarchy) : cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.hierarchy) : cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4423__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_cache) : cljs.core.deref.call(null, self__.method_cache)).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var target_fn = temp__4423__auto__;
    return target_fn;
  } else {
    var temp__4423__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var target_fn = temp__4423__auto____$1;
      return target_fn;
    } else {
      return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table)).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = goog.string.hashCode(self__.uuid);
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__9185 = self__.uuid;
  var G__9186 = other.uuid;
  return goog.array.defaultCompare(G__9185, G__9186);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(15).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(14)).toString(16);
  return cljs.core.uuid([cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str("4"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), 
  cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex())].join(""));
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error(message);
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info() {
  var args9187 = [];
  var len__5067__auto___9190 = arguments.length;
  var i__5068__auto___9191 = 0;
  while (true) {
    if (i__5068__auto___9191 < len__5067__auto___9190) {
      args9187.push(arguments[i__5068__auto___9191]);
      var G__9192 = i__5068__auto___9191 + 1;
      i__5068__auto___9191 = G__9192;
      continue;
    } else {
    }
    break;
  }
  var G__9189 = args9187.length;
  switch(G__9189) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9187.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y))) {
      return -1;
    } else {
      if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "&", "&", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 
  -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this$__$1, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__9194 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__9194) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str("#"), cljs.core.str(self__.tag), cljs.core.str(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "symbol?", "symbol?", 1820680511, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))], 0)))].join(""));
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.js_reserved_arr = ["abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", 
"transient", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "methods", "null"];
cljs.core.js_reserved = null;
cljs.core.js_reserved_QMARK_ = function cljs$core$js_reserved_QMARK_(x) {
  if (cljs.core.js_reserved == null) {
    cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__9196_SHARP_, p2__9197_SHARP_) {
      goog.object.set(p1__9196_SHARP_, p2__9197_SHARP_, true);
      return p1__9196_SHARP_;
    }, {}, cljs.core.js_reserved_arr);
  } else {
  }
  return goog.object.containsKey(cljs.core.js_reserved, x);
};
cljs.core.demunge_pattern = function cljs$core$demunge_pattern() {
  if (cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)) {
  } else {
    cljs.core.DEMUNGE_PATTERN = function() {
      var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
        return b.length - a.length;
      }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
      var ks__$1 = ks;
      var ret = "";
      while (true) {
        if (cljs.core.seq(ks__$1)) {
          var G__9200 = cljs.core.next(ks__$1);
          var G__9201 = [cljs.core.str(function() {
            var G__9199 = ret;
            var G__9199__$1 = !(ret === "") ? [cljs.core.str(G__9199), cljs.core.str("|")].join("") : G__9199;
            return G__9199__$1;
          }()), cljs.core.str(cljs.core.first(ks__$1))].join("");
          ks__$1 = G__9200;
          ret = G__9201;
          continue;
        } else {
          return [cljs.core.str(ret), cljs.core.str("|\\$")].join("");
        }
        break;
      }
    }();
  }
  return cljs.core.DEMUNGE_PATTERN;
};
cljs.core.munge_str = function cljs$core$munge_str(name) {
  var sb = new goog.string.StringBuffer;
  var i_9202 = 0;
  while (true) {
    if (i_9202 < name.length) {
      var c_9203 = name.charAt(i_9202);
      var sub_9204 = goog.object.get(cljs.core.CHAR_MAP, c_9203);
      if (!(sub_9204 == null)) {
        sb.append(sub_9204);
      } else {
        sb.append(c_9203);
      }
      var G__9205 = i_9202 + 1;
      i_9202 = G__9205;
      continue;
    } else {
    }
    break;
  }
  return sb.toString();
};
cljs.core.munge = function cljs$core$munge(name) {
  var name_SINGLEQUOTE_ = cljs.core.munge_str([cljs.core.str(name)].join(""));
  var name_SINGLEQUOTE___$1 = name_SINGLEQUOTE_ === ".." ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [cljs.core.str(name_SINGLEQUOTE_), cljs.core.str("$")].join("") : name_SINGLEQUOTE_;
  if (name instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
  } else {
    return [cljs.core.str(name_SINGLEQUOTE___$1)].join("");
  }
};
cljs.core.demunge_str = function cljs$core$demunge_str(munged_name) {
  var r = new RegExp(cljs.core.demunge_pattern(), "g");
  var munged_name__$1 = cljs.core.truth_(goog.string.endsWith(munged_name, "$")) ? munged_name.substring(0, munged_name.length - 1) : null;
  var ret = "";
  var last_match_end = 0;
  while (true) {
    var temp__4423__auto__ = r.exec(munged_name__$1);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var match = temp__4423__auto__;
      var vec__9207 = match;
      var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9207, 0, null);
      var G__9208 = [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, r.lastIndex - x.length)), cljs.core.str(x === "$" ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, x))].join("");
      var G__9209 = r.lastIndex;
      ret = G__9208;
      last_match_end = G__9209;
      continue;
    } else {
      return [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, munged_name__$1.length))].join("");
    }
    break;
  }
};
cljs.core.demunge = function cljs$core$demunge(name) {
  return (name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str).call(null, function() {
    var name_SINGLEQUOTE_ = [cljs.core.str(name)].join("");
    if (name_SINGLEQUOTE_ === "_DOT__DOT_") {
      return "..";
    } else {
      return cljs.core.demunge_str([cljs.core.str(name)].join(""));
    }
  }());
};
cljs.core.ns_lookup = function cljs$core$ns_lookup(ns_obj, k) {
  return function() {
    return goog.object.get(ns_obj, k);
  };
};
cljs.core.Namespace = function(obj, name) {
  this.obj = obj;
  this.name = name;
  this.cljs$lang$protocol_mask$partition0$ = 6291456;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Namespace.prototype.findInternedVar = function(sym) {
  var self__ = this;
  var this$ = this;
  var k = cljs.core.munge([cljs.core.str(sym)].join(""));
  if (goog.object.containsKey(self__.obj, k)) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(self__.name)].join(""), [cljs.core.str(sym)].join(""));
    var var_meta = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), this$], null);
    return new cljs.core.Var(cljs.core.ns_lookup(self__.obj, k), var_sym, var_meta);
  } else {
    return null;
  }
};
cljs.core.Namespace.prototype.getName = function() {
  var self__ = this;
  var _ = this;
  return self__.name;
};
cljs.core.Namespace.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(self__.name)].join("");
};
cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Namespace) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name, other.name);
  } else {
    return false;
  }
};
cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash(self__.name);
};
cljs.core.Namespace.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "obj", "obj", -1672671807, null), new cljs.core.Symbol(null, "name", "name", -810760592, null)], null);
};
cljs.core.Namespace.cljs$lang$type = true;
cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__4607__auto__, writer__4608__auto__, opt__4609__auto__) {
  return cljs.core._write(writer__4608__auto__, "cljs.core/Namespace");
};
cljs.core.__GT_Namespace = function cljs$core$__GT_Namespace(obj, name) {
  return new cljs.core.Namespace(obj, name);
};
cljs.core.NS_CACHE = null;
cljs.core.find_ns_obj_STAR_ = function cljs$core$find_ns_obj_STAR_(ctxt, xs) {
  while (true) {
    if (ctxt == null) {
      return null;
    } else {
      if (xs == null) {
        return ctxt;
      } else {
        var G__9214 = function() {
          var G__9212 = ctxt;
          var G__9213 = cljs.core.first(xs);
          return goog.object.get(G__9212, G__9213);
        }();
        var G__9215 = cljs.core.next(xs);
        ctxt = G__9214;
        xs = G__9215;
        continue;
      }
    }
    break;
  }
};
cljs.core.find_ns_obj = function cljs$core$find_ns_obj(ns) {
  var munged_ns = cljs.core.munge([cljs.core.str(ns)].join(""));
  var segs = munged_ns.split(".");
  if (COMPILED) {
    return eval(munged_ns);
  } else {
    var G__9217 = cljs.core._STAR_target_STAR_;
    switch(G__9217) {
      case "nodejs":
        return cljs.core.find_ns_obj_STAR_(global, segs);
        break;
      case "default":
        return cljs.core.find_ns_obj_STAR_(window, segs);
        break;
      default:
        throw new Error([cljs.core.str("find-ns-obj not supported for target "), cljs.core.str(cljs.core._STAR_target_STAR_)].join(""));;
    }
  }
};
cljs.core.ns_interns_STAR_ = function cljs$core$ns_interns_STAR_(sym) {
  var ns_obj = cljs.core.find_ns_obj(sym);
  var ns = new cljs.core.Namespace(ns_obj, sym);
  var step = function(ns_obj, ns) {
    return function cljs$core$ns_interns_STAR__$_step(ret, k) {
      var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym, new cljs.core.Var(function(var_sym, ns_obj, ns) {
        return function() {
          return goog.object.get(ns_obj, k);
        };
      }(var_sym, ns_obj, ns), cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(sym)].join(""), [cljs.core.str(var_sym)].join("")), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns], null)));
    };
  }(ns_obj, ns);
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj));
};
cljs.core.create_ns = function cljs$core$create_ns() {
  var args9219 = [];
  var len__5067__auto___9222 = arguments.length;
  var i__5068__auto___9223 = 0;
  while (true) {
    if (i__5068__auto___9223 < len__5067__auto___9222) {
      args9219.push(arguments[i__5068__auto___9223]);
      var G__9224 = i__5068__auto___9223 + 1;
      i__5068__auto___9223 = G__9224;
      continue;
    } else {
    }
    break;
  }
  var G__9221 = args9219.length;
  switch(G__9221) {
    case 1:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9219.length)].join(""));;
  }
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
  return new cljs.core.Namespace(ns_obj, sym);
};
cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
cljs.core.find_ns = function cljs$core$find_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__9227 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__9227) : cljs.core.atom.call(null, G__9227);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, new_ns);
      return new_ns;
    }
  }
};
cljs.core.find_macros_ns = function cljs$core$find_macros_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__9229 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__9229) : cljs.core.atom.call(null, G__9229);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_str = [cljs.core.str(ns)].join("");
    var ns__$1 = !goog.string.contains(ns_str, "$macros") ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(ns_str), cljs.core.str("$macros")].join("")) : ns;
    var ns_obj = cljs.core.find_ns_obj(ns__$1);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns__$1, new_ns);
      return new_ns;
    }
  }
};
cljs.core.ns_name = function cljs$core$ns_name(ns_obj) {
  return ns_obj.name;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw [cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join() {
  var args7493 = [];
  var len__5099__auto___7496 = arguments.length;
  var i__5100__auto___7497 = 0;
  while (true) {
    if (i__5100__auto___7497 < len__5099__auto___7496) {
      args7493.push(arguments[i__5100__auto___7497]);
      var G__7498 = i__5100__auto___7497 + 1;
      i__5100__auto___7497 = G__7498;
      continue;
    } else {
    }
    break;
  }
  var G__7495 = args7493.length;
  switch(G__7495) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7493.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__7500 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__7501 = cljs.core.next.call(null, coll__$1);
      sb = G__7500;
      coll__$1 = G__7501;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__7502 = sb;
      var G__7503 = coll__$2;
      sb = G__7502;
      coll__$1 = G__7503;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if ("" === cljs.core.peek.call(null, v__$1)) {
      var G__7504 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__7504;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (0 === limit) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__7508 = cljs.core._EQ__EQ_;
    var expr__7509 = limit;
    if (pred__7508.call(null, 1, expr__7509)) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (pred__7508.call(null, 2, expr__7509)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split() {
  var args7511 = [];
  var len__5099__auto___7514 = arguments.length;
  var i__5100__auto___7515 = 0;
  while (true) {
    if (i__5100__auto___7515 < len__5099__auto___7514) {
      args7511.push(arguments[i__5100__auto___7515]);
      var G__7516 = i__5100__auto___7515 + 1;
      i__5100__auto___7515 = G__7516;
      continue;
    } else {
    }
    break;
  }
  var G__7513 = args7511.length;
  switch(G__7513) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7511.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, "/(?:)/" === [cljs.core.str(re)].join("") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (1 === limit__$1) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var m = cljs.core.re_find.call(null, re, s__$1);
        if (!(m == null)) {
          var index = s__$1.indexOf(m);
          var G__7518 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__7519 = limit__$1 - 1;
          var G__7520 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__7518;
          limit__$1 = G__7519;
          parts = G__7520;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if ("\n" === ch || "\r" === ch) {
        var G__7521 = index - 1;
        index = G__7521;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (length === index) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var replacement = cljs.core.get.call(null, cmap, ch);
      if (!(replacement == null)) {
        buffer.append([cljs.core.str(replacement)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__7522 = index + 1;
      index = G__7522;
      continue;
    }
    break;
  }
};
goog.provide("cljs.tools.reader.impl.utils");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("goog.string");
cljs.tools.reader.impl.utils.char$ = function cljs$tools$reader$impl$utils$char(x) {
  if (x == null) {
    return null;
  } else {
    return cljs.core.char$.call(null, x);
  }
};
cljs.tools.reader.impl.utils.ex_info_QMARK_ = function cljs$tools$reader$impl$utils$ex_info_QMARK_(ex) {
  return ex instanceof cljs.core.ExceptionInfo;
};
cljs.tools.reader.impl.utils.ReaderConditional = function(splicing_QMARK_, form, __meta, __extmap, __hash) {
  this.splicing_QMARK_ = splicing_QMARK_;
  this.form = form;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4655__auto__, k__4656__auto__) {
  var self__ = this;
  var this__4655__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4655__auto____$1, k__4656__auto__, null);
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4657__auto__, k7644, else__4658__auto__) {
  var self__ = this;
  var this__4657__auto____$1 = this;
  var G__7646 = k7644 instanceof cljs.core.Keyword ? k7644.fqn : null;
  switch(G__7646) {
    case "splicing?":
      return self__.splicing_QMARK_;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k7644, else__4658__auto__);
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4669__auto__, writer__4670__auto__, opts__4671__auto__) {
  var self__ = this;
  var this__4669__auto____$1 = this;
  var pr_pair__4672__auto__ = function(this__4669__auto____$1) {
    return function(keyval__4673__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4670__auto__, cljs.core.pr_writer, "", " ", "", opts__4671__auto__, keyval__4673__auto__);
    };
  }(this__4669__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4670__auto__, pr_pair__4672__auto__, "#cljs.tools.reader.impl.utils.ReaderConditional{", ", ", "}", opts__4671__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), self__.splicing_QMARK_], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", -1624062471), self__.form], null)], null), self__.__extmap));
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4653__auto__) {
  var self__ = this;
  var this__4653__auto____$1 = this;
  return self__.__meta;
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4649__auto__) {
  var self__ = this;
  var this__4649__auto____$1 = this;
  return new cljs.tools.reader.impl.utils.ReaderConditional(self__.splicing_QMARK_, self__.form, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4659__auto__) {
  var self__ = this;
  var this__4659__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4650__auto__) {
  var self__ = this;
  var this__4650__auto____$1 = this;
  var h__4476__auto__ = self__.__hash;
  if (!(h__4476__auto__ == null)) {
    return h__4476__auto__;
  } else {
    var h__4476__auto____$1 = cljs.core.hash_imap.call(null, this__4650__auto____$1);
    self__.__hash = h__4476__auto____$1;
    return h__4476__auto____$1;
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4651__auto__, other__4652__auto__) {
  var self__ = this;
  var this__4651__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4048__auto__ = other__4652__auto__;
    if (cljs.core.truth_(and__4048__auto__)) {
      var and__4048__auto____$1 = this__4651__auto____$1.constructor === other__4652__auto__.constructor;
      if (and__4048__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4651__auto____$1, other__4652__auto__);
      } else {
        return and__4048__auto____$1;
      }
    } else {
      return and__4048__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4664__auto__, k__4665__auto__) {
  var self__ = this;
  var this__4664__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), null, new cljs.core.Keyword(null, "form", "form", -1624062471), null], null), null), k__4665__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4664__auto____$1), self__.__meta), k__4665__auto__);
  } else {
    return new cljs.tools.reader.impl.utils.ReaderConditional(self__.splicing_QMARK_, self__.form, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4665__auto__)), null);
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4662__auto__, k__4663__auto__, G__7643) {
  var self__ = this;
  var this__4662__auto____$1 = this;
  var pred__7647 = cljs.core.keyword_identical_QMARK_;
  var expr__7648 = k__4663__auto__;
  if (cljs.core.truth_(pred__7647.call(null, new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), expr__7648))) {
    return new cljs.tools.reader.impl.utils.ReaderConditional(G__7643, self__.form, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__7647.call(null, new cljs.core.Keyword(null, "form", "form", -1624062471), expr__7648))) {
      return new cljs.tools.reader.impl.utils.ReaderConditional(self__.splicing_QMARK_, G__7643, self__.__meta, self__.__extmap, null);
    } else {
      return new cljs.tools.reader.impl.utils.ReaderConditional(self__.splicing_QMARK_, self__.form, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4663__auto__, G__7643), null);
    }
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4667__auto__) {
  var self__ = this;
  var this__4667__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), self__.splicing_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", -1624062471), self__.form], null)], null), self__.__extmap));
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4654__auto__, G__7643) {
  var self__ = this;
  var this__4654__auto____$1 = this;
  return new cljs.tools.reader.impl.utils.ReaderConditional(self__.splicing_QMARK_, self__.form, G__7643, self__.__extmap, self__.__hash);
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4660__auto__, entry__4661__auto__) {
  var self__ = this;
  var this__4660__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4661__auto__)) {
    return cljs.core._assoc.call(null, this__4660__auto____$1, cljs.core._nth.call(null, entry__4661__auto__, 0), cljs.core._nth.call(null, entry__4661__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4660__auto____$1, entry__4661__auto__);
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "splicing?", "splicing?", 1211935161, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.tools.reader.impl.utils.ReaderConditional.cljs$lang$type = true;
cljs.tools.reader.impl.utils.ReaderConditional.cljs$lang$ctorPrSeq = function(this__4689__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.tools.reader.impl.utils/ReaderConditional");
};
cljs.tools.reader.impl.utils.ReaderConditional.cljs$lang$ctorPrWriter = function(this__4689__auto__, writer__4690__auto__) {
  return cljs.core._write.call(null, writer__4690__auto__, "cljs.tools.reader.impl.utils/ReaderConditional");
};
cljs.tools.reader.impl.utils.__GT_ReaderConditional = function cljs$tools$reader$impl$utils$__GT_ReaderConditional(splicing_QMARK_, form) {
  return new cljs.tools.reader.impl.utils.ReaderConditional(splicing_QMARK_, form, null, null, null);
};
cljs.tools.reader.impl.utils.map__GT_ReaderConditional = function cljs$tools$reader$impl$utils$map__GT_ReaderConditional(G__7645) {
  return new cljs.tools.reader.impl.utils.ReaderConditional((new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366)).cljs$core$IFn$_invoke$arity$1(G__7645), (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(G__7645), null, cljs.core.dissoc.call(null, G__7645, new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), new cljs.core.Keyword(null, "form", "form", -1624062471)), null);
};
cljs.tools.reader.impl.utils.reader_conditional_QMARK_ = function cljs$tools$reader$impl$utils$reader_conditional_QMARK_(value) {
  return value instanceof cljs.tools.reader.impl.utils.ReaderConditional;
};
cljs.tools.reader.impl.utils.reader_conditional = function cljs$tools$reader$impl$utils$reader_conditional(form, splicing_QMARK_) {
  return new cljs.tools.reader.impl.utils.ReaderConditional(splicing_QMARK_, form, null, null, null);
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#?"), cljs.core.str(cljs.core.truth_((new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366)).cljs$core$IFn$_invoke$arity$1(coll__$1)) ? "@" : null)].join(""));
  return cljs.core.pr_writer.call(null, (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(coll__$1), writer, opts);
};
cljs.tools.reader.impl.utils.ws_rx = /[\s]/;
cljs.tools.reader.impl.utils.whitespace_QMARK_ = function cljs$tools$reader$impl$utils$whitespace_QMARK_(ch) {
  if (ch == null) {
    return null;
  } else {
    if (ch === ",") {
      return true;
    } else {
      return cljs.tools.reader.impl.utils.ws_rx.test(ch);
    }
  }
};
cljs.tools.reader.impl.utils.numeric_QMARK_ = function cljs$tools$reader$impl$utils$numeric_QMARK_(ch) {
  if (ch == null) {
    return null;
  } else {
    return goog.string.isNumeric(ch);
  }
};
cljs.tools.reader.impl.utils.newline_QMARK_ = function cljs$tools$reader$impl$utils$newline_QMARK_(c) {
  return "\n" === c || "\n" === c || c == null;
};
cljs.tools.reader.impl.utils.desugar_meta = function cljs$tools$reader$impl$utils$desugar_meta(f) {
  if (f instanceof cljs.core.Keyword) {
    return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
  } else {
    if (f instanceof cljs.core.Symbol) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (typeof f === "string") {
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
      } else {
        return f;
      }
    }
  }
};
cljs.tools.reader.impl.utils.last_id = cljs.core.atom.call(null, 0);
cljs.tools.reader.impl.utils.next_id = function cljs$tools$reader$impl$utils$next_id() {
  return cljs.core.swap_BANG_.call(null, cljs.tools.reader.impl.utils.last_id, cljs.core.inc);
};
var patterns_7659 = cljs.core.PersistentHashMap.fromArrays(["]", "'", "=", '"', "!", "*", "%", "|", "~", "/", "-", "?", "&", ":", "<", "{", "}", "[", "#", "^", "\\", "+", "@", ">"], ["_RBRACK_", "_SINGLEQUOTE_", "_EQ_", "_DOUBLEQUOTE_", "_BANG_", "_STAR_", "_PERCENT_", "_BAR_", "_TILDE_", "_SLASH_", "_", "_QMARK_", "_AMPERSAND_", "_COLON_", "_LT_", "_LBRACE_", "_RBRACE_", "_LBRACK_", "_SHARP_", "_CARET_", "_BSLASH_", "_PLUS_", "_CIRCA_", "_GT_"]);
cljs.tools.reader.impl.utils.munge = function(patterns_7659) {
  return function cljs$tools$reader$impl$utils$munge(s) {
    return (s instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str).call(null, function() {
      var G__7656 = [cljs.core.str(s)].join("");
      var vec__7657 = G__7656;
      var c = cljs.core.nth.call(null, vec__7657, 0, null);
      var s__$1 = cljs.core.nthnext.call(null, vec__7657, 1);
      var ret = "";
      var G__7656__$1 = G__7656;
      var ret__$1 = ret;
      while (true) {
        var vec__7658 = G__7656__$1;
        var c__$1 = cljs.core.nth.call(null, vec__7658, 0, null);
        var s__$2 = cljs.core.nthnext.call(null, vec__7658, 1);
        var ret__$2 = ret__$1;
        if (cljs.core.truth_(c__$1)) {
          var G__7660 = s__$2;
          var G__7661 = [cljs.core.str(ret__$2), cljs.core.str(patterns_7659.call(null, c__$1, c__$1))].join("");
          G__7656__$1 = G__7660;
          ret__$1 = G__7661;
          continue;
        } else {
          return ret__$2;
        }
        break;
      }
    }());
  };
}(patterns_7659);
goog.provide("cljs.tools.reader.reader_types");
goog.require("cljs.core");
goog.require("cljs.tools.reader.impl.utils");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.tools.reader.reader_types.Reader = {};
cljs.tools.reader.reader_types.read_char = function cljs$tools$reader$reader_types$read_char(reader) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1 == null)) {
    return reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(reader);
  } else {
    var x__4696__auto__ = reader == null ? null : reader;
    var m__4697__auto__ = cljs.tools.reader.reader_types.read_char[goog.typeOf(x__4696__auto__)];
    if (!(m__4697__auto__ == null)) {
      return m__4697__auto__.call(null, reader);
    } else {
      var m__4697__auto____$1 = cljs.tools.reader.reader_types.read_char["_"];
      if (!(m__4697__auto____$1 == null)) {
        return m__4697__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "Reader.read-char", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.peek_char = function cljs$tools$reader$reader_types$peek_char(reader) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 == null)) {
    return reader.cljs$tools$reader$reader_types$Reader$peek_char$arity$1(reader);
  } else {
    var x__4696__auto__ = reader == null ? null : reader;
    var m__4697__auto__ = cljs.tools.reader.reader_types.peek_char[goog.typeOf(x__4696__auto__)];
    if (!(m__4697__auto__ == null)) {
      return m__4697__auto__.call(null, reader);
    } else {
      var m__4697__auto____$1 = cljs.tools.reader.reader_types.peek_char["_"];
      if (!(m__4697__auto____$1 == null)) {
        return m__4697__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "Reader.peek-char", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.IPushbackReader = {};
cljs.tools.reader.reader_types.unread = function cljs$tools$reader$reader_types$unread(reader, ch) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2 == null)) {
    return reader.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4696__auto__ = reader == null ? null : reader;
    var m__4697__auto__ = cljs.tools.reader.reader_types.unread[goog.typeOf(x__4696__auto__)];
    if (!(m__4697__auto__ == null)) {
      return m__4697__auto__.call(null, reader, ch);
    } else {
      var m__4697__auto____$1 = cljs.tools.reader.reader_types.unread["_"];
      if (!(m__4697__auto____$1 == null)) {
        return m__4697__auto____$1.call(null, reader, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "IPushbackReader.unread", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.IndexingReader = {};
cljs.tools.reader.reader_types.get_line_number = function cljs$tools$reader$reader_types$get_line_number(reader) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1 == null)) {
    return reader.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1(reader);
  } else {
    var x__4696__auto__ = reader == null ? null : reader;
    var m__4697__auto__ = cljs.tools.reader.reader_types.get_line_number[goog.typeOf(x__4696__auto__)];
    if (!(m__4697__auto__ == null)) {
      return m__4697__auto__.call(null, reader);
    } else {
      var m__4697__auto____$1 = cljs.tools.reader.reader_types.get_line_number["_"];
      if (!(m__4697__auto____$1 == null)) {
        return m__4697__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "IndexingReader.get-line-number", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.get_column_number = function cljs$tools$reader$reader_types$get_column_number(reader) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1 == null)) {
    return reader.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1(reader);
  } else {
    var x__4696__auto__ = reader == null ? null : reader;
    var m__4697__auto__ = cljs.tools.reader.reader_types.get_column_number[goog.typeOf(x__4696__auto__)];
    if (!(m__4697__auto__ == null)) {
      return m__4697__auto__.call(null, reader);
    } else {
      var m__4697__auto____$1 = cljs.tools.reader.reader_types.get_column_number["_"];
      if (!(m__4697__auto____$1 == null)) {
        return m__4697__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "IndexingReader.get-column-number", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.get_file_name = function cljs$tools$reader$reader_types$get_file_name(reader) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$IndexingReader$get_file_name$arity$1 == null)) {
    return reader.cljs$tools$reader$reader_types$IndexingReader$get_file_name$arity$1(reader);
  } else {
    var x__4696__auto__ = reader == null ? null : reader;
    var m__4697__auto__ = cljs.tools.reader.reader_types.get_file_name[goog.typeOf(x__4696__auto__)];
    if (!(m__4697__auto__ == null)) {
      return m__4697__auto__.call(null, reader);
    } else {
      var m__4697__auto____$1 = cljs.tools.reader.reader_types.get_file_name["_"];
      if (!(m__4697__auto____$1 == null)) {
        return m__4697__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "IndexingReader.get-file-name", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.StringReader = function(s, s_len, s_pos) {
  this.s = s;
  this.s_len = s_len;
  this.s_pos = s_pos;
};
cljs.tools.reader.reader_types.StringReader.prototype.cljs$tools$reader$reader_types$Reader$ = true;
cljs.tools.reader.reader_types.StringReader.prototype.cljs$tools$reader$reader_types$Reader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.s_len > self__.s_pos) {
    var r = self__.s.charAt(self__.s_pos);
    self__.s_pos = self__.s_pos + 1;
    return r;
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.StringReader.prototype.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.s_len > self__.s_pos) {
    return self__.s.charAt(self__.s_pos);
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.StringReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "s-len", "s-len", 1869978331, null), cljs.core.with_meta(new cljs.core.Symbol(null, "s-pos", "s-pos", -540562492, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.tools.reader.reader_types.StringReader.cljs$lang$type = true;
cljs.tools.reader.reader_types.StringReader.cljs$lang$ctorStr = "cljs.tools.reader.reader-types/StringReader";
cljs.tools.reader.reader_types.StringReader.cljs$lang$ctorPrWriter = function(this__4639__auto__, writer__4640__auto__, opt__4641__auto__) {
  return cljs.core._write.call(null, writer__4640__auto__, "cljs.tools.reader.reader-types/StringReader");
};
cljs.tools.reader.reader_types.__GT_StringReader = function cljs$tools$reader$reader_types$__GT_StringReader(s, s_len, s_pos) {
  return new cljs.tools.reader.reader_types.StringReader(s, s_len, s_pos);
};
cljs.tools.reader.reader_types.NodeReadableReader = function(readable, buf) {
  this.readable = readable;
  this.buf = buf;
};
cljs.tools.reader.reader_types.NodeReadableReader.prototype.cljs$tools$reader$reader_types$Reader$ = true;
cljs.tools.reader.reader_types.NodeReadableReader.prototype.cljs$tools$reader$reader_types$Reader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (cljs.core.truth_(self__.buf)) {
    var c = self__.buf[0];
    self__.buf = null;
    return cljs.tools.reader.impl.utils.char$.call(null, c);
  } else {
    var c = [cljs.core.str(self__.readable.read(1))].join("");
    if (cljs.core.truth_(c)) {
      return cljs.tools.reader.impl.utils.char$.call(null, c);
    } else {
      return null;
    }
  }
};
cljs.tools.reader.reader_types.NodeReadableReader.prototype.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (cljs.core.truth_(self__.buf)) {
  } else {
    self__.buf = [cljs.core.str(self__.readable.read(1))].join("");
  }
  if (cljs.core.truth_(self__.buf)) {
    return cljs.tools.reader.impl.utils.char$.call(null, self__.buf[0]);
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.NodeReadableReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "readable", "readable", 2113054478, null), cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.tools.reader.reader_types.NodeReadableReader.cljs$lang$type = true;
cljs.tools.reader.reader_types.NodeReadableReader.cljs$lang$ctorStr = "cljs.tools.reader.reader-types/NodeReadableReader";
cljs.tools.reader.reader_types.NodeReadableReader.cljs$lang$ctorPrWriter = function(this__4639__auto__, writer__4640__auto__, opt__4641__auto__) {
  return cljs.core._write.call(null, writer__4640__auto__, "cljs.tools.reader.reader-types/NodeReadableReader");
};
cljs.tools.reader.reader_types.__GT_NodeReadableReader = function cljs$tools$reader$reader_types$__GT_NodeReadableReader(readable, buf) {
  return new cljs.tools.reader.reader_types.NodeReadableReader(readable, buf);
};
cljs.tools.reader.reader_types.PushbackReader = function(rdr, buf, buf_len, buf_pos) {
  this.rdr = rdr;
  this.buf = buf;
  this.buf_len = buf_len;
  this.buf_pos = buf_pos;
};
cljs.tools.reader.reader_types.PushbackReader.prototype.cljs$tools$reader$reader_types$Reader$ = true;
cljs.tools.reader.reader_types.PushbackReader.prototype.cljs$tools$reader$reader_types$Reader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  var c = self__.buf_pos < self__.buf_len ? self__.buf[self__.buf_pos] : cljs.tools.reader.reader_types.read_char.call(null, self__.rdr);
  if (self__.buf_pos < self__.buf_len) {
    self__.buf_pos = self__.buf_pos + 1;
  } else {
  }
  return cljs.tools.reader.impl.utils.char$.call(null, c);
};
cljs.tools.reader.reader_types.PushbackReader.prototype.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  var c = self__.buf_pos < self__.buf_len ? self__.buf[self__.buf_pos] : cljs.tools.reader.reader_types.peek_char.call(null, self__.rdr);
  return cljs.tools.reader.impl.utils.char$.call(null, c);
};
cljs.tools.reader.reader_types.PushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$ = true;
cljs.tools.reader.reader_types.PushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  if (cljs.core.truth_(ch)) {
    if (self__.buf_pos === 0) {
      throw new Error("Pushback buffer is full");
    } else {
    }
    self__.buf_pos = self__.buf_pos - 1;
    return self__.buf[self__.buf_pos] = ch;
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.PushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "rdr", "rdr", 190007785, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "buf-len", "buf-len", 404510846, null), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "buf-pos", "buf-pos", -807229033, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.tools.reader.reader_types.PushbackReader.cljs$lang$type = true;
cljs.tools.reader.reader_types.PushbackReader.cljs$lang$ctorStr = "cljs.tools.reader.reader-types/PushbackReader";
cljs.tools.reader.reader_types.PushbackReader.cljs$lang$ctorPrWriter = function(this__4639__auto__, writer__4640__auto__, opt__4641__auto__) {
  return cljs.core._write.call(null, writer__4640__auto__, "cljs.tools.reader.reader-types/PushbackReader");
};
cljs.tools.reader.reader_types.__GT_PushbackReader = function cljs$tools$reader$reader_types$__GT_PushbackReader(rdr, buf, buf_len, buf_pos) {
  return new cljs.tools.reader.reader_types.PushbackReader(rdr, buf, buf_len, buf_pos);
};
cljs.tools.reader.reader_types.normalize_newline = function cljs$tools$reader$reader_types$normalize_newline(rdr, ch) {
  if ("\r" === ch) {
    var c = cljs.tools.reader.reader_types.peek_char.call(null, rdr);
    if ("\f" === c || "\n" === c) {
      cljs.tools.reader.reader_types.read_char.call(null, rdr);
    } else {
    }
    return "\n";
  } else {
    return ch;
  }
};
cljs.tools.reader.reader_types.IndexingPushbackReader = function(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name) {
  this.rdr = rdr;
  this.line = line;
  this.column = column;
  this.line_start_QMARK_ = line_start_QMARK_;
  this.prev = prev;
  this.prev_column = prev_column;
  this.file_name = file_name;
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$ = true;
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  var temp__4425__auto__ = cljs.tools.reader.reader_types.read_char.call(null, self__.rdr);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var ch = temp__4425__auto__;
    var ch__$1 = cljs.tools.reader.reader_types.normalize_newline.call(null, self__.rdr, ch);
    self__.prev = self__.line_start_QMARK_;
    self__.line_start_QMARK_ = cljs.tools.reader.impl.utils.newline_QMARK_.call(null, ch__$1);
    if (cljs.core.truth_(self__.line_start_QMARK_)) {
      self__.prev_column = self__.column;
      self__.column = 0;
      self__.line = self__.line + 1;
    } else {
    }
    self__.column = self__.column + 1;
    return ch__$1;
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return cljs.tools.reader.reader_types.peek_char.call(null, self__.rdr);
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$ = true;
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  if (cljs.core.truth_(self__.line_start_QMARK_)) {
    self__.line = self__.line - 1;
    self__.column = self__.prev_column;
  } else {
    self__.column = self__.column - 1;
  }
  self__.line_start_QMARK_ = self__.prev;
  return cljs.tools.reader.reader_types.unread.call(null, self__.rdr, ch);
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$ = true;
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.line | 0;
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.column | 0;
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_file_name$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.file_name;
};
cljs.tools.reader.reader_types.IndexingPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "rdr", "rdr", 190007785, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "line", "line", 1852876762, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "column", "column", -576213674, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "line-start?", "line-start?", 1357012474, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "prev", "prev", 43462301, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "prev-column", "prev-column", 324083974, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "file-name", "file-name", -13685732, null)], null);
};
cljs.tools.reader.reader_types.IndexingPushbackReader.cljs$lang$type = true;
cljs.tools.reader.reader_types.IndexingPushbackReader.cljs$lang$ctorStr = "cljs.tools.reader.reader-types/IndexingPushbackReader";
cljs.tools.reader.reader_types.IndexingPushbackReader.cljs$lang$ctorPrWriter = function(this__4639__auto__, writer__4640__auto__, opt__4641__auto__) {
  return cljs.core._write.call(null, writer__4640__auto__, "cljs.tools.reader.reader-types/IndexingPushbackReader");
};
cljs.tools.reader.reader_types.__GT_IndexingPushbackReader = function cljs$tools$reader$reader_types$__GT_IndexingPushbackReader(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name) {
  return new cljs.tools.reader.reader_types.IndexingPushbackReader(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name);
};
cljs.tools.reader.reader_types.merge_meta = function cljs$tools$reader$reader_types$merge_meta(obj, m) {
  var orig_meta = cljs.core.meta.call(null, obj);
  return cljs.core.with_meta.call(null, obj, cljs.core.merge.call(null, m, cljs.core.dissoc.call(null, orig_meta, new cljs.core.Keyword(null, "source", "source", -433931539))));
};
cljs.tools.reader.reader_types.peek_source_log = function cljs$tools$reader$reader_types$peek_source_log(frames) {
  return cljs.core.subs.call(null, [cljs.core.str((new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(frames))].join(""), cljs.core.first.call(null, (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(frames)));
};
cljs.tools.reader.reader_types.log_source_char = function cljs$tools$reader$reader_types$log_source_char(frames, char$) {
  var temp__4425__auto__ = (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(frames);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var buffer = temp__4425__auto__;
    return buffer.append(char$);
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.drop_last_logged_char = function cljs$tools$reader$reader_types$drop_last_logged_char(frames) {
  var temp__4425__auto__ = (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(frames);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var buffer = temp__4425__auto__;
    return buffer.set(cljs.core.subs.call(null, [cljs.core.str(buffer)].join(""), 0, buffer.getLength() - 1));
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader = function(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name, frames) {
  this.rdr = rdr;
  this.line = line;
  this.column = column;
  this.line_start_QMARK_ = line_start_QMARK_;
  this.prev = prev;
  this.prev_column = prev_column;
  this.file_name = file_name;
  this.frames = frames;
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$ = true;
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  var temp__4425__auto__ = cljs.tools.reader.reader_types.read_char.call(null, self__.rdr);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var ch = temp__4425__auto__;
    var ch__$1 = cljs.tools.reader.reader_types.normalize_newline.call(null, self__.rdr, ch);
    self__.prev = self__.line_start_QMARK_;
    self__.line_start_QMARK_ = cljs.tools.reader.impl.utils.newline_QMARK_.call(null, ch__$1);
    if (cljs.core.truth_(self__.line_start_QMARK_)) {
      self__.prev_column = self__.column;
      self__.column = 0;
      self__.line = self__.line + 1;
    } else {
    }
    self__.column = self__.column + 1;
    cljs.tools.reader.reader_types.log_source_char.call(null, cljs.core.deref.call(null, self__.frames), ch__$1);
    return ch__$1;
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return cljs.tools.reader.reader_types.peek_char.call(null, self__.rdr);
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$ = true;
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  if (cljs.core.truth_(self__.line_start_QMARK_)) {
    self__.line = self__.line - 1;
    self__.column = self__.prev_column;
  } else {
    self__.column = self__.column - 1;
  }
  self__.line_start_QMARK_ = self__.prev;
  if (cljs.core.truth_(ch)) {
    cljs.tools.reader.reader_types.drop_last_logged_char.call(null, cljs.core.deref.call(null, self__.frames));
  } else {
  }
  return cljs.tools.reader.reader_types.unread.call(null, self__.rdr, ch);
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$ = true;
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.line | 0;
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.column | 0;
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_file_name$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.file_name;
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "rdr", "rdr", 190007785, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "line", "line", 1852876762, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "column", "column", -576213674, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "line-start?", "line-start?", 1357012474, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "prev", "prev", 43462301, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "prev-column", "prev-column", 324083974, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "file-name", "file-name", -13685732, null), new cljs.core.Symbol(null, "frames", "frames", -888748272, null)], 
  null);
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.cljs$lang$type = true;
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.cljs$lang$ctorStr = "cljs.tools.reader.reader-types/SourceLoggingPushbackReader";
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.cljs$lang$ctorPrWriter = function(this__4639__auto__, writer__4640__auto__, opt__4641__auto__) {
  return cljs.core._write.call(null, writer__4640__auto__, "cljs.tools.reader.reader-types/SourceLoggingPushbackReader");
};
cljs.tools.reader.reader_types.__GT_SourceLoggingPushbackReader = function cljs$tools$reader$reader_types$__GT_SourceLoggingPushbackReader(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name, frames) {
  return new cljs.tools.reader.reader_types.SourceLoggingPushbackReader(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name, frames);
};
cljs.tools.reader.reader_types.indexing_reader_QMARK_ = function cljs$tools$reader$reader_types$indexing_reader_QMARK_(rdr) {
  if (!(rdr == null)) {
    if (false || rdr.cljs$tools$reader$reader_types$IndexingReader$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.tools.reader.reader_types.string_reader = function cljs$tools$reader$reader_types$string_reader(s) {
  return new cljs.tools.reader.reader_types.StringReader(s, cljs.core.count.call(null, s), 0);
};
cljs.tools.reader.reader_types.string_push_back_reader = function cljs$tools$reader$reader_types$string_push_back_reader() {
  var args7611 = [];
  var len__5099__auto___7614 = arguments.length;
  var i__5100__auto___7615 = 0;
  while (true) {
    if (i__5100__auto___7615 < len__5099__auto___7614) {
      args7611.push(arguments[i__5100__auto___7615]);
      var G__7616 = i__5100__auto___7615 + 1;
      i__5100__auto___7615 = G__7616;
      continue;
    } else {
    }
    break;
  }
  var G__7613 = args7611.length;
  switch(G__7613) {
    case 1:
      return cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7611.length)].join(""));;
  }
};
cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.tools.reader.reader_types.string_push_back_reader.call(null, s, 1);
};
cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$2 = function(s, buf_len) {
  return new cljs.tools.reader.reader_types.PushbackReader(cljs.tools.reader.reader_types.string_reader.call(null, s), cljs.core.object_array.call(null, buf_len), buf_len, buf_len);
};
cljs.tools.reader.reader_types.string_push_back_reader.cljs$lang$maxFixedArity = 2;
cljs.tools.reader.reader_types.node_readable_push_back_reader = function cljs$tools$reader$reader_types$node_readable_push_back_reader(readable) {
  return new cljs.tools.reader.reader_types.PushbackReader(new cljs.tools.reader.reader_types.NodeReadableReader(readable, null), cljs.core.object_array.call(null, 1), 1, 1);
};
cljs.tools.reader.reader_types.indexing_push_back_reader = function cljs$tools$reader$reader_types$indexing_push_back_reader() {
  var args7618 = [];
  var len__5099__auto___7621 = arguments.length;
  var i__5100__auto___7622 = 0;
  while (true) {
    if (i__5100__auto___7622 < len__5099__auto___7621) {
      args7618.push(arguments[i__5100__auto___7622]);
      var G__7623 = i__5100__auto___7622 + 1;
      i__5100__auto___7622 = G__7623;
      continue;
    } else {
    }
    break;
  }
  var G__7620 = args7618.length;
  switch(G__7620) {
    case 1:
      return cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7618.length)].join(""));;
  }
};
cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$1 = function(s_or_rdr) {
  return cljs.tools.reader.reader_types.indexing_push_back_reader.call(null, s_or_rdr, 1);
};
cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$2 = function(s_or_rdr, buf_len) {
  return cljs.tools.reader.reader_types.indexing_push_back_reader.call(null, s_or_rdr, buf_len, null);
};
cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3 = function(s_or_rdr, buf_len, file_name) {
  return new cljs.tools.reader.reader_types.IndexingPushbackReader(typeof s_or_rdr === "string" ? cljs.tools.reader.reader_types.string_push_back_reader.call(null, s_or_rdr, buf_len) : s_or_rdr, 1, 1, true, null, 0, file_name);
};
cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$lang$maxFixedArity = 3;
cljs.tools.reader.reader_types.source_logging_push_back_reader = function cljs$tools$reader$reader_types$source_logging_push_back_reader() {
  var args7625 = [];
  var len__5099__auto___7628 = arguments.length;
  var i__5100__auto___7629 = 0;
  while (true) {
    if (i__5100__auto___7629 < len__5099__auto___7628) {
      args7625.push(arguments[i__5100__auto___7629]);
      var G__7630 = i__5100__auto___7629 + 1;
      i__5100__auto___7629 = G__7630;
      continue;
    } else {
    }
    break;
  }
  var G__7627 = args7625.length;
  switch(G__7627) {
    case 1:
      return cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7625.length)].join(""));;
  }
};
cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$1 = function(s_or_rdr) {
  return cljs.tools.reader.reader_types.source_logging_push_back_reader.call(null, s_or_rdr, 1);
};
cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$2 = function(s_or_rdr, buf_len) {
  return cljs.tools.reader.reader_types.source_logging_push_back_reader.call(null, s_or_rdr, buf_len, null);
};
cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$3 = function(s_or_rdr, buf_len, file_name) {
  return new cljs.tools.reader.reader_types.SourceLoggingPushbackReader(typeof s_or_rdr === "string" ? cljs.tools.reader.reader_types.string_push_back_reader.call(null, s_or_rdr, buf_len) : s_or_rdr, 1, 1, true, null, 0, file_name, cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "buffer", "buffer", 617295198), new goog.string.StringBuffer, new cljs.core.Keyword(null, "offset", "offset", 296498311), cljs.core.list(0)], null)));
};
cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$lang$maxFixedArity = 3;
cljs.tools.reader.reader_types.read_line = function cljs$tools$reader$reader_types$read_line(rdr) {
  var c = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  var s = new goog.string.StringBuffer;
  while (true) {
    if (cljs.tools.reader.impl.utils.newline_QMARK_.call(null, c)) {
      return [cljs.core.str(s)].join("");
    } else {
      var G__7632 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
      var G__7633 = s.append(c);
      c = G__7632;
      s = G__7633;
      continue;
    }
    break;
  }
};
cljs.tools.reader.reader_types.reader_error = function cljs$tools$reader$reader_types$reader_error() {
  var args__5106__auto__ = [];
  var len__5099__auto___7636 = arguments.length;
  var i__5100__auto___7637 = 0;
  while (true) {
    if (i__5100__auto___7637 < len__5099__auto___7636) {
      args__5106__auto__.push(arguments[i__5100__auto___7637]);
      var G__7638 = i__5100__auto___7637 + 1;
      i__5100__auto___7637 = G__7638;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 1 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(1), 0) : null;
  return cljs.tools.reader.reader_types.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5107__auto__);
};
cljs.tools.reader.reader_types.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw cljs.core.ex_info.call(null, cljs.core.apply.call(null, cljs.core.str, msg), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "reader-exception", "reader-exception", -1938323098)], null), cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, rdr)) ? cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line", "line", 
  212345235), cljs.tools.reader.reader_types.get_line_number.call(null, rdr), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.tools.reader.reader_types.get_column_number.call(null, rdr)], null), function() {
    var temp__4425__auto__ = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var file_name = temp__4425__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file_name], null);
    } else {
      return null;
    }
  }()) : null));
};
cljs.tools.reader.reader_types.reader_error.cljs$lang$maxFixedArity = 1;
cljs.tools.reader.reader_types.reader_error.cljs$lang$applyTo = function(seq7634) {
  var G__7635 = cljs.core.first.call(null, seq7634);
  var seq7634__$1 = cljs.core.next.call(null, seq7634);
  return cljs.tools.reader.reader_types.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__7635, seq7634__$1);
};
cljs.tools.reader.reader_types.source_logging_reader_QMARK_ = function cljs$tools$reader$reader_types$source_logging_reader_QMARK_(rdr) {
  return rdr instanceof cljs.tools.reader.reader_types.SourceLoggingPushbackReader;
};
cljs.tools.reader.reader_types.line_start_QMARK_ = function cljs$tools$reader$reader_types$line_start_QMARK_(rdr) {
  if (cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, rdr))) {
    return 1 === cljs.tools.reader.reader_types.get_column_number.call(null, rdr);
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.log_source_STAR_ = function cljs$tools$reader$reader_types$log_source_STAR_(reader, f) {
  var buffer = (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, reader.frames));
  try {
    cljs.core.swap_BANG_.call(null, reader.frames, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311)], null), cljs.core.conj, buffer.getLength());
    var ret = f.call(null);
    if (!(ret == null) ? ret.cljs$lang$protocol_mask$partition0$ & 131072 || ret.cljs$core$IMeta$ ? true : false : false) {
      return cljs.tools.reader.reader_types.merge_meta.call(null, ret, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "source", "source", -433931539), cljs.tools.reader.reader_types.peek_source_log.call(null, cljs.core.deref.call(null, reader.frames))], null));
    } else {
      return ret;
    }
  } finally {
    cljs.core.swap_BANG_.call(null, reader.frames, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311)], null), cljs.core.rest);
  }
};
goog.provide("cljs.tools.reader.impl.commons");
goog.require("cljs.core");
goog.require("cljs.tools.reader.reader_types");
goog.require("cljs.tools.reader.impl.utils");
cljs.tools.reader.impl.commons.number_literal_QMARK_ = function cljs$tools$reader$impl$commons$number_literal_QMARK_(reader, initch) {
  return cljs.tools.reader.impl.utils.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.tools.reader.impl.utils.numeric_QMARK_.call(null, cljs.tools.reader.reader_types.peek_char.call(null, reader));
};
cljs.tools.reader.impl.commons.read_past = function cljs$tools$reader$impl$commons$read_past(pred, rdr) {
  var ch = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  while (true) {
    if (pred.call(null, ch)) {
      var G__7822 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
      ch = G__7822;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.tools.reader.impl.commons.skip_line = function cljs$tools$reader$impl$commons$skip_line(reader) {
  while (true) {
    if (cljs.tools.reader.impl.utils.newline_QMARK_.call(null, cljs.tools.reader.reader_types.read_char.call(null, reader))) {
    } else {
      continue;
    }
    break;
  }
  return reader;
};
cljs.tools.reader.impl.commons.int_pattern = /^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|(0[0-9]+))(N)?$/;
cljs.tools.reader.impl.commons.ratio_pattern = /([-+]?[0-9]+)\/([0-9]+)/;
cljs.tools.reader.impl.commons.float_pattern = /([-+]?[0-9]+(\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?/;
cljs.tools.reader.impl.commons.match_int = function cljs$tools$reader$impl$commons$match_int(s) {
  var m = cljs.core.vec.call(null, cljs.core.re_find.call(null, cljs.tools.reader.impl.commons.int_pattern, s));
  if (!(m.call(null, 2) == null)) {
    return 0;
  } else {
    var negate_QMARK_ = "-" === m.call(null, 1);
    var a = !(m.call(null, 3) == null) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m.call(null, 3), 10], null) : !(m.call(null, 4) == null) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m.call(null, 4), 16], null) : !(m.call(null, 5) == null) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m.call(null, 5), 8], null) : !(m.call(null, 7) == null) ? new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m.call(null, 7), parseInt(m.call(null, 6))], null) : !(m.call(null, 8) == null) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m.call(null, 8), 10], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, null], null);
    var n = a.call(null, 0);
    var radix = a.call(null, 1) | 0;
    if (n == null) {
      return null;
    } else {
      var bn = parseInt(n, radix);
      var bn__$1 = negate_QMARK_ ? -1 * bn : bn;
      return bn__$1;
    }
  }
};
cljs.tools.reader.impl.commons.match_ratio = function cljs$tools$reader$impl$commons$match_ratio(s) {
  var m = cljs.core.vec.call(null, cljs.core.re_find.call(null, cljs.tools.reader.impl.commons.ratio_pattern, s));
  var numerator = m.call(null, 1);
  var denominator = m.call(null, 2);
  var numerator__$1 = cljs.core.truth_(cljs.core.re_find.call(null, /^\+/, numerator)) ? cljs.core.subs.call(null, numerator, 1) : numerator;
  return parseInt(numerator__$1) / parseInt(denominator);
};
cljs.tools.reader.impl.commons.match_float = function cljs$tools$reader$impl$commons$match_float(s) {
  var m = cljs.core.vec.call(null, cljs.core.re_find.call(null, cljs.tools.reader.impl.commons.float_pattern, s));
  if (!(m.call(null, 4) == null)) {
    return parseFloat(m.call(null, 1));
  } else {
    return parseFloat(s);
  }
};
cljs.tools.reader.impl.commons.matches_QMARK_ = function cljs$tools$reader$impl$commons$matches_QMARK_(pattern, s) {
  var vec__7824 = cljs.core.re_find.call(null, pattern, s);
  var match = cljs.core.nth.call(null, vec__7824, 0, null);
  return match === s;
};
cljs.tools.reader.impl.commons.match_number = function cljs$tools$reader$impl$commons$match_number(s) {
  if (cljs.tools.reader.impl.commons.matches_QMARK_.call(null, cljs.tools.reader.impl.commons.int_pattern, s)) {
    return cljs.tools.reader.impl.commons.match_int.call(null, s);
  } else {
    if (cljs.tools.reader.impl.commons.matches_QMARK_.call(null, cljs.tools.reader.impl.commons.float_pattern, s)) {
      return cljs.tools.reader.impl.commons.match_float.call(null, s);
    } else {
      if (cljs.tools.reader.impl.commons.matches_QMARK_.call(null, cljs.tools.reader.impl.commons.ratio_pattern, s)) {
        return cljs.tools.reader.impl.commons.match_ratio.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.tools.reader.impl.commons.parse_symbol = function cljs$tools$reader$impl$commons$parse_symbol(token) {
  if ("" === token || /:$/.test(token) === true || /^::/.test(token) === true) {
    return null;
  } else {
    var ns_idx = token.indexOf("/");
    var ns = ns_idx > 0 ? cljs.core.subs.call(null, token, 0, ns_idx) : null;
    if (!(ns == null)) {
      var ns_idx__$1 = ns_idx + 1;
      if (ns_idx__$1 === cljs.core.count.call(null, token)) {
        return null;
      } else {
        var sym = cljs.core.subs.call(null, token, ns_idx__$1);
        if (!cljs.tools.reader.impl.utils.numeric_QMARK_.call(null, cljs.core.nth.call(null, sym, 0)) && !("" === sym) && /:$/.test(ns) === false && (sym === "/" || -1 === sym.indexOf("/"))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns, sym], null);
        } else {
          return null;
        }
      }
    } else {
      if (token === "/" || -1 === token.indexOf("/")) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, token], null);
      } else {
        return null;
      }
    }
  }
};
cljs.tools.reader.impl.commons.read_comment = function cljs$tools$reader$impl$commons$read_comment() {
  var args__5106__auto__ = [];
  var len__5099__auto___7827 = arguments.length;
  var i__5100__auto___7828 = 0;
  while (true) {
    if (i__5100__auto___7828 < len__5099__auto___7827) {
      args__5106__auto__.push(arguments[i__5100__auto___7828]);
      var G__7829 = i__5100__auto___7828 + 1;
      i__5100__auto___7828 = G__7829;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 1 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(1), 0) : null;
  return cljs.tools.reader.impl.commons.read_comment.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5107__auto__);
};
cljs.tools.reader.impl.commons.read_comment.cljs$core$IFn$_invoke$arity$variadic = function(rdr, _) {
  return cljs.tools.reader.impl.commons.skip_line.call(null, rdr);
};
cljs.tools.reader.impl.commons.read_comment.cljs$lang$maxFixedArity = 1;
cljs.tools.reader.impl.commons.read_comment.cljs$lang$applyTo = function(seq7825) {
  var G__7826 = cljs.core.first.call(null, seq7825);
  var seq7825__$1 = cljs.core.next.call(null, seq7825);
  return cljs.tools.reader.impl.commons.read_comment.cljs$core$IFn$_invoke$arity$variadic(G__7826, seq7825__$1);
};
cljs.tools.reader.impl.commons.throwing_reader = function cljs$tools$reader$impl$commons$throwing_reader(msg) {
  return function() {
    var G__7830__delegate = function(rdr, _) {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, msg);
    };
    var G__7830 = function(rdr, var_args) {
      var _ = null;
      if (arguments.length > 1) {
        var G__7831__i = 0, G__7831__a = new Array(arguments.length - 1);
        while (G__7831__i < G__7831__a.length) {
          G__7831__a[G__7831__i] = arguments[G__7831__i + 1];
          ++G__7831__i;
        }
        _ = new cljs.core.IndexedSeq(G__7831__a, 0);
      }
      return G__7830__delegate.call(this, rdr, _);
    };
    G__7830.cljs$lang$maxFixedArity = 1;
    G__7830.cljs$lang$applyTo = function(arglist__7832) {
      var rdr = cljs.core.first(arglist__7832);
      var _ = cljs.core.rest(arglist__7832);
      return G__7830__delegate(rdr, _);
    };
    G__7830.cljs$core$IFn$_invoke$arity$variadic = G__7830__delegate;
    return G__7830;
  }();
};
goog.provide("cljs.tools.reader");
goog.require("cljs.core");
goog.require("cljs.tools.reader.impl.commons");
goog.require("goog.string");
goog.require("goog.array");
goog.require("cljs.tools.reader.reader_types");
goog.require("goog.string.StringBuffer");
goog.require("cljs.tools.reader.impl.utils");
goog.require("clojure.string");
cljs.tools.reader.macro_terminating_QMARK_ = function cljs$tools$reader$macro_terminating_QMARK_(ch) {
  var G__7665 = ch;
  switch(G__7665) {
    case '"':
    ;
    case ";":
    ;
    case "@":
    ;
    case "^":
    ;
    case "`":
    ;
    case "~":
    ;
    case "(":
    ;
    case ")":
    ;
    case "[":
    ;
    case "]":
    ;
    case "{":
    ;
    case "}":
    ;
    case "\\":
      return true;
      break;
    default:
      return false;
  }
};
cljs.tools.reader.sb = new goog.string.StringBuffer;
cljs.tools.reader.read_token = function cljs$tools$reader$read_token(rdr, initch) {
  if (initch == null) {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading");
  } else {
    cljs.tools.reader.sb.clear();
    var ch = initch;
    while (true) {
      if (cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch) || cljs.tools.reader.macro_terminating_QMARK_.call(null, ch) || ch == null) {
        if (ch == null) {
        } else {
          cljs.tools.reader.reader_types.unread.call(null, rdr, ch);
        }
        return cljs.tools.reader.sb.toString();
      } else {
        cljs.tools.reader.sb.append(ch);
        var G__7667 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
        ch = G__7667;
        continue;
      }
      break;
    }
  }
};
cljs.tools.reader.read_dispatch = function cljs$tools$reader$read_dispatch(rdr, _, opts, pending_forms) {
  var temp__4423__auto__ = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var ch = temp__4423__auto__;
    var temp__4423__auto____$1 = cljs.tools.reader.dispatch_macros.call(null, ch);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var dm = temp__4423__auto____$1;
      return dm.call(null, rdr, ch, opts, pending_forms);
    } else {
      return cljs.tools.reader.read_tagged.call(null, function() {
        var G__7669 = rdr;
        cljs.tools.reader.reader_types.unread.call(null, G__7669, ch);
        return G__7669;
      }(), ch, opts, pending_forms);
    }
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading character");
  }
};
cljs.tools.reader.read_unmatched_delimiter = function cljs$tools$reader$read_unmatched_delimiter(rdr, ch, opts, pending_forms) {
  return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.tools.reader.read_regex = function cljs$tools$reader$read_regex(rdr, ch, opts, pending_forms) {
  var sb = new goog.string.StringBuffer;
  var ch__$1 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  while (true) {
    if ('"' === ch__$1) {
      return cljs.core.re_pattern.call(null, [cljs.core.str(sb)].join(""));
    } else {
      if (ch__$1 == null) {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading regex");
      } else {
        sb.append(ch__$1);
        if ("\\" === ch__$1) {
          var ch_7670__$2 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
          if (ch_7670__$2 == null) {
            cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading regex");
          } else {
          }
          sb.append(ch_7670__$2);
        } else {
        }
        var G__7671 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
        ch__$1 = G__7671;
        continue;
      }
    }
    break;
  }
};
cljs.tools.reader.char_code = function cljs$tools$reader$char_code(ch, base) {
  var code = parseInt(ch, base);
  if (cljs.core.truth_(isNaN(code))) {
    return -1;
  } else {
    return code;
  }
};
cljs.tools.reader.read_unicode_char = function cljs$tools$reader$read_unicode_char() {
  var args7672 = [];
  var len__5099__auto___7675 = arguments.length;
  var i__5100__auto___7676 = 0;
  while (true) {
    if (i__5100__auto___7676 < len__5099__auto___7675) {
      args7672.push(arguments[i__5100__auto___7676]);
      var G__7677 = i__5100__auto___7676 + 1;
      i__5100__auto___7676 = G__7677;
      continue;
    } else {
    }
    break;
  }
  var G__7674 = args7672.length;
  switch(G__7674) {
    case 4:
      return cljs.tools.reader.read_unicode_char.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.tools.reader.read_unicode_char.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7672.length)].join(""));;
  }
};
cljs.tools.reader.read_unicode_char.cljs$core$IFn$_invoke$arity$4 = function(token, offset, length, base) {
  var l = offset + length;
  if (cljs.core.count.call(null, token) === l) {
  } else {
    throw new cljs.core.ex_info([cljs.core.str("Invalid unicode character: \\"), cljs.core.str(token)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-argument", "illegal-argument", -1845493170)], null));
  }
  var i = offset;
  var uc = 0;
  while (true) {
    if (i === l) {
      return String.fromCharCode(uc);
    } else {
      var d = cljs.tools.reader.char_code.call(null, cljs.core.nth.call(null, token, i), base);
      if (d === -1) {
        throw new cljs.core.ex_info([cljs.core.str("Invalid digit: "), cljs.core.str(cljs.core.nth.call(null, token, i))].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-argument", "illegal-argument", -1845493170)], null));
      } else {
        var G__7679 = i + 1;
        var G__7680 = d + uc * base;
        i = G__7679;
        uc = G__7680;
        continue;
      }
    }
    break;
  }
};
cljs.tools.reader.read_unicode_char.cljs$core$IFn$_invoke$arity$5 = function(rdr, initch, base, length, exact_QMARK_) {
  var i = 1;
  var uc = cljs.tools.reader.char_code.call(null, initch, base);
  while (true) {
    if (uc === -1) {
      throw new cljs.core.ex_info([cljs.core.str("Invalid digit: "), cljs.core.str(initch)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-argument", "illegal-argument", -1845493170)], null));
    } else {
      if (!(i === length)) {
        var ch = cljs.tools.reader.reader_types.peek_char.call(null, rdr);
        if (cljs.core.truth_(function() {
          var or__4060__auto__ = cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch);
          if (or__4060__auto__) {
            return or__4060__auto__;
          } else {
            var or__4060__auto____$1 = cljs.tools.reader.macros.call(null, ch);
            if (cljs.core.truth_(or__4060__auto____$1)) {
              return or__4060__auto____$1;
            } else {
              return ch == null;
            }
          }
        }())) {
          if (cljs.core.truth_(exact_QMARK_)) {
            throw new cljs.core.ex_info([cljs.core.str("Invalid character length: "), cljs.core.str(i), cljs.core.str(", should be: "), cljs.core.str(length)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-argument", "illegal-argument", -1845493170)], null));
          } else {
            return String.fromCharCode(uc);
          }
        } else {
          var d = cljs.tools.reader.char_code.call(null, ch, base);
          cljs.tools.reader.reader_types.read_char.call(null, rdr);
          if (d === -1) {
            throw new cljs.core.ex_info([cljs.core.str("Invalid digit: "), cljs.core.str(ch)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-argument", "illegal-argument", -1845493170)], null));
          } else {
            var G__7681 = i + 1;
            var G__7682 = d + uc * base;
            i = G__7681;
            uc = G__7682;
            continue;
          }
        }
      } else {
        return String.fromCharCode(uc);
      }
    }
    break;
  }
};
cljs.tools.reader.read_unicode_char.cljs$lang$maxFixedArity = 5;
cljs.tools.reader.upper_limit = "\ud7ff".charCodeAt(0);
cljs.tools.reader.lower_limit = "\ue000".charCodeAt(0);
cljs.tools.reader.valid_octal_QMARK_ = function cljs$tools$reader$valid_octal_QMARK_(token, base) {
  return parseInt(token, base) <= 255;
};
cljs.tools.reader.read_char_STAR_ = function cljs$tools$reader$read_char_STAR_(rdr, backslash, opts, pending_forms) {
  var ch = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  if (!(ch == null)) {
    var token = cljs.tools.reader.macro_terminating_QMARK_.call(null, ch) || cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch) ? [cljs.core.str(ch)].join("") : cljs.tools.reader.read_token.call(null, rdr, ch);
    var token_len = token.length;
    if (1 === token_len) {
      return token.charAt(0);
    } else {
      if (cljs.core._EQ_.call(null, token, "newline")) {
        return "\n";
      } else {
        if (cljs.core._EQ_.call(null, token, "space")) {
          return " ";
        } else {
          if (cljs.core._EQ_.call(null, token, "tab")) {
            return "\t";
          } else {
            if (cljs.core._EQ_.call(null, token, "backspace")) {
              return "\b";
            } else {
              if (cljs.core._EQ_.call(null, token, "formfeed")) {
                return "\f";
              } else {
                if (cljs.core._EQ_.call(null, token, "return")) {
                  return "\r";
                } else {
                  if (cljs.core.truth_(goog.string.startsWith(token, "u"))) {
                    var c = cljs.tools.reader.read_unicode_char.call(null, token, 1, 4, 16);
                    var ic = c.charCodeAt(0);
                    if (ic > cljs.tools.reader.upper_limit && ic < cljs.tools.reader.lower_limit) {
                      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid character constant: \\u", c);
                    } else {
                      return c;
                    }
                  } else {
                    if (cljs.core.truth_(goog.string.startsWith(token, "o"))) {
                      var len = token_len - 1;
                      if (len > 3) {
                        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid octal escape sequence length: ", len);
                      } else {
                        var offset = 1;
                        var base = 8;
                        var uc = cljs.tools.reader.read_unicode_char.call(null, token, offset, len, base);
                        if (cljs.core.not.call(null, cljs.tools.reader.valid_octal_QMARK_.call(null, cljs.core.subs.call(null, token, offset), base))) {
                          return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Octal escape sequence must be in range [0, 377]");
                        } else {
                          return uc;
                        }
                      }
                    } else {
                      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Unsupported character: \\", token);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading character");
  }
};
cljs.tools.reader.starting_line_col_info = function cljs$tools$reader$starting_line_col_info(rdr) {
  if (cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, rdr))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.tools.reader.reader_types.get_line_number.call(null, rdr), cljs.tools.reader.reader_types.get_column_number.call(null, rdr) - 1 | 0], null);
  } else {
    return null;
  }
};
cljs.tools.reader.ending_line_col_info = function cljs$tools$reader$ending_line_col_info(rdr) {
  if (cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, rdr))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.tools.reader.reader_types.get_line_number.call(null, rdr), cljs.tools.reader.reader_types.get_column_number.call(null, rdr)], null);
  } else {
    return null;
  }
};
if (typeof cljs.tools.reader.READ_EOF !== "undefined") {
} else {
  cljs.tools.reader.READ_EOF = new Object;
}
if (typeof cljs.tools.reader.READ_FINISHED !== "undefined") {
} else {
  cljs.tools.reader.READ_FINISHED = new Object;
}
cljs.tools.reader._STAR_read_delim_STAR_ = false;
cljs.tools.reader.read_delimited_internal = function cljs$tools$reader$read_delimited_internal(delim, rdr, opts, pending_forms) {
  var vec__7684 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var start_line = cljs.core.nth.call(null, vec__7684, 0, null);
  var start_column = cljs.core.nth.call(null, vec__7684, 1, null);
  var delim__$1 = cljs.tools.reader.impl.utils.char$.call(null, delim);
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var form = cljs.tools.reader.read_STAR_.call(null, rdr, false, cljs.tools.reader.READ_EOF, delim__$1, opts, pending_forms);
    if (form === cljs.tools.reader.READ_FINISHED) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      if (form === cljs.tools.reader.READ_EOF) {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading", cljs.core.truth_(start_line) ? [cljs.core.str(", starting at line "), cljs.core.str(start_line), cljs.core.str(" and column "), cljs.core.str(start_column)].join("") : null);
      } else {
        var G__7685 = cljs.core.conj_BANG_.call(null, a, form);
        a = G__7685;
        continue;
      }
    }
    break;
  }
};
cljs.tools.reader.read_delimited = function cljs$tools$reader$read_delimited(delim, rdr, opts, pending_forms) {
  var _STAR_read_delim_STAR_7687 = cljs.tools.reader._STAR_read_delim_STAR_;
  cljs.tools.reader._STAR_read_delim_STAR_ = true;
  try {
    return cljs.tools.reader.read_delimited_internal.call(null, delim, rdr, opts, pending_forms);
  } finally {
    cljs.tools.reader._STAR_read_delim_STAR_ = _STAR_read_delim_STAR_7687;
  }
};
cljs.tools.reader.read_list = function cljs$tools$reader$read_list(rdr, _, opts, pending_forms) {
  var vec__7690 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var start_line = cljs.core.nth.call(null, vec__7690, 0, null);
  var start_column = cljs.core.nth.call(null, vec__7690, 1, null);
  var the_list = cljs.tools.reader.read_delimited.call(null, ")", rdr, opts, pending_forms);
  var vec__7691 = cljs.tools.reader.ending_line_col_info.call(null, rdr);
  var end_line = cljs.core.nth.call(null, vec__7691, 0, null);
  var end_column = cljs.core.nth.call(null, vec__7691, 1, null);
  return cljs.core.with_meta.call(null, cljs.core.empty_QMARK_.call(null, the_list) ? cljs.core.List.EMPTY : cljs.core.apply.call(null, cljs.core.list, the_list), cljs.core.truth_(start_line) ? cljs.core.merge.call(null, function() {
    var temp__4425__auto__ = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var file = temp__4425__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file], null);
    } else {
      return null;
    }
  }(), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 212345235), start_line, new cljs.core.Keyword(null, "column", "column", 2078222095), start_column, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), end_line, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), end_column], null)) : null);
};
cljs.tools.reader.read_vector = function cljs$tools$reader$read_vector(rdr, _, opts, pending_forms) {
  var vec__7694 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var start_line = cljs.core.nth.call(null, vec__7694, 0, null);
  var start_column = cljs.core.nth.call(null, vec__7694, 1, null);
  var the_vector = cljs.tools.reader.read_delimited.call(null, "]", rdr, opts, pending_forms);
  var vec__7695 = cljs.tools.reader.ending_line_col_info.call(null, rdr);
  var end_line = cljs.core.nth.call(null, vec__7695, 0, null);
  var end_column = cljs.core.nth.call(null, vec__7695, 1, null);
  return cljs.core.with_meta.call(null, the_vector, cljs.core.truth_(start_line) ? cljs.core.merge.call(null, function() {
    var temp__4425__auto__ = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var file = temp__4425__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file], null);
    } else {
      return null;
    }
  }(), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 212345235), start_line, new cljs.core.Keyword(null, "column", "column", 2078222095), start_column, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), end_line, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), end_column], null)) : null);
};
cljs.tools.reader.read_map = function cljs$tools$reader$read_map(rdr, _, opts, pending_forms) {
  var vec__7698 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var start_line = cljs.core.nth.call(null, vec__7698, 0, null);
  var start_column = cljs.core.nth.call(null, vec__7698, 1, null);
  var the_map = cljs.tools.reader.read_delimited.call(null, "}", rdr, opts, pending_forms);
  var map_count = cljs.core.count.call(null, the_map);
  var vec__7699 = cljs.tools.reader.ending_line_col_info.call(null, rdr);
  var end_line = cljs.core.nth.call(null, vec__7699, 0, null);
  var end_column = cljs.core.nth.call(null, vec__7699, 1, null);
  if (cljs.core.odd_QMARK_.call(null, map_count)) {
    cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.with_meta.call(null, map_count === 0 ? cljs.core.PersistentArrayMap.EMPTY : cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.to_array.call(null, the_map)), cljs.core.truth_(start_line) ? cljs.core.merge.call(null, function() {
    var temp__4425__auto__ = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var file = temp__4425__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file], null);
    } else {
      return null;
    }
  }(), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 212345235), start_line, new cljs.core.Keyword(null, "column", "column", 2078222095), start_column, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), end_line, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), end_column], null)) : null);
};
cljs.tools.reader.read_number = function cljs$tools$reader$read_number(rdr, initch) {
  var sb = function() {
    var G__7702 = new goog.string.StringBuffer;
    G__7702.append(initch);
    return G__7702;
  }();
  var ch = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4060__auto__ = cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch);
      if (or__4060__auto__) {
        return or__4060__auto__;
      } else {
        var or__4060__auto____$1 = cljs.tools.reader.macros.call(null, ch);
        if (cljs.core.truth_(or__4060__auto____$1)) {
          return or__4060__auto____$1;
        } else {
          return ch == null;
        }
      }
    }())) {
      var s = [cljs.core.str(sb)].join("");
      cljs.tools.reader.reader_types.unread.call(null, rdr, ch);
      var or__4060__auto__ = cljs.tools.reader.impl.commons.match_number.call(null, s);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid number format [", s, "]");
      }
    } else {
      var G__7704 = function() {
        var G__7703 = sb;
        G__7703.append(ch);
        return G__7703;
      }();
      var G__7705 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
      sb = G__7704;
      ch = G__7705;
      continue;
    }
    break;
  }
};
cljs.tools.reader.escape_char = function cljs$tools$reader$escape_char(sb, rdr) {
  var ch = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  var G__7707 = ch;
  switch(G__7707) {
    case "t":
      return "\t";
      break;
    case "r":
      return "\r";
      break;
    case "n":
      return "\n";
      break;
    case "\\":
      return "\\";
      break;
    case '"':
      return '"';
      break;
    case "b":
      return "\b";
      break;
    case "f":
      return "\f";
      break;
    case "u":
      var ch__$1 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
      if (-1 === parseInt(ch__$1 | 0, 16)) {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid unicode escape: \\u", ch__$1);
      } else {
        return cljs.tools.reader.read_unicode_char.call(null, rdr, ch__$1, 16, 4, true);
      }
      break;
    default:
      if (cljs.tools.reader.impl.utils.numeric_QMARK_.call(null, ch)) {
        var ch__$1 = cljs.tools.reader.read_unicode_char.call(null, rdr, ch, 8, 3, false);
        if ((ch__$1 | 0) > 223) {
          return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Octal escape sequence must be in range [0, 377]");
        } else {
          return ch__$1;
        }
      } else {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Unsupported escape character: \\", ch);
      }
    ;
  }
};
cljs.tools.reader.read_string_STAR_ = function cljs$tools$reader$read_string_STAR_(reader, _, opts, pending_forms) {
  var sb = new goog.string.StringBuffer;
  var ch = cljs.tools.reader.reader_types.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.tools.reader.reader_types.reader_error.call(null, reader, "EOF while reading string");
    } else {
      var G__7712 = ch;
      switch(G__7712) {
        case "\\":
          var G__7716 = function() {
            var G__7713 = sb;
            G__7713.append(cljs.tools.reader.escape_char.call(null, sb, reader));
            return G__7713;
          }();
          var G__7717 = cljs.tools.reader.reader_types.read_char.call(null, reader);
          sb = G__7716;
          ch = G__7717;
          continue;
          break;
        case '"':
          return [cljs.core.str(sb)].join("");
          break;
        default:
          var G__7718 = function() {
            var G__7714 = sb;
            G__7714.append(ch);
            return G__7714;
          }();
          var G__7719 = cljs.tools.reader.reader_types.read_char.call(null, reader);
          sb = G__7718;
          ch = G__7719;
          continue;
      }
    }
    break;
  }
};
cljs.tools.reader.loc_info = function cljs$tools$reader$loc_info(rdr, line, column) {
  if (line == null) {
    return null;
  } else {
    var file = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    var filem = file == null ? null : new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file], null);
    var vec__7721 = cljs.tools.reader.ending_line_col_info.call(null, rdr);
    var end_line = cljs.core.nth.call(null, vec__7721, 0, null);
    var end_column = cljs.core.nth.call(null, vec__7721, 1, null);
    var lcm = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), column, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), end_line, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), end_column], null);
    return cljs.core.merge.call(null, filem, lcm);
  }
};
cljs.tools.reader.read_symbol = function cljs$tools$reader$read_symbol(rdr, initch) {
  var vec__7724 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var line = cljs.core.nth.call(null, vec__7724, 0, null);
  var column = cljs.core.nth.call(null, vec__7724, 1, null);
  var token = cljs.tools.reader.read_token.call(null, rdr, initch);
  if (token == null) {
    return null;
  } else {
    var G__7725 = token;
    switch(G__7725) {
      case "nil":
        return null;
        break;
      case "true":
        return true;
        break;
      case "false":
        return false;
        break;
      case "/":
        return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        break;
      case "NaN":
        return Number.NaN;
        break;
      case "-Infinity":
        return Number.NEGATIVE_INFINITY;
        break;
      case "Infinity":
      ;
      case "+Infinity":
        return Number.POSITIVE_INFINITY;
        break;
      default:
        var p = cljs.tools.reader.impl.commons.parse_symbol.call(null, token);
        if (!(p == null)) {
          var sym = cljs.core.symbol.call(null, cljs.core._nth.call(null, p, 0), cljs.core._nth.call(null, p, 1));
          return cljs.core._with_meta.call(null, sym, cljs.tools.reader.loc_info.call(null, rdr, line, column));
        } else {
          return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid token: ", token);
        }
      ;
    }
  }
};
cljs.tools.reader._STAR_alias_map_STAR_ = null;
cljs.tools.reader.resolve_ns = function cljs$tools$reader$resolve_ns(sym) {
  return cljs.core.get.call(null, cljs.tools.reader._STAR_alias_map_STAR_, sym, sym);
};
cljs.tools.reader.read_keyword = function cljs$tools$reader$read_keyword(reader, initch, opts, pending_forms) {
  var ch = cljs.tools.reader.reader_types.read_char.call(null, reader);
  if (!cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch)) {
    var token = cljs.tools.reader.read_token.call(null, reader, ch);
    var s = cljs.tools.reader.impl.commons.parse_symbol.call(null, token);
    if (!(s == null)) {
      var ns = cljs.core._nth.call(null, s, 0);
      var name = cljs.core._nth.call(null, s, 1);
      if (":" === token.charAt(0)) {
        if (!(ns == null)) {
          var ns__$1 = cljs.tools.reader.resolve_ns.call(null, cljs.core.symbol.call(null, cljs.core.subs.call(null, ns, 1)));
          if (!(ns__$1 == null)) {
            return cljs.core.keyword.call(null, [cljs.core.str(ns__$1)].join(""), name);
          } else {
            return cljs.tools.reader.reader_types.reader_error.call(null, reader, "Invalid token: :", token);
          }
        } else {
          return cljs.core.keyword.call(null, [cljs.core.str(cljs.core._STAR_ns_STAR_)].join(""), cljs.core.subs.call(null, name, 1));
        }
      } else {
        return cljs.core.keyword.call(null, ns, name);
      }
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, reader, "Invalid token: :", token);
    }
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, reader, "Invalid token: :");
  }
};
cljs.tools.reader.wrapping_reader = function cljs$tools$reader$wrapping_reader(sym) {
  return function(rdr, _, opts, pending_forms) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms)), sym);
  };
};
cljs.tools.reader.read_meta = function cljs$tools$reader$read_meta(rdr, _, opts, pending_forms) {
  if (cljs.tools.reader.reader_types.source_logging_reader_QMARK_.call(null, rdr) && !cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, cljs.tools.reader.reader_types.peek_char.call(null, rdr))) {
    return cljs.tools.reader.reader_types.log_source_STAR_.call(null, rdr, function() {
      var vec__7733 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
      var line = cljs.core.nth.call(null, vec__7733, 0, null);
      var column = cljs.core.nth.call(null, vec__7733, 1, null);
      var m = cljs.tools.reader.impl.utils.desugar_meta.call(null, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
      if (cljs.core.map_QMARK_.call(null, m)) {
      } else {
        cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Metadata must be Symbol, Keyword, String or Map");
      }
      var o = cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms);
      if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 131072 || o.cljs$core$IMeta$ ? true : false : false) {
        var m__$1 = cljs.core.truth_(function() {
          var and__4048__auto__ = line;
          if (cljs.core.truth_(and__4048__auto__)) {
            return cljs.core.seq_QMARK_.call(null, o);
          } else {
            return and__4048__auto__;
          }
        }()) ? cljs.core.assoc.call(null, m, new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), column) : m;
        if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 262144 || o.cljs$core$IWithMeta$ ? true : false : false) {
          return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m__$1));
        } else {
          return cljs.core.reset_meta_BANG_.call(null, o, m__$1);
        }
      } else {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Metadata can only be applied to IMetas");
      }
    });
  } else {
    var vec__7736 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
    var line = cljs.core.nth.call(null, vec__7736, 0, null);
    var column = cljs.core.nth.call(null, vec__7736, 1, null);
    var m = cljs.tools.reader.impl.utils.desugar_meta.call(null, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
    if (cljs.core.map_QMARK_.call(null, m)) {
    } else {
      cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Metadata must be Symbol, Keyword, String or Map");
    }
    var o = cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms);
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 131072 || o.cljs$core$IMeta$ ? true : false : false) {
      var m__$1 = cljs.core.truth_(function() {
        var and__4048__auto__ = line;
        if (cljs.core.truth_(and__4048__auto__)) {
          return cljs.core.seq_QMARK_.call(null, o);
        } else {
          return and__4048__auto__;
        }
      }()) ? cljs.core.assoc.call(null, m, new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), column) : m;
      if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 262144 || o.cljs$core$IWithMeta$ ? true : false : false) {
        return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m__$1));
      } else {
        return cljs.core.reset_meta_BANG_.call(null, o, m__$1);
      }
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Metadata can only be applied to IMetas");
    }
  }
};
cljs.tools.reader.read_set = function cljs$tools$reader$read_set(rdr, _, opts, pending_forms) {
  var vec__7741 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var start_line = cljs.core.nth.call(null, vec__7741, 0, null);
  var start_column = cljs.core.nth.call(null, vec__7741, 1, null);
  var start_column__$1 = cljs.core.truth_(start_column) ? start_column - 1 | 0 : null;
  var the_set = cljs.core.set.call(null, cljs.tools.reader.read_delimited.call(null, "}", rdr, opts, pending_forms));
  var vec__7742 = cljs.tools.reader.ending_line_col_info.call(null, rdr);
  var end_line = cljs.core.nth.call(null, vec__7742, 0, null);
  var end_column = cljs.core.nth.call(null, vec__7742, 1, null);
  return cljs.core.with_meta.call(null, the_set, cljs.core.truth_(start_line) ? cljs.core.merge.call(null, function() {
    var temp__4425__auto__ = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var file = temp__4425__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file], null);
    } else {
      return null;
    }
  }(), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 212345235), start_line, new cljs.core.Keyword(null, "column", "column", 2078222095), start_column__$1, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), end_line, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), end_column], null)) : null);
};
cljs.tools.reader.read_discard = function cljs$tools$reader$read_discard(rdr, _, opts, pending_forms) {
  var G__7744 = rdr;
  cljs.tools.reader.read_STAR_.call(null, G__7744, true, null, opts, pending_forms);
  return G__7744;
};
cljs.tools.reader.RESERVED_FEATURES = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "else", "else", -1508377146), null, new cljs.core.Keyword(null, "none", "none", 1333468478), null], null), null);
cljs.tools.reader.has_feature_QMARK_ = function cljs$tools$reader$has_feature_QMARK_(rdr, feature, opts) {
  if (feature instanceof cljs.core.Keyword) {
    return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), feature) || cljs.core.contains_QMARK_.call(null, cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "features", "features", -1146962336)), feature);
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, [cljs.core.str("Feature should be a keyword: "), cljs.core.str(feature)].join(""));
  }
};
cljs.tools.reader.check_eof_error = function cljs$tools$reader$check_eof_error(form, rdr, first_line) {
  if (form === cljs.tools.reader.READ_EOF) {
    if (first_line < 0) {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading");
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading, starting at line ", first_line);
    }
  } else {
    return null;
  }
};
cljs.tools.reader.check_reserved_features = function cljs$tools$reader$check_reserved_features(rdr, form) {
  if (cljs.core.truth_(cljs.core.get.call(null, cljs.tools.reader.RESERVED_FEATURES, form))) {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, [cljs.core.str("Feature name "), cljs.core.str(form), cljs.core.str(" is reserved")].join(""));
  } else {
    return null;
  }
};
cljs.tools.reader.check_invalid_read_cond = function cljs$tools$reader$check_invalid_read_cond(form, rdr, first_line) {
  if (form === cljs.tools.reader.READ_FINISHED) {
    if (first_line < 0) {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "read-cond requires an even number of forms");
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, [cljs.core.str("read-cond starting on line "), cljs.core.str(first_line), cljs.core.str(" requires an even number of forms")].join(""));
    }
  } else {
    return null;
  }
};
cljs.tools.reader.read_suppress = function cljs$tools$reader$read_suppress(first_line, rdr, opts, pending_forms) {
  var _STAR_suppress_read_STAR_7746 = cljs.tools.reader._STAR_suppress_read_STAR_;
  cljs.tools.reader._STAR_suppress_read_STAR_ = true;
  try {
    var form = cljs.tools.reader.read_STAR_.call(null, rdr, false, cljs.tools.reader.READ_EOF, ")", opts, pending_forms);
    cljs.tools.reader.check_eof_error.call(null, form, rdr, first_line);
    if (form === cljs.tools.reader.READ_FINISHED) {
      return cljs.tools.reader.READ_FINISHED;
    } else {
      return null;
    }
  } finally {
    cljs.tools.reader._STAR_suppress_read_STAR_ = _STAR_suppress_read_STAR_7746;
  }
};
cljs.tools.reader.match_feature = function cljs$tools$reader$match_feature(first_line, rdr, opts, pending_forms) {
  var feature = cljs.tools.reader.read_STAR_.call(null, rdr, false, cljs.tools.reader.READ_EOF, ")", opts, pending_forms);
  cljs.tools.reader.check_eof_error.call(null, feature, rdr, first_line);
  if (cljs.core._EQ_.call(null, feature, cljs.tools.reader.READ_FINISHED)) {
    return cljs.tools.reader.READ_FINISHED;
  } else {
    cljs.tools.reader.check_reserved_features.call(null, rdr, feature);
    if (cljs.core.truth_(cljs.tools.reader.has_feature_QMARK_.call(null, rdr, feature, opts))) {
      var G__7748 = cljs.tools.reader.read_STAR_.call(null, rdr, false, cljs.tools.reader.READ_EOF, ")", opts, pending_forms);
      cljs.tools.reader.check_eof_error.call(null, G__7748, rdr, first_line);
      cljs.tools.reader.check_invalid_read_cond.call(null, G__7748, rdr, first_line);
      return G__7748;
    } else {
      return cljs.tools.reader.read_suppress.call(null, first_line, rdr, opts, pending_forms);
    }
  }
};
cljs.tools.reader.read_cond_delimited = function cljs$tools$reader$read_cond_delimited(rdr, splicing, opts, pending_forms) {
  var first_line = cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, rdr)) ? cljs.tools.reader.reader_types.get_line_number.call(null, rdr) : -1;
  var result = function() {
    var matched = null;
    var finished = null;
    while (true) {
      if (matched == null) {
        var match = cljs.tools.reader.match_feature.call(null, first_line, rdr, opts, pending_forms);
        if (!(match == null)) {
          if (match === cljs.tools.reader.READ_FINISHED) {
            return null;
          } else {
            var G__7751 = match;
            var G__7752 = null;
            matched = G__7751;
            finished = G__7752;
            continue;
          }
        } else {
          var G__7753 = null;
          var G__7754 = null;
          matched = G__7753;
          finished = G__7754;
          continue;
        }
      } else {
        if (!(finished === cljs.tools.reader.READ_FINISHED)) {
          var G__7755 = matched;
          var G__7756 = cljs.tools.reader.read_suppress.call(null, first_line, rdr, opts, pending_forms);
          matched = G__7755;
          finished = G__7756;
          continue;
        } else {
          return matched;
        }
      }
      break;
    }
  }();
  if (result == null) {
    return rdr;
  } else {
    if (cljs.core.truth_(splicing)) {
      if (!(result == null) ? result.cljs$lang$protocol_mask$partition0$ & 16777216 || result.cljs$core$ISequential$ ? true : false : false) {
        goog.array.insertArrayAt(pending_forms, cljs.core.to_array.call(null, result), 0);
        return rdr;
      } else {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Spliced form list in read-cond-splicing must implement java.util.List.");
      }
    } else {
      return result;
    }
  }
};
cljs.tools.reader.read_cond = function cljs$tools$reader$read_cond(rdr, _, opts, pending_forms) {
  if (cljs.core.not.call(null, function() {
    var and__4048__auto__ = opts;
    if (cljs.core.truth_(and__4048__auto__)) {
      return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "preserve", "preserve", 1276846509), null, new cljs.core.Keyword(null, "allow", "allow", -1857325745), null], null), null)).call(null, (new cljs.core.Keyword(null, "read-cond", "read-cond", 1056899244)).cljs$core$IFn$_invoke$arity$1(opts));
    } else {
      return and__4048__auto__;
    }
  }())) {
    throw cljs.core.ex_info.call(null, "Conditional read not allowed", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "runtime-exception", "runtime-exception", -1495664514)], null));
  } else {
  }
  var temp__4423__auto__ = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var ch = temp__4423__auto__;
    var splicing = cljs.core._EQ_.call(null, ch, "@");
    var ch__$1 = splicing ? cljs.tools.reader.reader_types.read_char.call(null, rdr) : ch;
    if (splicing) {
      if (cljs.core.truth_(cljs.tools.reader._STAR_read_delim_STAR_)) {
      } else {
        cljs.tools.reader.reader_types.reader_error.call(null, rdr, "cond-splice not in list");
      }
    } else {
    }
    var temp__4423__auto____$1 = cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch__$1) ? cljs.tools.reader.impl.commons.read_past.call(null, cljs.tools.reader.impl.utils.whitespace_QMARK_, rdr) : ch__$1;
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var ch__$2 = temp__4423__auto____$1;
      if (cljs.core.not_EQ_.call(null, ch__$2, "(")) {
        throw cljs.core.ex_info.call(null, "read-cond body must be a list", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "runtime-exception", "runtime-exception", -1495664514)], null));
      } else {
        var _STAR_suppress_read_STAR_7758 = cljs.tools.reader._STAR_suppress_read_STAR_;
        cljs.tools.reader._STAR_suppress_read_STAR_ = function() {
          var or__4060__auto__ = cljs.tools.reader._STAR_suppress_read_STAR_;
          if (cljs.core.truth_(or__4060__auto__)) {
            return or__4060__auto__;
          } else {
            return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "preserve", "preserve", 1276846509), (new cljs.core.Keyword(null, "read-cond", "read-cond", 1056899244)).cljs$core$IFn$_invoke$arity$1(opts));
          }
        }();
        try {
          if (cljs.core.truth_(cljs.tools.reader._STAR_suppress_read_STAR_)) {
            return cljs.tools.reader.impl.utils.reader_conditional.call(null, cljs.tools.reader.read_list.call(null, rdr, ch__$2, opts, pending_forms), splicing);
          } else {
            return cljs.tools.reader.read_cond_delimited.call(null, rdr, splicing, opts, pending_forms);
          }
        } finally {
          cljs.tools.reader._STAR_suppress_read_STAR_ = _STAR_suppress_read_STAR_7758;
        }
      }
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading character");
    }
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading character");
  }
};
cljs.tools.reader.arg_env = null;
cljs.tools.reader.garg = function cljs$tools$reader$garg(n) {
  return cljs.core.symbol.call(null, [cljs.core.str(-1 === n ? "rest" : [cljs.core.str("p"), cljs.core.str(n)].join("")), cljs.core.str("__"), cljs.core.str(cljs.tools.reader.impl.utils.next_id.call(null)), cljs.core.str("#")].join(""));
};
cljs.tools.reader.read_fn = function cljs$tools$reader$read_fn(rdr, _, opts, pending_forms) {
  if (cljs.core.truth_(cljs.tools.reader.arg_env)) {
    throw cljs.core.ex_info.call(null, "Nested #()s are not allowed", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-state", "illegal-state", -1519851182)], null));
  } else {
  }
  var arg_env7761 = cljs.tools.reader.arg_env;
  cljs.tools.reader.arg_env = cljs.core.sorted_map.call(null);
  try {
    var form = cljs.tools.reader.read_STAR_.call(null, function() {
      var G__7762 = rdr;
      cljs.tools.reader.reader_types.unread.call(null, G__7762, "(");
      return G__7762;
    }(), true, null, opts, pending_forms);
    var rargs = cljs.core.rseq.call(null, cljs.tools.reader.arg_env);
    var args = rargs ? function() {
      var higharg = cljs.core.key.call(null, cljs.core.first.call(null, rargs));
      var args = function() {
        var i = 1;
        var args = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
        while (true) {
          if (i > higharg) {
            return cljs.core.persistent_BANG_.call(null, args);
          } else {
            var G__7763 = i + 1;
            var G__7764 = cljs.core.conj_BANG_.call(null, args, function() {
              var or__4060__auto__ = cljs.core.get.call(null, cljs.tools.reader.arg_env, i);
              if (cljs.core.truth_(or__4060__auto__)) {
                return or__4060__auto__;
              } else {
                return cljs.tools.reader.garg.call(null, i);
              }
            }());
            i = G__7763;
            args = G__7764;
            continue;
          }
          break;
        }
      }();
      var args__$1 = cljs.core.truth_(cljs.tools.reader.arg_env.call(null, -1)) ? cljs.core.conj.call(null, args, new cljs.core.Symbol(null, "&", "&", -2144855648, null), cljs.tools.reader.arg_env.call(null, -1)) : args;
      return args__$1;
    }() : cljs.core.PersistentVector.EMPTY;
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, form), args), new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null));
  } finally {
    cljs.tools.reader.arg_env = arg_env7761;
  }
};
cljs.tools.reader.register_arg = function cljs$tools$reader$register_arg(n) {
  if (cljs.core.truth_(cljs.tools.reader.arg_env)) {
    var temp__4423__auto__ = cljs.tools.reader.arg_env.call(null, n);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var ret = temp__4423__auto__;
      return ret;
    } else {
      var g = cljs.tools.reader.garg.call(null, n);
      cljs.tools.reader.arg_env = cljs.core.assoc.call(null, cljs.tools.reader.arg_env, n, g);
      return g;
    }
  } else {
    throw cljs.core.ex_info.call(null, "Arg literal not in #()", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-state", "illegal-state", -1519851182)], null));
  }
};
cljs.tools.reader.read_arg = function cljs$tools$reader$read_arg(rdr, pct, opts, pending_forms) {
  if (cljs.tools.reader.arg_env == null) {
    return cljs.tools.reader.read_symbol.call(null, rdr, pct);
  } else {
    var ch = cljs.tools.reader.reader_types.peek_char.call(null, rdr);
    if (cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch) || cljs.tools.reader.macro_terminating_QMARK_.call(null, ch) || ch == null) {
      return cljs.tools.reader.register_arg.call(null, 1);
    } else {
      if (cljs.core._EQ_.call(null, ch, "&")) {
        cljs.tools.reader.reader_types.read_char.call(null, rdr);
        return cljs.tools.reader.register_arg.call(null, -1);
      } else {
        var n = cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms);
        if (!cljs.core.integer_QMARK_.call(null, n)) {
          throw cljs.core.ex_info.call(null, "Arg literal must be %, %& or %integer", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-state", "illegal-state", -1519851182)], null));
        } else {
          return cljs.tools.reader.register_arg.call(null, n);
        }
      }
    }
  }
};
cljs.tools.reader.gensym_env = null;
cljs.tools.reader.read_unquote = function cljs$tools$reader$read_unquote(rdr, comma, opts, pending_forms) {
  var temp__4423__auto__ = cljs.tools.reader.reader_types.peek_char.call(null, rdr);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var ch = temp__4423__auto__;
    if (cljs.core._EQ_.call(null, "@", ch)) {
      return cljs.tools.reader.wrapping_reader.call(null, new cljs.core.Symbol("clojure.core", "unquote-splicing", "clojure.core/unquote-splicing", -552003150, null)).call(null, function() {
        var G__7766 = rdr;
        cljs.tools.reader.reader_types.read_char.call(null, G__7766);
        return G__7766;
      }(), "@", opts, pending_forms);
    } else {
      return cljs.tools.reader.wrapping_reader.call(null, new cljs.core.Symbol("clojure.core", "unquote", "clojure.core/unquote", 843087510, null)).call(null, rdr, "~", opts, pending_forms);
    }
  } else {
    return null;
  }
};
cljs.tools.reader.unquote_splicing_QMARK_ = function cljs$tools$reader$unquote_splicing_QMARK_(form) {
  return cljs.core.seq_QMARK_.call(null, form) && cljs.core._EQ_.call(null, cljs.core.first.call(null, form), new cljs.core.Symbol("clojure.core", "unquote-splicing", "clojure.core/unquote-splicing", -552003150, null));
};
cljs.tools.reader.unquote_QMARK_ = function cljs$tools$reader$unquote_QMARK_(form) {
  return cljs.core.seq_QMARK_.call(null, form) && cljs.core._EQ_.call(null, cljs.core.first.call(null, form), new cljs.core.Symbol("clojure.core", "unquote", "clojure.core/unquote", 843087510, null));
};
cljs.tools.reader.expand_list = function cljs$tools$reader$expand_list(s) {
  var s__$1 = cljs.core.seq.call(null, s);
  var r = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    if (s__$1) {
      var item = cljs.core.first.call(null, s__$1);
      var ret = cljs.core.conj_BANG_.call(null, r, cljs.core.truth_(cljs.tools.reader.unquote_QMARK_.call(null, item)) ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.second.call(null, item)), new cljs.core.Symbol("clojure.core", "list", "clojure.core/list", -1119203325, null)) : cljs.core.truth_(cljs.tools.reader.unquote_splicing_QMARK_.call(null, item)) ? cljs.core.second.call(null, item) : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
      cljs.tools.reader.syntax_quote_STAR_.call(null, item)), new cljs.core.Symbol("clojure.core", "list", "clojure.core/list", -1119203325, null)));
      var G__7767 = cljs.core.next.call(null, s__$1);
      var G__7768 = ret;
      s__$1 = G__7767;
      r = G__7768;
      continue;
    } else {
      return cljs.core.seq.call(null, cljs.core.persistent_BANG_.call(null, r));
    }
    break;
  }
};
cljs.tools.reader.flatten_map = function cljs$tools$reader$flatten_map(form) {
  var s = cljs.core.seq.call(null, form);
  var key_vals = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__7769 = cljs.core.next.call(null, s);
      var G__7770 = cljs.core.conj_BANG_.call(null, cljs.core.conj_BANG_.call(null, key_vals, cljs.core.key.call(null, e)), cljs.core.val.call(null, e));
      s = G__7769;
      key_vals = G__7770;
      continue;
    } else {
      return cljs.core.seq.call(null, cljs.core.persistent_BANG_.call(null, key_vals));
    }
    break;
  }
};
cljs.tools.reader.register_gensym = function cljs$tools$reader$register_gensym(sym) {
  if (cljs.core.not.call(null, cljs.tools.reader.gensym_env)) {
    throw cljs.core.ex_info.call(null, "Gensym literal not in syntax-quote", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-state", "illegal-state", -1519851182)], null));
  } else {
  }
  var or__4060__auto__ = cljs.core.get.call(null, cljs.tools.reader.gensym_env, sym);
  if (cljs.core.truth_(or__4060__auto__)) {
    return or__4060__auto__;
  } else {
    var gs = cljs.core.symbol.call(null, [cljs.core.str(cljs.core.subs.call(null, cljs.core.name.call(null, sym), 0, cljs.core.count.call(null, cljs.core.name.call(null, sym)) - 1)), cljs.core.str("__"), cljs.core.str(cljs.tools.reader.impl.utils.next_id.call(null)), cljs.core.str("__auto__")].join(""));
    cljs.tools.reader.gensym_env = cljs.core.assoc.call(null, cljs.tools.reader.gensym_env, sym, gs);
    return gs;
  }
};
cljs.tools.reader.add_meta = function cljs$tools$reader$add_meta(form, ret) {
  if (function() {
    var and__4048__auto__ = !(form == null) ? form.cljs$lang$protocol_mask$partition0$ & 262144 || form.cljs$core$IWithMeta$ ? true : false : false;
    if (and__4048__auto__) {
      return cljs.core.seq.call(null, cljs.core.dissoc.call(null, cljs.core.meta.call(null, form), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "source", "source", -433931539)));
    } else {
      return and__4048__auto__;
    }
  }()) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.tools.reader.syntax_quote_STAR_.call(null, cljs.core.meta.call(null, form))), ret), new cljs.core.Symbol("cljs.core", "with-meta", "cljs.core/with-meta", 749126446, null));
  } else {
    return ret;
  }
};
cljs.tools.reader.syntax_quote_coll = function cljs$tools$reader$syntax_quote_coll(type, coll) {
  var res = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol("cljs.core", "concat", "cljs.core/concat", -1133584918, null), cljs.tools.reader.expand_list.call(null, coll))), new cljs.core.Symbol("cljs.core", "sequence", "cljs.core/sequence", 1908459032, null));
  if (cljs.core.truth_(type)) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, res), type), new cljs.core.Symbol("cljs.core", "apply", "cljs.core/apply", 1757277831, null));
  } else {
    return res;
  }
};
cljs.tools.reader.map_func = function cljs$tools$reader$map_func(coll) {
  if (cljs.core.count.call(null, coll) >= 16) {
    return new cljs.core.Symbol("cljs.core", "hash-map", "cljs.core/hash-map", 303385767, null);
  } else {
    return new cljs.core.Symbol("cljs.core", "array-map", "cljs.core/array-map", -1519210683, null);
  }
};
cljs.tools.reader.bool_QMARK_ = function cljs$tools$reader$bool_QMARK_(x) {
  return x instanceof Boolean || x === true || x === false;
};
cljs.tools.reader.resolve_symbol = function cljs$tools$reader$resolve_symbol(s) {
  var temp__4423__auto__ = cljs.core.namespace.call(null, s);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var ns_str = temp__4423__auto__;
    var ns = cljs.tools.reader.resolve_ns.call(null, cljs.core.symbol.call(null, ns_str));
    return cljs.core.symbol.call(null, cljs.core.name.call(null, ns), cljs.core.name.call(null, s));
  } else {
    return s;
  }
};
cljs.tools.reader.syntax_quote_STAR_ = function cljs$tools$reader$syntax_quote_STAR_(form) {
  return cljs.tools.reader.add_meta.call(null, form, cljs.core.special_symbol_QMARK_.call(null, form) ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, form), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)) : form instanceof cljs.core.Symbol ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.truth_(cljs.core.namespace.call(null, form)) ? cljs.tools.reader.resolve_symbol.call(null, form) : cljs.core.truth_(goog.string.endsWith(cljs.core.name.call(null, 
  form), "#")) ? cljs.tools.reader.register_gensym.call(null, form) : form), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)) : cljs.core.truth_(cljs.tools.reader.unquote_QMARK_.call(null, form)) ? cljs.core.second.call(null, form) : cljs.core.truth_(cljs.tools.reader.unquote_splicing_QMARK_.call(null, form)) ? function() {
    throw cljs.core.ex_info.call(null, "unquote-splice not in list", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-state", "illegal-state", -1519851182)], null));
  }() : cljs.core.coll_QMARK_.call(null, form) ? (!(form == null) ? form.cljs$lang$protocol_mask$partition0$ & 67108864 || form.cljs$core$IRecord$ ? true : false : false) ? form : cljs.core.map_QMARK_.call(null, form) ? cljs.tools.reader.syntax_quote_coll.call(null, cljs.tools.reader.map_func.call(null, form), cljs.tools.reader.flatten_map.call(null, form)) : cljs.core.vector_QMARK_.call(null, form) ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.tools.reader.syntax_quote_coll.call(null, 
  null, form)), new cljs.core.Symbol("cljs.core", "vec", "cljs.core/vec", 307622519, null)) : cljs.core.set_QMARK_.call(null, form) ? cljs.tools.reader.syntax_quote_coll.call(null, new cljs.core.Symbol("cljs.core", "hash-set", "cljs.core/hash-set", 1130426749, null), form) : cljs.core.seq_QMARK_.call(null, form) || cljs.core.list_QMARK_.call(null, form) ? function() {
    var seq = cljs.core.seq.call(null, form);
    if (seq) {
      return cljs.tools.reader.syntax_quote_coll.call(null, null, seq);
    } else {
      return cljs.core.list(new cljs.core.Symbol("cljs.core", "list", "cljs.core/list", -1331406371, null));
    }
  }() : function() {
    throw cljs.core.ex_info.call(null, "Unknown Collection type", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "unsupported-operation", "unsupported-operation", 1890540953)], null));
  }() : cljs.core.truth_(function() {
    var or__4060__auto__ = form instanceof cljs.core.Keyword;
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      var or__4060__auto____$1 = typeof form === "number";
      if (or__4060__auto____$1) {
        return or__4060__auto____$1;
      } else {
        var or__4060__auto____$2 = typeof form === "string";
        if (or__4060__auto____$2) {
          return or__4060__auto____$2;
        } else {
          var or__4060__auto____$3 = form == null;
          if (or__4060__auto____$3) {
            return or__4060__auto____$3;
          } else {
            var or__4060__auto____$4 = cljs.tools.reader.bool_QMARK_.call(null, form);
            if (cljs.core.truth_(or__4060__auto____$4)) {
              return or__4060__auto____$4;
            } else {
              return form instanceof RegExp;
            }
          }
        }
      }
    }
  }()) ? form : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, form), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)));
};
cljs.tools.reader.read_syntax_quote = function cljs$tools$reader$read_syntax_quote(rdr, backquote, opts, pending_forms) {
  var gensym_env7778 = cljs.tools.reader.gensym_env;
  cljs.tools.reader.gensym_env = cljs.core.PersistentArrayMap.EMPTY;
  try {
    return cljs.tools.reader.syntax_quote_STAR_.call(null, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
  } finally {
    cljs.tools.reader.gensym_env = gensym_env7778;
  }
};
cljs.tools.reader.macros = function cljs$tools$reader$macros(ch) {
  var G__7780 = ch;
  switch(G__7780) {
    case '"':
      return cljs.tools.reader.read_string_STAR_;
      break;
    case ":":
      return cljs.tools.reader.read_keyword;
      break;
    case ";":
      return cljs.tools.reader.impl.commons.read_comment;
      break;
    case "'":
      return cljs.tools.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
      break;
    case "@":
      return cljs.tools.reader.wrapping_reader.call(null, new cljs.core.Symbol("clojure.core", "deref", "clojure.core/deref", 188719157, null));
      break;
    case "^":
      return cljs.tools.reader.read_meta;
      break;
    case "`":
      return cljs.tools.reader.read_syntax_quote;
      break;
    case "~":
      return cljs.tools.reader.read_unquote;
      break;
    case "(":
      return cljs.tools.reader.read_list;
      break;
    case ")":
      return cljs.tools.reader.read_unmatched_delimiter;
      break;
    case "[":
      return cljs.tools.reader.read_vector;
      break;
    case "]":
      return cljs.tools.reader.read_unmatched_delimiter;
      break;
    case "{":
      return cljs.tools.reader.read_map;
      break;
    case "}":
      return cljs.tools.reader.read_unmatched_delimiter;
      break;
    case "\\":
      return cljs.tools.reader.read_char_STAR_;
      break;
    case "%":
      return cljs.tools.reader.read_arg;
      break;
    case "#":
      return cljs.tools.reader.read_dispatch;
      break;
    default:
      return null;
  }
};
cljs.tools.reader.dispatch_macros = function cljs$tools$reader$dispatch_macros(ch) {
  var G__7783 = ch;
  switch(G__7783) {
    case "^":
      return cljs.tools.reader.read_meta;
      break;
    case "'":
      return cljs.tools.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "var", "var", 870848730, null));
      break;
    case "(":
      return cljs.tools.reader.read_fn;
      break;
    case "{":
      return cljs.tools.reader.read_set;
      break;
    case "<":
      return cljs.tools.reader.impl.commons.throwing_reader.call(null, "Unreadable form");
      break;
    case '"':
      return cljs.tools.reader.read_regex;
      break;
    case "!":
      return cljs.tools.reader.impl.commons.read_comment;
      break;
    case "_":
      return cljs.tools.reader.read_discard;
      break;
    case "?":
      return cljs.tools.reader.read_cond;
      break;
    default:
      return null;
  }
};
cljs.tools.reader.emit_ctor = function cljs$tools$reader$emit_ctor(type, ns, record, val) {
  var method = [cljs.core.str(ns), cljs.core.str("."), cljs.core.str(cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "extended", "extended", -1515212057), type) ? "map" : null), cljs.core.str("__GT_"), cljs.core.str(cljs.tools.reader.impl.utils.munge.call(null, record))].join("");
  return cljs.core.apply.call(null, eval(method), val);
};
cljs.tools.reader.read_ctor = function cljs$tools$reader$read_ctor(rdr, class_name, opts, pending_forms) {
  var ns = cljs.core.namespace.call(null, class_name);
  var ns_parts = clojure.string.split.call(null, class_name, /[\.\/]/);
  var record = cljs.core.truth_(ns) ? cljs.core.name.call(null, class_name) : cljs.core.last.call(null, ns_parts);
  var ns__$1 = function() {
    var or__4060__auto__ = ns;
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return clojure.string.join.call(null, ".", cljs.core.butlast.call(null, ns_parts));
    }
  }();
  var ch = cljs.tools.reader.impl.commons.read_past.call(null, cljs.tools.reader.impl.utils.whitespace_QMARK_, rdr);
  var temp__4423__auto__ = function() {
    var G__7788 = ch;
    switch(G__7788) {
      case "[":
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["]", new cljs.core.Keyword(null, "short", "short", 1928760516)], null);
        break;
      case "{":
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["}", new cljs.core.Keyword(null, "extended", "extended", -1515212057)], null);
        break;
      default:
        return null;
    }
  }();
  if (cljs.core.truth_(temp__4423__auto__)) {
    var vec__7789 = temp__4423__auto__;
    var end_ch = cljs.core.nth.call(null, vec__7789, 0, null);
    var form = cljs.core.nth.call(null, vec__7789, 1, null);
    var entries = cljs.tools.reader.read_delimited.call(null, end_ch, rdr, opts, pending_forms);
    var G__7790 = form instanceof cljs.core.Keyword ? form.fqn : null;
    switch(G__7790) {
      case "short":
        return cljs.tools.reader.emit_ctor.call(null, new cljs.core.Keyword(null, "short", "short", 1928760516), ns__$1, record, entries);
        break;
      case "extended":
        var vals = cljs.core.apply.call(null, cljs.core.hash_map, entries);
        var s_7793 = cljs.core.keys.call(null, vals);
        while (true) {
          if (cljs.core.truth_(s_7793)) {
            if (!(cljs.core.first.call(null, s_7793) instanceof cljs.core.Keyword)) {
              cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Unreadable ctor form: key must be of type cljs.core.Keyword");
            } else {
              var G__7794 = cljs.core.next.call(null, s_7793);
              s_7793 = G__7794;
              continue;
            }
          } else {
          }
          break;
        }
        return cljs.tools.reader.emit_ctor.call(null, new cljs.core.Keyword(null, "extended", "extended", -1515212057), ns__$1, record, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [vals], null));
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(form)].join(""));;
    }
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid reader constructor form");
  }
};
cljs.tools.reader.read_tagged = function cljs$tools$reader$read_tagged(rdr, initch, opts, pending_forms) {
  var tag = cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms);
  if (!(tag instanceof cljs.core.Symbol)) {
    cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Reader tag must be a symbol");
  } else {
  }
  if (cljs.core.truth_(cljs.tools.reader._STAR_suppress_read_STAR_)) {
    return cljs.core.tagged_literal.call(null, tag, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
  } else {
    var temp__4423__auto__ = function() {
      var or__4060__auto__ = cljs.tools.reader._STAR_data_readers_STAR_.call(null, tag);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return cljs.tools.reader.default_data_readers.call(null, tag);
      }
    }();
    if (cljs.core.truth_(temp__4423__auto__)) {
      var f = temp__4423__auto__;
      return f.call(null, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
    } else {
      if (cljs.core.name.call(null, tag).indexOf(".") > 1) {
        return cljs.tools.reader.read_ctor.call(null, rdr, tag, opts, pending_forms);
      } else {
        var temp__4423__auto____$1 = cljs.tools.reader._STAR_default_data_reader_fn_STAR_;
        if (cljs.core.truth_(temp__4423__auto____$1)) {
          var f = temp__4423__auto____$1;
          return f.call(null, tag, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
        } else {
          return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "No reader function for tag ", cljs.core.name.call(null, tag));
        }
      }
    }
  }
};
cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.PersistentArrayMap.EMPTY;
cljs.tools.reader._STAR_default_data_reader_fn_STAR_ = null;
cljs.tools.reader._STAR_suppress_read_STAR_ = false;
cljs.tools.reader.default_data_readers = cljs.core.PersistentArrayMap.EMPTY;
cljs.tools.reader.read_STAR__internal = function cljs$tools$reader$read_STAR__internal(reader, eof_error_QMARK_, sentinel, return_on, opts, pending_forms) {
  while (true) {
    if (cljs.tools.reader.reader_types.source_logging_reader_QMARK_.call(null, reader) && !cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, cljs.tools.reader.reader_types.peek_char.call(null, reader))) {
      return cljs.tools.reader.reader_types.log_source_STAR_.call(null, reader, function() {
        while (true) {
          if (!goog.array.isEmpty(pending_forms)) {
            var form = pending_forms[0];
            goog.array.removeAt(pending_forms, 0);
            return form;
          } else {
            var ch = cljs.tools.reader.reader_types.read_char.call(null, reader);
            if (cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch)) {
              continue;
            } else {
              if (ch == null) {
                if (eof_error_QMARK_) {
                  return cljs.tools.reader.reader_types.reader_error.call(null, reader, "EOF");
                } else {
                  return sentinel;
                }
              } else {
                if (ch === return_on) {
                  return cljs.tools.reader.READ_FINISHED;
                } else {
                  if (cljs.tools.reader.impl.commons.number_literal_QMARK_.call(null, reader, ch)) {
                    return cljs.tools.reader.read_number.call(null, reader, ch);
                  } else {
                    var f = cljs.tools.reader.macros.call(null, ch);
                    if (!(f == null)) {
                      var res = f.call(null, reader, ch, opts, pending_forms);
                      if (res === reader) {
                        continue;
                      } else {
                        return res;
                      }
                    } else {
                      return cljs.tools.reader.read_symbol.call(null, reader, ch);
                    }
                  }
                }
              }
            }
          }
          break;
        }
      });
    } else {
      if (!goog.array.isEmpty(pending_forms)) {
        var form = pending_forms[0];
        goog.array.removeAt(pending_forms, 0);
        return form;
      } else {
        var ch = cljs.tools.reader.reader_types.read_char.call(null, reader);
        if (cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch)) {
          continue;
        } else {
          if (ch == null) {
            if (eof_error_QMARK_) {
              return cljs.tools.reader.reader_types.reader_error.call(null, reader, "EOF");
            } else {
              return sentinel;
            }
          } else {
            if (ch === return_on) {
              return cljs.tools.reader.READ_FINISHED;
            } else {
              if (cljs.tools.reader.impl.commons.number_literal_QMARK_.call(null, reader, ch)) {
                return cljs.tools.reader.read_number.call(null, reader, ch);
              } else {
                var f = cljs.tools.reader.macros.call(null, ch);
                if (!(f == null)) {
                  var res = f.call(null, reader, ch, opts, pending_forms);
                  if (res === reader) {
                    continue;
                  } else {
                    return res;
                  }
                } else {
                  return cljs.tools.reader.read_symbol.call(null, reader, ch);
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
cljs.tools.reader.read_STAR_ = function cljs$tools$reader$read_STAR_() {
  var args7795 = [];
  var len__5099__auto___7799 = arguments.length;
  var i__5100__auto___7800 = 0;
  while (true) {
    if (i__5100__auto___7800 < len__5099__auto___7799) {
      args7795.push(arguments[i__5100__auto___7800]);
      var G__7801 = i__5100__auto___7800 + 1;
      i__5100__auto___7800 = G__7801;
      continue;
    } else {
    }
    break;
  }
  var G__7797 = args7795.length;
  switch(G__7797) {
    case 5:
      return cljs.tools.reader.read_STAR_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.tools.reader.read_STAR_.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7795.length)].join(""));;
  }
};
cljs.tools.reader.read_STAR_.cljs$core$IFn$_invoke$arity$5 = function(reader, eof_error_QMARK_, sentinel, opts, pending_forms) {
  return cljs.tools.reader.read_STAR_.call(null, reader, eof_error_QMARK_, sentinel, null, opts, pending_forms);
};
cljs.tools.reader.read_STAR_.cljs$core$IFn$_invoke$arity$6 = function(reader, eof_error_QMARK_, sentinel, return_on, opts, pending_forms) {
  try {
    return cljs.tools.reader.read_STAR__internal.call(null, reader, eof_error_QMARK_, sentinel, return_on, opts, pending_forms);
  } catch (e7798) {
    if (e7798 instanceof Error) {
      var e = e7798;
      if (cljs.tools.reader.impl.utils.ex_info_QMARK_.call(null, e)) {
        var d = cljs.core.ex_data.call(null, e);
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "reader-exception", "reader-exception", -1938323098), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(d))) {
          throw e;
        } else {
          throw cljs.core.ex_info.call(null, e.message, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "reader-exception", "reader-exception", -1938323098)], null), d, cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, reader)) ? new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "line", "line", 212345235), cljs.tools.reader.reader_types.get_line_number.call(null, 
          reader), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.tools.reader.reader_types.get_column_number.call(null, reader), new cljs.core.Keyword(null, "file", "file", -1269645878), cljs.tools.reader.reader_types.get_file_name.call(null, reader)], null) : null), e);
        }
      } else {
        throw cljs.core.ex_info.call(null, e.message, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "reader-exception", "reader-exception", -1938323098)], null), cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, reader)) ? new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "line", "line", 212345235), cljs.tools.reader.reader_types.get_line_number.call(null, 
        reader), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.tools.reader.reader_types.get_column_number.call(null, reader), new cljs.core.Keyword(null, "file", "file", -1269645878), cljs.tools.reader.reader_types.get_file_name.call(null, reader)], null) : null), e);
      }
    } else {
      throw e7798;
    }
  }
};
cljs.tools.reader.read_STAR_.cljs$lang$maxFixedArity = 6;
cljs.tools.reader.read = function cljs$tools$reader$read() {
  var args7803 = [];
  var len__5099__auto___7809 = arguments.length;
  var i__5100__auto___7810 = 0;
  while (true) {
    if (i__5100__auto___7810 < len__5099__auto___7809) {
      args7803.push(arguments[i__5100__auto___7810]);
      var G__7811 = i__5100__auto___7810 + 1;
      i__5100__auto___7810 = G__7811;
      continue;
    } else {
    }
    break;
  }
  var G__7805 = args7803.length;
  switch(G__7805) {
    case 1:
      return cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7803.length)].join(""));;
  }
};
cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$1 = function(reader) {
  return cljs.tools.reader.read.call(null, reader, true, null);
};
cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$2 = function(p__7806, reader) {
  var map__7807 = p__7806;
  var map__7807__$1 = (!(map__7807 == null) ? map__7807.cljs$lang$protocol_mask$partition0$ & 64 || map__7807.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7807) : map__7807;
  var opts = map__7807__$1;
  var eof = cljs.core.get.call(null, map__7807__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237), new cljs.core.Keyword(null, "eofthrow", "eofthrow", -334166531));
  return cljs.tools.reader.read_STAR_.call(null, reader, cljs.core._EQ_.call(null, eof, new cljs.core.Keyword(null, "eofthrow", "eofthrow", -334166531)), eof, null, opts, cljs.core.to_array.call(null, cljs.core.PersistentVector.EMPTY));
};
cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$3 = function(reader, eof_error_QMARK_, sentinel) {
  return cljs.tools.reader.read_STAR_.call(null, reader, eof_error_QMARK_, sentinel, null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.to_array.call(null, cljs.core.PersistentVector.EMPTY));
};
cljs.tools.reader.read.cljs$lang$maxFixedArity = 3;
cljs.tools.reader.read_string = function cljs$tools$reader$read_string() {
  var args7813 = [];
  var len__5099__auto___7816 = arguments.length;
  var i__5100__auto___7817 = 0;
  while (true) {
    if (i__5100__auto___7817 < len__5099__auto___7816) {
      args7813.push(arguments[i__5100__auto___7817]);
      var G__7818 = i__5100__auto___7817 + 1;
      i__5100__auto___7817 = G__7818;
      continue;
    } else {
    }
    break;
  }
  var G__7815 = args7813.length;
  switch(G__7815) {
    case 1:
      return cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7813.length)].join(""));;
  }
};
cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.tools.reader.read_string.call(null, cljs.core.PersistentArrayMap.EMPTY, s);
};
cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$2 = function(opts, s) {
  if (cljs.core.truth_(function() {
    var and__4048__auto__ = s;
    if (cljs.core.truth_(and__4048__auto__)) {
      return !(s === "");
    } else {
      return and__4048__auto__;
    }
  }())) {
    return cljs.tools.reader.read.call(null, opts, cljs.tools.reader.reader_types.string_push_back_reader.call(null, s));
  } else {
    return null;
  }
};
cljs.tools.reader.read_string.cljs$lang$maxFixedArity = 2;
goog.provide("cljs.env");
goog.require("cljs.core");
cljs.env._STAR_compiler_STAR_ = null;
cljs.env.default_compiler_env = function cljs$env$default_compiler_env() {
  var args7592 = [];
  var len__5099__auto___7595 = arguments.length;
  var i__5100__auto___7596 = 0;
  while (true) {
    if (i__5100__auto___7596 < len__5099__auto___7595) {
      args7592.push(arguments[i__5100__auto___7596]);
      var G__7597 = i__5100__auto___7596 + 1;
      i__5100__auto___7596 = G__7597;
      continue;
    } else {
    }
    break;
  }
  var G__7594 = args7592.length;
  switch(G__7594) {
    case 0:
      return cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7592.length)].join(""));;
  }
};
cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.env.default_compiler_env.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$1 = function(options) {
  return cljs.core.atom.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null)], null)], null), new cljs.core.Keyword(null, 
  "options", "options", 99638489), options], null)));
};
cljs.env.default_compiler_env.cljs$lang$maxFixedArity = 1;
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function clojure$set$bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(max) {
    return function(p1__7531_SHARP_) {
      return max === p1__7531_SHARP_;
    };
  }(max), coll));
};
clojure.set.union = function clojure$set$union() {
  var args7532 = [];
  var len__5099__auto___7538 = arguments.length;
  var i__5100__auto___7539 = 0;
  while (true) {
    if (i__5100__auto___7539 < len__5099__auto___7538) {
      args7532.push(arguments[i__5100__auto___7539]);
      var G__7540 = i__5100__auto___7539 + 1;
      i__5100__auto___7539 = G__7540;
      continue;
    } else {
    }
    break;
  }
  var G__7537 = args7532.length;
  switch(G__7537) {
    case 0:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args7532.slice(2), 0);
      return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5118__auto__);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.union.cljs$lang$applyTo = function(seq7533) {
  var G__7534 = cljs.core.first.call(null, seq7533);
  var seq7533__$1 = cljs.core.next.call(null, seq7533);
  var G__7535 = cljs.core.first.call(null, seq7533__$1);
  var seq7533__$2 = cljs.core.next.call(null, seq7533__$1);
  return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(G__7534, G__7535, seq7533__$2);
};
clojure.set.union.cljs$lang$maxFixedArity = 2;
clojure.set.intersection = function clojure$set$intersection() {
  var args7543 = [];
  var len__5099__auto___7549 = arguments.length;
  var i__5100__auto___7550 = 0;
  while (true) {
    if (i__5100__auto___7550 < len__5099__auto___7549) {
      args7543.push(arguments[i__5100__auto___7550]);
      var G__7551 = i__5100__auto___7550 + 1;
      i__5100__auto___7550 = G__7551;
      continue;
    } else {
    }
    break;
  }
  var G__7548 = args7543.length;
  switch(G__7548) {
    case 1:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args7543.slice(2), 0);
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5118__auto__);
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  while (true) {
    if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
      var G__7553 = s2;
      var G__7554 = s1;
      s1 = G__7553;
      s2 = G__7554;
      continue;
    } else {
      return cljs.core.reduce.call(null, function(s1, s2) {
        return function(result, item) {
          if (cljs.core.contains_QMARK_.call(null, s2, item)) {
            return result;
          } else {
            return cljs.core.disj.call(null, result, item);
          }
        };
      }(s1, s2), s1, s1);
    }
    break;
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__7542_SHARP_) {
    return -cljs.core.count.call(null, p1__7542_SHARP_);
  }, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, clojure.set.intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.intersection.cljs$lang$applyTo = function(seq7544) {
  var G__7545 = cljs.core.first.call(null, seq7544);
  var seq7544__$1 = cljs.core.next.call(null, seq7544);
  var G__7546 = cljs.core.first.call(null, seq7544__$1);
  var seq7544__$2 = cljs.core.next.call(null, seq7544__$1);
  return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(G__7545, G__7546, seq7544__$2);
};
clojure.set.intersection.cljs$lang$maxFixedArity = 2;
clojure.set.difference = function clojure$set$difference() {
  var args7555 = [];
  var len__5099__auto___7561 = arguments.length;
  var i__5100__auto___7562 = 0;
  while (true) {
    if (i__5100__auto___7562 < len__5099__auto___7561) {
      args7555.push(arguments[i__5100__auto___7562]);
      var G__7563 = i__5100__auto___7562 + 1;
      i__5100__auto___7562 = G__7563;
      continue;
    } else {
    }
    break;
  }
  var G__7560 = args7555.length;
  switch(G__7560) {
    case 1:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args7555.slice(2), 0);
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5118__auto__);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, function(result, item) {
      if (cljs.core.contains_QMARK_.call(null, s2, item)) {
        return cljs.core.disj.call(null, result, item);
      } else {
        return result;
      }
    }, s1, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  return cljs.core.reduce.call(null, clojure.set.difference, s1, cljs.core.conj.call(null, sets, s2));
};
clojure.set.difference.cljs$lang$applyTo = function(seq7556) {
  var G__7557 = cljs.core.first.call(null, seq7556);
  var seq7556__$1 = cljs.core.next.call(null, seq7556);
  var G__7558 = cljs.core.first.call(null, seq7556__$1);
  var seq7556__$2 = cljs.core.next.call(null, seq7556__$1);
  return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(G__7557, G__7558, seq7556__$2);
};
clojure.set.difference.cljs$lang$maxFixedArity = 2;
clojure.set.select = function clojure$set$select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (pred.call(null, k)) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function clojure$set$project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__7565_SHARP_) {
    return cljs.core.select_keys.call(null, p1__7565_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function clojure$set$rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__7568) {
    var vec__7569 = p__7568;
    var old = cljs.core.nth.call(null, vec__7569, 0, null);
    var new$ = cljs.core.nth.call(null, vec__7569, 1, null);
    if (cljs.core.contains_QMARK_.call(null, map, old)) {
      return cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, map, old));
    } else {
      return m;
    }
  }, cljs.core.apply.call(null, cljs.core.dissoc, map, cljs.core.keys.call(null, kmap)), kmap);
};
clojure.set.rename = function clojure$set$rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__7570_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__7570_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function clojure$set$index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function clojure$set$map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__7573) {
    var vec__7574 = p__7573;
    var k = cljs.core.nth.call(null, vec__7574, 0, null);
    var v = cljs.core.nth.call(null, vec__7574, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function clojure$set$join() {
  var args7579 = [];
  var len__5099__auto___7584 = arguments.length;
  var i__5100__auto___7585 = 0;
  while (true) {
    if (i__5100__auto___7585 < len__5099__auto___7584) {
      args7579.push(arguments[i__5100__auto___7585]);
      var G__7586 = i__5100__auto___7585 + 1;
      i__5100__auto___7585 = G__7586;
      continue;
    } else {
    }
    break;
  }
  var G__7581 = args7579.length;
  switch(G__7581) {
    case 2:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7579.length)].join(""));;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$2 = function(xrel, yrel) {
  if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
    var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
    var vec__7582 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
    var r = cljs.core.nth.call(null, vec__7582, 0, null);
    var s = cljs.core.nth.call(null, vec__7582, 1, null);
    var idx = clojure.set.index.call(null, r, ks);
    return cljs.core.reduce.call(null, function(ks, vec__7582, r, s, idx) {
      return function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if (found) {
          return cljs.core.reduce.call(null, function(found, ks, vec__7582, r, s, idx) {
            return function(p1__7575_SHARP_, p2__7576_SHARP_) {
              return cljs.core.conj.call(null, p1__7575_SHARP_, cljs.core.merge.call(null, p2__7576_SHARP_, x));
            };
          }(found, ks, vec__7582, r, s, idx), ret, found);
        } else {
          return ret;
        }
      };
    }(ks, vec__7582, r, s, idx), cljs.core.PersistentHashSet.EMPTY, s);
  } else {
    return cljs.core.PersistentHashSet.EMPTY;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$3 = function(xrel, yrel, km) {
  var vec__7583 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
  var r = cljs.core.nth.call(null, vec__7583, 0, null);
  var s = cljs.core.nth.call(null, vec__7583, 1, null);
  var k = cljs.core.nth.call(null, vec__7583, 2, null);
  var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
  return cljs.core.reduce.call(null, function(vec__7583, r, s, k, idx) {
    return function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if (found) {
        return cljs.core.reduce.call(null, function(found, vec__7583, r, s, k, idx) {
          return function(p1__7577_SHARP_, p2__7578_SHARP_) {
            return cljs.core.conj.call(null, p1__7577_SHARP_, cljs.core.merge.call(null, p2__7578_SHARP_, x));
          };
        }(found, vec__7583, r, s, k, idx), ret, found);
      } else {
        return ret;
      }
    };
  }(vec__7583, r, s, k, idx), cljs.core.PersistentHashSet.EMPTY, s);
};
clojure.set.join.cljs$lang$maxFixedArity = 3;
clojure.set.subset_QMARK_ = function clojure$set$subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__7588_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__7588_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function clojure$set$superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__7589_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__7589_SHARP_);
  }, set2);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.reader.PushbackReader = {};
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$read_char$arity$1 == null)) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4696__auto__ = reader == null ? null : reader;
    var m__4697__auto__ = cljs.reader.read_char[goog.typeOf(x__4696__auto__)];
    if (!(m__4697__auto__ == null)) {
      return m__4697__auto__.call(null, reader);
    } else {
      var m__4697__auto____$1 = cljs.reader.read_char["_"];
      if (!(m__4697__auto____$1 == null)) {
        return m__4697__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
      }
    }
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$unread$arity$2 == null)) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4696__auto__ = reader == null ? null : reader;
    var m__4697__auto__ = cljs.reader.unread[goog.typeOf(x__4696__auto__)];
    if (!(m__4697__auto__ == null)) {
      return m__4697__auto__.call(null, reader, ch);
    } else {
      var m__4697__auto____$1 = cljs.reader.unread["_"];
      if (!(m__4697__auto____$1 == null)) {
        return m__4697__auto____$1.call(null, reader, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
      }
    }
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "buffer", "buffer", -2037140571, null), cljs.core.with_meta(new cljs.core.Symbol(null, "idx", "idx", -1600747296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4639__auto__, writer__4640__auto__, opt__4641__auto__) {
  return cljs.core._write.call(null, writer__4640__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__4060__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__4060__auto__)) {
    return or__4060__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function cljs$reader$reader_error() {
  var args__5106__auto__ = [];
  var len__5099__auto___10745 = arguments.length;
  var i__5100__auto___10746 = 0;
  while (true) {
    if (i__5100__auto___10746 < len__5099__auto___10745) {
      args__5106__auto__.push(arguments[i__5100__auto___10746]);
      var G__10747 = i__5100__auto___10746 + 1;
      i__5100__auto___10746 = G__10747;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 1 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(1), 0) : null;
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5107__auto__);
};
cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
};
cljs.reader.reader_error.cljs$lang$maxFixedArity = 1;
cljs.reader.reader_error.cljs$lang$applyTo = function(seq10743) {
  var G__10744 = cljs.core.first.call(null, seq10743);
  var seq10743__$1 = cljs.core.next.call(null, seq10743);
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__10744, seq10743__$1);
};
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__4048__auto__ = !(ch === "#");
  if (and__4048__auto__) {
    var and__4048__auto____$1 = !(ch === "'");
    if (and__4048__auto____$1) {
      var and__4048__auto____$2 = !(ch === ":");
      if (and__4048__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__4048__auto____$2;
      }
    } else {
      return and__4048__auto____$1;
    }
  } else {
    return and__4048__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__10748 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__10749 = cljs.reader.read_char.call(null, rdr);
      sb = G__10748;
      ch = G__10749;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return -parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return '"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__10750 = cljs.reader.read_char.call(null, rdr);
      ch = G__10750;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4423__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var macrofn = temp__4423__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__10751 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__10751;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__10752 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__10752;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4423__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var obj = temp__4423__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4060__auto__ = ch == null;
      if (or__4060__auto__) {
        return or__4060__auto__;
      } else {
        var or__4060__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__4060__auto____$1) {
          return or__4060__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__4060__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__10753 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__10754 = cljs.reader.read_char.call(null, reader);
      buffer = G__10753;
      ch = G__10754;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__10755 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__10756 = cljs.reader.read_char.call(null, reader);
        buffer = G__10755;
        ch = G__10756;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__10757 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__10758 = cljs.reader.read_char.call(null, reader);
          buffer = G__10757;
          ch = G__10758;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__10763 = function() {
            var G__10761 = buffer;
            G__10761.append(nch);
            return G__10761;
          }();
          var G__10764 = cljs.reader.read_char.call(null, reader);
          buffer = G__10763;
          ch = G__10764;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__10765 = function() {
            var G__10762 = buffer;
            G__10762.append(ch);
            return G__10762;
          }();
          var G__10766 = cljs.reader.read_char.call(null, reader);
          buffer = G__10765;
          ch = G__10766;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__4048__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__4048__auto__)) {
      return !(token.length === 1);
    } else {
      return and__4048__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 262144 || o.cljs$core$IWithMeta$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o)) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "<") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__10769 = reader;
        var G__10770 = eof_is_error;
        var G__10771 = sentinel;
        var G__10772 = is_recursive;
        reader = G__10769;
        eof_is_error = G__10770;
        sentinel = G__10771;
        is_recursive = G__10772;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__10773 = cljs.reader.read_comment.call(null, reader, ch);
          var G__10774 = eof_is_error;
          var G__10775 = sentinel;
          var G__10776 = is_recursive;
          reader = G__10773;
          eof_is_error = G__10774;
          sentinel = G__10775;
          is_recursive = G__10776;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__10777 = reader;
            var G__10778 = eof_is_error;
            var G__10779 = sentinel;
            var G__10780 = is_recursive;
            reader = G__10777;
            eof_is_error = G__10778;
            sentinel = G__10779;
            is_recursive = G__10780;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  if (typeof s === "string") {
  } else {
    throw new Error("Cannot read from non-string object.");
  }
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__10781 = b.append("0");
          b = G__10781;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div));
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  var and__4048__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if (cljs.core.truth_(and__4048__auto__)) {
    var or__4060__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400);
    }
  } else {
    return and__4048__auto__;
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("<="), cljs.core.str(n), cljs.core.str("<="), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__10783 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__10783, 0, null);
  var years = cljs.core.nth.call(null, vec__10783, 1, null);
  var months = cljs.core.nth.call(null, vec__10783, 2, null);
  var days = cljs.core.nth.call(null, vec__10783, 3, null);
  var hours = cljs.core.nth.call(null, vec__10783, 4, null);
  var minutes = cljs.core.nth.call(null, vec__10783, 5, null);
  var seconds = cljs.core.nth.call(null, vec__10783, 6, null);
  var fraction = cljs.core.nth.call(null, vec__10783, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__10783, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__10783, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__10783, 10, null);
  var v = vec__10783;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__4060__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__4060__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__4060__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__4060__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__4060__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__4060__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__4060__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__4060__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4423__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var vec__10785 = temp__4423__auto__;
    var years = cljs.core.nth.call(null, vec__10785, 0, null);
    var months = cljs.core.nth.call(null, vec__10785, 1, null);
    var days = cljs.core.nth.call(null, vec__10785, 2, null);
    var hours = cljs.core.nth.call(null, vec__10785, 3, null);
    var minutes = cljs.core.nth.call(null, vec__10785, 4, null);
    var seconds = cljs.core.nth.call(null, vec__10785, 5, null);
    var ms = cljs.core.nth.call(null, vec__10785, 6, null);
    var offset = cljs.core.nth.call(null, vec__10785, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__10798_10810 = cljs.core.seq.call(null, form);
    var chunk__10799_10811 = null;
    var count__10800_10812 = 0;
    var i__10801_10813 = 0;
    while (true) {
      if (i__10801_10813 < count__10800_10812) {
        var x_10814 = cljs.core._nth.call(null, chunk__10799_10811, i__10801_10813);
        arr.push(x_10814);
        var G__10815 = seq__10798_10810;
        var G__10816 = chunk__10799_10811;
        var G__10817 = count__10800_10812;
        var G__10818 = i__10801_10813 + 1;
        seq__10798_10810 = G__10815;
        chunk__10799_10811 = G__10816;
        count__10800_10812 = G__10817;
        i__10801_10813 = G__10818;
        continue;
      } else {
        var temp__4425__auto___10819 = cljs.core.seq.call(null, seq__10798_10810);
        if (temp__4425__auto___10819) {
          var seq__10798_10820__$1 = temp__4425__auto___10819;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10798_10820__$1)) {
            var c__4844__auto___10821 = cljs.core.chunk_first.call(null, seq__10798_10820__$1);
            var G__10822 = cljs.core.chunk_rest.call(null, seq__10798_10820__$1);
            var G__10823 = c__4844__auto___10821;
            var G__10824 = cljs.core.count.call(null, c__4844__auto___10821);
            var G__10825 = 0;
            seq__10798_10810 = G__10822;
            chunk__10799_10811 = G__10823;
            count__10800_10812 = G__10824;
            i__10801_10813 = G__10825;
            continue;
          } else {
            var x_10826 = cljs.core.first.call(null, seq__10798_10820__$1);
            arr.push(x_10826);
            var G__10827 = cljs.core.next.call(null, seq__10798_10820__$1);
            var G__10828 = null;
            var G__10829 = 0;
            var G__10830 = 0;
            seq__10798_10810 = G__10827;
            chunk__10799_10811 = G__10828;
            count__10800_10812 = G__10829;
            i__10801_10813 = G__10830;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = {};
      var seq__10804_10831 = cljs.core.seq.call(null, form);
      var chunk__10805_10832 = null;
      var count__10806_10833 = 0;
      var i__10807_10834 = 0;
      while (true) {
        if (i__10807_10834 < count__10806_10833) {
          var vec__10808_10835 = cljs.core._nth.call(null, chunk__10805_10832, i__10807_10834);
          var k_10836 = cljs.core.nth.call(null, vec__10808_10835, 0, null);
          var v_10837 = cljs.core.nth.call(null, vec__10808_10835, 1, null);
          obj[cljs.core.name.call(null, k_10836)] = v_10837;
          var G__10838 = seq__10804_10831;
          var G__10839 = chunk__10805_10832;
          var G__10840 = count__10806_10833;
          var G__10841 = i__10807_10834 + 1;
          seq__10804_10831 = G__10838;
          chunk__10805_10832 = G__10839;
          count__10806_10833 = G__10840;
          i__10807_10834 = G__10841;
          continue;
        } else {
          var temp__4425__auto___10842 = cljs.core.seq.call(null, seq__10804_10831);
          if (temp__4425__auto___10842) {
            var seq__10804_10843__$1 = temp__4425__auto___10842;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10804_10843__$1)) {
              var c__4844__auto___10844 = cljs.core.chunk_first.call(null, seq__10804_10843__$1);
              var G__10845 = cljs.core.chunk_rest.call(null, seq__10804_10843__$1);
              var G__10846 = c__4844__auto___10844;
              var G__10847 = cljs.core.count.call(null, c__4844__auto___10844);
              var G__10848 = 0;
              seq__10804_10831 = G__10845;
              chunk__10805_10832 = G__10846;
              count__10806_10833 = G__10847;
              i__10807_10834 = G__10848;
              continue;
            } else {
              var vec__10809_10849 = cljs.core.first.call(null, seq__10804_10843__$1);
              var k_10850 = cljs.core.nth.call(null, vec__10809_10849, 0, null);
              var v_10851 = cljs.core.nth.call(null, vec__10809_10849, 1, null);
              obj[cljs.core.name.call(null, k_10850)] = v_10851;
              var G__10852 = cljs.core.next.call(null, seq__10804_10843__$1);
              var G__10853 = null;
              var G__10854 = 0;
              var G__10855 = 0;
              seq__10804_10831 = G__10852;
              chunk__10805_10832 = G__10853;
              count__10806_10833 = G__10854;
              i__10807_10834 = G__10855;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return cljs.core.uuid.call(null, uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("cljs.tagged_literals");
goog.require("cljs.core");
goog.require("cljs.reader");
cljs.tagged_literals.read_queue = function cljs$tagged_literals$read_queue(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
  } else {
    throw new Error("Queue literal expects a vector for its elements.");
  }
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, form), new cljs.core.Symbol(null, "cljs.core.PersistentQueue.EMPTY", "cljs.core.PersistentQueue.EMPTY", 399917828, null)), new cljs.core.Symbol("cljs.core", "into", "cljs.core/into", 1879938733, null));
};
cljs.tagged_literals.read_uuid = function cljs$tagged_literals$read_uuid(form) {
  if (typeof form === "string") {
  } else {
    throw new Error("UUID literal expects a string as its representation.");
  }
  try {
    return cljs.core.uuid.call(null, form);
  } catch (e7526) {
    var e = e7526;
    throw new Error(e.message);
  }
};
cljs.tagged_literals.read_inst = function cljs$tagged_literals$read_inst(form) {
  if (typeof form === "string") {
  } else {
    throw new Error("Instance literal expects a string for its timestamp.");
  }
  try {
    return cljs.reader.read_date.call(null, form);
  } catch (e7528) {
    var e = e7528;
    throw new Error(e.message);
  }
};
cljs.tagged_literals.valid_js_literal_key_QMARK_ = function cljs$tagged_literals$valid_js_literal_key_QMARK_(k) {
  return typeof k === "string" || k instanceof cljs.core.Keyword && cljs.core.namespace.call(null, k) == null;
};
cljs.tagged_literals.JSValue = function(val) {
  this.val = val;
};
cljs.tagged_literals.JSValue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.tagged_literals.JSValue.cljs$lang$type = true;
cljs.tagged_literals.JSValue.cljs$lang$ctorStr = "cljs.tagged-literals/JSValue";
cljs.tagged_literals.JSValue.cljs$lang$ctorPrWriter = function(this__4639__auto__, writer__4640__auto__, opt__4641__auto__) {
  return cljs.core._write.call(null, writer__4640__auto__, "cljs.tagged-literals/JSValue");
};
cljs.tagged_literals.__GT_JSValue = function cljs$tagged_literals$__GT_JSValue(val) {
  return new cljs.tagged_literals.JSValue(val);
};
cljs.tagged_literals.read_js = function cljs$tagged_literals$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form) || cljs.core.map_QMARK_.call(null, form)) {
  } else {
    throw new Error("JavaScript literal must use map or vector notation");
  }
  if (!cljs.core.map_QMARK_.call(null, form) || cljs.core.every_QMARK_.call(null, cljs.tagged_literals.valid_js_literal_key_QMARK_, cljs.core.keys.call(null, form))) {
  } else {
    throw new Error("JavaScript literal keys must be strings or unqualified keywords");
  }
  return new cljs.tagged_literals.JSValue(form);
};
cljs.tagged_literals._STAR_cljs_data_readers_STAR_ = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Symbol(null, "queue", "queue", -1198599890, null), cljs.tagged_literals.read_queue, new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.tagged_literals.read_uuid, new cljs.core.Symbol(null, "inst", "inst", -2008473268, null), cljs.tagged_literals.read_inst, new cljs.core.Symbol(null, "js", "js", -886355190, null), cljs.tagged_literals.read_js], null);
goog.provide("cljs.analyzer");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("goog.string");
goog.require("cljs.tools.reader");
goog.require("cljs.tagged_literals");
goog.require("cljs.tools.reader.reader_types");
goog.require("cljs.env");
goog.require("clojure.string");
goog.require("cljs.reader");
cljs.analyzer._STAR_cljs_ns_STAR_ = new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null);
cljs.analyzer._STAR_cljs_file_STAR_ = null;
cljs.analyzer._STAR_cljs_static_fns_STAR_ = false;
cljs.analyzer._STAR_cljs_macros_path_STAR_ = "/cljs/core";
cljs.analyzer._STAR_cljs_macros_is_classpath_STAR_ = true;
cljs.analyzer._STAR_cljs_dep_set_STAR_ = cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "dep-path", "dep-path", 723826558), cljs.core.PersistentVector.EMPTY], null));
cljs.analyzer._STAR_analyze_deps_STAR_ = true;
cljs.analyzer._STAR_load_tests_STAR_ = true;
cljs.analyzer._STAR_load_macros_STAR_ = true;
cljs.analyzer._STAR_reload_macros_STAR_ = false;
cljs.analyzer._STAR_macro_infer_STAR_ = true;
cljs.analyzer._STAR_file_defs_STAR_ = null;
cljs.analyzer._STAR_verbose_STAR_ = false;
cljs.analyzer._cljs_macros_loaded = cljs.core.atom.call(null, false);
cljs.analyzer._STAR_cljs_warnings_STAR_ = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "invoke-ctor", "invoke-ctor", -756052704), new cljs.core.Keyword(null, "extending-base-js-type", "extending-base-js-type", 432787264), new cljs.core.Keyword(null, "redef", "redef", 1032704258), new cljs.core.Keyword(null, "unsupported-js-module-type", "unsupported-js-module-type", 1806206180), new cljs.core.Keyword(null, "invalid-protocol-symbol", "invalid-protocol-symbol", 86246948), new cljs.core.Keyword(null, 
"protocol-duped-method", "protocol-duped-method", 15128166), new cljs.core.Keyword(null, "munged-namespace", "munged-namespace", -101986199), new cljs.core.Keyword(null, "single-segment-namespace", "single-segment-namespace", -491924469), new cljs.core.Keyword(null, "fn-arity", "fn-arity", -403576501), new cljs.core.Keyword(null, "variadic-max-arity", "variadic-max-arity", -14288402), new cljs.core.Keyword(null, "fn-deprecated", "fn-deprecated", 626877647), new cljs.core.Keyword(null, "undeclared-var", 
"undeclared-var", -1624364944), new cljs.core.Keyword(null, "preamble-missing", "preamble-missing", 220974801), new cljs.core.Keyword(null, "undeclared-protocol-symbol", "undeclared-protocol-symbol", 462882867), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "unprovided", "unprovided", -652330764), new cljs.core.Keyword(null, "ns-var-clash", "ns-var-clash", -280494668), new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), new cljs.core.Keyword(null, 
"undeclared-ns-form", "undeclared-ns-form", -248024137), new cljs.core.Keyword(null, "invalid-arithmetic", "invalid-arithmetic", 1917075065), new cljs.core.Keyword(null, "protocol-deprecated", "protocol-deprecated", 103233497), new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), new cljs.core.Keyword(null, "overload-arity", "overload-arity", 823206044), new cljs.core.Keyword(null, "protocol-multiple-impls", "protocol-multiple-impls", 794179260), new cljs.core.Keyword(null, "redef-in-file", 
"redef-in-file", -476530788), new cljs.core.Keyword(null, "protocol-invalid-method", "protocol-invalid-method", 522647516), new cljs.core.Keyword(null, "extend-type-invalid-method-shape", "extend-type-invalid-method-shape", 1424103549), new cljs.core.Keyword(null, "multiple-variadic-overloads", "multiple-variadic-overloads", 1110059837)], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, 
true]);
cljs.analyzer.js_reserved = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 61, ["typeof", null, "float", null, "implements", null, "else", null, "boolean", null, "abstract", null, "int", null, "static", null, "package", null, "this", null, "yield", null, "interface", null, "void", null, "delete", null, "class", null, "export", null, "var", null, "try", null, "long", null, "null", null, "return", null, "methods", null, "native", null, "private", null, "new", null, "for", 
null, "catch", null, "extends", null, "short", null, "protected", null, "throws", null, "synchronized", null, "transient", null, "super", null, "if", null, "let", null, "import", null, "char", null, "switch", null, "const", null, "case", null, "break", null, "volatile", null, "function", null, "continue", null, "final", null, "do", null, "double", null, "while", null, "public", null, "arguments", null, "debugger", null, "with", null, "instanceof", null, "default", null, "throw", null, "goto", null, 
"finally", null, "byte", null, "in", null, "enum", null], null), null);
cljs.analyzer.SENTINEL = {};
cljs.analyzer.gets = function cljs$analyzer$gets() {
  var args6736 = [];
  var len__5099__auto___6739 = arguments.length;
  var i__5100__auto___6740 = 0;
  while (true) {
    if (i__5100__auto___6740 < len__5099__auto___6739) {
      args6736.push(arguments[i__5100__auto___6740]);
      var G__6741 = i__5100__auto___6740 + 1;
      i__5100__auto___6740 = G__6741;
      continue;
    } else {
    }
    break;
  }
  var G__6738 = args6736.length;
  switch(G__6738) {
    case 3:
      return cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6736.length)].join(""));;
  }
};
cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$3 = function(m, k0, k1) {
  var m__$1 = cljs.core.get.call(null, m, k0, cljs.analyzer.SENTINEL);
  if (m__$1 === cljs.analyzer.SENTINEL) {
    return null;
  } else {
    return cljs.core.get.call(null, m__$1, k1);
  }
};
cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$4 = function(m, k0, k1, k2) {
  var m__$1 = cljs.core.get.call(null, m, k0, cljs.analyzer.SENTINEL);
  if (m__$1 === cljs.analyzer.SENTINEL) {
    return null;
  } else {
    var m__$2 = cljs.core.get.call(null, m__$1, k1, cljs.analyzer.SENTINEL);
    if (m__$2 === cljs.analyzer.SENTINEL) {
      return null;
    } else {
      return cljs.core.get.call(null, m__$2, k2);
    }
  }
};
cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$5 = function(m, k0, k1, k2, k3) {
  var m__$1 = cljs.core.get.call(null, m, k0, cljs.analyzer.SENTINEL);
  if (m__$1 === cljs.analyzer.SENTINEL) {
    return null;
  } else {
    var m__$2 = cljs.core.get.call(null, m__$1, k1, cljs.analyzer.SENTINEL);
    if (m__$2 === cljs.analyzer.SENTINEL) {
      return null;
    } else {
      var m__$3 = cljs.core.get.call(null, m__$2, k2, cljs.analyzer.SENTINEL);
      if (m__$3 === cljs.analyzer.SENTINEL) {
        return null;
      } else {
        return cljs.core.get.call(null, m__$3, k3);
      }
    }
  }
};
cljs.analyzer.gets.cljs$lang$maxFixedArity = 5;
cljs.analyzer.CLJ_NIL_SYM = new cljs.core.Symbol(null, "clj-nil", "clj-nil", 1321798654, null);
cljs.analyzer.NUMBER_SYM = new cljs.core.Symbol(null, "number", "number", -1084057331, null);
cljs.analyzer.STRING_SYM = new cljs.core.Symbol(null, "string", "string", -349010059, null);
cljs.analyzer.BOOLEAN_SYM = new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null);
cljs.analyzer.JS_STAR_SYM = new cljs.core.Symbol(null, "js*", "js*", -1134233646, null);
cljs.analyzer.DOT_SYM = new cljs.core.Symbol(null, ".", ".", 1975675962, null);
cljs.analyzer.NEW_SYM = new cljs.core.Symbol(null, "new", "new", -444906321, null);
cljs.analyzer.CLJS_CORE_SYM = new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null);
cljs.analyzer.CLJS_CORE_MACROS_SYM = new cljs.core.Symbol(null, "cljs.core$macros", "cljs.core$macros", -2057787548, null);
cljs.analyzer.IGNORE_SYM = new cljs.core.Symbol(null, "ignore", "ignore", 8989494, null);
cljs.analyzer.ANY_SYM = new cljs.core.Symbol(null, "any", "any", -948528346, null);
cljs.analyzer.cljs_seq_QMARK_ = function cljs$analyzer$cljs_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 64 || x.cljs$core$ISeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.analyzer.cljs_map_QMARK_ = function cljs$analyzer$cljs_map_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 1024 || x.cljs$core$IMap$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.analyzer.cljs_vector_QMARK_ = function cljs$analyzer$cljs_vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || x.cljs$core$IVector$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.analyzer.cljs_set_QMARK_ = function cljs$analyzer$cljs_set_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 4096 || x.cljs$core$ISet$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.analyzer.munge_path = function cljs$analyzer$munge_path(ss) {
  return cljs.core.munge.call(null, [cljs.core.str(ss)].join(""));
};
cljs.analyzer.ns__GT_relpath = function cljs$analyzer$ns__GT_relpath() {
  var args6751 = [];
  var len__5099__auto___6754 = arguments.length;
  var i__5100__auto___6755 = 0;
  while (true) {
    if (i__5100__auto___6755 < len__5099__auto___6754) {
      args6751.push(arguments[i__5100__auto___6755]);
      var G__6756 = i__5100__auto___6755 + 1;
      i__5100__auto___6755 = G__6756;
      continue;
    } else {
    }
    break;
  }
  var G__6753 = args6751.length;
  switch(G__6753) {
    case 1:
      return cljs.analyzer.ns__GT_relpath.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.ns__GT_relpath.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6751.length)].join(""));;
  }
};
cljs.analyzer.ns__GT_relpath.cljs$core$IFn$_invoke$arity$1 = function(ns) {
  return cljs.analyzer.ns__GT_relpath.call(null, ns, new cljs.core.Keyword(null, "cljs", "cljs", 1492417629));
};
cljs.analyzer.ns__GT_relpath.cljs$core$IFn$_invoke$arity$2 = function(ns, ext) {
  return [cljs.core.str(clojure.string.replace.call(null, cljs.analyzer.munge_path.call(null, ns), ".", "/")), cljs.core.str("."), cljs.core.str(cljs.core.name.call(null, ext))].join("");
};
cljs.analyzer.ns__GT_relpath.cljs$lang$maxFixedArity = 2;
cljs.analyzer.topo_sort = function cljs$analyzer$topo_sort() {
  var args6758 = [];
  var len__5099__auto___6771 = arguments.length;
  var i__5100__auto___6772 = 0;
  while (true) {
    if (i__5100__auto___6772 < len__5099__auto___6771) {
      args6758.push(arguments[i__5100__auto___6772]);
      var G__6773 = i__5100__auto___6772 + 1;
      i__5100__auto___6772 = G__6773;
      continue;
    } else {
    }
    break;
  }
  var G__6760 = args6758.length;
  switch(G__6760) {
    case 2:
      return cljs.analyzer.topo_sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.analyzer.topo_sort.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6758.length)].join(""));;
  }
};
cljs.analyzer.topo_sort.cljs$core$IFn$_invoke$arity$2 = function(x, get_deps) {
  return cljs.analyzer.topo_sort.call(null, x, 0, cljs.core.atom.call(null, cljs.core.sorted_map.call(null)), cljs.core.memoize.call(null, get_deps));
};
cljs.analyzer.topo_sort.cljs$core$IFn$_invoke$arity$4 = function(x, depth, state, memo_get_deps) {
  var deps = memo_get_deps.call(null, x);
  cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [depth], null), cljs.core.fnil.call(null, cljs.core.into, cljs.core.PersistentHashSet.EMPTY), deps);
  var seq__6761_6775 = cljs.core.seq.call(null, deps);
  var chunk__6762_6776 = null;
  var count__6763_6777 = 0;
  var i__6764_6778 = 0;
  while (true) {
    if (i__6764_6778 < count__6763_6777) {
      var dep_6779 = cljs.core._nth.call(null, chunk__6762_6776, i__6764_6778);
      cljs.analyzer.topo_sort.call(null, dep_6779, depth + 1, state, memo_get_deps);
      var G__6780 = seq__6761_6775;
      var G__6781 = chunk__6762_6776;
      var G__6782 = count__6763_6777;
      var G__6783 = i__6764_6778 + 1;
      seq__6761_6775 = G__6780;
      chunk__6762_6776 = G__6781;
      count__6763_6777 = G__6782;
      i__6764_6778 = G__6783;
      continue;
    } else {
      var temp__4425__auto___6784 = cljs.core.seq.call(null, seq__6761_6775);
      if (temp__4425__auto___6784) {
        var seq__6761_6785__$1 = temp__4425__auto___6784;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6761_6785__$1)) {
          var c__4844__auto___6786 = cljs.core.chunk_first.call(null, seq__6761_6785__$1);
          var G__6787 = cljs.core.chunk_rest.call(null, seq__6761_6785__$1);
          var G__6788 = c__4844__auto___6786;
          var G__6789 = cljs.core.count.call(null, c__4844__auto___6786);
          var G__6790 = 0;
          seq__6761_6775 = G__6787;
          chunk__6762_6776 = G__6788;
          count__6763_6777 = G__6789;
          i__6764_6778 = G__6790;
          continue;
        } else {
          var dep_6791 = cljs.core.first.call(null, seq__6761_6785__$1);
          cljs.analyzer.topo_sort.call(null, dep_6791, depth + 1, state, memo_get_deps);
          var G__6792 = cljs.core.next.call(null, seq__6761_6785__$1);
          var G__6793 = null;
          var G__6794 = 0;
          var G__6795 = 0;
          seq__6761_6775 = G__6792;
          chunk__6762_6776 = G__6793;
          count__6763_6777 = G__6794;
          i__6764_6778 = G__6795;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__6765_6796 = cljs.core.seq.call(null, cljs.core.subseq.call(null, cljs.core.deref.call(null, state), cljs.core._LT_, depth));
  var chunk__6766_6797 = null;
  var count__6767_6798 = 0;
  var i__6768_6799 = 0;
  while (true) {
    if (i__6768_6799 < count__6767_6798) {
      var vec__6769_6800 = cljs.core._nth.call(null, chunk__6766_6797, i__6768_6799);
      var _LT_depth_6801 = cljs.core.nth.call(null, vec__6769_6800, 0, null);
      var __6802 = cljs.core.nth.call(null, vec__6769_6800, 1, null);
      cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [_LT_depth_6801], null), clojure.set.difference, deps);
      var G__6803 = seq__6765_6796;
      var G__6804 = chunk__6766_6797;
      var G__6805 = count__6767_6798;
      var G__6806 = i__6768_6799 + 1;
      seq__6765_6796 = G__6803;
      chunk__6766_6797 = G__6804;
      count__6767_6798 = G__6805;
      i__6768_6799 = G__6806;
      continue;
    } else {
      var temp__4425__auto___6807 = cljs.core.seq.call(null, seq__6765_6796);
      if (temp__4425__auto___6807) {
        var seq__6765_6808__$1 = temp__4425__auto___6807;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6765_6808__$1)) {
          var c__4844__auto___6809 = cljs.core.chunk_first.call(null, seq__6765_6808__$1);
          var G__6810 = cljs.core.chunk_rest.call(null, seq__6765_6808__$1);
          var G__6811 = c__4844__auto___6809;
          var G__6812 = cljs.core.count.call(null, c__4844__auto___6809);
          var G__6813 = 0;
          seq__6765_6796 = G__6810;
          chunk__6766_6797 = G__6811;
          count__6767_6798 = G__6812;
          i__6768_6799 = G__6813;
          continue;
        } else {
          var vec__6770_6814 = cljs.core.first.call(null, seq__6765_6808__$1);
          var _LT_depth_6815 = cljs.core.nth.call(null, vec__6770_6814, 0, null);
          var __6816 = cljs.core.nth.call(null, vec__6770_6814, 1, null);
          cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [_LT_depth_6815], null), clojure.set.difference, deps);
          var G__6817 = cljs.core.next.call(null, seq__6765_6808__$1);
          var G__6818 = null;
          var G__6819 = 0;
          var G__6820 = 0;
          seq__6765_6796 = G__6817;
          chunk__6766_6797 = G__6818;
          count__6767_6798 = G__6819;
          i__6768_6799 = G__6820;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core._EQ_.call(null, depth, 0)) {
    return cljs.core.distinct.call(null, cljs.core.apply.call(null, cljs.core.concat, cljs.core.vals.call(null, cljs.core.deref.call(null, state))));
  } else {
    return null;
  }
};
cljs.analyzer.topo_sort.cljs$lang$maxFixedArity = 4;
cljs.analyzer.ast_QMARK_ = function cljs$analyzer$ast_QMARK_(x) {
  return cljs.core.map_QMARK_.call(null, x) && cljs.core.contains_QMARK_.call(null, x, new cljs.core.Keyword(null, "op", "op", -1882987955));
};
if (typeof cljs.analyzer.error_message !== "undefined") {
} else {
  cljs.analyzer.error_message = function() {
    var method_table__4954__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__4955__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__4956__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__4957__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__4958__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.analyzer", "error-message"), function(method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__, hierarchy__4958__auto__) {
      return function() {
        var G__6821__delegate = function(warning_type, _) {
          return warning_type;
        };
        var G__6821 = function(warning_type, var_args) {
          var _ = null;
          if (arguments.length > 1) {
            var G__6822__i = 0, G__6822__a = new Array(arguments.length - 1);
            while (G__6822__i < G__6822__a.length) {
              G__6822__a[G__6822__i] = arguments[G__6822__i + 1];
              ++G__6822__i;
            }
            _ = new cljs.core.IndexedSeq(G__6822__a, 0);
          }
          return G__6821__delegate.call(this, warning_type, _);
        };
        G__6821.cljs$lang$maxFixedArity = 1;
        G__6821.cljs$lang$applyTo = function(arglist__6823) {
          var warning_type = cljs.core.first(arglist__6823);
          var _ = cljs.core.rest(arglist__6823);
          return G__6821__delegate(warning_type, _);
        };
        G__6821.cljs$core$IFn$_invoke$arity$variadic = G__6821__delegate;
        return G__6821;
      }();
    }(method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__, hierarchy__4958__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4958__auto__, method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "preamble-missing", "preamble-missing", 220974801), function(warning_type, info) {
  return [cljs.core.str("Preamble resource file not found: "), cljs.core.str(clojure.string.join.call(null, " ", (new cljs.core.Keyword(null, "missing", "missing", 362507769)).cljs$core$IFn$_invoke$arity$1(info)))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "unprovided", "unprovided", -652330764), function(warning_type, info) {
  return [cljs.core.str("Required namespace not provided for "), cljs.core.str(clojure.string.join.call(null, " ", (new cljs.core.Keyword(null, "unprovided", "unprovided", -652330764)).cljs$core$IFn$_invoke$arity$1(info)))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "undeclared-var", "undeclared-var", -1624364944), function(warning_type, info) {
  return [cljs.core.str("Use of undeclared Var "), cljs.core.str((new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str("/"), cljs.core.str((new cljs.core.Keyword(null, "suffix", "suffix", 367373057)).cljs$core$IFn$_invoke$arity$1(info))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), function(warning_type, p__6824) {
  var map__6825 = p__6824;
  var map__6825__$1 = (!(map__6825 == null) ? map__6825.cljs$lang$protocol_mask$partition0$ & 64 || map__6825.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6825) : map__6825;
  var info = map__6825__$1;
  var ns_sym = cljs.core.get.call(null, map__6825__$1, new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605));
  var js_provide = cljs.core.get.call(null, map__6825__$1, new cljs.core.Keyword(null, "js-provide", "js-provide", 1052912493));
  return [cljs.core.str("No such namespace: "), cljs.core.str(ns_sym), cljs.core.str(", could not locate "), cljs.core.str(cljs.analyzer.ns__GT_relpath.call(null, ns_sym, new cljs.core.Keyword(null, "cljs", "cljs", 1492417629))), cljs.core.str(", "), cljs.core.str(cljs.analyzer.ns__GT_relpath.call(null, ns_sym, new cljs.core.Keyword(null, "cljc", "cljc", -1728400583))), cljs.core.str(', or Closure namespace "'), cljs.core.str(js_provide), cljs.core.str('"')].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), function(warning_type, info) {
  return [cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" not declared ^:dynamic")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "redef", "redef", 1032704258), function(warning_type, info) {
  return [cljs.core.str((new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" already refers to: "), cljs.core.str(cljs.core.symbol.call(null, [cljs.core.str((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(info))].join(""), [cljs.core.str((new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info))].join(""))), cljs.core.str(" being replaced by: "), cljs.core.str(cljs.core.symbol.call(null, 
  [cljs.core.str((new cljs.core.Keyword(null, "ns-name", "ns-name", -2077346323)).cljs$core$IFn$_invoke$arity$1(info))].join(""), [cljs.core.str((new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info))].join("")))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "redef-in-file", "redef-in-file", -476530788), function(warning_type, info) {
  return [cljs.core.str((new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" at line "), cljs.core.str((new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" is being replaced")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), function(warning_type, info) {
  return [cljs.core.str(cljs.core.symbol.call(null, [cljs.core.str((new cljs.core.Keyword(null, "ns-name", "ns-name", -2077346323)).cljs$core$IFn$_invoke$arity$1(info))].join(""), [cljs.core.str((new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info))].join(""))), cljs.core.str(" no longer fn, references are stale")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "fn-arity", "fn-arity", -403576501), function(warning_type, info) {
  return [cljs.core.str("Wrong number of args ("), cljs.core.str((new cljs.core.Keyword(null, "argc", "argc", -1452839519)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(") passed to "), cljs.core.str(function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "ctor", "ctor", 1750864802)).cljs$core$IFn$_invoke$arity$1(info);
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      return (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info);
    }
  }())].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "fn-deprecated", "fn-deprecated", 626877647), function(warning_type, info) {
  return [cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "fexpr", "fexpr", -122857150)).cljs$core$IFn$_invoke$arity$1(info)))), cljs.core.str(" is deprecated.")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), function(warning_type, info) {
  return [cljs.core.str("Referred "), cljs.core.str((new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" "), cljs.core.str((new cljs.core.Keyword(null, "lib", "lib", 191808726)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str("/"), cljs.core.str((new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" does not exist")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "protocol-deprecated", "protocol-deprecated", 103233497), function(warning_type, info) {
  return [cljs.core.str("Protocol "), cljs.core.str((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" is deprecated")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "undeclared-protocol-symbol", "undeclared-protocol-symbol", 462882867), function(warning_type, info) {
  return [cljs.core.str("Can't resolve protocol symbol "), cljs.core.str((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "invalid-protocol-symbol", "invalid-protocol-symbol", 86246948), function(warning_type, info) {
  return [cljs.core.str("Symbol "), cljs.core.str((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" is not a protocol")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "protocol-invalid-method", "protocol-invalid-method", 522647516), function(warning_type, info) {
  if ((new cljs.core.Keyword(null, "no-such-method", "no-such-method", 1087422840)).cljs$core$IFn$_invoke$arity$1(info)) {
    return [cljs.core.str("Bad method signature in protocol implementation, "), cljs.core.str((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" does not declare method called "), cljs.core.str((new cljs.core.Keyword(null, "fname", "fname", 1500291491)).cljs$core$IFn$_invoke$arity$1(info))].join("");
  } else {
    return [cljs.core.str("Bad method signature in protocol implementation, "), cljs.core.str((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" "), cljs.core.str((new cljs.core.Keyword(null, "fname", "fname", 1500291491)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" does not declare arity "), cljs.core.str((new cljs.core.Keyword(null, "invalid-arity", "invalid-arity", 1335461949)).cljs$core$IFn$_invoke$arity$1(info))].join("")
    ;
  }
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "protocol-duped-method", "protocol-duped-method", 15128166), function(warning_type, info) {
  return [cljs.core.str("Duplicated methods in protocol implementation "), cljs.core.str((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" "), cljs.core.str((new cljs.core.Keyword(null, "fname", "fname", 1500291491)).cljs$core$IFn$_invoke$arity$1(info))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "protocol-multiple-impls", "protocol-multiple-impls", 794179260), function(warning_type, info) {
  return [cljs.core.str("Protocol "), cljs.core.str((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" implemented multiple times")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "multiple-variadic-overloads", "multiple-variadic-overloads", 1110059837), function(warning_type, info) {
  return [cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(": Can't have more than 1 variadic overload")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "variadic-max-arity", "variadic-max-arity", -14288402), function(warning_type, info) {
  return [cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(": Can't have fixed arity function with more params than variadic function")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "overload-arity", "overload-arity", 823206044), function(warning_type, info) {
  return [cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(": Can't have 2 overloads with same arity")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "extending-base-js-type", "extending-base-js-type", 432787264), function(warning_type, info) {
  return [cljs.core.str("Extending an existing JavaScript type - use a different symbol name "), cljs.core.str("instead of "), cljs.core.str((new cljs.core.Keyword(null, "current-symbol", "current-symbol", -932381075)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" e.g "), cljs.core.str((new cljs.core.Keyword(null, "suggested-symbol", "suggested-symbol", -1329631875)).cljs$core$IFn$_invoke$arity$1(info))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "invalid-arithmetic", "invalid-arithmetic", 1917075065), function(warning_type, info) {
  return [cljs.core.str((new cljs.core.Keyword(null, "js-op", "js-op", -1046277897)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(", all arguments must be numbers, got "), cljs.core.str((new cljs.core.Keyword(null, "types", "types", 590030639)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" instead.")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "invoke-ctor", "invoke-ctor", -756052704), function(warning_type, info) {
  return [cljs.core.str("Cannot invoke type constructor "), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "fexpr", "fexpr", -122857150)).cljs$core$IFn$_invoke$arity$1(info)))), cljs.core.str(" as function ")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "single-segment-namespace", "single-segment-namespace", -491924469), function(warning_type, info) {
  return [cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str(" is a single segment namespace")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "munged-namespace", "munged-namespace", -101986199), function(warning_type, p__6828) {
  var map__6829 = p__6828;
  var map__6829__$1 = (!(map__6829 == null) ? map__6829.cljs$lang$protocol_mask$partition0$ & 64 || map__6829.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6829) : map__6829;
  var info = map__6829__$1;
  var name = cljs.core.get.call(null, map__6829__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var munged = cljs.core.munge.call(null, clojure.string.join.call(null, ".", cljs.core.map.call(null, function(map__6829, map__6829__$1, info, name) {
    return function(p1__6827_SHARP_) {
      if (cljs.analyzer.js_reserved.call(null, p1__6827_SHARP_)) {
        return [cljs.core.str(p1__6827_SHARP_), cljs.core.str("$")].join("");
      } else {
        return p1__6827_SHARP_;
      }
    };
  }(map__6829, map__6829__$1, info, name), clojure.string.split.call(null, cljs.core.name.call(null, name), /\./))));
  return [cljs.core.str("Namespace "), cljs.core.str(name), cljs.core.str(" contains a reserved JavaScript keyword,"), cljs.core.str(" the corresponding Google Closure namespace will be munged to "), cljs.core.str(munged)].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "ns-var-clash", "ns-var-clash", -280494668), function(warning_type, p__6831) {
  var map__6832 = p__6831;
  var map__6832__$1 = (!(map__6832 == null) ? map__6832.cljs$lang$protocol_mask$partition0$ & 64 || map__6832.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6832) : map__6832;
  var info = map__6832__$1;
  var ns = cljs.core.get.call(null, map__6832__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760));
  var var$ = cljs.core.get.call(null, map__6832__$1, new cljs.core.Keyword(null, "var", "var", -769682797));
  return [cljs.core.str("Namespace "), cljs.core.str(ns), cljs.core.str(" clashes with var "), cljs.core.str(var$)].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "extend-type-invalid-method-shape", "extend-type-invalid-method-shape", 1424103549), function(warning_type, p__6834) {
  var map__6835 = p__6834;
  var map__6835__$1 = (!(map__6835 == null) ? map__6835.cljs$lang$protocol_mask$partition0$ & 64 || map__6835.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6835) : map__6835;
  var info = map__6835__$1;
  var protocol = cljs.core.get.call(null, map__6835__$1, new cljs.core.Keyword(null, "protocol", "protocol", 652470118));
  var method = cljs.core.get.call(null, map__6835__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  return [cljs.core.str("Bad extend-type method shape for protocol "), cljs.core.str(protocol), cljs.core.str(" method "), cljs.core.str(method), cljs.core.str(", method arities must be grouped together")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "unsupported-js-module-type", "unsupported-js-module-type", 1806206180), function(warning_type, p__6837) {
  var map__6838 = p__6837;
  var map__6838__$1 = (!(map__6838 == null) ? map__6838.cljs$lang$protocol_mask$partition0$ & 64 || map__6838.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6838) : map__6838;
  var info = map__6838__$1;
  var module_type = cljs.core.get.call(null, map__6838__$1, new cljs.core.Keyword(null, "module-type", "module-type", 1392760304));
  var file = cljs.core.get.call(null, map__6838__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  return [cljs.core.str("Unsupported JavaScript module type "), cljs.core.str(module_type), cljs.core.str(" for foreign library "), cljs.core.str(file), cljs.core.str(".")].join("");
});
cljs.analyzer.default_warning_handler = function cljs$analyzer$default_warning_handler(warning_type, env, extra) {
  if (warning_type.call(null, cljs.analyzer._STAR_cljs_warnings_STAR_)) {
    var temp__4425__auto__ = cljs.analyzer.error_message.call(null, warning_type, extra);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var _STAR_print_fn_STAR_6841 = cljs.core._STAR_print_fn_STAR_;
      cljs.core._STAR_print_fn_STAR_ = cljs.core._STAR_print_err_fn_STAR_;
      try {
        return cljs.core.println.call(null, cljs.analyzer.message.call(null, env, [cljs.core.str("WARNING: "), cljs.core.str(s)].join("")));
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_6841;
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
};
cljs.analyzer._STAR_cljs_warning_handlers_STAR_ = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.analyzer.default_warning_handler], null);
cljs.analyzer.gen_constant_id = function cljs$analyzer$gen_constant_id(value) {
  var prefix = value instanceof cljs.core.Keyword ? "constant$keyword$" : function() {
    throw new Error([cljs.core.str("constant type "), cljs.core.str(cljs.core.type.call(null, value)), cljs.core.str(" not supported")].join(""));
  }();
  var name = clojure.string.replace.call(null, cljs.core.munge.call(null, clojure.string.replace.call(null, cljs.core.subs.call(null, [cljs.core.str(value)].join(""), 1), "-", "_DASH_")), ".", "$");
  return cljs.core.symbol.call(null, [cljs.core.str(prefix), cljs.core.str(name)].join(""));
};
cljs.analyzer.register_constant_BANG_ = function cljs$analyzer$register_constant_BANG_() {
  var args6842 = [];
  var len__5099__auto___6850 = arguments.length;
  var i__5100__auto___6851 = 0;
  while (true) {
    if (i__5100__auto___6851 < len__5099__auto___6850) {
      args6842.push(arguments[i__5100__auto___6851]);
      var G__6852 = i__5100__auto___6851 + 1;
      i__5100__auto___6851 = G__6852;
      continue;
    } else {
    }
    break;
  }
  var G__6844 = args6842.length;
  switch(G__6844) {
    case 1:
      return cljs.analyzer.register_constant_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.register_constant_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6842.length)].join(""));;
  }
};
cljs.analyzer.register_constant_BANG_.cljs$core$IFn$_invoke$arity$1 = function(val) {
  return cljs.analyzer.register_constant_BANG_.call(null, null, val);
};
cljs.analyzer.register_constant_BANG_.cljs$core$IFn$_invoke$arity$2 = function(env, val) {
  return cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, function(cenv) {
    var G__6845 = cljs.core.update_in.call(null, cenv, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "constant-table", "cljs.analyzer/constant-table", -114131889)], null), function(table) {
      if (cljs.core.get.call(null, table, val)) {
        return table;
      } else {
        return cljs.core.assoc.call(null, table, val, cljs.analyzer.gen_constant_id.call(null, val));
      }
    });
    var G__6845__$1 = env ? cljs.core.update_in.call(null, G__6845, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword("cljs.analyzer", "constants", "cljs.analyzer/constants", 
    1697083770)], null), function(G__6845) {
      return function(p__6846) {
        var map__6847 = p__6846;
        var map__6847__$1 = (!(map__6847 == null) ? map__6847.cljs$lang$protocol_mask$partition0$ & 64 || map__6847.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6847) : map__6847;
        var constants = map__6847__$1;
        var seen = cljs.core.get.call(null, map__6847__$1, new cljs.core.Keyword(null, "seen", "seen", -518999789), cljs.core.PersistentHashSet.EMPTY);
        var order = cljs.core.get.call(null, map__6847__$1, new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.PersistentVector.EMPTY);
        var G__6849 = constants;
        var G__6849__$1 = !cljs.core.contains_QMARK_.call(null, seen, val) ? cljs.core.assoc.call(null, G__6849, new cljs.core.Keyword(null, "seen", "seen", -518999789), cljs.core.conj.call(null, seen, val), new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.conj.call(null, order, val)) : G__6849;
        return G__6849__$1;
      };
    }(G__6845)) : G__6845;
    return G__6845__$1;
  });
};
cljs.analyzer.register_constant_BANG_.cljs$lang$maxFixedArity = 2;
cljs.analyzer.default_namespaces = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null)], null), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Symbol(null, 
"cljs.user", "cljs.user", 877795071, null)], null)], null);
cljs.analyzer.namespaces = function() {
  if (typeof cljs.analyzer.t6854 !== "undefined") {
  } else {
    cljs.analyzer.t6854 = function(meta6855) {
      this.meta6855 = meta6855;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.analyzer.t6854.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_6856, meta6855__$1) {
      var self__ = this;
      var _6856__$1 = this;
      return new cljs.analyzer.t6854(meta6855__$1);
    };
    cljs.analyzer.t6854.prototype.cljs$core$IMeta$_meta$arity$1 = function(_6856) {
      var self__ = this;
      var _6856__$1 = this;
      return self__.meta6855;
    };
    cljs.analyzer.t6854.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      if (!(cljs.env._STAR_compiler_STAR_ == null)) {
        return (new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_));
      } else {
        return cljs.analyzer.default_namespaces;
      }
    };
    cljs.analyzer.t6854.getBasis = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta6855", "meta6855", -994079066, null)], null);
    };
    cljs.analyzer.t6854.cljs$lang$type = true;
    cljs.analyzer.t6854.cljs$lang$ctorStr = "cljs.analyzer/t6854";
    cljs.analyzer.t6854.cljs$lang$ctorPrWriter = function(this__4639__auto__, writer__4640__auto__, opt__4641__auto__) {
      return cljs.core._write.call(null, writer__4640__auto__, "cljs.analyzer/t6854");
    };
    cljs.analyzer.__GT_t6854 = function cljs$analyzer$__GT_t6854(meta6855) {
      return new cljs.analyzer.t6854(meta6855);
    };
  }
  return new cljs.analyzer.t6854(cljs.core.PersistentArrayMap.EMPTY);
}();
cljs.analyzer.get_namespace = function cljs$analyzer$get_namespace() {
  var args6857 = [];
  var len__5099__auto___6860 = arguments.length;
  var i__5100__auto___6861 = 0;
  while (true) {
    if (i__5100__auto___6861 < len__5099__auto___6860) {
      args6857.push(arguments[i__5100__auto___6861]);
      var G__6862 = i__5100__auto___6861 + 1;
      i__5100__auto___6861 = G__6862;
      continue;
    } else {
    }
    break;
  }
  var G__6859 = args6857.length;
  switch(G__6859) {
    case 1:
      return cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6857.length)].join(""));;
  }
};
cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1 = function(key) {
  return cljs.analyzer.get_namespace.call(null, cljs.env._STAR_compiler_STAR_, key);
};
cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$2 = function(cenv, key) {
  var ns = cljs.core.get_in.call(null, cljs.core.deref.call(null, cenv), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), key], null));
  if (!(ns == null)) {
    return ns;
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), key)) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null)], null);
    } else {
      return null;
    }
  }
};
cljs.analyzer.get_namespace.cljs$lang$maxFixedArity = 2;
cljs.analyzer.get_line = function cljs$analyzer$get_line(x, env) {
  var or__4060__auto__ = (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, x));
  if (or__4060__auto__) {
    return or__4060__auto__;
  } else {
    return (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env);
  }
};
cljs.analyzer.get_col = function cljs$analyzer$get_col(x, env) {
  var or__4060__auto__ = (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, x));
  if (or__4060__auto__) {
    return or__4060__auto__;
  } else {
    return (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(env);
  }
};
cljs.analyzer.intern_macros = function cljs$analyzer$intern_macros() {
  var args6864 = [];
  var len__5099__auto___6871 = arguments.length;
  var i__5100__auto___6872 = 0;
  while (true) {
    if (i__5100__auto___6872 < len__5099__auto___6871) {
      args6864.push(arguments[i__5100__auto___6872]);
      var G__6873 = i__5100__auto___6872 + 1;
      i__5100__auto___6872 = G__6873;
      continue;
    } else {
    }
    break;
  }
  var G__6866 = args6864.length;
  switch(G__6866) {
    case 1:
      return cljs.analyzer.intern_macros.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.intern_macros.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6864.length)].join(""));;
  }
};
cljs.analyzer.intern_macros.cljs$core$IFn$_invoke$arity$1 = function(ns) {
  return cljs.analyzer.intern_macros.call(null, ns, false);
};
cljs.analyzer.intern_macros.cljs$core$IFn$_invoke$arity$2 = function(ns, reload) {
  if (function() {
    var or__4060__auto__ = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "macros", "macros", 811339431)], null)) == null;
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      return reload;
    }
  }()) {
    return cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "macros", "macros", 811339431)], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__6867) {
      var vec__6868 = p__6867;
      var k = cljs.core.nth.call(null, vec__6868, 0, null);
      var v = cljs.core.nth.call(null, vec__6868, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, function() {
        var vm = cljs.core.meta.call(null, v);
        var vm__$1 = function() {
          var ns__$1 = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(vm).getName();
          return cljs.core.assoc.call(null, vm, new cljs.core.Keyword(null, "ns", "ns", 441598760), ns__$1, new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str(ns__$1)].join(""), [cljs.core.str(k)].join("")));
        }();
        return vm__$1;
      }()], null);
    }, cljs.core.filter.call(null, function(p__6869) {
      var vec__6870 = p__6869;
      var _ = cljs.core.nth.call(null, vec__6870, 0, null);
      var v = cljs.core.nth.call(null, vec__6870, 1, null);
      return v.isMacro();
    }, cljs.core.ns_interns_STAR_.call(null, ns)))));
  } else {
    return null;
  }
};
cljs.analyzer.intern_macros.cljs$lang$maxFixedArity = 2;
cljs.analyzer.empty_env = function cljs$analyzer$empty_env() {
  var val__5424__auto__ = cljs.env._STAR_compiler_STAR_;
  if (val__5424__auto__ == null) {
    cljs.env._STAR_compiler_STAR_ = cljs.env.default_compiler_env.call(null);
  } else {
  }
  try {
    return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_), new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "statement", "statement", -32780863), new cljs.core.Keyword(null, "locals", "locals", 535295783), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "fn-scope", "fn-scope", -865664859), cljs.core.PersistentVector.EMPTY, 
    new cljs.core.Keyword(null, "js-globals", "js-globals", 1670394727), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(val__5424__auto__) {
      return function(p1__6875_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__6875_SHARP_, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), p1__6875_SHARP_], null)], null);
      };
    }(val__5424__auto__), cljs.core.list(new cljs.core.Symbol(null, "alert", "alert", 1068580947, null), new cljs.core.Symbol(null, "window", "window", -1929916235, null), new cljs.core.Symbol(null, "document", "document", 311342840, null), new cljs.core.Symbol(null, "console", "console", -1426363712, null), new cljs.core.Symbol(null, "escape", "escape", 648929575, null), new cljs.core.Symbol(null, "unescape", "unescape", -2037730561, null), new cljs.core.Symbol(null, "screen", "screen", -664376021, 
    null), new cljs.core.Symbol(null, "location", "location", -838836381, null), new cljs.core.Symbol(null, "navigator", "navigator", -604431588, null), new cljs.core.Symbol(null, "history", "history", 1393136307, null), new cljs.core.Symbol(null, "location", "location", -838836381, null), new cljs.core.Symbol(null, "global", "global", 1734126574, null), new cljs.core.Symbol(null, "process", "process", -1011242831, null), new cljs.core.Symbol(null, "require", "require", 1172530194, null), new cljs.core.Symbol(null, 
    "module", "module", -1229817578, null), new cljs.core.Symbol(null, "exports", "exports", 895523255, null))))], null);
  } finally {
    if (val__5424__auto__ == null) {
      cljs.env._STAR_compiler_STAR_ = null;
    } else {
    }
  }
};
cljs.analyzer.source_info = function cljs$analyzer$source_info() {
  var args6876 = [];
  var len__5099__auto___6879 = arguments.length;
  var i__5100__auto___6880 = 0;
  while (true) {
    if (i__5100__auto___6880 < len__5099__auto___6879) {
      args6876.push(arguments[i__5100__auto___6880]);
      var G__6881 = i__5100__auto___6880 + 1;
      i__5100__auto___6880 = G__6881;
      continue;
    } else {
    }
    break;
  }
  var G__6878 = args6876.length;
  switch(G__6878) {
    case 1:
      return cljs.analyzer.source_info.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.source_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6876.length)].join(""));;
  }
};
cljs.analyzer.source_info.cljs$core$IFn$_invoke$arity$1 = function(env) {
  var temp__4425__auto__ = (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env);
  if (temp__4425__auto__) {
    var line = temp__4425__auto__;
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "file", "file", -1269645878), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null)) ? "cljs/core.cljs" : cljs.analyzer._STAR_cljs_file_STAR_, new cljs.core.Keyword(null, "line", "line", 212345235), 
    cljs.analyzer.get_line.call(null, cljs.core.name, env), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.analyzer.get_col.call(null, cljs.core.name, env)], null);
  } else {
    return null;
  }
};
cljs.analyzer.source_info.cljs$core$IFn$_invoke$arity$2 = function(name, env) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "file", "file", -1269645878), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null)) ? "cljs/core.cljs" : cljs.analyzer._STAR_cljs_file_STAR_, new cljs.core.Keyword(null, "line", "line", 212345235), cljs.analyzer.get_line.call(null, 
  name, env), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.analyzer.get_col.call(null, name, env)], null);
};
cljs.analyzer.source_info.cljs$lang$maxFixedArity = 2;
cljs.analyzer.message = function cljs$analyzer$message(env, s) {
  return [cljs.core.str(s), cljs.core.str((new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env) ? [cljs.core.str(" at line "), cljs.core.str((new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env)), cljs.core.str(" "), cljs.core.str(cljs.analyzer._STAR_cljs_file_STAR_)].join("") : null)].join("");
};
cljs.analyzer.warning = function cljs$analyzer$warning(warning_type, env, extra) {
  var seq__6887 = cljs.core.seq.call(null, cljs.analyzer._STAR_cljs_warning_handlers_STAR_);
  var chunk__6888 = null;
  var count__6889 = 0;
  var i__6890 = 0;
  while (true) {
    if (i__6890 < count__6889) {
      var handler = cljs.core._nth.call(null, chunk__6888, i__6890);
      handler.call(null, warning_type, env, extra);
      var G__6891 = seq__6887;
      var G__6892 = chunk__6888;
      var G__6893 = count__6889;
      var G__6894 = i__6890 + 1;
      seq__6887 = G__6891;
      chunk__6888 = G__6892;
      count__6889 = G__6893;
      i__6890 = G__6894;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__6887);
      if (temp__4425__auto__) {
        var seq__6887__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6887__$1)) {
          var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__6887__$1);
          var G__6895 = cljs.core.chunk_rest.call(null, seq__6887__$1);
          var G__6896 = c__4844__auto__;
          var G__6897 = cljs.core.count.call(null, c__4844__auto__);
          var G__6898 = 0;
          seq__6887 = G__6895;
          chunk__6888 = G__6896;
          count__6889 = G__6897;
          i__6890 = G__6898;
          continue;
        } else {
          var handler = cljs.core.first.call(null, seq__6887__$1);
          handler.call(null, warning_type, env, extra);
          var G__6899 = cljs.core.next.call(null, seq__6887__$1);
          var G__6900 = null;
          var G__6901 = 0;
          var G__6902 = 0;
          seq__6887 = G__6899;
          chunk__6888 = G__6900;
          count__6889 = G__6901;
          i__6890 = G__6902;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.analyzer.error = function cljs$analyzer$error() {
  var args6903 = [];
  var len__5099__auto___6906 = arguments.length;
  var i__5100__auto___6907 = 0;
  while (true) {
    if (i__5100__auto___6907 < len__5099__auto___6906) {
      args6903.push(arguments[i__5100__auto___6907]);
      var G__6908 = i__5100__auto___6907 + 1;
      i__5100__auto___6907 = G__6908;
      continue;
    } else {
    }
    break;
  }
  var G__6905 = args6903.length;
  switch(G__6905) {
    case 2:
      return cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6903.length)].join(""));;
  }
};
cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2 = function(env, msg) {
  return cljs.analyzer.error.call(null, env, msg, null);
};
cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3 = function(env, msg, cause) {
  return cljs.core.ex_info.call(null, cljs.analyzer.message.call(null, env, msg), cljs.core.assoc.call(null, cljs.analyzer.source_info.call(null, env), new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword("cljs", "analysis-error", "cljs/analysis-error", -420526349)), cause);
};
cljs.analyzer.error.cljs$lang$maxFixedArity = 3;
cljs.analyzer.analysis_error_QMARK_ = function cljs$analyzer$analysis_error_QMARK_(ex) {
  return cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs", "analysis-error", "cljs/analysis-error", -420526349), (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.ex_data.call(null, ex)));
};
cljs.analyzer.implicit_import_QMARK_ = function cljs$analyzer$implicit_import_QMARK_(env, prefix, suffix) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Symbol(null, "goog.string", "goog.string", -2055533048, null), null, new cljs.core.Symbol(null, "goog", "goog", -70603925, null), null, new cljs.core.Symbol(null, "goog.object", "goog.object", 678593132, null), null, new cljs.core.Symbol(null, "Math", "Math", 2033287572, null), null, new cljs.core.Symbol(null, "goog.array", "goog.array", -671977860, null), null], 
  null), null), prefix);
};
cljs.analyzer.confirm_var_exist_warning = function cljs$analyzer$confirm_var_exist_warning(env, prefix, suffix) {
  return function(env__$1, prefix__$1, suffix__$1) {
    return cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "undeclared-var", "undeclared-var", -1624364944), env__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), prefix__$1, new cljs.core.Keyword(null, "suffix", "suffix", 367373057), suffix__$1], null));
  };
};
cljs.analyzer.loaded_ns_QMARK_ = function cljs$analyzer$loaded_ns_QMARK_(env, prefix) {
  if (!(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), prefix) == null)) {
    return true;
  } else {
    var ns = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env);
    if (!(cljs.core.get.call(null, (new cljs.core.Keyword(null, "requires", "requires", -1201390927)).cljs$core$IFn$_invoke$arity$1(ns), prefix) == null)) {
      return true;
    } else {
      if (!(cljs.core.get.call(null, (new cljs.core.Keyword(null, "imports", "imports", -1249933394)).cljs$core$IFn$_invoke$arity$1(ns), prefix) == null)) {
        return true;
      } else {
        return false;
      }
    }
  }
};
cljs.analyzer.confirm_var_exists = function cljs$analyzer$confirm_var_exists() {
  var args6911 = [];
  var len__5099__auto___6914 = arguments.length;
  var i__5100__auto___6915 = 0;
  while (true) {
    if (i__5100__auto___6915 < len__5099__auto___6914) {
      args6911.push(arguments[i__5100__auto___6915]);
      var G__6916 = i__5100__auto___6915 + 1;
      i__5100__auto___6915 = G__6916;
      continue;
    } else {
    }
    break;
  }
  var G__6913 = args6911.length;
  switch(G__6913) {
    case 3:
      return cljs.analyzer.confirm_var_exists.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.confirm_var_exists.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6911.length)].join(""));;
  }
};
cljs.analyzer.confirm_var_exists.cljs$core$IFn$_invoke$arity$3 = function(env, prefix, suffix) {
  var warn = cljs.analyzer.confirm_var_exist_warning.call(null, env, prefix, suffix);
  return cljs.analyzer.confirm_var_exists.call(null, env, prefix, suffix, warn);
};
cljs.analyzer.confirm_var_exists.cljs$core$IFn$_invoke$arity$4 = function(env, prefix, suffix, missing_fn) {
  var sufstr = [cljs.core.str(suffix)].join("");
  var suffix_str = !(".." === sufstr) && /\./.test(sufstr) ? cljs.core.first.call(null, clojure.string.split.call(null, sufstr, /\./)) : suffix;
  var suffix__$1 = cljs.core.symbol.call(null, suffix_str);
  if (!cljs.analyzer.implicit_import_QMARK_.call(null, env, prefix, suffix__$1) && !cljs.analyzer.loaded_ns_QMARK_.call(null, env, prefix) && !(cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), prefix) && cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "unquote", "unquote", -1004694737, null), suffix__$1)) && cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", 
  "cljs.analyzer/namespaces", -260788927), prefix, new cljs.core.Keyword(null, "defs", "defs", 1398449717), suffix__$1) == null) {
    return missing_fn.call(null, env, prefix, suffix__$1);
  } else {
    return null;
  }
};
cljs.analyzer.confirm_var_exists.cljs$lang$maxFixedArity = 4;
cljs.analyzer.confirm_var_exists_throw = function cljs$analyzer$confirm_var_exists_throw() {
  return function(env, prefix, suffix) {
    return cljs.analyzer.confirm_var_exists.call(null, env, prefix, suffix, function(env__$1, prefix__$1, suffix__$1) {
      throw cljs.analyzer.error.call(null, env__$1, [cljs.core.str("Unable to resolve var: "), cljs.core.str(suffix__$1), cljs.core.str(" in this context")].join(""));
    });
  };
};
cljs.analyzer.resolve_ns_alias = function cljs$analyzer$resolve_ns_alias(env, name) {
  var sym = cljs.core.symbol.call(null, name);
  return cljs.core.get.call(null, (new cljs.core.Keyword(null, "requires", "requires", -1201390927)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), sym, sym);
};
cljs.analyzer.resolve_macro_ns_alias = function cljs$analyzer$resolve_macro_ns_alias(env, name) {
  var sym = cljs.core.symbol.call(null, name);
  return cljs.core.get.call(null, (new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), sym, sym);
};
cljs.analyzer.confirm_ns = function cljs$analyzer$confirm_ns(env, ns_sym) {
  if (cljs.core.get.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Symbol(null, "goog.string", "goog.string", -2055533048, null), null, new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), null, new cljs.core.Symbol(null, "goog", "goog", -70603925, null), null, new cljs.core.Symbol(null, "Math", "Math", 2033287572, null), null], null), null), ns_sym) == null && cljs.core.get.call(null, (new cljs.core.Keyword(null, "requires", 
  "requires", -1201390927)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), ns_sym) == null && cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_sym) == null) {
    return cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605), ns_sym], null));
  } else {
    return null;
  }
};
cljs.analyzer.core_name_QMARK_ = function cljs$analyzer$core_name_QMARK_(env, sym) {
  var and__4048__auto__ = function() {
    var or__4060__auto__ = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym);
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      var temp__4425__auto__ = cljs.analyzer.get_expander.call(null, sym, env);
      if (temp__4425__auto__) {
        var mac = temp__4425__auto__;
        var ns = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, mac));
        return cljs.core._EQ_.call(null, ns.getName(), new cljs.core.Symbol(null, "cljs.core$macros", "cljs.core$macros", -2057787548, null));
      } else {
        return null;
      }
    }
  }();
  if (and__4048__auto__) {
    return !cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "excludes", "excludes", -1791725945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), sym);
  } else {
    return and__4048__auto__;
  }
};
cljs.analyzer.resolve_var = function cljs$analyzer$resolve_var() {
  var args6918 = [];
  var len__5099__auto___6921 = arguments.length;
  var i__5100__auto___6922 = 0;
  while (true) {
    if (i__5100__auto___6922 < len__5099__auto___6921) {
      args6918.push(arguments[i__5100__auto___6922]);
      var G__6923 = i__5100__auto___6922 + 1;
      i__5100__auto___6922 = G__6923;
      continue;
    } else {
    }
    break;
  }
  var G__6920 = args6918.length;
  switch(G__6920) {
    case 2:
      return cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6918.length)].join(""));;
  }
};
cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$2 = function(env, sym) {
  return cljs.analyzer.resolve_var.call(null, env, sym, null);
};
cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$3 = function(env, sym, confirm) {
  while (true) {
    if ("js" === cljs.core.namespace.call(null, sym)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), sym, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Symbol(null, "js", "js", -886355190, null)], null);
    } else {
      var s = [cljs.core.str(sym)].join("");
      var lcls = (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env);
      var lb = cljs.core.get.call(null, lcls, sym);
      if (!(lb == null)) {
        return lb;
      } else {
        if (!(cljs.core.namespace.call(null, sym) == null)) {
          var ns = cljs.core.namespace.call(null, sym);
          var ns__$1 = "clojure.core" === ns ? "cljs.core" : ns;
          var full_ns = cljs.analyzer.resolve_ns_alias.call(null, env, ns__$1);
          if (confirm == null) {
          } else {
            if (cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), full_ns)) {
              cljs.analyzer.confirm_ns.call(null, env, full_ns);
            } else {
            }
            confirm.call(null, env, full_ns, cljs.core.symbol.call(null, cljs.core.name.call(null, sym)));
          }
          return cljs.core.merge.call(null, cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), full_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), cljs.core.symbol.call(null, cljs.core.name.call(null, sym))), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str(full_ns)].join(""), 
          [cljs.core.str(cljs.core.name.call(null, sym))].join("")), new cljs.core.Keyword(null, "ns", "ns", 441598760), full_ns], null));
        } else {
          if (goog.string.contains(s, ".") && !goog.string.contains(s, "..")) {
            var idx = s.indexOf(".");
            var prefix = cljs.core.symbol.call(null, cljs.core.subs.call(null, s, 0, idx));
            var suffix = cljs.core.subs.call(null, s, idx + 1);
            var lb__$1 = cljs.core.get.call(null, lcls, prefix);
            if (!(lb__$1 == null)) {
              return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(lb__$1))].join(""), suffix)], null);
            } else {
              var cur_ns = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
              var full_ns = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), cur_ns, new cljs.core.Keyword(null, "imports", "imports", -1249933394), prefix);
              if (!(full_ns == null)) {
                return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str(full_ns)].join(""), suffix)], null);
              } else {
                var info = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), cur_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), prefix);
                if (!(info == null)) {
                  return cljs.core.merge.call(null, info, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str(cur_ns)].join(""), [cljs.core.str(sym)].join("")), new cljs.core.Keyword(null, "ns", "ns", 441598760), cur_ns], null));
                } else {
                  return cljs.core.merge.call(null, cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), prefix, new cljs.core.Keyword(null, "defs", "defs", 1398449717), cljs.core.symbol.call(null, suffix)), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core._EQ_.call(null, "", prefix) ? cljs.core.symbol.call(null, 
                  suffix) : cljs.core.symbol.call(null, [cljs.core.str(prefix)].join(""), suffix), new cljs.core.Keyword(null, "ns", "ns", 441598760), prefix], null));
                }
              }
            }
          } else {
            if (!(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "uses", "uses", 232664692), sym) == null)) {
              var full_ns = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "uses", "uses", 232664692), sym);
              return cljs.core.merge.call(null, cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), full_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str(full_ns)].join(""), [cljs.core.str(sym)].join("")), new cljs.core.Keyword(null, 
              "ns", "ns", 441598760), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env))], null));
            } else {
              if (!(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "imports", "imports", -1249933394), sym) == null)) {
                var G__6925 = env;
                var G__6926 = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "imports", "imports", -1249933394), sym);
                var G__6927 = confirm;
                env = G__6925;
                sym = G__6926;
                confirm = G__6927;
                continue;
              } else {
                var cur_ns = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
                var full_ns = !(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), cur_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym) == null) ? cur_ns : cljs.analyzer.core_name_QMARK_.call(null, env, sym) ? new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null) : cur_ns;
                if (confirm == null) {
                } else {
                  confirm.call(null, env, full_ns, sym);
                }
                return cljs.core.merge.call(null, cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), full_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str(full_ns)].join(""), [cljs.core.str(sym)].join("")), new cljs.core.Keyword(null, 
                "ns", "ns", 441598760), full_ns], null));
              }
            }
          }
        }
      }
    }
    break;
  }
};
cljs.analyzer.resolve_var.cljs$lang$maxFixedArity = 3;
cljs.analyzer.resolve_existing_var = function cljs$analyzer$resolve_existing_var(env, sym) {
  if (cljs.core.not.call(null, (new cljs.core.Keyword("cljs.analyzer", "no-resolve", "cljs.analyzer/no-resolve", -1872351017)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym)))) {
    return cljs.analyzer.resolve_var.call(null, env, sym, cljs.analyzer.confirm_var_exists);
  } else {
    return cljs.analyzer.resolve_var.call(null, env, sym);
  }
};
cljs.analyzer.confirm_bindings = function cljs$analyzer$confirm_bindings(env, names) {
  var seq__6932 = cljs.core.seq.call(null, names);
  var chunk__6933 = null;
  var count__6934 = 0;
  var i__6935 = 0;
  while (true) {
    if (i__6935 < count__6934) {
      var name = cljs.core._nth.call(null, chunk__6933, i__6935);
      var env_6936__$1 = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_));
      var ev_6937 = cljs.analyzer.resolve_existing_var.call(null, env_6936__$1, name);
      if (function() {
        var and__4048__auto__ = ev_6937;
        if (and__4048__auto__) {
          return cljs.core.not.call(null, (new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571)).cljs$core$IFn$_invoke$arity$1(ev_6937));
        } else {
          return and__4048__auto__;
        }
      }()) {
        cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), env_6936__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ev", "ev", -406827324), ev_6937, new cljs.core.Keyword(null, "name", "name", 1843675177), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ev_6937)], null));
      } else {
      }
      var G__6938 = seq__6932;
      var G__6939 = chunk__6933;
      var G__6940 = count__6934;
      var G__6941 = i__6935 + 1;
      seq__6932 = G__6938;
      chunk__6933 = G__6939;
      count__6934 = G__6940;
      i__6935 = G__6941;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__6932);
      if (temp__4425__auto__) {
        var seq__6932__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6932__$1)) {
          var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__6932__$1);
          var G__6942 = cljs.core.chunk_rest.call(null, seq__6932__$1);
          var G__6943 = c__4844__auto__;
          var G__6944 = cljs.core.count.call(null, c__4844__auto__);
          var G__6945 = 0;
          seq__6932 = G__6942;
          chunk__6933 = G__6943;
          count__6934 = G__6944;
          i__6935 = G__6945;
          continue;
        } else {
          var name = cljs.core.first.call(null, seq__6932__$1);
          var env_6946__$1 = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_));
          var ev_6947 = cljs.analyzer.resolve_existing_var.call(null, env_6946__$1, name);
          if (function() {
            var and__4048__auto__ = ev_6947;
            if (and__4048__auto__) {
              return cljs.core.not.call(null, (new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571)).cljs$core$IFn$_invoke$arity$1(ev_6947));
            } else {
              return and__4048__auto__;
            }
          }()) {
            cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), env_6946__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ev", "ev", -406827324), ev_6947, new cljs.core.Keyword(null, "name", "name", 1843675177), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ev_6947)], null));
          } else {
          }
          var G__6948 = cljs.core.next.call(null, seq__6932__$1);
          var G__6949 = null;
          var G__6950 = 0;
          var G__6951 = 0;
          seq__6932 = G__6948;
          chunk__6933 = G__6949;
          count__6934 = G__6950;
          i__6935 = G__6951;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.analyzer.resolve_macro_var = function cljs$analyzer$resolve_macro_var(env, sym) {
  var ns = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
  var namespaces = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927));
  if (cljs.core.namespace.call(null, sym)) {
    var ns__$1 = cljs.core.namespace.call(null, sym);
    var ns__$2 = cljs.core._EQ_.call(null, "clojure.core", ns__$1) ? "cljs.core" : ns__$1;
    var full_ns = cljs.analyzer.resolve_macro_ns_alias.call(null, env, ns__$2);
    return cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [full_ns, new cljs.core.Keyword(null, "macros", "macros", 811339431), cljs.core.symbol.call(null, cljs.core.name.call(null, sym))], null));
  } else {
    if (cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), sym], null))) {
      var full_ns = cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), sym], null));
      return cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [full_ns, new cljs.core.Keyword(null, "macros", "macros", 811339431), sym], null));
    } else {
      var ns__$1 = cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns, new cljs.core.Keyword(null, "macros", "macros", 811339431), sym], null)) ? ns : cljs.analyzer.core_name_QMARK_.call(null, env, sym) ? new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null) : null;
      if (ns__$1) {
        return cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns__$1, new cljs.core.Keyword(null, "macros", "macros", 811339431), sym], null));
      } else {
        return null;
      }
    }
  }
};
cljs.analyzer.ns_dependents = function cljs$analyzer$ns_dependents() {
  var args6953 = [];
  var len__5099__auto___6970 = arguments.length;
  var i__5100__auto___6971 = 0;
  while (true) {
    if (i__5100__auto___6971 < len__5099__auto___6970) {
      args6953.push(arguments[i__5100__auto___6971]);
      var G__6972 = i__5100__auto___6971 + 1;
      i__5100__auto___6971 = G__6972;
      continue;
    } else {
    }
    break;
  }
  var G__6955 = args6953.length;
  switch(G__6955) {
    case 1:
      return cljs.analyzer.ns_dependents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.ns_dependents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args6953.length)].join(""));;
  }
};
cljs.analyzer.ns_dependents.cljs$core$IFn$_invoke$arity$1 = function(ns) {
  return cljs.analyzer.ns_dependents.call(null, ns, cljs.core.get.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927)));
};
cljs.analyzer.ns_dependents.cljs$core$IFn$_invoke$arity$2 = function(ns, ns_map) {
  var parent_QMARK_ = function cljs$analyzer$parent_QMARK_(parent, p__6963) {
    var vec__6967 = p__6963;
    var child = cljs.core.nth.call(null, vec__6967, 0, null);
    var map__6968 = cljs.core.nth.call(null, vec__6967, 1, null);
    var map__6968__$1 = (!(map__6968 == null) ? map__6968.cljs$lang$protocol_mask$partition0$ & 64 || map__6968.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6968) : map__6968;
    var ns_info = map__6968__$1;
    var requires = cljs.core.get.call(null, map__6968__$1, new cljs.core.Keyword(null, "requires", "requires", -1201390927));
    if (cljs.core._EQ_.call(null, parent, child)) {
      return null;
    } else {
      if (cljs.core.map_QMARK_.call(null, requires) || cljs.core.set_QMARK_.call(null, requires)) {
        return cljs.core.contains_QMARK_.call(null, requires, parent);
      } else {
        if (cljs.core.vector_QMARK_.call(null, requires)) {
          return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([cljs.core.munge.call(null, cljs.core.name.call(null, parent))], true), requires);
        } else {
          return null;
        }
      }
    }
  };
  return cljs.analyzer.topo_sort.call(null, ns, function(ns_SINGLEQUOTE_) {
    return cljs.core.set.call(null, cljs.core.map.call(null, cljs.core.first, cljs.core.filter.call(null, function(p1__6952_SHARP_) {
      return parent_QMARK_.call(null, ns_SINGLEQUOTE_, p1__6952_SHARP_);
    }, ns_map)));
  });
};
cljs.analyzer.ns_dependents.cljs$lang$maxFixedArity = 2;
cljs.analyzer.specials = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [new cljs.core.Symbol(null, "&", "&", -2144855648, null), null, new cljs.core.Symbol(null, "case*", "case*", -1938255072, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, 
null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, 
"fn*", "fn*", -752876845, null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "var", "var", 870848730, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), 
null], null), null);
cljs.analyzer._STAR_recur_frames_STAR_ = null;
cljs.analyzer._STAR_loop_lets_STAR_ = cljs.core.List.EMPTY;
cljs.analyzer._STAR_allow_redef_STAR_ = false;
cljs.analyzer.analyze_keyword = function cljs$analyzer$analyze_keyword(env, sym) {
  cljs.analyzer.register_constant_BANG_.call(null, env, sym);
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "constant", "constant", -379609303), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), sym, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "Keyword", "cljs.core/Keyword", -451434488, null)], null);
};
cljs.analyzer.get_tag = function cljs$analyzer$get_tag(e) {
  var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(e);
  if (!(tag == null)) {
    return tag;
  } else {
    var tag__$1 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(e));
    if (!(tag__$1 == null)) {
      return tag__$1;
    } else {
      return (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(e)));
    }
  }
};
cljs.analyzer.find_matching_method = function cljs$analyzer$find_matching_method(f, params) {
  var methods$ = function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(f);
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      return (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(f));
    }
  }();
  var c = cljs.core.count.call(null, params);
  return cljs.core.some.call(null, function(methods$, c) {
    return function(m) {
      var and__4048__auto__ = function() {
        var or__4060__auto__ = (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(m) === c;
        if (or__4060__auto__) {
          return or__4060__auto__;
        } else {
          return (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(m);
        }
      }();
      if (and__4048__auto__) {
        return m;
      } else {
        return and__4048__auto__;
      }
    };
  }(methods$, c), methods$);
};
cljs.analyzer.type_QMARK_ = function cljs$analyzer$type_QMARK_(env, t) {
  if (!(t == null) && t instanceof cljs.core.Symbol) {
    var var$ = cljs.analyzer.resolve_var.call(null, env, t);
    var type = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(var$);
    if (!(type == null)) {
      return type;
    } else {
      var type__$1 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(var$));
      if (!(type__$1 == null)) {
        return type__$1;
      } else {
        var proto = (new cljs.core.Keyword(null, "protocol-symbol", "protocol-symbol", 1279552198)).cljs$core$IFn$_invoke$arity$1(var$);
        if (!(proto == null)) {
          return proto;
        } else {
          return cljs.core.get.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol("cljs.core", "PersistentHashMap", "cljs.core/PersistentHashMap", -454120575, null), null, new cljs.core.Symbol("cljs.core", "List", "cljs.core/List", 1708954352, null), null], null), null), t);
        }
      }
    }
  } else {
    return null;
  }
};
cljs.analyzer.NOT_NATIVE = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "clj", "clj", 980036099, null), null, new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null), null], null), null);
cljs.analyzer.BOOLEAN_OR_SEQ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "seq", "seq", -177272256, null), null, new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), null], null), null);
cljs.analyzer.infer_if = function cljs$analyzer$infer_if(env, e) {
  var map__6978 = e;
  var map__6978__$1 = (!(map__6978 == null) ? map__6978.cljs$lang$protocol_mask$partition0$ & 64 || map__6978.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6978) : map__6978;
  var map__6979 = cljs.core.get.call(null, map__6978__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
  var map__6979__$1 = (!(map__6979 == null) ? map__6979.cljs$lang$protocol_mask$partition0$ & 64 || map__6979.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6979) : map__6979;
  var op = cljs.core.get.call(null, map__6979__$1, new cljs.core.Keyword(null, "op", "op", -1882987955));
  var form = cljs.core.get.call(null, map__6979__$1, new cljs.core.Keyword(null, "form", "form", -1624062471));
  var then_tag = cljs.analyzer.infer_tag.call(null, env, (new cljs.core.Keyword(null, "then", "then", 460598070)).cljs$core$IFn$_invoke$arity$1(e));
  if (cljs.core.keyword_identical_QMARK_.call(null, op, new cljs.core.Keyword(null, "constant", "constant", -379609303)) && !(form == null) && !(form === false)) {
    return then_tag;
  } else {
    var else_tag = cljs.analyzer.infer_tag.call(null, env, (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(e));
    if (cljs.core.symbol_identical_QMARK_.call(null, then_tag, else_tag) || cljs.core.symbol_identical_QMARK_.call(null, else_tag, cljs.analyzer.IGNORE_SYM)) {
      return then_tag;
    } else {
      if (cljs.core.symbol_identical_QMARK_.call(null, then_tag, cljs.analyzer.IGNORE_SYM)) {
        return else_tag;
      } else {
        if ((!(cljs.core.get.call(null, cljs.analyzer.NOT_NATIVE, then_tag) == null) || cljs.analyzer.type_QMARK_.call(null, env, then_tag)) && (!(cljs.core.get.call(null, cljs.analyzer.NOT_NATIVE, else_tag) == null) || cljs.analyzer.type_QMARK_.call(null, env, else_tag))) {
          return new cljs.core.Symbol(null, "clj", "clj", 980036099, null);
        } else {
          if (!(cljs.core.get.call(null, cljs.analyzer.BOOLEAN_OR_SEQ, then_tag) == null) && !(cljs.core.get.call(null, cljs.analyzer.BOOLEAN_OR_SEQ, else_tag) == null)) {
            return new cljs.core.Symbol(null, "seq", "seq", -177272256, null);
          } else {
            var then_tag__$1 = cljs.analyzer.cljs_set_QMARK_.call(null, then_tag) ? then_tag : cljs.core.PersistentHashSet.fromArray([then_tag], true);
            var else_tag__$1 = cljs.analyzer.cljs_set_QMARK_.call(null, else_tag) ? else_tag : cljs.core.PersistentHashSet.fromArray([else_tag], true);
            return cljs.core.into.call(null, then_tag__$1, else_tag__$1);
          }
        }
      }
    }
  }
};
cljs.analyzer.infer_invoke = function cljs$analyzer$infer_invoke(env, e) {
  var map__6984 = (new cljs.core.Keyword(null, "f", "f", -1597136552)).cljs$core$IFn$_invoke$arity$1(e);
  var map__6984__$1 = (!(map__6984 == null) ? map__6984.cljs$lang$protocol_mask$partition0$ & 64 || map__6984.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6984) : map__6984;
  var f = map__6984__$1;
  var info = cljs.core.get.call(null, map__6984__$1, new cljs.core.Keyword(null, "info", "info", -317069002));
  var ret_tag = (new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730)).cljs$core$IFn$_invoke$arity$1(info) == null ? null : (new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990)).cljs$core$IFn$_invoke$arity$1(info);
  if (!(ret_tag == null)) {
    return ret_tag;
  } else {
    var args = (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(e);
    var me = cljs.core.assoc.call(null, cljs.analyzer.find_matching_method.call(null, f, args), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "method", "method", 55703592));
    var ret_tag__$1 = cljs.analyzer.infer_tag.call(null, env, me);
    if (!(ret_tag__$1 == null)) {
      return ret_tag__$1;
    } else {
      return cljs.analyzer.ANY_SYM;
    }
  }
};
cljs.analyzer.infer_tag = function cljs$analyzer$infer_tag(env, e) {
  var tag = cljs.analyzer.get_tag.call(null, e);
  if (!(tag == null)) {
    return tag;
  } else {
    var G__6988 = (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(e) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(e).fqn : null;
    switch(G__6988) {
      case "js":
        return cljs.analyzer.ANY_SYM;
        break;
      case "let":
        return cljs$analyzer$infer_tag.call(null, env, (new cljs.core.Keyword(null, "expr", "expr", 745722291)).cljs$core$IFn$_invoke$arity$1(e));
        break;
      case "do":
        return cljs$analyzer$infer_tag.call(null, env, (new cljs.core.Keyword(null, "ret", "ret", -468222814)).cljs$core$IFn$_invoke$arity$1(e));
        break;
      case "if":
        return cljs.analyzer.infer_if.call(null, env, e);
        break;
      case "method":
        return cljs$analyzer$infer_tag.call(null, env, (new cljs.core.Keyword(null, "expr", "expr", 745722291)).cljs$core$IFn$_invoke$arity$1(e));
        break;
      case "constant":
        var G__6989 = (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(e);
        if (cljs.core._EQ_.call(null, true, G__6989)) {
          return cljs.analyzer.BOOLEAN_SYM;
        } else {
          if (cljs.core._EQ_.call(null, false, G__6989)) {
            return cljs.analyzer.BOOLEAN_SYM;
          } else {
            return cljs.analyzer.ANY_SYM;
          }
        }
        break;
      case "recur":
        return cljs.analyzer.IGNORE_SYM;
        break;
      case "loop":
        return cljs$analyzer$infer_tag.call(null, env, (new cljs.core.Keyword(null, "expr", "expr", 745722291)).cljs$core$IFn$_invoke$arity$1(e));
        break;
      case "var":
        if (!((new cljs.core.Keyword(null, "init", "init", -1875481434)).cljs$core$IFn$_invoke$arity$1(e) == null)) {
          return cljs$analyzer$infer_tag.call(null, env, (new cljs.core.Keyword(null, "init", "init", -1875481434)).cljs$core$IFn$_invoke$arity$1(e));
        } else {
          return cljs$analyzer$infer_tag.call(null, env, (new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(e));
        }
        break;
      case "invoke":
        return cljs.analyzer.infer_invoke.call(null, env, e);
        break;
      case "throw":
        return cljs.analyzer.IGNORE_SYM;
        break;
      case "def":
        return cljs$analyzer$infer_tag.call(null, env, (new cljs.core.Keyword(null, "init", "init", -1875481434)).cljs$core$IFn$_invoke$arity$1(e));
        break;
      case "dot":
        return cljs.analyzer.ANY_SYM;
        break;
      default:
        return null;
    }
  }
};
if (typeof cljs.analyzer.parse !== "undefined") {
} else {
  cljs.analyzer.parse = function() {
    var method_table__4954__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__4955__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__4956__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__4957__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__4958__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.analyzer", "parse"), function(method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__, hierarchy__4958__auto__) {
      return function() {
        var G__6991__delegate = function(op, rest) {
          return op;
        };
        var G__6991 = function(op, var_args) {
          var rest = null;
          if (arguments.length > 1) {
            var G__6992__i = 0, G__6992__a = new Array(arguments.length - 1);
            while (G__6992__i < G__6992__a.length) {
              G__6992__a[G__6992__i] = arguments[G__6992__i + 1];
              ++G__6992__i;
            }
            rest = new cljs.core.IndexedSeq(G__6992__a, 0);
          }
          return G__6991__delegate.call(this, op, rest);
        };
        G__6991.cljs$lang$maxFixedArity = 1;
        G__6991.cljs$lang$applyTo = function(arglist__6993) {
          var op = cljs.core.first(arglist__6993);
          var rest = cljs.core.rest(arglist__6993);
          return G__6991__delegate(op, rest);
        };
        G__6991.cljs$core$IFn$_invoke$arity$variadic = G__6991__delegate;
        return G__6991;
      }();
    }(method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__, hierarchy__4958__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4958__auto__, method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__);
  }();
}
cljs.analyzer.var_ast = function cljs$analyzer$var_ast(env, sym) {
  var var$ = cljs.analyzer.resolve_var.call(null, env, sym, cljs.analyzer.confirm_var_exists_throw.call(null));
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(var$);
  if (temp__4423__auto__) {
    var var_ns = temp__4423__auto__;
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "var", "var", -769682797), cljs.analyzer.analyze.call(null, expr_env, sym), new cljs.core.Keyword(null, "sym", "sym", -1444860305), cljs.analyzer.analyze.call(null, expr_env, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    cljs.core.symbol.call(null, cljs.core.name.call(null, var_ns), cljs.core.name.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(var$)))))))), new cljs.core.Keyword(null, "meta", "meta", 1499536964), function() {
      var ks = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "column", "column", 2078222095)], null);
      var m = cljs.core.merge.call(null, function() {
        var user_meta = (new cljs.core.Keyword(null, "meta", "meta", 1499536964)).cljs$core$IFn$_invoke$arity$1(var$);
        var uks = cljs.core.keys.call(null, user_meta);
        return cljs.core.zipmap.call(null, uks, cljs.core.map.call(null, function(user_meta, uks, ks, var_ns, temp__4423__auto__, var$, expr_env) {
          return function(p1__6994_SHARP_) {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.get.call(null, user_meta, p1__6994_SHARP_)), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
          };
        }(user_meta, uks, ks, var_ns, temp__4423__auto__, var$, expr_env), uks));
      }(), cljs.core.assoc.call(null, cljs.core.zipmap.call(null, ks, cljs.core.map.call(null, function(ks, var_ns, temp__4423__auto__, var$, expr_env) {
        return function(p1__6995_SHARP_) {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.get.call(null, var$, p1__6995_SHARP_)), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        };
      }(ks, var_ns, temp__4423__auto__, var$, expr_env), ks)), new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.symbol.call(null, cljs.core.name.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(var$))))))), 
      new cljs.core.Keyword(null, "test", "test", 577538877), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when", "cljs.core/when", 120293186, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
      new cljs.core.Symbol(null, ".-cljs$lang$test", ".-cljs$lang$test", 718963148, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, sym)))))))), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), function() {
        var arglists = (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(var$);
        var arglists_SINGLEQUOTE_ = cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.first.call(null, arglists)) ? cljs.core.second.call(null, arglists) : arglists;
        return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.doall.call(null, cljs.core.map.call(null, cljs.core.with_meta, arglists_SINGLEQUOTE_, (new cljs.core.Keyword(null, "arglists-meta", "arglists-meta", 1944829838)).cljs$core$IFn$_invoke$arity$1(var$)))), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
      }()));
      return cljs.analyzer.analyze.call(null, expr_env, m);
    }()], null);
  } else {
    return null;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "var", "var", 870848730, null), function(op, env, p__6996, _, ___$1) {
  var vec__6997 = p__6996;
  var ___$2 = cljs.core.nth.call(null, vec__6997, 0, null);
  var sym = cljs.core.nth.call(null, vec__6997, 1, null);
  var form = vec__6997;
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var-special", "var-special", 1131576802), new cljs.core.Keyword(null, "form", "form", -1624062471), form], null), cljs.analyzer.var_ast.call(null, env, sym));
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "if", "if", 1181717262, null), function(op, env, p__6998, name, _) {
  var vec__6999 = p__6998;
  var ___$1 = cljs.core.nth.call(null, vec__6999, 0, null);
  var test = cljs.core.nth.call(null, vec__6999, 1, null);
  var then = cljs.core.nth.call(null, vec__6999, 2, null);
  var else$ = cljs.core.nth.call(null, vec__6999, 3, null);
  var form = vec__6999;
  if (cljs.core.count.call(null, form) < 3) {
    throw cljs.analyzer.error.call(null, env, "Too few arguments to if");
  } else {
  }
  if (cljs.core.count.call(null, form) > 4) {
    throw cljs.analyzer.error.call(null, env, "Too many arguments to if");
  } else {
  }
  var test_expr = function() {
    var _STAR_recur_frames_STAR_7000 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), test);
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7000;
    }
  }();
  var then_expr = function() {
    var _STAR_allow_redef_STAR_7001 = cljs.analyzer._STAR_allow_redef_STAR_;
    cljs.analyzer._STAR_allow_redef_STAR_ = true;
    try {
      return cljs.analyzer.analyze.call(null, env, then);
    } finally {
      cljs.analyzer._STAR_allow_redef_STAR_ = _STAR_allow_redef_STAR_7001;
    }
  }();
  var else_expr = function() {
    var _STAR_allow_redef_STAR_7002 = cljs.analyzer._STAR_allow_redef_STAR_;
    cljs.analyzer._STAR_allow_redef_STAR_ = true;
    try {
      return cljs.analyzer.analyze.call(null, env, else$);
    } finally {
      cljs.analyzer._STAR_allow_redef_STAR_ = _STAR_allow_redef_STAR_7002;
    }
  }();
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "if", "if", -458814265), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "test", "test", 577538877), test_expr, new cljs.core.Keyword(null, "then", "then", 460598070), then_expr, new cljs.core.Keyword(null, "else", "else", -1508377146), else_expr, new cljs.core.Keyword(null, 
  "unchecked", "unchecked", 924418378), cljs.core._STAR_unchecked_if_STAR_, new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [test_expr, then_expr, else_expr], null)], null);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "case*", "case*", -1938255072, null), function(op, env, p__7005, name, _) {
  var vec__7006 = p__7005;
  var ___$1 = cljs.core.nth.call(null, vec__7006, 0, null);
  var sym = cljs.core.nth.call(null, vec__7006, 1, null);
  var tests = cljs.core.nth.call(null, vec__7006, 2, null);
  var thens = cljs.core.nth.call(null, vec__7006, 3, null);
  var default$ = cljs.core.nth.call(null, vec__7006, 4, null);
  var form = vec__7006;
  if (sym instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("case* must switch on symbol"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "symbol?", "symbol?", 1820680511, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null))))].join(""));
  }
  if (cljs.core.every_QMARK_.call(null, cljs.core.vector_QMARK_, tests)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("case* tests must be grouped in vectors"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", "every?", 2083724064, null), new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "tests", "tests", 599445902, null))))].join(""));
  }
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var v = function() {
    var _STAR_recur_frames_STAR_7007 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.analyzer.analyze.call(null, expr_env, sym);
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7007;
    }
  }();
  var tests__$1 = cljs.core.mapv.call(null, function(expr_env, v, vec__7006, ___$1, sym, tests, thens, default$, form) {
    return function(p1__7003_SHARP_) {
      return cljs.core.mapv.call(null, function(expr_env, v, vec__7006, ___$1, sym, tests, thens, default$, form) {
        return function(t) {
          return cljs.analyzer.analyze.call(null, expr_env, t);
        };
      }(expr_env, v, vec__7006, ___$1, sym, tests, thens, default$, form), p1__7003_SHARP_);
    };
  }(expr_env, v, vec__7006, ___$1, sym, tests, thens, default$, form), tests);
  var thens__$1 = cljs.core.mapv.call(null, function(expr_env, v, tests__$1, vec__7006, ___$1, sym, tests, thens, default$, form) {
    return function(p1__7004_SHARP_) {
      return cljs.analyzer.analyze.call(null, env, p1__7004_SHARP_);
    };
  }(expr_env, v, tests__$1, vec__7006, ___$1, sym, tests, thens, default$, form), thens);
  var default$__$1 = cljs.analyzer.analyze.call(null, env, default$);
  if (cljs.core.every_QMARK_.call(null, function(expr_env, v, tests__$1, thens__$1, default$__$1, vec__7006, ___$1, sym, tests, thens, default$, form) {
    return function(t) {
      var or__4060__auto__ = (new cljs.core.Keyword(null, "const", "const", 1709929842)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(t));
      if (or__4060__auto__) {
        return or__4060__auto__;
      } else {
        var and__4048__auto__ = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "constant", "constant", -379609303), (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(t));
        if (and__4048__auto__) {
          return cljs.core.some_fn.call(null, cljs.core.number_QMARK_, cljs.core.string_QMARK_, cljs.core.char_QMARK_).call(null, (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(t));
        } else {
          return and__4048__auto__;
        }
      }
    };
  }(expr_env, v, tests__$1, thens__$1, default$__$1, vec__7006, ___$1, sym, tests, thens, default$, form), cljs.core.apply.call(null, cljs.core.concat, tests__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("case* tests must be numbers, strings, or constants"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", "every?", 2083724064, null), cljs.core.list(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "t", "t", 242699008, null)], null), cljs.core.list(new cljs.core.Symbol(null, 
    "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "->", "->", -2139605430, null), new cljs.core.Symbol(null, "t", "t", 242699008, null), new cljs.core.Keyword(null, "info", "info", -317069002), new cljs.core.Keyword(null, "const", "const", 1709929842)), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "=", "=", -1501502141, null), new cljs.core.Keyword(null, "constant", "constant", -379609303), cljs.core.list(new cljs.core.Keyword(null, 
    "op", "op", -1882987955), new cljs.core.Symbol(null, "t", "t", 242699008, null))), cljs.core.list(cljs.core.list(new cljs.core.Symbol(null, "some-fn", "some-fn", -490044165, null), new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "char?", "char?", -1072221244, null)), cljs.core.list(new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.Symbol(null, "t", "t", 242699008, 
    null)))))), cljs.core.list(new cljs.core.Symbol(null, "apply", "apply", -1334050276, null), new cljs.core.Symbol(null, "concat", "concat", -467652465, null), new cljs.core.Symbol(null, "tests", "tests", 599445902, null)))))].join(""));
  }
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "case*", "case*", 716180697), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "v", "v", 21465059), v, new cljs.core.Keyword(null, "tests", "tests", -1041085625), tests__$1, new cljs.core.Keyword(null, "thens", "thens", 226631442), thens__$1, new cljs.core.Keyword(null, 
  "default", "default", -1987822328), default$__$1, new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.vec.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [v], null), tests__$1, thens__$1, default$__$1 ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [default$__$1], null) : null))], null);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), function(op, env, p__7008, name, _) {
  var vec__7009 = p__7008;
  var ___$1 = cljs.core.nth.call(null, vec__7009, 0, null);
  var throw$ = cljs.core.nth.call(null, vec__7009, 1, null);
  var form = vec__7009;
  var throw_expr = function() {
    var _STAR_recur_frames_STAR_7010 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), throw$);
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7010;
    }
  }();
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "throw", "throw", -1044625833), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "throw", "throw", -1044625833), throw_expr, new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [throw_expr], null)], null);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "try", "try", -1273693247, null), function(op, env, p__7015, name, _) {
  var vec__7016 = p__7015;
  var ___$1 = cljs.core.nth.call(null, vec__7016, 0, null);
  var body = cljs.core.nthnext.call(null, vec__7016, 1);
  var form = vec__7016;
  var catchenv = cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "context", "context", -830191113)], null), function(vec__7016, ___$1, body, form) {
    return function(p1__7011_SHARP_) {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), p1__7011_SHARP_)) {
        return new cljs.core.Keyword(null, "return", "return", -1891502105);
      } else {
        return p1__7011_SHARP_;
      }
    };
  }(vec__7016, ___$1, body, form));
  var catch_QMARK_ = cljs.core.every_pred.call(null, cljs.core.seq_QMARK_, function(catchenv, vec__7016, ___$1, body, form) {
    return function(p1__7012_SHARP_) {
      return cljs.core._EQ_.call(null, cljs.core.first.call(null, p1__7012_SHARP_), new cljs.core.Symbol(null, "catch", "catch", -1616370245, null));
    };
  }(catchenv, vec__7016, ___$1, body, form));
  var default_QMARK_ = cljs.core.every_pred.call(null, catch_QMARK_, function(catchenv, catch_QMARK_, vec__7016, ___$1, body, form) {
    return function(p1__7013_SHARP_) {
      return cljs.core._EQ_.call(null, cljs.core.second.call(null, p1__7013_SHARP_), new cljs.core.Keyword(null, "default", "default", -1987822328));
    };
  }(catchenv, catch_QMARK_, vec__7016, ___$1, body, form));
  var finally_QMARK_ = cljs.core.every_pred.call(null, cljs.core.seq_QMARK_, function(catchenv, catch_QMARK_, default_QMARK_, vec__7016, ___$1, body, form) {
    return function(p1__7014_SHARP_) {
      return cljs.core._EQ_.call(null, cljs.core.first.call(null, p1__7014_SHARP_), new cljs.core.Symbol(null, "finally", "finally", -1065347064, null));
    };
  }(catchenv, catch_QMARK_, default_QMARK_, vec__7016, ___$1, body, form));
  var map__7017 = function() {
    var parser = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "start", "start", -355208981), new cljs.core.Keyword(null, "forms", "forms", 2045992350), body, new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "cblocks", "cblocks", -1769978138), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "dblock", "dblock", -1325623381), null, 
    new cljs.core.Keyword(null, "fblock", "fblock", -1236607426), null], null);
    while (true) {
      if (cljs.core.seq_QMARK_.call(null, (new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(parser))) {
        var vec__7018 = (new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(parser);
        var form__$1 = cljs.core.nth.call(null, vec__7018, 0, null);
        var forms_STAR_ = cljs.core.nthnext.call(null, vec__7018, 1);
        var parser_STAR_ = cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "forms", "forms", 2045992350), forms_STAR_);
        var G__7019 = (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
        switch(G__7019) {
          case "start":
            if (catch_QMARK_.call(null, form__$1)) {
              var G__7025 = cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "catches", "catches", -1478797617));
              parser = G__7025;
              continue;
            } else {
              if (finally_QMARK_.call(null, form__$1)) {
                var G__7026 = cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "finally", "finally", 1589088705));
                parser = G__7026;
                continue;
              } else {
                var G__7027 = cljs.core.update_in.call(null, parser_STAR_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "body", "body", -2049205669)], null), cljs.core.conj, form__$1);
                parser = G__7027;
                continue;
              }
            }
            break;
          case "catches":
            if (default_QMARK_.call(null, form__$1)) {
              var G__7028 = cljs.core.assoc.call(null, parser_STAR_, new cljs.core.Keyword(null, "dblock", "dblock", -1325623381), form__$1, new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "finally", "finally", 1589088705));
              parser = G__7028;
              continue;
            } else {
              if (catch_QMARK_.call(null, form__$1)) {
                var G__7029 = cljs.core.update_in.call(null, parser_STAR_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cblocks", "cblocks", -1769978138)], null), cljs.core.conj, form__$1);
                parser = G__7029;
                continue;
              } else {
                if (finally_QMARK_.call(null, form__$1)) {
                  var G__7030 = cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "finally", "finally", 1589088705));
                  parser = G__7030;
                  continue;
                } else {
                  throw cljs.analyzer.error.call(null, env, "Invalid try form");
                }
              }
            }
            break;
          case "finally":
            var G__7031 = cljs.core.assoc.call(null, parser_STAR_, new cljs.core.Keyword(null, "fblock", "fblock", -1236607426), form__$1, new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "done", "done", -889844188));
            parser = G__7031;
            continue;
            break;
          case "done":
            throw cljs.analyzer.error.call(null, env, "Unexpected form after finally");break;
          default:
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(parser))].join(""));;
        }
      } else {
        return parser;
      }
      break;
    }
  }();
  var map__7017__$1 = (!(map__7017 == null) ? map__7017.cljs$lang$protocol_mask$partition0$ & 64 || map__7017.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7017) : map__7017;
  var body__$1 = cljs.core.get.call(null, map__7017__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var cblocks = cljs.core.get.call(null, map__7017__$1, new cljs.core.Keyword(null, "cblocks", "cblocks", -1769978138));
  var dblock = cljs.core.get.call(null, map__7017__$1, new cljs.core.Keyword(null, "dblock", "dblock", -1325623381));
  var fblock = cljs.core.get.call(null, map__7017__$1, new cljs.core.Keyword(null, "fblock", "fblock", -1236607426));
  var finally$ = cljs.core.seq.call(null, fblock) ? cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "statement", "statement", -32780863)), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core.rest.call(null, fblock))))) : null;
  var e = function() {
    var or__4060__auto__ = cljs.core.seq.call(null, cblocks);
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      return dblock;
    }
  }() ? cljs.core.gensym.call(null, "e") : null;
  var default$ = function() {
    var temp__4423__auto__ = dblock;
    if (temp__4423__auto__) {
      var vec__7021 = temp__4423__auto__;
      var ___$2 = cljs.core.nth.call(null, vec__7021, 0, null);
      var ___$3 = cljs.core.nth.call(null, vec__7021, 1, null);
      var name__$1 = cljs.core.nth.call(null, vec__7021, 2, null);
      var cb = cljs.core.nthnext.call(null, vec__7021, 3);
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, name__$1), cljs.core._conj.call(null, cljs.core.List.EMPTY, e)))))), cb)));
    } else {
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "throw", "throw", 595905694, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, e))));
    }
  }();
  var cblock = cljs.core.seq.call(null, cblocks) ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "cond", "cljs.core/cond", 2005388338, null)), cljs.core.mapcat.call(null, function(catchenv, catch_QMARK_, default_QMARK_, finally_QMARK_, map__7017, map__7017__$1, body__$1, cblocks, dblock, fblock, finally$, e, default$, vec__7016, ___$1, body, form) {
    return function(p__7022) {
      var vec__7023 = p__7022;
      var ___$2 = cljs.core.nth.call(null, vec__7023, 0, null);
      var type = cljs.core.nth.call(null, vec__7023, 1, null);
      var name__$1 = cljs.core.nth.call(null, vec__7023, 2, null);
      var cb = cljs.core.nthnext.call(null, vec__7023, 3);
      if (name__$1) {
        if (cljs.core.not.call(null, cljs.core.namespace.call(null, name__$1))) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't qualify symbol in catch"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "name", "name", -810760592, null)))))].join(""));
        }
      } else {
      }
      return cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "instance?", "cljs.core/instance?", 2044751870, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, type), cljs.core._conj.call(null, cljs.core.List.EMPTY, e))))), 
      cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, name__$1), cljs.core._conj.call(null, 
      cljs.core.List.EMPTY, e)))))), cb))))))));
    };
  }(catchenv, catch_QMARK_, default_QMARK_, finally_QMARK_, map__7017, map__7017__$1, body__$1, cblocks, dblock, fblock, finally$, e, default$, vec__7016, ___$1, body, form), cblocks), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "else", "else", -1508377146)), cljs.core._conj.call(null, cljs.core.List.EMPTY, default$)))) : default$;
  var locals = (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(catchenv);
  var locals__$1 = e ? cljs.core.assoc.call(null, locals, e, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1843675177), e, new cljs.core.Keyword(null, "line", "line", 212345235), cljs.analyzer.get_line.call(null, e, env), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.analyzer.get_col.call(null, e, env)], null)) : locals;
  var catch$ = cblock ? cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, catchenv, new cljs.core.Keyword(null, "locals", "locals", 535295783), locals__$1), cblock) : null;
  var try$ = cljs.analyzer.analyze.call(null, function() {
    var or__4060__auto__ = e;
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      return finally$;
    }
  }() ? catchenv : env, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), body__$1))));
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "try", "try", 1380742522), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "try", "try", 1380742522), try$, new cljs.core.Keyword(null, "finally", "finally", 1589088705), finally$, new cljs.core.Keyword(null, "name", "name", 1843675177), e, new cljs.core.Keyword(null, 
  "catch", "catch", 1038065524), catch$, new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [try$, catch$, finally$], null)], null);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "def", "def", 597100991, null), function(op, env, form, name, _) {
  var pfn = function() {
    var G__7035 = null;
    var G__7035__2 = function(___$1, sym) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym], null);
    };
    var G__7035__3 = function(___$1, sym, init) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym, new cljs.core.Keyword(null, "init", "init", -1875481434), init], null);
    };
    var G__7035__4 = function(___$1, sym, doc, init) {
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym, new cljs.core.Keyword(null, "doc", "doc", 1913296891), doc, new cljs.core.Keyword(null, "init", "init", -1875481434), init], null);
    };
    G__7035 = function(___$1, sym, doc, init) {
      switch(arguments.length) {
        case 2:
          return G__7035__2.call(this, ___$1, sym);
        case 3:
          return G__7035__3.call(this, ___$1, sym, doc);
        case 4:
          return G__7035__4.call(this, ___$1, sym, doc, init);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7035.cljs$core$IFn$_invoke$arity$2 = G__7035__2;
    G__7035.cljs$core$IFn$_invoke$arity$3 = G__7035__3;
    G__7035.cljs$core$IFn$_invoke$arity$4 = G__7035__4;
    return G__7035;
  }();
  var args = cljs.core.apply.call(null, pfn, form);
  var sym = (new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(args);
  var sym_meta = cljs.core.meta.call(null, sym);
  var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym));
  var protocol = (new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym));
  var dynamic = (new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym));
  var ns_name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
  var locals = (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env);
  var clash_ns = cljs.core.symbol.call(null, [cljs.core.str(ns_name), cljs.core.str("."), cljs.core.str(sym)].join(""));
  if (cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), clash_ns], null))) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "ns-var-clash", "ns-var-clash", -280494668), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.core.symbol.call(null, [cljs.core.str(ns_name), cljs.core.str("."), cljs.core.str(sym)].join("")), new cljs.core.Keyword(null, "var", "var", -769682797), cljs.core.symbol.call(null, [cljs.core.str(ns_name)].join(""), [cljs.core.str(sym)].join(""))], null));
  } else {
  }
  if (cljs.core.namespace.call(null, sym)) {
    throw cljs.analyzer.error.call(null, env, "Can't def ns-qualified name");
  } else {
  }
  if ((new cljs.core.Keyword(null, "const", "const", 1709929842)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), sym))) {
    throw cljs.analyzer.error.call(null, env, "Can't redefine a constant");
  } else {
  }
  var temp__4425__auto___7036 = (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(args);
  if (temp__4425__auto___7036) {
    var doc_7037 = temp__4425__auto___7036;
    if (typeof doc_7037 === "string") {
    } else {
      throw cljs.analyzer.error.call(null, env, "Too many arguments to def");
    }
  } else {
  }
  var temp__4425__auto___7038 = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym], null));
  if (temp__4425__auto___7038) {
    var v_7039 = temp__4425__auto___7038;
    if (function() {
      var and__4048__auto__ = cljs.core.not.call(null, cljs.analyzer._STAR_allow_redef_STAR_);
      if (and__4048__auto__) {
        var and__4048__auto____$1 = cljs.core.not.call(null, (new cljs.core.Keyword(null, "declared", "declared", 92336021)).cljs$core$IFn$_invoke$arity$1(v_7039));
        if (and__4048__auto____$1) {
          var and__4048__auto____$2 = cljs.core.not.call(null, (new cljs.core.Keyword(null, "declared", "declared", 92336021)).cljs$core$IFn$_invoke$arity$1(sym_meta));
          if (and__4048__auto____$2) {
            var and__4048__auto____$3 = cljs.analyzer._STAR_file_defs_STAR_;
            if (and__4048__auto____$3) {
              return cljs.core.get.call(null, cljs.core.deref.call(null, cljs.analyzer._STAR_file_defs_STAR_), sym);
            } else {
              return and__4048__auto____$3;
            }
          } else {
            return and__4048__auto____$2;
          }
        } else {
          return and__4048__auto____$1;
        }
      } else {
        return and__4048__auto__;
      }
    }()) {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "redef-in-file", "redef-in-file", -476530788), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym, new cljs.core.Keyword(null, "line", "line", 212345235), (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(v_7039)], null));
    } else {
    }
  } else {
  }
  if (cljs.analyzer._STAR_file_defs_STAR_) {
    cljs.core.swap_BANG_.call(null, cljs.analyzer._STAR_file_defs_STAR_, cljs.core.conj, sym);
  } else {
  }
  var env__$1 = function() {
    var or__4060__auto__ = cljs.core.not_EQ_.call(null, ns_name, new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null)) && cljs.analyzer.core_name_QMARK_.call(null, env, sym);
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "uses", "uses", 232664692), sym], null));
    }
  }() ? function() {
    var ev = cljs.analyzer.resolve_existing_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), sym);
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "redef", "redef", 1032704258), env, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym, new cljs.core.Keyword(null, "ns", "ns", 441598760), (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(ev), new cljs.core.Keyword(null, "ns-name", "ns-name", -2077346323), ns_name], null));
    cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "excludes", "excludes", -1791725945)], null), cljs.core.conj, sym);
    return cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "excludes", "excludes", -1791725945)], null), cljs.core.conj, sym);
  }() : env;
  var var_name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env__$1, new cljs.core.Keyword(null, "locals", "locals", 535295783)), sym));
  var init_expr = cljs.core.contains_QMARK_.call(null, args, new cljs.core.Keyword(null, "init", "init", -1875481434)) ? function() {
    cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym], null), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), var_name], null), sym_meta, dynamic ? 
    new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), true], null) : null, cljs.analyzer.source_info.call(null, var_name, env__$1)));
    var _STAR_recur_frames_STAR_7033 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env__$1, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), (new cljs.core.Keyword(null, "init", "init", -1875481434)).cljs$core$IFn$_invoke$arity$1(args), sym);
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7033;
    }
  }() : null;
  var fn_var_QMARK_ = function() {
    var and__4048__auto__ = init_expr;
    if (and__4048__auto__) {
      return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(init_expr), new cljs.core.Keyword(null, "fn", "fn", -1175266204));
    } else {
      return and__4048__auto__;
    }
  }();
  var tag__$1 = fn_var_QMARK_ ? function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990)).cljs$core$IFn$_invoke$arity$1(init_expr);
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      return tag;
    }
  }() : tag;
  var export_as = function() {
    var temp__4425__auto__ = (new cljs.core.Keyword(null, "export", "export", 214356590)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym));
    if (temp__4425__auto__) {
      var export_val = temp__4425__auto__;
      if (cljs.core._EQ_.call(null, true, export_val)) {
        return var_name;
      } else {
        return export_val;
      }
    } else {
      return null;
    }
  }();
  var doc = function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(args);
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      return (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym));
    }
  }();
  var temp__4425__auto___7040 = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym], null));
  if (temp__4425__auto___7040) {
    var v_7041 = temp__4425__auto___7040;
    if (function() {
      var and__4048__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "declared", "declared", 92336021)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym)));
      if (and__4048__auto__) {
        var and__4048__auto____$1 = (new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730)).cljs$core$IFn$_invoke$arity$1(v_7041);
        if (and__4048__auto____$1) {
          return cljs.core.not.call(null, fn_var_QMARK_);
        } else {
          return and__4048__auto____$1;
        }
      } else {
        return and__4048__auto__;
      }
    }()) {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), env__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns-name", "ns-name", -2077346323), ns_name, new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym], null));
    } else {
    }
  } else {
  }
  cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym], null), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), var_name], null), function() {
    var G__7034 = sym_meta;
    var G__7034__$1 = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(sym_meta) ? cljs.core.assoc.call(null, G__7034, new cljs.core.Keyword(null, "test", "test", 577538877), true) : G__7034;
    return G__7034__$1;
  }(), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core.update_in.call(null, cljs.core.dissoc.call(null, sym_meta, new cljs.core.Keyword(null, "test", "test", 577538877)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "file", "file", -1269645878)], null), function(env__$1, var_name, init_expr, fn_var_QMARK_, tag__$1, export_as, doc, pfn, args, sym, sym_meta, tag, protocol, 
  dynamic, ns_name, locals, clash_ns) {
    return function(f) {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env__$1)), new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null))) {
        return "cljs/core.cljs";
      } else {
        return f;
      }
    };
  }(env__$1, var_name, init_expr, fn_var_QMARK_, tag__$1, export_as, doc, pfn, args, sym, sym_meta, tag, protocol, dynamic, ns_name, locals, clash_ns))], null), doc ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "doc", "doc", 1913296891), doc], null) : null, dynamic ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), true], null) : null, cljs.analyzer.source_info.call(null, var_name, env__$1), protocol ? new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), protocol], null) : null, function() {
    var temp__4425__auto__ = (new cljs.core.Keyword(null, "protocol-symbol", "protocol-symbol", 1279552198)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym));
    if (temp__4425__auto__) {
      var protocol_symbol = temp__4425__auto__;
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "protocol-symbol", "protocol-symbol", 1279552198), protocol_symbol, new cljs.core.Keyword(null, "info", "info", -317069002), (new cljs.core.Keyword(null, "protocol-info", "protocol-info", 1471745843)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, protocol_symbol)), new cljs.core.Keyword(null, "impls", "impls", -1314014853), cljs.core.PersistentHashSet.EMPTY], null);
    } else {
      return null;
    }
  }(), fn_var_QMARK_ ? function() {
    var params = cljs.core.map.call(null, function(env__$1, var_name, init_expr, fn_var_QMARK_, tag__$1, export_as, doc, pfn, args, sym, sym_meta, tag, protocol, dynamic, ns_name, locals, clash_ns) {
      return function(p1__7032_SHARP_) {
        return cljs.core.vec.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "name", "name", 1843675177), (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(p1__7032_SHARP_)));
      };
    }(env__$1, var_name, init_expr, fn_var_QMARK_, tag__$1, export_as, doc, pfn, args, sym, sym_meta, tag, protocol, dynamic, ns_name, locals, clash_ns), (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(init_expr));
    return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), true, new cljs.core.Keyword(null, "protocol-impl", "protocol-impl", 2101328365), (new cljs.core.Keyword(null, "protocol-impl", "protocol-impl", 2101328365)).cljs$core$IFn$_invoke$arity$1(init_expr), new cljs.core.Keyword(null, "protocol-inline", "protocol-inline", 1550487556), (new cljs.core.Keyword(null, "protocol-inline", "protocol-inline", 1550487556)).cljs$core$IFn$_invoke$arity$1(init_expr)], 
    null), function() {
      var temp__4423__auto__ = (new cljs.core.Keyword(null, "top-fn", "top-fn", -2056129173)).cljs$core$IFn$_invoke$arity$1(sym_meta);
      if (temp__4423__auto__) {
        var top_fn_meta = temp__4423__auto__;
        return top_fn_meta;
      } else {
        return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "variadic", "variadic", 882626057), (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(init_expr), new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(init_expr), new cljs.core.Keyword(null, "method-params", "method-params", -980792179), 
        params, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(sym_meta), new cljs.core.Keyword(null, "arglists-meta", "arglists-meta", 1944829838), cljs.core.doall.call(null, cljs.core.map.call(null, cljs.core.meta, (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(sym_meta)))], null);
      }
    }());
  }() : null, function() {
    var and__4048__auto__ = fn_var_QMARK_;
    if (and__4048__auto__) {
      return tag__$1;
    } else {
      return and__4048__auto__;
    }
  }() ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990), tag__$1], null) : null));
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "env", "env", -1815813235), env__$1, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "def", "def", -1043430536), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "name", "name", 1843675177), var_name, new cljs.core.Keyword(null, "var", "var", -769682797), cljs.core.assoc.call(null, cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, 
  cljs.core.assoc.call(null, cljs.core.dissoc.call(null, env__$1, new cljs.core.Keyword(null, "locals", "locals", 535295783)), new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), new cljs.core.Keyword(null, "def-var", "def-var", -698214377), true), sym), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var", "var", -769682797)), new cljs.core.Keyword(null, "doc", "doc", 1913296891), doc, new cljs.core.Keyword(null, 
  "jsdoc", "jsdoc", 1745183516), (new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516)).cljs$core$IFn$_invoke$arity$1(sym_meta), new cljs.core.Keyword(null, "init", "init", -1875481434), init_expr], null), (new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320)).cljs$core$IFn$_invoke$arity$1(env__$1) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "var-ast", "var-ast", 1200379319), cljs.analyzer.var_ast.call(null, env__$1, sym)], null) : null, function() {
    var temp__4425__auto__ = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(sym_meta);
    if (temp__4425__auto__) {
      var test = temp__4425__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "test", "test", 577538877), cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env__$1, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), test)], null);
    } else {
      return null;
    }
  }(), tag__$1 ? fn_var_QMARK_ ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990), tag__$1], null) : new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag__$1], null) : null, dynamic ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), true], null) : null, export_as ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "export", 
  "export", 214356590), export_as], null) : null, init_expr ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [init_expr], null)], null) : null);
});
cljs.analyzer.analyze_fn_method_param = function cljs$analyzer$analyze_fn_method_param(env) {
  return function(p__7044, name) {
    var vec__7045 = p__7044;
    var locals = cljs.core.nth.call(null, vec__7045, 0, null);
    var params = cljs.core.nth.call(null, vec__7045, 1, null);
    var line = cljs.analyzer.get_line.call(null, name, env);
    var column = cljs.analyzer.get_col.call(null, name, env);
    var nmeta = cljs.core.meta.call(null, name);
    var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(nmeta);
    var shadow = locals == null ? null : locals.call(null, name);
    var env__$1 = cljs.core.merge.call(null, cljs.core.select_keys.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "context", "context", -830191113)], null)), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), column], null));
    var param = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "binding-form?", "binding-form?", 1728940169), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "env", "env", -1815813235), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "info", "info", -317069002), new cljs.core.Keyword(null, "tag", 
    "tag", -1290361223), new cljs.core.Keyword(null, "shadow", "shadow", 873231803)], [name, true, new cljs.core.Keyword(null, "var", "var", -769682797), env__$1, column, line, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), name, new cljs.core.Keyword(null, "shadow", "shadow", 873231803), shadow], null), tag, shadow]);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc.call(null, locals, name, param), cljs.core.conj.call(null, params, param)], null);
  };
};
cljs.analyzer.analyze_fn_method_body = function cljs$analyzer$analyze_fn_method_body(env, form, recur_frames) {
  var _STAR_recur_frames_STAR_7047 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = recur_frames;
  try {
    return cljs.analyzer.analyze.call(null, env, form);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7047;
  }
};
cljs.analyzer.analyze_fn_method = function cljs$analyzer$analyze_fn_method(env, locals, form, type) {
  var param_names = cljs.core.first.call(null, form);
  var variadic = cljs.core.boolean$.call(null, cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "&", "&", -2144855648, null), null], null), null), param_names));
  var param_names__$1 = cljs.core.vec.call(null, cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "&", "&", -2144855648, null), null], null), null), param_names));
  var body = cljs.core.next.call(null, form);
  var step = cljs.analyzer.analyze_fn_method_param.call(null, env);
  var step_init = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [locals, cljs.core.PersistentVector.EMPTY], null);
  var vec__7049 = cljs.core.reduce.call(null, step, step_init, param_names__$1);
  var locals__$1 = cljs.core.nth.call(null, vec__7049, 0, null);
  var params = cljs.core.nth.call(null, vec__7049, 1, null);
  var params_SINGLEQUOTE_ = variadic === true ? cljs.core.butlast.call(null, params) : params;
  var fixed_arity = cljs.core.count.call(null, params_SINGLEQUOTE_);
  var recur_frame = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "params", "params", 710516235), params, new cljs.core.Keyword(null, "flag", "flag", 1088647881), cljs.core.atom.call(null, null)], null);
  var recur_frames = cljs.core.cons.call(null, recur_frame, cljs.analyzer._STAR_recur_frames_STAR_);
  var body_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "return", "return", -1891502105), new cljs.core.Keyword(null, "locals", "locals", 535295783), locals__$1);
  var body_form = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), body)));
  var expr = cljs.analyzer.analyze_fn_method_body.call(null, body_env, body_form, recur_frames);
  var recurs = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "flag", "flag", 1088647881)).cljs$core$IFn$_invoke$arity$1(recur_frame));
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), variadic, new cljs.core.Keyword(null, "params", "params", 710516235), params, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), fixed_arity, new cljs.core.Keyword(null, "type", "type", 1174270348), type, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, 
  "expr", "expr", 745722291), expr, new cljs.core.Keyword(null, "recurs", "recurs", -1959309309), recurs], null);
};
cljs.analyzer.fn_name_var = function cljs$analyzer$fn_name_var(env, locals, name) {
  if (name == null) {
    return null;
  } else {
    var ns = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
    var shadow = cljs.core.get.call(null, locals, name);
    var shadow__$1 = shadow == null ? cljs.core.get_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "js-globals", "js-globals", 1670394727), name], null)) : null;
    var fn_scope = (new cljs.core.Keyword(null, "fn-scope", "fn-scope", -865664859)).cljs$core$IFn$_invoke$arity$1(env);
    var name_var = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), name, new cljs.core.Keyword(null, "info", "info", -317069002), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "fn-self-name", "fn-self-name", 1461143531), true, new cljs.core.Keyword(null, "fn-scope", "fn-scope", -865664859), fn_scope, new cljs.core.Keyword(null, "ns", "ns", 441598760), ns, new cljs.core.Keyword(null, "shadow", "shadow", 873231803), shadow__$1], 
    null)], null);
    var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, name));
    var ret_tag = tag == null ? null : new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990), tag], null);
    return cljs.core.merge.call(null, name_var, ret_tag);
  }
};
cljs.analyzer.analyze_fn_methods_pass2_STAR_ = function cljs$analyzer$analyze_fn_methods_pass2_STAR_(menv, locals, type, meths) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, function(p1__7050_SHARP_) {
    return cljs.analyzer.analyze_fn_method.call(null, menv, locals, p1__7050_SHARP_, type);
  }, meths));
};
cljs.analyzer.analyze_fn_methods_pass2 = function cljs$analyzer$analyze_fn_methods_pass2(menv, locals, type, meths) {
  var _STAR_cljs_warnings_STAR_7052 = cljs.analyzer._STAR_cljs_warnings_STAR_;
  cljs.analyzer._STAR_cljs_warnings_STAR_ = cljs.core.zipmap.call(null, cljs.core.keys.call(null, cljs.analyzer._STAR_cljs_warnings_STAR_), cljs.core.repeat.call(null, false));
  try {
    return cljs.analyzer.analyze_fn_methods_pass2_STAR_.call(null, menv, locals, type, meths);
  } finally {
    cljs.analyzer._STAR_cljs_warnings_STAR_ = _STAR_cljs_warnings_STAR_7052;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), function(op, env, p__7054, name, _) {
  var vec__7055 = p__7054;
  var ___$1 = cljs.core.nth.call(null, vec__7055, 0, null);
  var args = cljs.core.nthnext.call(null, vec__7055, 1);
  var form = vec__7055;
  var vec__7056 = cljs.core.first.call(null, args) instanceof cljs.core.Symbol ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, args), cljs.core.next.call(null, args)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [name, cljs.core.seq.call(null, args)], null);
  var name__$1 = cljs.core.nth.call(null, vec__7056, 0, null);
  var meths = cljs.core.nth.call(null, vec__7056, 1, null);
  var meths__$1 = cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, meths)) ? cljs.core._conj.call(null, cljs.core.List.EMPTY, meths) : meths;
  var locals = (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env);
  var name_var = cljs.analyzer.fn_name_var.call(null, env, locals, name__$1);
  var env__$1 = !(name__$1 == null) ? cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fn-scope", "fn-scope", -865664859)], null), cljs.core.conj, name_var) : env;
  var locals__$1 = !(locals == null) && !(name__$1 == null) ? cljs.core.assoc.call(null, locals, name__$1, name_var) : locals;
  var form_meta = cljs.core.meta.call(null, form);
  var type = (new cljs.core.Keyword("cljs.analyzer", "type", "cljs.analyzer/type", 478749742)).cljs$core$IFn$_invoke$arity$1(form_meta);
  var proto_impl = (new cljs.core.Keyword("cljs.analyzer", "protocol-impl", "cljs.analyzer/protocol-impl", -1523935409)).cljs$core$IFn$_invoke$arity$1(form_meta);
  var proto_inline = (new cljs.core.Keyword("cljs.analyzer", "protocol-inline", "cljs.analyzer/protocol-inline", -1611519026)).cljs$core$IFn$_invoke$arity$1(form_meta);
  var menv = cljs.core.count.call(null, meths__$1) > 1 ? cljs.core.assoc.call(null, env__$1, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)) : env__$1;
  var menv__$1 = cljs.core.merge.call(null, menv, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "protocol-impl", "protocol-impl", 2101328365), proto_impl, new cljs.core.Keyword(null, "protocol-inline", "protocol-inline", 1550487556), proto_inline], null));
  var methods$ = cljs.core.map.call(null, function(vec__7056, name__$1, meths, meths__$1, locals, name_var, env__$1, locals__$1, form_meta, type, proto_impl, proto_inline, menv, menv__$1, vec__7055, ___$1, args, form) {
    return function(p1__7053_SHARP_) {
      return cljs.analyzer.analyze_fn_method.call(null, menv__$1, locals__$1, p1__7053_SHARP_, type);
    };
  }(vec__7056, name__$1, meths, meths__$1, locals, name_var, env__$1, locals__$1, form_meta, type, proto_impl, proto_inline, menv, menv__$1, vec__7055, ___$1, args, form), meths__$1);
  var mfa = cljs.core.apply.call(null, cljs.core.max, cljs.core.map.call(null, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), methods$));
  var variadic = cljs.core.boolean$.call(null, cljs.core.some.call(null, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), methods$));
  var locals__$2 = !(name__$1 == null) ? cljs.core.update_in.call(null, locals__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name__$1], null), cljs.core.assoc, new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), true, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), variadic, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), mfa, new cljs.core.Keyword(null, "method-params", "method-params", -980792179), 
  cljs.core.map.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), methods$)) : locals__$1;
  var methods$__$1 = !(name__$1 == null) ? cljs.analyzer.analyze_fn_methods_pass2.call(null, menv__$1, locals__$2, type, meths__$1) : methods$;
  var form__$1 = cljs.core.vary_meta.call(null, form, cljs.core.dissoc, new cljs.core.Keyword("cljs.analyzer", "protocol-impl", "cljs.analyzer/protocol-impl", -1523935409), new cljs.core.Keyword("cljs.analyzer", "protocol-inline", "cljs.analyzer/protocol-inline", -1611519026), new cljs.core.Keyword("cljs.analyzer", "type", "cljs.analyzer/type", 478749742));
  var js_doc = variadic === true ? "@param {...*} var_args" : null;
  var children = cljs.core.mapv.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), methods$__$1);
  var ast = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.Keyword(null, "protocol-inline", "protocol-inline", 1550487556), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "variadic", "variadic", 882626057), new cljs.core.Keyword(null, "loop-lets", "loop-lets", 2036794185), new cljs.core.Keyword(null, "protocol-impl", "protocol-impl", 2101328365), new cljs.core.Keyword(null, "op", "op", -1882987955), 
  new cljs.core.Keyword(null, "env", "env", -1815813235), new cljs.core.Keyword(null, "methods", "methods", 453930866), new cljs.core.Keyword(null, "recur-frames", "recur-frames", -307205196), new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516)], [children, proto_inline, name_var, variadic, cljs.analyzer._STAR_loop_lets_STAR_, 
  proto_impl, new cljs.core.Keyword(null, "fn", "fn", -1175266204), env__$1, methods$__$1, cljs.analyzer._STAR_recur_frames_STAR_, mfa, form__$1, new cljs.core.Symbol(null, "function", "function", -486723946, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [js_doc], null)]);
  var variadic_methods_7057 = cljs.core.filter.call(null, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), methods$__$1);
  var variadic_params_7058 = cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, variadic_methods_7057)));
  var param_counts_7059 = cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.count, new cljs.core.Keyword(null, "params", "params", 710516235)), methods$__$1);
  if (1 < cljs.core.count.call(null, variadic_methods_7057)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "multiple-variadic-overloads", "multiple-variadic-overloads", 1110059837), env__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name_var], null));
  } else {
  }
  if (!(variadic_params_7058 === 0 || variadic_params_7058 === 1 + mfa)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "variadic-max-arity", "variadic-max-arity", -14288402), env__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name_var], null));
  } else {
  }
  if (cljs.core.not_EQ_.call(null, cljs.core.distinct.call(null, param_counts_7059), param_counts_7059)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "overload-arity", "overload-arity", 823206044), env__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name_var], null));
  } else {
  }
  return cljs.analyzer.analyze_wrap_meta.call(null, ast);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null), function(op, env, p__7060, name, _) {
  var vec__7061 = p__7060;
  var ___$1 = cljs.core.nth.call(null, vec__7061, 0, null);
  var bindings = cljs.core.nth.call(null, vec__7061, 1, null);
  var exprs = cljs.core.nthnext.call(null, vec__7061, 2);
  var form = vec__7061;
  if (cljs.core.vector_QMARK_.call(null, bindings) && cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, bindings))) {
  } else {
    throw cljs.analyzer.error.call(null, env, "bindings must be vector of even number of elements");
  }
  var n__GT_fexpr = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, cljs.core.juxt.call(null, cljs.core.first, cljs.core.second), cljs.core.partition.call(null, 2, bindings)));
  var names = cljs.core.keys.call(null, n__GT_fexpr);
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env);
  var vec__7062 = cljs.core.reduce.call(null, function(n__GT_fexpr, names, context, vec__7061, ___$1, bindings, exprs, form) {
    return function(p__7064, n) {
      var vec__7065 = p__7064;
      var map__7066 = cljs.core.nth.call(null, vec__7065, 0, null);
      var map__7066__$1 = (!(map__7066 == null) ? map__7066.cljs$lang$protocol_mask$partition0$ & 64 || map__7066.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7066) : map__7066;
      var env__$1 = map__7066__$1;
      var locals = cljs.core.get.call(null, map__7066__$1, new cljs.core.Keyword(null, "locals", "locals", 535295783));
      var bes = cljs.core.nth.call(null, vec__7065, 1, null);
      var ret_tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, n));
      var fexpr = function() {
        var _STAR_cljs_warnings_STAR_7068 = cljs.analyzer._STAR_cljs_warnings_STAR_;
        cljs.analyzer._STAR_cljs_warnings_STAR_ = cljs.core.zipmap.call(null, cljs.core.keys.call(null, cljs.analyzer._STAR_cljs_warnings_STAR_), cljs.core.repeat.call(null, false));
        try {
          return cljs.analyzer.analyze.call(null, env__$1, n__GT_fexpr.call(null, n));
        } finally {
          cljs.analyzer._STAR_cljs_warnings_STAR_ = _STAR_cljs_warnings_STAR_7068;
        }
      }();
      var be = function() {
        var G__7069 = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "variadic", "variadic", 882626057), new cljs.core.Keyword(null, "method-params", "method-params", -980792179), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), new cljs.core.Keyword(null, "fn-var", "fn-var", 
        1086204730), new cljs.core.Keyword(null, "shadow", "shadow", 873231803), new cljs.core.Keyword(null, "local", "local", -1497766724)], [n, (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(fexpr), cljs.core.map.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(fexpr)), cljs.analyzer.get_col.call(null, n, env__$1), cljs.analyzer.get_line.call(null, 
        n, env__$1), (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(fexpr), true, locals.call(null, n), true]);
        var G__7069__$1 = ret_tag ? cljs.core.assoc.call(null, G__7069, new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990), ret_tag) : G__7069;
        return G__7069__$1;
      }();
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc_in.call(null, env__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "locals", "locals", 535295783), n], null), be), cljs.core.conj.call(null, bes, be)], null);
    };
  }(n__GT_fexpr, names, context, vec__7061, ___$1, bindings, exprs, form), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [env, cljs.core.PersistentVector.EMPTY], null), names);
  var meth_env = cljs.core.nth.call(null, vec__7062, 0, null);
  var bes = cljs.core.nth.call(null, vec__7062, 1, null);
  var meth_env__$1 = cljs.core.assoc.call(null, meth_env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var vec__7063 = cljs.core.reduce.call(null, function(n__GT_fexpr, names, context, vec__7062, meth_env, bes, meth_env__$1, vec__7061, ___$1, bindings, exprs, form) {
    return function(p__7070, p__7071) {
      var vec__7072 = p__7070;
      var meth_env__$2 = cljs.core.nth.call(null, vec__7072, 0, null);
      var bes__$1 = cljs.core.nth.call(null, vec__7072, 1, null);
      var map__7073 = p__7071;
      var map__7073__$1 = (!(map__7073 == null) ? map__7073.cljs$lang$protocol_mask$partition0$ & 64 || map__7073.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7073) : map__7073;
      var be = map__7073__$1;
      var name__$1 = cljs.core.get.call(null, map__7073__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
      var shadow = cljs.core.get.call(null, map__7073__$1, new cljs.core.Keyword(null, "shadow", "shadow", 873231803));
      var env__$1 = cljs.core.assoc_in.call(null, meth_env__$2, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "locals", "locals", 535295783), name__$1], null), shadow);
      var fexpr = cljs.analyzer.analyze.call(null, env__$1, n__GT_fexpr.call(null, name__$1));
      var be_SINGLEQUOTE_ = cljs.core.assoc.call(null, be, new cljs.core.Keyword(null, "init", "init", -1875481434), fexpr, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(fexpr), new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(fexpr), new cljs.core.Keyword(null, 
      "method-params", "method-params", -980792179), cljs.core.map.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(fexpr)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc_in.call(null, env__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "locals", "locals", 535295783), name__$1], null), be_SINGLEQUOTE_), cljs.core.conj.call(null, bes__$1, be_SINGLEQUOTE_)], null);
    };
  }(n__GT_fexpr, names, context, vec__7062, meth_env, bes, meth_env__$1, vec__7061, ___$1, bindings, exprs, form), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [meth_env__$1, cljs.core.PersistentVector.EMPTY], null), bes);
  var meth_env__$2 = cljs.core.nth.call(null, vec__7063, 0, null);
  var bes__$1 = cljs.core.nth.call(null, vec__7063, 1, null);
  var expr = cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, meth_env__$2, new cljs.core.Keyword(null, "context", "context", -830191113), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context) ? new cljs.core.Keyword(null, "return", "return", -1891502105) : context), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), 
  exprs))));
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "letfn", "letfn", -2121022354), new cljs.core.Keyword(null, "bindings", "bindings", 1271397192), bes__$1, new cljs.core.Keyword(null, "expr", "expr", 745722291), expr, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.conj.call(null, 
  cljs.core.vec.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "init", "init", -1875481434), bes__$1)), expr)], null);
});
cljs.analyzer.analyze_do_statements_STAR_ = function cljs$analyzer$analyze_do_statements_STAR_(env, exprs) {
  return cljs.core.seq.call(null, cljs.core.map.call(null, function(p1__7075_SHARP_) {
    return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "statement", "statement", -32780863)), p1__7075_SHARP_);
  }, cljs.core.butlast.call(null, exprs)));
};
cljs.analyzer.analyze_do_statements = function cljs$analyzer$analyze_do_statements(env, exprs) {
  var _STAR_recur_frames_STAR_7077 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    return cljs.analyzer.analyze_do_statements_STAR_.call(null, env, exprs);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7077;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "do", "do", 1686842252, null), function(op, env, p__7078, _, ___$1) {
  var vec__7079 = p__7078;
  var ___$2 = cljs.core.nth.call(null, vec__7079, 0, null);
  var exprs = cljs.core.nthnext.call(null, vec__7079, 1);
  var form = vec__7079;
  var statements = cljs.analyzer.analyze_do_statements.call(null, env, exprs);
  if (cljs.core.count.call(null, exprs) <= 1) {
    var ret = cljs.analyzer.analyze.call(null, env, cljs.core.first.call(null, exprs));
    var children = cljs.core.conj.call(null, cljs.core.vec.call(null, statements), ret);
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "do", "do", 46310725), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "statements", "statements", 600349855), statements, new cljs.core.Keyword(null, "ret", "ret", -468222814), ret, new cljs.core.Keyword(null, "children", "children", -940561982), children], null);
  } else {
    var ret_env = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "statement", "statement", -32780863), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env)) ? cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "statement", "statement", -32780863)) : cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "return", 
    "return", -1891502105));
    var ret = cljs.analyzer.analyze.call(null, ret_env, cljs.core.last.call(null, exprs));
    var children = cljs.core.conj.call(null, cljs.core.vec.call(null, statements), ret);
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "do", "do", 46310725), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "statements", "statements", 600349855), statements, new cljs.core.Keyword(null, "ret", "ret", -468222814), ret, new cljs.core.Keyword(null, "children", "children", -940561982), children], null);
  }
});
cljs.analyzer.analyze_let_binding_init = function cljs$analyzer$analyze_let_binding_init(env, init, loop_lets) {
  var _STAR_loop_lets_STAR_7081 = cljs.analyzer._STAR_loop_lets_STAR_;
  cljs.analyzer._STAR_loop_lets_STAR_ = loop_lets;
  try {
    return cljs.analyzer.analyze.call(null, env, init);
  } finally {
    cljs.analyzer._STAR_loop_lets_STAR_ = _STAR_loop_lets_STAR_7081;
  }
};
cljs.analyzer.get_let_tag = function cljs$analyzer$get_let_tag(name, init_expr) {
  var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, name));
  if (!(tag == null)) {
    return tag;
  } else {
    var tag__$1 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(init_expr);
    if (!(tag__$1 == null)) {
      return tag__$1;
    } else {
      return (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(init_expr));
    }
  }
};
cljs.analyzer.analyze_let_bindings_STAR_ = function cljs$analyzer$analyze_let_bindings_STAR_(encl_env, bindings) {
  var bes = cljs.core.PersistentVector.EMPTY;
  var env = cljs.core.assoc.call(null, encl_env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var bindings__$1 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, bindings));
  while (true) {
    var binding = cljs.core.first.call(null, bindings__$1);
    if (!(binding == null)) {
      var vec__7083 = binding;
      var name = cljs.core.nth.call(null, vec__7083, 0, null);
      var init = cljs.core.nth.call(null, vec__7083, 1, null);
      if (!(cljs.core.namespace.call(null, name) == null) || goog.string.contains([cljs.core.str(name)].join(""), ".")) {
        throw cljs.analyzer.error.call(null, encl_env, [cljs.core.str("Invalid local name: "), cljs.core.str(name)].join(""));
      } else {
      }
      var init_expr = cljs.analyzer.analyze_let_binding_init.call(null, env, init, cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 710516235), bes], null), cljs.analyzer._STAR_loop_lets_STAR_));
      var line = cljs.analyzer.get_line.call(null, name, env);
      var col = cljs.analyzer.get_col.call(null, name, env);
      var be = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "init", "init", -1875481434), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "binding-form?", "binding-form?", 1728940169), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "env", "env", -1815813235), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "info", 
      "info", -317069002), new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "shadow", "shadow", 873231803), new cljs.core.Keyword(null, "local", "local", -1497766724)], [init_expr, name, true, new cljs.core.Keyword(null, "var", "var", -769682797), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), col], null), col, line, new cljs.core.PersistentArrayMap(null, 
      2, [new cljs.core.Keyword(null, "name", "name", 1843675177), name, new cljs.core.Keyword(null, "shadow", "shadow", 873231803), name.call(null, (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env))], null), cljs.analyzer.get_let_tag.call(null, name, init_expr), name.call(null, (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env)), true]);
      var be__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "fn", "fn", -1175266204), (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(init_expr)) ? cljs.core.merge.call(null, be, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), true, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(init_expr), 
      new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(init_expr), new cljs.core.Keyword(null, "method-params", "method-params", -980792179), cljs.core.map.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(init_expr))], null)) : be;
      var G__7084 = cljs.core.conj.call(null, bes, be__$1);
      var G__7085 = cljs.core.assoc_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "locals", "locals", 535295783), name], null), be__$1);
      var G__7086 = cljs.core.next.call(null, bindings__$1);
      bes = G__7084;
      env = G__7085;
      bindings__$1 = G__7086;
      continue;
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [bes, env], null);
    }
    break;
  }
};
cljs.analyzer.analyze_let_bindings = function cljs$analyzer$analyze_let_bindings(encl_env, bindings) {
  var _STAR_recur_frames_STAR_7088 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    return cljs.analyzer.analyze_let_bindings_STAR_.call(null, encl_env, bindings);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7088;
  }
};
cljs.analyzer.analyze_let_body_STAR_ = function cljs$analyzer$analyze_let_body_STAR_(env, context, exprs) {
  return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context) ? new cljs.core.Keyword(null, "return", "return", -1891502105) : context), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), exprs))));
};
cljs.analyzer.analyze_let_body = function cljs$analyzer$analyze_let_body(env, context, exprs, recur_frames, loop_lets) {
  var _STAR_recur_frames_STAR_7091 = cljs.analyzer._STAR_recur_frames_STAR_;
  var _STAR_loop_lets_STAR_7092 = cljs.analyzer._STAR_loop_lets_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = recur_frames;
  cljs.analyzer._STAR_loop_lets_STAR_ = loop_lets;
  try {
    return cljs.analyzer.analyze_let_body_STAR_.call(null, env, context, exprs);
  } finally {
    cljs.analyzer._STAR_loop_lets_STAR_ = _STAR_loop_lets_STAR_7092;
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7091;
  }
};
cljs.analyzer.analyze_let = function cljs$analyzer$analyze_let(encl_env, p__7093, is_loop) {
  var vec__7096 = p__7093;
  var _ = cljs.core.nth.call(null, vec__7096, 0, null);
  var bindings = cljs.core.nth.call(null, vec__7096, 1, null);
  var exprs = cljs.core.nthnext.call(null, vec__7096, 2);
  var form = vec__7096;
  if (cljs.core.vector_QMARK_.call(null, bindings) && cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, bindings))) {
  } else {
    throw cljs.analyzer.error.call(null, encl_env, "bindings must be vector of even number of elements");
  }
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(encl_env);
  var vec__7097 = cljs.analyzer.analyze_let_bindings.call(null, encl_env, bindings);
  var bes = cljs.core.nth.call(null, vec__7097, 0, null);
  var env = cljs.core.nth.call(null, vec__7097, 1, null);
  var recur_frame = is_loop === true ? new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "params", "params", 710516235), bes, new cljs.core.Keyword(null, "flag", "flag", 1088647881), cljs.core.atom.call(null, null)], null) : null;
  var recur_frames = recur_frame ? cljs.core.cons.call(null, recur_frame, cljs.analyzer._STAR_recur_frames_STAR_) : cljs.analyzer._STAR_recur_frames_STAR_;
  var loop_lets = is_loop === true ? cljs.analyzer._STAR_loop_lets_STAR_ : !(cljs.analyzer._STAR_loop_lets_STAR_ == null) ? cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 710516235), bes], null), cljs.analyzer._STAR_loop_lets_STAR_) : null;
  var expr = cljs.analyzer.analyze_let_body.call(null, env, context, exprs, recur_frames, loop_lets);
  var op = is_loop === true ? new cljs.core.Keyword(null, "loop", "loop", -395552849) : new cljs.core.Keyword(null, "let", "let", -1282412701);
  var children = cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "init", "init", -1875481434), bes)), expr);
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), op, new cljs.core.Keyword(null, "env", "env", -1815813235), encl_env, new cljs.core.Keyword(null, "bindings", "bindings", 1271397192), bes, new cljs.core.Keyword(null, "expr", "expr", 745722291), expr, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "children", "children", -940561982), children], null);
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), function(op, encl_env, form, _, ___$1) {
  return cljs.analyzer.analyze_let.call(null, encl_env, form, false);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), function(op, encl_env, form, _, ___$1) {
  return cljs.analyzer.analyze_let.call(null, encl_env, form, true);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), function(op, env, p__7099, _, ___$1) {
  var vec__7100 = p__7099;
  var ___$2 = cljs.core.nth.call(null, vec__7100, 0, null);
  var exprs = cljs.core.nthnext.call(null, vec__7100, 1);
  var form = vec__7100;
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env);
  var frame = cljs.core.first.call(null, cljs.analyzer._STAR_recur_frames_STAR_);
  var exprs__$1 = function() {
    var _STAR_recur_frames_STAR_7101 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.vec.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_7101, context, frame, vec__7100, ___$2, exprs, form) {
        return function(p1__7098_SHARP_) {
          return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), p1__7098_SHARP_);
        };
      }(_STAR_recur_frames_STAR_7101, context, frame, vec__7100, ___$2, exprs, form), exprs));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7101;
    }
  }();
  if (frame) {
  } else {
    throw cljs.analyzer.error.call(null, env, "Can't recur here");
  }
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, exprs__$1), cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(frame)))) {
  } else {
    throw cljs.analyzer.error.call(null, env, "recur argument count mismatch");
  }
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "flag", "flag", 1088647881)).cljs$core$IFn$_invoke$arity$1(frame), true);
  return cljs.core.assoc.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "recur", "recur", -437573268), new cljs.core.Keyword(null, "form", "form", -1624062471), form], null), new cljs.core.Keyword(null, "frame", "frame", -1711082588), frame, new cljs.core.Keyword(null, "exprs", "exprs", 1795829094), exprs__$1, new cljs.core.Keyword(null, "children", 
  "children", -940561982), exprs__$1);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), function(_, env, p__7102, ___$1, ___$2) {
  var vec__7103 = p__7102;
  var ___$3 = cljs.core.nth.call(null, vec__7103, 0, null);
  var x = cljs.core.nth.call(null, vec__7103, 1, null);
  return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "quoted?", "quoted?", 1464649621), true), x);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "new", "new", -444906321, null), function(_, env, p__7105, ___$1, ___$2) {
  var vec__7106 = p__7105;
  var ___$3 = cljs.core.nth.call(null, vec__7106, 0, null);
  var ctor = cljs.core.nth.call(null, vec__7106, 1, null);
  var args = cljs.core.nthnext.call(null, vec__7106, 2);
  var form = vec__7106;
  if (ctor instanceof cljs.core.Symbol) {
  } else {
    throw cljs.analyzer.error.call(null, env, "First arg to new must be a symbol");
  }
  var _STAR_recur_frames_STAR_7107 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    var enve = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
    var ctorexpr = cljs.analyzer.analyze.call(null, enve, ctor);
    var ctor_var = cljs.analyzer.resolve_existing_var.call(null, env, ctor);
    var record_args = function() {
      var and__4048__auto__ = (new cljs.core.Keyword(null, "record", "record", -779106859)).cljs$core$IFn$_invoke$arity$1(ctor_var);
      if (and__4048__auto__) {
        return cljs.core.not.call(null, (new cljs.core.Keyword(null, "internal-ctor", "internal-ctor", 937392560)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, ctor)));
      } else {
        return and__4048__auto__;
      }
    }() ? cljs.core.repeat.call(null, 3, cljs.analyzer.analyze.call(null, enve, null)) : null;
    var argexprs = cljs.core.into.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, function(enve, ctorexpr, ctor_var, record_args, _STAR_recur_frames_STAR_7107, vec__7106, ___$3, ctor, args, form) {
      return function(p1__7104_SHARP_) {
        return cljs.analyzer.analyze.call(null, enve, p1__7104_SHARP_);
      };
    }(enve, ctorexpr, ctor_var, record_args, _STAR_recur_frames_STAR_7107, vec__7106, ___$3, ctor, args, form), args)), record_args);
    var known_num_fields = (new cljs.core.Keyword(null, "num-fields", "num-fields", 1529154024)).cljs$core$IFn$_invoke$arity$1(ctor_var);
    var argc = cljs.core.count.call(null, args);
    if (function() {
      var and__4048__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "internal-ctor", "internal-ctor", 937392560)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, ctor)));
      if (and__4048__auto__) {
        var and__4048__auto____$1 = known_num_fields;
        if (and__4048__auto____$1) {
          return cljs.core.not_EQ_.call(null, known_num_fields, argc);
        } else {
          return and__4048__auto____$1;
        }
      } else {
        return and__4048__auto__;
      }
    }()) {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "fn-arity", "fn-arity", -403576501), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "argc", "argc", -1452839519), argc, new cljs.core.Keyword(null, "ctor", "ctor", 1750864802), ctor], null));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "new", "new", -2085437848), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "ctor", "ctor", 1750864802), ctorexpr, new cljs.core.Keyword(null, "args", "args", 1315556576), argexprs, new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.into.call(null, 
    new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [ctorexpr], null), argexprs), new cljs.core.Keyword(null, "tag", "tag", -1290361223), function() {
      var name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(ctorexpr));
      var or__4060__auto__ = (new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Symbol("js", "Object", "js/Object", 61215323, null), new cljs.core.Symbol(null, "object", "object", -1179821820, null), new cljs.core.Symbol("js", "String", "js/String", -2070054036, null), new cljs.core.Symbol(null, "string", "string", -349010059, null), new cljs.core.Symbol("js", "Array", "js/Array", -423508366, null), new cljs.core.Symbol(null, "array", "array", -440182315, null), new cljs.core.Symbol("js", 
      "Number", "js/Number", -508133572, null), new cljs.core.Symbol(null, "number", "number", -1084057331, null), new cljs.core.Symbol("js", "Function", "js/Function", -749892063, null), new cljs.core.Symbol(null, "function", "function", -486723946, null), new cljs.core.Symbol("js", "Boolean", "js/Boolean", 1661145260, null), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)).call(null, name);
      if (or__4060__auto__) {
        return or__4060__auto__;
      } else {
        return name;
      }
    }()], null);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7107;
  }
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), function(_, env, p__7108, ___$1, ___$2) {
  var vec__7109 = p__7108;
  var ___$3 = cljs.core.nth.call(null, vec__7109, 0, null);
  var target = cljs.core.nth.call(null, vec__7109, 1, null);
  var val = cljs.core.nth.call(null, vec__7109, 2, null);
  var alt = cljs.core.nth.call(null, vec__7109, 3, null);
  var form = vec__7109;
  var vec__7110 = alt ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, target), cljs.core._conj.call(null, cljs.core.List.EMPTY, val)))), alt], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [target, val], null);
  var target__$1 = cljs.core.nth.call(null, vec__7110, 0, null);
  var val__$1 = cljs.core.nth.call(null, vec__7110, 1, null);
  var _STAR_recur_frames_STAR_7111 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    var enve = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
    var targetexpr = cljs.core._EQ_.call(null, target__$1, new cljs.core.Symbol(null, "*unchecked-if*", "*unchecked-if*", 1542408350, null)) ? function() {
      return new cljs.core.Keyword("cljs.analyzer", "set-unchecked-if", "cljs.analyzer/set-unchecked-if", 1413639250);
    }() : target__$1 instanceof cljs.core.Symbol ? function() {
      if ((new cljs.core.Keyword(null, "const", "const", 1709929842)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), target__$1))) {
        throw cljs.analyzer.error.call(null, env, "Can't set! a constant");
      } else {
      }
      var local_7112 = target__$1.call(null, (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env));
      if (function() {
        var or__4060__auto__ = local_7112 == null;
        if (or__4060__auto__) {
          return or__4060__auto__;
        } else {
          var and__4048__auto__ = (new cljs.core.Keyword(null, "field", "field", -1302436500)).cljs$core$IFn$_invoke$arity$1(local_7112);
          if (and__4048__auto__) {
            var or__4060__auto____$1 = (new cljs.core.Keyword(null, "mutable", "mutable", 875778266)).cljs$core$IFn$_invoke$arity$1(local_7112);
            if (or__4060__auto____$1) {
              return or__4060__auto____$1;
            } else {
              var or__4060__auto____$2 = (new cljs.core.Keyword(null, "unsynchronized-mutable", "unsynchronized-mutable", -164143950)).cljs$core$IFn$_invoke$arity$1(local_7112);
              if (or__4060__auto____$2) {
                return or__4060__auto____$2;
              } else {
                return (new cljs.core.Keyword(null, "volatile-mutable", "volatile-mutable", 1731728411)).cljs$core$IFn$_invoke$arity$1(local_7112);
              }
            }
          } else {
            return and__4048__auto__;
          }
        }
      }()) {
      } else {
        throw cljs.analyzer.error.call(null, env, "Can't set! local var or non-mutable field");
      }
      return cljs.analyzer.analyze_symbol.call(null, enve, target__$1);
    }() : cljs.core.seq_QMARK_.call(null, target__$1) ? function() {
      var targetexpr = cljs.analyzer.analyze_seq.call(null, enve, target__$1, null);
      if ((new cljs.core.Keyword(null, "field", "field", -1302436500)).cljs$core$IFn$_invoke$arity$1(targetexpr)) {
        return targetexpr;
      } else {
        return null;
      }
    }() : null;
    var valexpr = cljs.analyzer.analyze.call(null, enve, val__$1);
    if (targetexpr) {
    } else {
      throw cljs.analyzer.error.call(null, env, "set! target must be a field or a symbol naming a var");
    }
    if (cljs.core._EQ_.call(null, targetexpr, new cljs.core.Keyword("cljs.analyzer", "set-unchecked-if", "cljs.analyzer/set-unchecked-if", 1413639250))) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "no-op", "no-op", -93046065)], null);
    } else {
      return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "set!", "set!", -1389817006), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "target", "target", 253001721), targetexpr, new cljs.core.Keyword(null, "val", "val", 128701612), valexpr, new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 
      2, 5, cljs.core.PersistentVector.EMPTY_NODE, [targetexpr, valexpr], null)], null);
    }
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7111;
  }
});
cljs.analyzer.foreign_dep_QMARK_ = function cljs$analyzer$foreign_dep_QMARK_(dep) {
  if (dep instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "symbol?", "symbol?", 1820680511, null), new cljs.core.Symbol(null, "dep", "dep", -142776527, null))))].join(""));
  }
  var js_index = (new cljs.core.Keyword(null, "js-dependency-index", "js-dependency-index", -1887042131)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_));
  var temp__4423__auto__ = cljs.core.find.call(null, js_index, cljs.core.name.call(null, dep));
  if (temp__4423__auto__) {
    var vec__7116 = temp__4423__auto__;
    var _ = cljs.core.nth.call(null, vec__7116, 0, null);
    var map__7117 = cljs.core.nth.call(null, vec__7116, 1, null);
    var map__7117__$1 = (!(map__7117 == null) ? map__7117.cljs$lang$protocol_mask$partition0$ & 64 || map__7117.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7117) : map__7117;
    var foreign = cljs.core.get.call(null, map__7117__$1, new cljs.core.Keyword(null, "foreign", "foreign", 990521149));
    return foreign;
  } else {
    return false;
  }
};
cljs.analyzer.analyze_deps = function cljs$analyzer$analyze_deps() {
  var args7120 = [];
  var len__5099__auto___7128 = arguments.length;
  var i__5100__auto___7129 = 0;
  while (true) {
    if (i__5100__auto___7129 < len__5099__auto___7128) {
      args7120.push(arguments[i__5100__auto___7129]);
      var G__7130 = i__5100__auto___7129 + 1;
      i__5100__auto___7129 = G__7130;
      continue;
    } else {
    }
    break;
  }
  var G__7122 = args7120.length;
  switch(G__7122) {
    case 3:
      return cljs.analyzer.analyze_deps.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.analyze_deps.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7120.length)].join(""));;
  }
};
cljs.analyzer.analyze_deps.cljs$core$IFn$_invoke$arity$3 = function(lib, deps, env) {
  return cljs.analyzer.analyze_deps.call(null, lib, deps, env, null);
};
cljs.analyzer.analyze_deps.cljs$core$IFn$_invoke$arity$4 = function(lib, deps, env, opts) {
  var compiler = cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_);
  var _STAR_cljs_dep_set_STAR_7123 = cljs.analyzer._STAR_cljs_dep_set_STAR_;
  cljs.analyzer._STAR_cljs_dep_set_STAR_ = cljs.core.vary_meta.call(null, cljs.core.conj.call(null, cljs.analyzer._STAR_cljs_dep_set_STAR_, lib), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "dep-path", "dep-path", 723826558)], null), cljs.core.conj, lib);
  try {
    if (cljs.core.every_QMARK_.call(null, function(_STAR_cljs_dep_set_STAR_7123, compiler) {
      return function(p1__7119_SHARP_) {
        return !cljs.core.contains_QMARK_.call(null, cljs.analyzer._STAR_cljs_dep_set_STAR_, p1__7119_SHARP_);
      };
    }(_STAR_cljs_dep_set_STAR_7123, compiler), deps)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Circular dependency detected "), cljs.core.str((new cljs.core.Keyword(null, "dep-path", "dep-path", 723826558)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, cljs.analyzer._STAR_cljs_dep_set_STAR_)))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", "every?", 2083724064, null), cljs.core.list(new cljs.core.Symbol(null, "fn*", 
      "fn*", -752876845, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "p1__7119#", "p1__7119#", -1438674084, null)], null), cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "*cljs-dep-set*", "*cljs-dep-set*", 1566566915, null), new cljs.core.Symbol(null, "p1__7119#", "p1__7119#", -1438674084, 
      null)))), new cljs.core.Symbol(null, "deps", "deps", -771075450, null))))].join(""));
    }
    var seq__7124 = cljs.core.seq.call(null, deps);
    var chunk__7125 = null;
    var count__7126 = 0;
    var i__7127 = 0;
    while (true) {
      if (i__7127 < count__7126) {
        var dep = cljs.core._nth.call(null, chunk__7125, i__7127);
        if (function() {
          var or__4060__auto__ = cljs.core.not_empty.call(null, cljs.core.get_in.call(null, compiler, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), dep, new cljs.core.Keyword(null, "defs", "defs", 1398449717)], null)));
          if (or__4060__auto__) {
            return or__4060__auto__;
          } else {
            return cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "js-dependency-index", "js-dependency-index", -1887042131)).cljs$core$IFn$_invoke$arity$1(compiler), cljs.core.name.call(null, dep));
          }
        }()) {
        } else {
          throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605), dep, new cljs.core.Keyword(null, "js-provide", "js-provide", 1052912493), cljs.core.name.call(null, dep)], null)));
        }
        var G__7132 = seq__7124;
        var G__7133 = chunk__7125;
        var G__7134 = count__7126;
        var G__7135 = i__7127 + 1;
        seq__7124 = G__7132;
        chunk__7125 = G__7133;
        count__7126 = G__7134;
        i__7127 = G__7135;
        continue;
      } else {
        var temp__4425__auto__ = cljs.core.seq.call(null, seq__7124);
        if (temp__4425__auto__) {
          var seq__7124__$1 = temp__4425__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7124__$1)) {
            var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__7124__$1);
            var G__7136 = cljs.core.chunk_rest.call(null, seq__7124__$1);
            var G__7137 = c__4844__auto__;
            var G__7138 = cljs.core.count.call(null, c__4844__auto__);
            var G__7139 = 0;
            seq__7124 = G__7136;
            chunk__7125 = G__7137;
            count__7126 = G__7138;
            i__7127 = G__7139;
            continue;
          } else {
            var dep = cljs.core.first.call(null, seq__7124__$1);
            if (function() {
              var or__4060__auto__ = cljs.core.not_empty.call(null, cljs.core.get_in.call(null, compiler, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), dep, new cljs.core.Keyword(null, "defs", "defs", 1398449717)], null)));
              if (or__4060__auto__) {
                return or__4060__auto__;
              } else {
                return cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "js-dependency-index", "js-dependency-index", -1887042131)).cljs$core$IFn$_invoke$arity$1(compiler), cljs.core.name.call(null, dep));
              }
            }()) {
            } else {
              throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605), dep, new cljs.core.Keyword(null, "js-provide", "js-provide", 1052912493), cljs.core.name.call(null, dep)], null)));
            }
            var G__7140 = cljs.core.next.call(null, seq__7124__$1);
            var G__7141 = null;
            var G__7142 = 0;
            var G__7143 = 0;
            seq__7124 = G__7140;
            chunk__7125 = G__7141;
            count__7126 = G__7142;
            i__7127 = G__7143;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } finally {
    cljs.analyzer._STAR_cljs_dep_set_STAR_ = _STAR_cljs_dep_set_STAR_7123;
  }
};
cljs.analyzer.analyze_deps.cljs$lang$maxFixedArity = 4;
cljs.analyzer.check_uses = function cljs$analyzer$check_uses(uses, env) {
  var seq__7150 = cljs.core.seq.call(null, uses);
  var chunk__7151 = null;
  var count__7152 = 0;
  var i__7153 = 0;
  while (true) {
    if (i__7153 < count__7152) {
      var vec__7154 = cljs.core._nth.call(null, chunk__7151, i__7153);
      var sym = cljs.core.nth.call(null, vec__7154, 0, null);
      var lib = cljs.core.nth.call(null, vec__7154, 1, null);
      var js_lib_7156 = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "js-dependency-index", "js-dependency-index", -1887042131), cljs.core.name.call(null, lib)], null));
      if (cljs.core._EQ_.call(null, cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), lib, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym], null), new cljs.core.Keyword("cljs.analyzer", "not-found", "cljs.analyzer/not-found", 427220150)), new cljs.core.Keyword("cljs.analyzer", 
      "not-found", "cljs.analyzer/not-found", 427220150)) && !cljs.core._EQ_.call(null, cljs.core.get.call(null, js_lib_7156, new cljs.core.Keyword(null, "group", "group", 582596132)), new cljs.core.Keyword(null, "goog", "goog", -1711135452)) && cljs.core.not.call(null, cljs.core.get.call(null, js_lib_7156, new cljs.core.Keyword(null, "closure-lib", "closure-lib", 2105917916)))) {
        throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "var", new cljs.core.Keyword(null, "lib", "lib", 191808726), lib, new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym], null)));
      } else {
      }
      var G__7157 = seq__7150;
      var G__7158 = chunk__7151;
      var G__7159 = count__7152;
      var G__7160 = i__7153 + 1;
      seq__7150 = G__7157;
      chunk__7151 = G__7158;
      count__7152 = G__7159;
      i__7153 = G__7160;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__7150);
      if (temp__4425__auto__) {
        var seq__7150__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7150__$1)) {
          var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__7150__$1);
          var G__7161 = cljs.core.chunk_rest.call(null, seq__7150__$1);
          var G__7162 = c__4844__auto__;
          var G__7163 = cljs.core.count.call(null, c__4844__auto__);
          var G__7164 = 0;
          seq__7150 = G__7161;
          chunk__7151 = G__7162;
          count__7152 = G__7163;
          i__7153 = G__7164;
          continue;
        } else {
          var vec__7155 = cljs.core.first.call(null, seq__7150__$1);
          var sym = cljs.core.nth.call(null, vec__7155, 0, null);
          var lib = cljs.core.nth.call(null, vec__7155, 1, null);
          var js_lib_7165 = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "js-dependency-index", "js-dependency-index", -1887042131), cljs.core.name.call(null, lib)], null));
          if (cljs.core._EQ_.call(null, cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), lib, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym], null), new cljs.core.Keyword("cljs.analyzer", "not-found", "cljs.analyzer/not-found", 427220150)), new cljs.core.Keyword("cljs.analyzer", 
          "not-found", "cljs.analyzer/not-found", 427220150)) && !cljs.core._EQ_.call(null, cljs.core.get.call(null, js_lib_7165, new cljs.core.Keyword(null, "group", "group", 582596132)), new cljs.core.Keyword(null, "goog", "goog", -1711135452)) && cljs.core.not.call(null, cljs.core.get.call(null, js_lib_7165, new cljs.core.Keyword(null, "closure-lib", "closure-lib", 2105917916)))) {
            throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "var", new cljs.core.Keyword(null, "lib", "lib", 191808726), lib, new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym], null)));
          } else {
          }
          var G__7166 = cljs.core.next.call(null, seq__7150__$1);
          var G__7167 = null;
          var G__7168 = 0;
          var G__7169 = 0;
          seq__7150 = G__7166;
          chunk__7151 = G__7167;
          count__7152 = G__7168;
          i__7153 = G__7169;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.analyzer.check_use_macros = function cljs$analyzer$check_use_macros(use_macros, env) {
  var seq__7176 = cljs.core.seq.call(null, use_macros);
  var chunk__7177 = null;
  var count__7178 = 0;
  var i__7179 = 0;
  while (true) {
    if (i__7179 < count__7178) {
      var vec__7180 = cljs.core._nth.call(null, chunk__7177, i__7179);
      var sym = cljs.core.nth.call(null, vec__7180, 0, null);
      var lib = cljs.core.nth.call(null, vec__7180, 1, null);
      var the_ns_7182 = cljs.core.find_macros_ns.call(null, lib);
      if (the_ns_7182 == null || the_ns_7182.findInternedVar(sym) == null) {
        throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "macro", new cljs.core.Keyword(null, "lib", "lib", 191808726), lib, new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym], null)));
      } else {
      }
      var G__7183 = seq__7176;
      var G__7184 = chunk__7177;
      var G__7185 = count__7178;
      var G__7186 = i__7179 + 1;
      seq__7176 = G__7183;
      chunk__7177 = G__7184;
      count__7178 = G__7185;
      i__7179 = G__7186;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__7176);
      if (temp__4425__auto__) {
        var seq__7176__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7176__$1)) {
          var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__7176__$1);
          var G__7187 = cljs.core.chunk_rest.call(null, seq__7176__$1);
          var G__7188 = c__4844__auto__;
          var G__7189 = cljs.core.count.call(null, c__4844__auto__);
          var G__7190 = 0;
          seq__7176 = G__7187;
          chunk__7177 = G__7188;
          count__7178 = G__7189;
          i__7179 = G__7190;
          continue;
        } else {
          var vec__7181 = cljs.core.first.call(null, seq__7176__$1);
          var sym = cljs.core.nth.call(null, vec__7181, 0, null);
          var lib = cljs.core.nth.call(null, vec__7181, 1, null);
          var the_ns_7191 = cljs.core.find_macros_ns.call(null, lib);
          if (the_ns_7191 == null || the_ns_7191.findInternedVar(sym) == null) {
            throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "macro", new cljs.core.Keyword(null, "lib", "lib", 191808726), lib, new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym], null)));
          } else {
          }
          var G__7192 = cljs.core.next.call(null, seq__7176__$1);
          var G__7193 = null;
          var G__7194 = 0;
          var G__7195 = 0;
          seq__7176 = G__7192;
          chunk__7177 = G__7193;
          count__7178 = G__7194;
          i__7179 = G__7195;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.analyzer.parse_ns_error_msg = function cljs$analyzer$parse_ns_error_msg(spec, msg) {
  return [cljs.core.str(msg), cljs.core.str("; offending spec: "), cljs.core.str(cljs.core.pr_str.call(null, spec))].join("");
};
cljs.analyzer.basic_validate_ns_spec = function cljs$analyzer$basic_validate_ns_spec(env, macros_QMARK_, spec) {
  if (spec instanceof cljs.core.Symbol || cljs.core.sequential_QMARK_.call(null, spec)) {
  } else {
    throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only [lib.ns & options] and lib.ns specs supported in :require / :require-macros"));
  }
  if (cljs.core.sequential_QMARK_.call(null, spec)) {
    if (cljs.core.first.call(null, spec) instanceof cljs.core.Symbol) {
    } else {
      throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Library name must be specified as a symbol in :require / :require-macros"));
    }
    if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, spec))) {
    } else {
      throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only :as alias and :refer (names) options supported in :require"));
    }
    if (cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "as", "as", 1148689641), null, new cljs.core.Keyword(null, "refer", "refer", -964295553), null], null), null), cljs.core.map.call(null, cljs.core.first, cljs.core.partition.call(null, 2, cljs.core.next.call(null, spec))))) {
    } else {
      throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only :as and :refer options supported in :require / :require-macros"));
    }
    if (function() {
      var fs = cljs.core.frequencies.call(null, cljs.core.next.call(null, spec));
      return fs.call(null, new cljs.core.Keyword(null, "as", "as", 1148689641), 0) <= 1 && fs.call(null, new cljs.core.Keyword(null, "refer", "refer", -964295553), 0) <= 1;
    }()) {
      return null;
    } else {
      throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Each of :as and :refer options may only be specified once in :require / :require-macros"));
    }
  } else {
    return null;
  }
};
cljs.analyzer.parse_ns_excludes = function cljs$analyzer$parse_ns_excludes(env, args) {
  return cljs.core.reduce.call(null, function(s, p__7198) {
    var vec__7199 = p__7198;
    var k = cljs.core.nth.call(null, vec__7199, 0, null);
    var exclude = cljs.core.nth.call(null, vec__7199, 1, null);
    var xs = cljs.core.nth.call(null, vec__7199, 2, null);
    if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "refer-clojure", "refer-clojure", 813784440))) {
      if (cljs.core._EQ_.call(null, exclude, new cljs.core.Keyword(null, "exclude", "exclude", -1230250334))) {
      } else {
        throw cljs.analyzer.error.call(null, env, "Only [:refer-clojure :exclude (names)] form supported");
      }
      if (cljs.core.seq.call(null, s)) {
        throw cljs.analyzer.error.call(null, env, "Only one :refer-clojure form is allowed per namespace definition");
      } else {
      }
      return cljs.core.into.call(null, s, xs);
    } else {
      return s;
    }
  }, cljs.core.PersistentHashSet.EMPTY, args);
};
cljs.analyzer.use__GT_require = function cljs$analyzer$use__GT_require(env, p__7200) {
  var vec__7202 = p__7200;
  var lib = cljs.core.nth.call(null, vec__7202, 0, null);
  var kw = cljs.core.nth.call(null, vec__7202, 1, null);
  var referred = cljs.core.nth.call(null, vec__7202, 2, null);
  var spec = vec__7202;
  if (lib instanceof cljs.core.Symbol && cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "only", "only", 1907811652), kw) && cljs.core.sequential_QMARK_.call(null, referred) && cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, referred)) {
  } else {
    throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only [lib.ns :only (names)] specs supported in :use / :use-macros"));
  }
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [lib, new cljs.core.Keyword(null, "refer", "refer", -964295553), referred], null);
};
cljs.analyzer.parse_require_spec = function cljs$analyzer$parse_require_spec(env, macros_QMARK_, deps, aliases, spec) {
  while (true) {
    if (spec instanceof cljs.core.Symbol) {
      var G__7211 = env;
      var G__7212 = macros_QMARK_;
      var G__7213 = deps;
      var G__7214 = aliases;
      var G__7215 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [spec], null);
      env = G__7211;
      macros_QMARK_ = G__7212;
      deps = G__7213;
      aliases = G__7214;
      spec = G__7215;
      continue;
    } else {
      cljs.analyzer.basic_validate_ns_spec.call(null, env, macros_QMARK_, spec);
      var vec__7207 = spec;
      var lib = cljs.core.nth.call(null, vec__7207, 0, null);
      var opts = cljs.core.nthnext.call(null, vec__7207, 1);
      var lib__$1 = function() {
        var temp__4423__auto__ = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "js-module-index", "js-module-index", 2072061931), cljs.core.name.call(null, lib)], null));
        if (temp__4423__auto__) {
          var js_module_name = temp__4423__auto__;
          return cljs.core.symbol.call(null, js_module_name);
        } else {
          return lib;
        }
      }();
      var map__7208 = cljs.core.apply.call(null, cljs.core.hash_map, opts);
      var map__7208__$1 = (!(map__7208 == null) ? map__7208.cljs$lang$protocol_mask$partition0$ & 64 || map__7208.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7208) : map__7208;
      var alias = cljs.core.get.call(null, map__7208__$1, new cljs.core.Keyword(null, "as", "as", 1148689641), lib__$1);
      var referred = cljs.core.get.call(null, map__7208__$1, new cljs.core.Keyword(null, "refer", "refer", -964295553));
      var vec__7209 = macros_QMARK_ ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "require", "require", -468001333), new cljs.core.Keyword(null, "use", "use", -1846382424)], null);
      var rk = cljs.core.nth.call(null, vec__7209, 0, null);
      var uk = cljs.core.nth.call(null, vec__7209, 1, null);
      if (alias instanceof cljs.core.Symbol || alias == null) {
      } else {
        throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, ":as must be followed by a symbol in :require / :require-macros"));
      }
      if (alias) {
        var alias_type_7216 = macros_QMARK_ ? new cljs.core.Keyword(null, "macros", "macros", 811339431) : new cljs.core.Keyword(null, "fns", "fns", 1185138786);
        var lib_SINGLEQUOTE__7217 = alias_type_7216.call(null, cljs.core.deref.call(null, aliases)).call(null, alias);
        if (!(lib_SINGLEQUOTE__7217 == null) && cljs.core.not_EQ_.call(null, lib__$1, lib_SINGLEQUOTE__7217)) {
          throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, ":as alias must be unique"));
        } else {
        }
        cljs.core.swap_BANG_.call(null, aliases, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [alias_type_7216], null), cljs.core.conj, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [alias, lib__$1], null));
      } else {
      }
      if (cljs.core.sequential_QMARK_.call(null, referred) && cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, referred) || referred == null) {
      } else {
        throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, ":refer must be followed by a sequence of symbols in :require / :require-macros"));
      }
      if (macros_QMARK_) {
      } else {
        cljs.core.swap_BANG_.call(null, deps, cljs.core.conj, lib__$1);
      }
      return cljs.core.merge.call(null, alias ? new cljs.core.PersistentArrayMap.fromArray([rk, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap.fromArray([alias, lib__$1], true, false), new cljs.core.PersistentArrayMap.fromArray([lib__$1, lib__$1], true, false))], true, false) : null, referred ? new cljs.core.PersistentArrayMap.fromArray([uk, cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.interleave.call(null, referred, cljs.core.repeat.call(null, lib__$1)))], true, false) : 
      null);
    }
    break;
  }
};
cljs.analyzer.parse_import_spec = function cljs$analyzer$parse_import_spec(env, deps, spec) {
  if (cljs.core.sequential_QMARK_.call(null, spec) && cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, spec) || spec instanceof cljs.core.Symbol && cljs.core.namespace.call(null, spec) == null) {
  } else {
    throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only lib.ns.Ctor or [lib.ns Ctor*] spec supported in :import"));
  }
  var import_map = cljs.core.sequential_QMARK_.call(null, spec) ? cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p1__7218_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__7218_SHARP_, cljs.core.symbol.call(null, [cljs.core.str(cljs.core.first.call(null, spec)), cljs.core.str("."), cljs.core.str(p1__7218_SHARP_)].join(""))], null);
  }, cljs.core.rest.call(null, spec))) : new cljs.core.PersistentArrayMap.fromArray([cljs.core.symbol.call(null, cljs.core.last.call(null, clojure.string.split.call(null, [cljs.core.str(spec)].join(""), /\./))), spec], true, false);
  var seq__7225_7231 = cljs.core.seq.call(null, import_map);
  var chunk__7226_7232 = null;
  var count__7227_7233 = 0;
  var i__7228_7234 = 0;
  while (true) {
    if (i__7228_7234 < count__7227_7233) {
      var vec__7229_7235 = cljs.core._nth.call(null, chunk__7226_7232, i__7228_7234);
      var __7236 = cljs.core.nth.call(null, vec__7229_7235, 0, null);
      var spec_7237__$1 = cljs.core.nth.call(null, vec__7229_7235, 1, null);
      cljs.core.swap_BANG_.call(null, deps, cljs.core.conj, spec_7237__$1);
      var G__7238 = seq__7225_7231;
      var G__7239 = chunk__7226_7232;
      var G__7240 = count__7227_7233;
      var G__7241 = i__7228_7234 + 1;
      seq__7225_7231 = G__7238;
      chunk__7226_7232 = G__7239;
      count__7227_7233 = G__7240;
      i__7228_7234 = G__7241;
      continue;
    } else {
      var temp__4425__auto___7242 = cljs.core.seq.call(null, seq__7225_7231);
      if (temp__4425__auto___7242) {
        var seq__7225_7243__$1 = temp__4425__auto___7242;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7225_7243__$1)) {
          var c__4844__auto___7244 = cljs.core.chunk_first.call(null, seq__7225_7243__$1);
          var G__7245 = cljs.core.chunk_rest.call(null, seq__7225_7243__$1);
          var G__7246 = c__4844__auto___7244;
          var G__7247 = cljs.core.count.call(null, c__4844__auto___7244);
          var G__7248 = 0;
          seq__7225_7231 = G__7245;
          chunk__7226_7232 = G__7246;
          count__7227_7233 = G__7247;
          i__7228_7234 = G__7248;
          continue;
        } else {
          var vec__7230_7249 = cljs.core.first.call(null, seq__7225_7243__$1);
          var __7250 = cljs.core.nth.call(null, vec__7230_7249, 0, null);
          var spec_7251__$1 = cljs.core.nth.call(null, vec__7230_7249, 1, null);
          cljs.core.swap_BANG_.call(null, deps, cljs.core.conj, spec_7251__$1);
          var G__7252 = cljs.core.next.call(null, seq__7225_7243__$1);
          var G__7253 = null;
          var G__7254 = 0;
          var G__7255 = 0;
          seq__7225_7231 = G__7252;
          chunk__7226_7232 = G__7253;
          count__7227_7233 = G__7254;
          i__7228_7234 = G__7255;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "import", "import", -1399500709), import_map, new cljs.core.Keyword(null, "require", "require", -468001333), import_map], null);
};
cljs.analyzer.macro_autoload_ns_QMARK_ = function cljs$analyzer$macro_autoload_ns_QMARK_(form) {
  if (cljs.analyzer._STAR_macro_infer_STAR_) {
    var ns = cljs.core.sequential_QMARK_.call(null, form) ? cljs.core.first.call(null, form) : form;
    var map__7258 = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns], null));
    var map__7258__$1 = (!(map__7258 == null) ? map__7258.cljs$lang$protocol_mask$partition0$ & 64 || map__7258.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7258) : map__7258;
    var use_macros = cljs.core.get.call(null, map__7258__$1, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393));
    var require_macros = cljs.core.get.call(null, map__7258__$1, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416));
    var or__4060__auto__ = cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([ns], true), cljs.core.vals.call(null, use_macros));
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([ns], true), cljs.core.vals.call(null, require_macros));
    }
  } else {
    return null;
  }
};
cljs.analyzer.desugar_ns_specs = function cljs$analyzer$desugar_ns_specs(args) {
  var map__7267 = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__7268) {
    var vec__7269 = p__7268;
    var k = cljs.core.nth.call(null, vec__7269, 0, null);
    var specs = cljs.core.nthnext.call(null, vec__7269, 1);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, specs)], null);
  }, args));
  var map__7267__$1 = (!(map__7267 == null) ? map__7267.cljs$lang$protocol_mask$partition0$ & 64 || map__7267.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7267) : map__7267;
  var indexed = map__7267__$1;
  var require = cljs.core.get.call(null, map__7267__$1, new cljs.core.Keyword(null, "require", "require", -468001333));
  var sugar_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "include-macros", "include-macros", 1228110289), null, new cljs.core.Keyword(null, "refer-macros", "refer-macros", -1906841953), null], null), null);
  var remove_from_spec = function(map__7267, map__7267__$1, indexed, require, sugar_keys) {
    return function(pred, spec) {
      while (true) {
        if (cljs.core.not.call(null, function() {
          var and__4048__auto__ = cljs.core.sequential_QMARK_.call(null, spec);
          if (and__4048__auto__) {
            return cljs.core.some.call(null, pred, spec);
          } else {
            return and__4048__auto__;
          }
        }())) {
          return spec;
        } else {
          var vec__7271 = cljs.core.split_with.call(null, cljs.core.complement.call(null, pred), spec);
          var l = cljs.core.nth.call(null, vec__7271, 0, null);
          var r = cljs.core.nth.call(null, vec__7271, 1, null);
          var G__7273 = pred;
          var G__7274 = cljs.core.concat.call(null, l, cljs.core.drop.call(null, 2, r));
          pred = G__7273;
          spec = G__7274;
          continue;
        }
        break;
      }
    };
  }(map__7267, map__7267__$1, indexed, require, sugar_keys);
  var replace_refer_macros = function(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec) {
    return function(spec) {
      if (!cljs.core.sequential_QMARK_.call(null, spec)) {
        return spec;
      } else {
        return cljs.core.map.call(null, function(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec) {
          return function(x) {
            if (cljs.core._EQ_.call(null, x, new cljs.core.Keyword(null, "refer-macros", "refer-macros", -1906841953))) {
              return new cljs.core.Keyword(null, "refer", "refer", -964295553);
            } else {
              return x;
            }
          };
        }(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec), spec);
      }
    };
  }(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec);
  var reload_spec_QMARK_ = function(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros) {
    return function(p1__7260_SHARP_) {
      return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reload", "reload", 863702807), null, new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200), null], null), null)).call(null, p1__7260_SHARP_);
    };
  }(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros);
  var to_macro_specs = function(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_) {
    return function(specs) {
      return cljs.core.map.call(null, function(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_) {
        return function(x) {
          if (cljs.core.not.call(null, reload_spec_QMARK_.call(null, x))) {
            return replace_refer_macros.call(null, remove_from_spec.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "refer", "refer", -964295553), null], null), null), remove_from_spec.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "include-macros", "include-macros", 1228110289), null], null), null), x)));
          } else {
            return x;
          }
        };
      }(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_), cljs.core.filter.call(null, function(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_) {
        return function(x) {
          var or__4060__auto__ = function() {
            var and__4048__auto__ = cljs.core.sequential_QMARK_.call(null, x);
            if (and__4048__auto__) {
              return cljs.core.some.call(null, sugar_keys, x);
            } else {
              return and__4048__auto__;
            }
          }();
          if (or__4060__auto__) {
            return or__4060__auto__;
          } else {
            var or__4060__auto____$1 = reload_spec_QMARK_.call(null, x);
            if (or__4060__auto____$1) {
              return or__4060__auto____$1;
            } else {
              return cljs.analyzer.macro_autoload_ns_QMARK_.call(null, x);
            }
          }
        };
      }(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_), specs));
    };
  }(map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_);
  var remove_sugar = cljs.core.partial.call(null, remove_from_spec, sugar_keys);
  var temp__4423__auto__ = cljs.core.seq.call(null, to_macro_specs.call(null, require));
  if (temp__4423__auto__) {
    var require_specs = temp__4423__auto__;
    return cljs.core.map.call(null, function(require_specs, temp__4423__auto__, map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_, to_macro_specs, remove_sugar) {
      return function(x) {
        if (cljs.core.not.call(null, reload_spec_QMARK_.call(null, x))) {
          var vec__7272 = x;
          var k = cljs.core.nth.call(null, vec__7272, 0, null);
          var v = cljs.core.nth.call(null, vec__7272, 1, null);
          return cljs.core.cons.call(null, k, cljs.core.map.call(null, remove_sugar, v));
        } else {
          return x;
        }
      };
    }(require_specs, temp__4423__auto__, map__7267, map__7267__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_, to_macro_specs, remove_sugar), cljs.core.update_in.call(null, indexed, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416)], null), cljs.core.fnil.call(null, cljs.core.into, cljs.core.PersistentVector.EMPTY), require_specs));
  } else {
    return args;
  }
};
cljs.analyzer.find_def_clash = function cljs$analyzer$find_def_clash(env, ns, segments) {
  var to_check = cljs.core.map.call(null, function(xs) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, clojure.string.join.call(null, ".", cljs.core.butlast.call(null, xs))), cljs.core.symbol.call(null, cljs.core.last.call(null, xs))], null);
  }, cljs.core.drop.call(null, 2, cljs.core.reductions.call(null, cljs.core.conj, cljs.core.PersistentVector.EMPTY, segments)));
  var seq__7281 = cljs.core.seq.call(null, to_check);
  var chunk__7282 = null;
  var count__7283 = 0;
  var i__7284 = 0;
  while (true) {
    if (i__7284 < count__7283) {
      var vec__7285 = cljs.core._nth.call(null, chunk__7282, i__7284);
      var clash_ns = cljs.core.nth.call(null, vec__7285, 0, null);
      var name = cljs.core.nth.call(null, vec__7285, 1, null);
      if (cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), clash_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), name], null))) {
        cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "ns-var-clash", "ns-var-clash", -280494668), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns, new cljs.core.Keyword(null, "var", "var", -769682797), cljs.core.symbol.call(null, [cljs.core.str(clash_ns)].join(""), [cljs.core.str(name)].join(""))], null));
      } else {
      }
      var G__7287 = seq__7281;
      var G__7288 = chunk__7282;
      var G__7289 = count__7283;
      var G__7290 = i__7284 + 1;
      seq__7281 = G__7287;
      chunk__7282 = G__7288;
      count__7283 = G__7289;
      i__7284 = G__7290;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__7281);
      if (temp__4425__auto__) {
        var seq__7281__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7281__$1)) {
          var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__7281__$1);
          var G__7291 = cljs.core.chunk_rest.call(null, seq__7281__$1);
          var G__7292 = c__4844__auto__;
          var G__7293 = cljs.core.count.call(null, c__4844__auto__);
          var G__7294 = 0;
          seq__7281 = G__7291;
          chunk__7282 = G__7292;
          count__7283 = G__7293;
          i__7284 = G__7294;
          continue;
        } else {
          var vec__7286 = cljs.core.first.call(null, seq__7281__$1);
          var clash_ns = cljs.core.nth.call(null, vec__7286, 0, null);
          var name = cljs.core.nth.call(null, vec__7286, 1, null);
          if (cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), clash_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), name], null))) {
            cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "ns-var-clash", "ns-var-clash", -280494668), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns, new cljs.core.Keyword(null, "var", "var", -769682797), cljs.core.symbol.call(null, [cljs.core.str(clash_ns)].join(""), [cljs.core.str(name)].join(""))], null));
          } else {
          }
          var G__7295 = cljs.core.next.call(null, seq__7281__$1);
          var G__7296 = null;
          var G__7297 = 0;
          var G__7298 = 0;
          seq__7281 = G__7295;
          chunk__7282 = G__7296;
          count__7283 = G__7297;
          i__7284 = G__7298;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.analyzer.macro_ns_name = function cljs$analyzer$macro_ns_name(name) {
  var name_str = [cljs.core.str(name)].join("");
  if (cljs.core.not.call(null, goog.string.endsWith(name_str, "$macros"))) {
    return cljs.core.symbol.call(null, [cljs.core.str(name_str), cljs.core.str("$macros")].join(""));
  } else {
    return name;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), function(_, env, p__7301, ___$1, opts) {
  var vec__7302 = p__7301;
  var ___$2 = cljs.core.nth.call(null, vec__7302, 0, null);
  var name = cljs.core.nth.call(null, vec__7302, 1, null);
  var args = cljs.core.nthnext.call(null, vec__7302, 2);
  var form = vec__7302;
  if (name instanceof cljs.core.Symbol) {
  } else {
    throw cljs.analyzer.error.call(null, env, "Namespaces must be named by a symbol.");
  }
  var name__$1 = function() {
    var G__7303 = name;
    var G__7303__$1 = (new cljs.core.Keyword(null, "macros-ns", "macros-ns", 1626844933)).cljs$core$IFn$_invoke$arity$1(opts) ? cljs.analyzer.macro_ns_name.call(null, G__7303) : G__7303;
    return G__7303__$1;
  }();
  var segments_7311 = clojure.string.split.call(null, cljs.core.name.call(null, name__$1), /\./);
  if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, segments_7311))) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "single-segment-namespace", "single-segment-namespace", -491924469), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name__$1], null));
  } else {
  }
  if (cljs.core.some.call(null, cljs.analyzer.js_reserved, segments_7311)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "munged-namespace", "munged-namespace", -101986199), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name__$1], null));
  } else {
  }
  cljs.analyzer.find_def_clash.call(null, env, name__$1, segments_7311);
  var docstring = typeof cljs.core.first.call(null, args) === "string" ? cljs.core.first.call(null, args) : null;
  var mdocstr = (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, name__$1));
  var args__$1 = docstring ? cljs.core.next.call(null, args) : args;
  var metadata = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, args__$1)) ? cljs.core.first.call(null, args__$1) : null;
  var form_meta = cljs.core.meta.call(null, form);
  var args__$2 = cljs.analyzer.desugar_ns_specs.call(null, metadata ? cljs.core.next.call(null, args__$1) : args__$1);
  var name__$2 = cljs.core.vary_meta.call(null, name__$1, cljs.core.merge, metadata);
  var excludes = cljs.analyzer.parse_ns_excludes.call(null, env, args__$2);
  var deps = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
  var aliases = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "fns", "fns", 1185138786), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "macros", "macros", 811339431), cljs.core.PersistentArrayMap.EMPTY], null));
  var spec_parsers = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "require", "require", -468001333), cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, env, false, deps, aliases), new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, env, true, deps, aliases), new cljs.core.Keyword(null, "use", "use", -1846382424), cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, 
  env, false, deps, aliases), cljs.core.partial.call(null, cljs.analyzer.use__GT_require, env)), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, env, true, deps, aliases), cljs.core.partial.call(null, cljs.analyzer.use__GT_require, env)), new cljs.core.Keyword(null, "import", "import", -1399500709), cljs.core.partial.call(null, cljs.analyzer.parse_import_spec, env, deps)], null);
  var valid_forms = cljs.core.atom.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), null, new cljs.core.Keyword(null, "use", "use", -1846382424), null, new cljs.core.Keyword(null, "require", "require", -468001333), null, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), null, new cljs.core.Keyword(null, "import", "import", -1399500709), null], null), null));
  var reload = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "use", "use", -1846382424), null, new cljs.core.Keyword(null, "require", "require", -468001333), null, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), null, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), null], null));
  var reloads = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var map__7304 = cljs.core.reduce.call(null, function(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__7302, ___$2, name, args, form) {
    return function(m, p__7305) {
      var vec__7306 = p__7305;
      var k = cljs.core.nth.call(null, vec__7306, 0, null);
      var libs = cljs.core.nthnext.call(null, vec__7306, 1);
      if ((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), null, new cljs.core.Keyword(null, "use", "use", -1846382424), null, new cljs.core.Keyword(null, "require", "require", -468001333), null, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), null, new cljs.core.Keyword(null, "import", "import", -1399500709), null], null), null)).call(null, k)) {
      } else {
        throw cljs.analyzer.error.call(null, env, "Only :refer-clojure, :require, :require-macros, :use, :use-macros, and :import libspecs supported");
      }
      if (cljs.core.deref.call(null, valid_forms).call(null, k)) {
      } else {
        throw cljs.analyzer.error.call(null, env, [cljs.core.str("Only one "), cljs.core.str(k), cljs.core.str(" form is allowed per namespace definition")].join(""));
      }
      cljs.core.swap_BANG_.call(null, valid_forms, cljs.core.disj, k);
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "import", "import", -1399500709), k)) {
      } else {
        if (cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "reload", "reload", 863702807), null], null), null), libs)) {
          cljs.core.swap_BANG_.call(null, reload, cljs.core.assoc, k, new cljs.core.Keyword(null, "reload", "reload", 863702807));
        } else {
        }
        if (cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200), null], null), null), libs)) {
          cljs.core.swap_BANG_.call(null, reload, cljs.core.assoc, k, new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200));
        } else {
        }
      }
      var temp__4425__auto___7312 = cljs.core.seq.call(null, cljs.core.filter.call(null, function(vec__7306, k, libs, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__7302, ___$2, name, args, form) {
        return function(p1__7299_SHARP_) {
          return (new cljs.core.Keyword(null, "reload", "reload", 863702807)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__7299_SHARP_));
        };
      }(vec__7306, k, libs, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__7302, ___$2, name, args, form), libs));
      if (temp__4425__auto___7312) {
        var xs_7313 = temp__4425__auto___7312;
        cljs.core.swap_BANG_.call(null, reloads, cljs.core.assoc, k, cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs.core.first, xs_7313), cljs.core.map.call(null, function(xs_7313, temp__4425__auto___7312, vec__7306, k, libs, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__7302, ___$2, name, args, form) {
          return function(p1__7300_SHARP_) {
            return (new cljs.core.Keyword(null, "reload", "reload", 863702807)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__7300_SHARP_));
          };
        }(xs_7313, temp__4425__auto___7312, vec__7306, k, libs, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__7302, ___$2, name, args, form), xs_7313)));
      } else {
      }
      return cljs.core.apply.call(null, cljs.core.merge_with, cljs.core.merge, m, cljs.core.map.call(null, spec_parsers.call(null, k), cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reload", "reload", 863702807), null, new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200), null], null), null), libs)));
    };
  }(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__7302, ___$2, name, args, form), cljs.core.PersistentArrayMap.EMPTY, cljs.core.remove.call(null, function(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__7302, ___$2, name, args, form) {
    return function(p__7307) {
      var vec__7308 = p__7307;
      var r = cljs.core.nth.call(null, vec__7308, 0, null);
      return cljs.core._EQ_.call(null, r, new cljs.core.Keyword(null, "refer-clojure", "refer-clojure", 813784440));
    };
  }(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__7302, ___$2, name, args, form), args__$2));
  var map__7304__$1 = (!(map__7304 == null) ? map__7304.cljs$lang$protocol_mask$partition0$ & 64 || map__7304.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7304) : map__7304;
  var params = map__7304__$1;
  var uses = cljs.core.get.call(null, map__7304__$1, new cljs.core.Keyword(null, "use", "use", -1846382424));
  var requires = cljs.core.get.call(null, map__7304__$1, new cljs.core.Keyword(null, "require", "require", -468001333));
  var use_macros = cljs.core.get.call(null, map__7304__$1, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393));
  var require_macros = cljs.core.get.call(null, map__7304__$1, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416));
  var imports = cljs.core.get.call(null, map__7304__$1, new cljs.core.Keyword(null, "import", "import", -1399500709));
  cljs.analyzer._STAR_cljs_ns_STAR_ = name__$2;
  var ns_info = new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "name", "name", 1843675177), name__$2, new cljs.core.Keyword(null, "doc", "doc", 1913296891), function() {
    var or__4060__auto__ = docstring;
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      return mdocstr;
    }
  }(), new cljs.core.Keyword(null, "excludes", "excludes", -1791725945), excludes, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), use_macros, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), require_macros, new cljs.core.Keyword(null, "uses", "uses", 232664692), uses, new cljs.core.Keyword(null, "requires", "requires", -1201390927), requires, new cljs.core.Keyword(null, "imports", "imports", -1249933394), imports], null);
  var ns_info__$1 = (new cljs.core.Keyword(null, "merge", "merge", -1804319409)).cljs$core$IFn$_invoke$arity$1(form_meta) ? function() {
    var ns_info_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), name__$2], null));
    if (cljs.core.count.call(null, ns_info_SINGLEQUOTE_) > 0) {
      var merge_keys = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), new cljs.core.Keyword(null, "uses", "uses", 232664692), new cljs.core.Keyword(null, "requires", "requires", -1201390927), new cljs.core.Keyword(null, "imports", "imports", -1249933394)], null);
      return cljs.core.merge.call(null, ns_info_SINGLEQUOTE_, cljs.core.merge_with.call(null, cljs.core.merge, cljs.core.select_keys.call(null, ns_info_SINGLEQUOTE_, merge_keys), cljs.core.select_keys.call(null, ns_info, merge_keys)));
    } else {
      return ns_info;
    }
  }() : ns_info;
  cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), name__$2], null), cljs.core.merge, ns_info__$1);
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "deps", "deps", 1883360319), cljs.core.deref.call(null, deps), new cljs.core.Keyword(null, "reload", "reload", 863702807), cljs.core.deref.call(null, reload), new cljs.core.Keyword(null, 
  "reloads", "reloads", 610698522), cljs.core.deref.call(null, reloads)], null), function() {
    var G__7310 = ns_info__$1;
    var G__7310__$1 = cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "use", "use", -1846382424)) ? cljs.core.update_in.call(null, G__7310, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "uses", "uses", 232664692)], null), function(G__7310, ns_info, ns_info__$1, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, map__7304, 
    map__7304__$1, params, uses, requires, use_macros, require_macros, imports, name__$1, vec__7302, ___$2, name, args, form) {
      return function(m) {
        return cljs.core.with_meta.call(null, m, new cljs.core.PersistentArrayMap.fromArray([cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "use", "use", -1846382424)), true], true, false));
      };
    }(G__7310, ns_info, ns_info__$1, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, map__7304, map__7304__$1, params, uses, requires, use_macros, require_macros, imports, name__$1, vec__7302, ___$2, name, args, form)) : G__7310;
    var G__7310__$2 = cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "require", "require", -468001333)) ? cljs.core.update_in.call(null, G__7310__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "requires", "requires", -1201390927)], null), function(G__7310, G__7310__$1, ns_info, ns_info__$1, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, 
    reload, reloads, map__7304, map__7304__$1, params, uses, requires, use_macros, require_macros, imports, name__$1, vec__7302, ___$2, name, args, form) {
      return function(m) {
        return cljs.core.with_meta.call(null, m, new cljs.core.PersistentArrayMap.fromArray([cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "require", "require", -468001333)), true], true, false));
      };
    }(G__7310, G__7310__$1, ns_info, ns_info__$1, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, excludes, deps, aliases, spec_parsers, valid_forms, reload, reloads, map__7304, map__7304__$1, params, uses, requires, use_macros, require_macros, imports, name__$1, vec__7302, ___$2, name, args, form)) : G__7310__$1;
    return G__7310__$2;
  }());
});
cljs.analyzer.parse_type = function cljs$analyzer$parse_type(op, env, p__7314) {
  var vec__7316 = p__7314;
  var _ = cljs.core.nth.call(null, vec__7316, 0, null);
  var tsym = cljs.core.nth.call(null, vec__7316, 1, null);
  var fields = cljs.core.nth.call(null, vec__7316, 2, null);
  var pmasks = cljs.core.nth.call(null, vec__7316, 3, null);
  var body = cljs.core.nth.call(null, vec__7316, 4, null);
  var form = vec__7316;
  var t = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), tsym));
  var locals = cljs.core.reduce.call(null, function(t, vec__7316, _, tsym, fields, pmasks, body, form) {
    return function(m, fld) {
      return cljs.core.assoc.call(null, m, fld, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "field", "field", -1302436500), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "unsynchronized-mutable", "unsynchronized-mutable", -164143950), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "mutable", 
      "mutable", 875778266), new cljs.core.Keyword(null, "volatile-mutable", "volatile-mutable", 1731728411), new cljs.core.Keyword(null, "shadow", "shadow", 873231803)], [fld, true, cljs.analyzer.get_col.call(null, fld, env), (new cljs.core.Keyword(null, "unsynchronized-mutable", "unsynchronized-mutable", -164143950)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, fld)), cljs.analyzer.get_line.call(null, fld, env), (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, 
      fld)), (new cljs.core.Keyword(null, "mutable", "mutable", 875778266)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, fld)), (new cljs.core.Keyword(null, "volatile-mutable", "volatile-mutable", 1731728411)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, fld)), m.call(null, fld)]));
    };
  }(t, vec__7316, _, tsym, fields, pmasks, body, form), cljs.core.PersistentArrayMap.EMPTY, cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "defrecord*", "defrecord*", 718069562), op) ? cljs.core.concat.call(null, fields, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "__meta", "__meta", -946752628, null), new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", 
  "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null)) : fields);
  cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "defs", "defs", 1398449717), tsym], 
  null), function(t, locals, vec__7316, _, tsym, fields, pmasks, body, form) {
    return function(m) {
      var m__$1 = cljs.core.assoc.call(null, function() {
        var or__4060__auto__ = m;
        if (or__4060__auto__) {
          return or__4060__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), new cljs.core.Keyword(null, "name", "name", 1843675177), t, new cljs.core.Keyword(null, "type", "type", 1174270348), true, new cljs.core.Keyword(null, "num-fields", "num-fields", 1529154024), cljs.core.count.call(null, fields), new cljs.core.Keyword(null, "record", "record", -779106859), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "defrecord*", "defrecord*", 718069562), op));
      return cljs.core.merge.call(null, m__$1, cljs.core.dissoc.call(null, cljs.core.meta.call(null, tsym), new cljs.core.Keyword(null, "protocols", "protocols", -5615896)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "protocols", "protocols", -5615896), (new cljs.core.Keyword(null, "protocols", "protocols", -5615896)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tsym))], null), cljs.analyzer.source_info.call(null, tsym, env));
    };
  }(t, locals, vec__7316, _, tsym, fields, pmasks, body, form));
  return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "op", "op", -1882987955), op, new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "t", "t", -1397832519), t, new cljs.core.Keyword(null, "fields", "fields", -1932066230), fields, new cljs.core.Keyword(null, "pmasks", "pmasks", -871416698), pmasks, new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.analyzer.analyze.call(null, 
  cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783), locals), body)], null);
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), function(_, env, form, ___$1, ___$2) {
  return cljs.analyzer.parse_type.call(null, new cljs.core.Keyword(null, "deftype*", "deftype*", -677871637), env, form);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), function(_, env, form, ___$1, ___$2) {
  return cljs.analyzer.parse_type.call(null, new cljs.core.Keyword(null, "defrecord*", "defrecord*", 718069562), env, form);
});
cljs.analyzer.property_symbol_QMARK_ = function cljs$analyzer$property_symbol_QMARK_(p1__7317_SHARP_) {
  return cljs.core.boolean$.call(null, function() {
    var and__4048__auto__ = p1__7317_SHARP_ instanceof cljs.core.Symbol;
    if (and__4048__auto__) {
      return cljs.core.re_matches.call(null, /^-.*/, cljs.core.name.call(null, p1__7317_SHARP_));
    } else {
      return and__4048__auto__;
    }
  }());
};
cljs.analyzer.classify_dot_form = function cljs$analyzer$classify_dot_form(p__7318) {
  var vec__7320 = p__7318;
  var target = cljs.core.nth.call(null, vec__7320, 0, null);
  var member = cljs.core.nth.call(null, vec__7320, 1, null);
  var args = cljs.core.nth.call(null, vec__7320, 2, null);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [target == null ? new cljs.core.Keyword("cljs.analyzer", "error", "cljs.analyzer/error", -65289642) : new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), cljs.analyzer.property_symbol_QMARK_.call(null, member) ? new cljs.core.Keyword("cljs.analyzer", "property", "cljs.analyzer/property", 1113330886) : member instanceof cljs.core.Symbol ? new cljs.core.Keyword("cljs.analyzer", "symbol", 
  "cljs.analyzer/symbol", 933248902) : cljs.core.seq_QMARK_.call(null, member) ? new cljs.core.Keyword("cljs.analyzer", "list", "cljs.analyzer/list", -539585923) : new cljs.core.Keyword("cljs.analyzer", "error", "cljs.analyzer/error", -65289642), args == null ? cljs.core.List.EMPTY : new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889)], null);
};
if (typeof cljs.analyzer.build_dot_form !== "undefined") {
} else {
  cljs.analyzer.build_dot_form = function() {
    var method_table__4954__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__4955__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__4956__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__4957__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__4958__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.analyzer", "build-dot-form"), function(method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__, hierarchy__4958__auto__) {
      return function(p1__7321_SHARP_) {
        return cljs.analyzer.classify_dot_form.call(null, p1__7321_SHARP_);
      };
    }(method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__, hierarchy__4958__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4958__auto__, method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), new cljs.core.Keyword("cljs.analyzer", "property", "cljs.analyzer/property", 1113330886), cljs.core.List.EMPTY], null), function(p__7322) {
  var vec__7323 = p__7322;
  var target = cljs.core.nth.call(null, vec__7323, 0, null);
  var prop = cljs.core.nth.call(null, vec__7323, 1, null);
  var _ = cljs.core.nth.call(null, vec__7323, 2, null);
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "dot-action", "dot-action", -1460119601), new cljs.core.Keyword("cljs.analyzer", "access", "cljs.analyzer/access", -1639036494), new cljs.core.Keyword(null, "target", "target", 253001721), target, new cljs.core.Keyword(null, "field", "field", -1302436500), cljs.core.symbol.call(null, cljs.core.name.call(null, prop).substring(1))], null);
});
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), new cljs.core.Keyword("cljs.analyzer", "property", "cljs.analyzer/property", 1113330886), new cljs.core.Keyword("cljs.analyzer", "list", "cljs.analyzer/list", -539585923)], null), function(p__7324) {
  var vec__7325 = p__7324;
  var target = cljs.core.nth.call(null, vec__7325, 0, null);
  var prop = cljs.core.nth.call(null, vec__7325, 1, null);
  var args = cljs.core.nth.call(null, vec__7325, 2, null);
  throw new Error([cljs.core.str("Cannot provide arguments "), cljs.core.str(args), cljs.core.str(" on property access "), cljs.core.str(prop)].join(""));
});
cljs.analyzer.build_method_call = function cljs$analyzer$build_method_call(target, meth, args) {
  if (meth instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "dot-action", "dot-action", -1460119601), new cljs.core.Keyword("cljs.analyzer", "call", "cljs.analyzer/call", 964149800), new cljs.core.Keyword(null, "target", "target", 253001721), target, new cljs.core.Keyword(null, "method", "method", 55703592), meth, new cljs.core.Keyword(null, "args", "args", 1315556576), args], null);
  } else {
    return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "dot-action", "dot-action", -1460119601), new cljs.core.Keyword("cljs.analyzer", "call", "cljs.analyzer/call", 964149800), new cljs.core.Keyword(null, "target", "target", 253001721), target, new cljs.core.Keyword(null, "method", "method", 55703592), cljs.core.first.call(null, meth), new cljs.core.Keyword(null, "args", "args", 1315556576), args], null);
  }
};
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), new cljs.core.Keyword("cljs.analyzer", "symbol", "cljs.analyzer/symbol", 933248902), new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889)], null), function(p__7326) {
  var vec__7327 = p__7326;
  var target = cljs.core.nth.call(null, vec__7327, 0, null);
  var meth = cljs.core.nth.call(null, vec__7327, 1, null);
  var args = cljs.core.nth.call(null, vec__7327, 2, null);
  return cljs.analyzer.build_method_call.call(null, target, meth, args);
});
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), new cljs.core.Keyword("cljs.analyzer", "symbol", "cljs.analyzer/symbol", 933248902), cljs.core.List.EMPTY], null), function(p__7328) {
  var vec__7329 = p__7328;
  var target = cljs.core.nth.call(null, vec__7329, 0, null);
  var meth = cljs.core.nth.call(null, vec__7329, 1, null);
  var args = cljs.core.nth.call(null, vec__7329, 2, null);
  return cljs.analyzer.build_method_call.call(null, target, meth, args);
});
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), new cljs.core.Keyword("cljs.analyzer", "list", "cljs.analyzer/list", -539585923), cljs.core.List.EMPTY], null), function(p__7330) {
  var vec__7331 = p__7330;
  var target = cljs.core.nth.call(null, vec__7331, 0, null);
  var meth_expr = cljs.core.nth.call(null, vec__7331, 1, null);
  var _ = cljs.core.nth.call(null, vec__7331, 2, null);
  return cljs.analyzer.build_method_call.call(null, target, cljs.core.first.call(null, meth_expr), cljs.core.rest.call(null, meth_expr));
});
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.Keyword(null, "default", "default", -1987822328), function(dot_form) {
  throw new Error([cljs.core.str("Unknown dot form of "), cljs.core.str(cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), dot_form)), cljs.core.str(" with classification "), cljs.core.str(cljs.analyzer.classify_dot_form.call(null, dot_form))].join(""));
});
cljs.analyzer.analyze_dot = function cljs$analyzer$analyze_dot(env, target, field, member_PLUS_, form) {
  var v = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [target, field, member_PLUS_], null);
  var map__7336 = cljs.analyzer.build_dot_form.call(null, v);
  var map__7336__$1 = (!(map__7336 == null) ? map__7336.cljs$lang$protocol_mask$partition0$ & 64 || map__7336.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7336) : map__7336;
  var dot_action = cljs.core.get.call(null, map__7336__$1, new cljs.core.Keyword(null, "dot-action", "dot-action", -1460119601));
  var target__$1 = cljs.core.get.call(null, map__7336__$1, new cljs.core.Keyword(null, "target", "target", 253001721));
  var method = cljs.core.get.call(null, map__7336__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var field__$1 = cljs.core.get.call(null, map__7336__$1, new cljs.core.Keyword(null, "field", "field", -1302436500));
  var args = cljs.core.get.call(null, map__7336__$1, new cljs.core.Keyword(null, "args", "args", 1315556576));
  var enve = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var targetexpr = cljs.analyzer.analyze.call(null, enve, target__$1);
  var form_meta = cljs.core.meta.call(null, form);
  var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(form_meta);
  var G__7338 = dot_action instanceof cljs.core.Keyword ? dot_action.fqn : null;
  switch(G__7338) {
    case "cljs.analyzer/access":
      var children = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [targetexpr], null);
      return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "dot", "dot", 1442709401), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "target", "target", 253001721), targetexpr, new cljs.core.Keyword(null, "field", "field", -1302436500), field__$1, new cljs.core.Keyword(null, "children", "children", -940561982), children, 
      new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag], null);
      break;
    case "cljs.analyzer/call":
      var argexprs = cljs.core.map.call(null, function(G__7338, v, map__7336, map__7336__$1, dot_action, target__$1, method, field__$1, args, enve, targetexpr, form_meta, tag) {
        return function(p1__7332_SHARP_) {
          return cljs.analyzer.analyze.call(null, enve, p1__7332_SHARP_);
        };
      }(G__7338, v, map__7336, map__7336__$1, dot_action, target__$1, method, field__$1, args, enve, targetexpr, form_meta, tag), args);
      var children = cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [targetexpr], null), argexprs);
      return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "dot", "dot", 1442709401), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "target", "target", 253001721), targetexpr, new cljs.core.Keyword(null, "method", "method", 55703592), method, new cljs.core.Keyword(null, "args", "args", 1315556576), argexprs, new cljs.core.Keyword(null, 
      "children", "children", -940561982), children, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag], null);
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(dot_action)].join(""));;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, ".", ".", 1975675962, null), function(_, env, p__7340, ___$1, ___$2) {
  var vec__7341 = p__7340;
  var ___$3 = cljs.core.nth.call(null, vec__7341, 0, null);
  var target = cljs.core.nth.call(null, vec__7341, 1, null);
  var vec__7342 = cljs.core.nthnext.call(null, vec__7341, 2);
  var field = cljs.core.nth.call(null, vec__7342, 0, null);
  var member_PLUS_ = cljs.core.nthnext.call(null, vec__7342, 1);
  var form = vec__7341;
  var _STAR_recur_frames_STAR_7343 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    return cljs.analyzer.analyze_dot.call(null, env, target, field, member_PLUS_, form);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7343;
  }
});
cljs.analyzer.get_js_tag = function cljs$analyzer$get_js_tag(form) {
  var form_meta = cljs.core.meta.call(null, form);
  var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(form_meta);
  if (!(tag == null)) {
    return tag;
  } else {
    if ((new cljs.core.Keyword(null, "numeric", "numeric", -1495594714)).cljs$core$IFn$_invoke$arity$1(form_meta) === true) {
      return new cljs.core.Symbol(null, "number", "number", -1084057331, null);
    } else {
      return null;
    }
  }
};
cljs.analyzer.js_star_interp = function cljs$analyzer$js_star_interp(env, s) {
  var idx = s.indexOf("~{");
  if (-1 === idx) {
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, s);
  } else {
    var end = s.indexOf("}", idx);
    var inner = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_existing_var.call(null, env, cljs.core.symbol.call(null, cljs.core.subs.call(null, s, 2 + idx, end))));
    return new cljs.core.LazySeq(null, function(end, inner, idx) {
      return function() {
        return cljs.core.cons.call(null, cljs.core.subs.call(null, s, 0, idx), cljs.core.cons.call(null, inner, cljs$analyzer$js_star_interp.call(null, env, cljs.core.subs.call(null, s, end + 1))));
      };
    }(end, inner, idx), null, null);
  }
};
cljs.analyzer.js_star_seg = function cljs$analyzer$js_star_seg(s) {
  var idx = s.indexOf("~{");
  if (-1 === idx) {
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, s);
  } else {
    var end = s.indexOf("}", idx);
    return new cljs.core.LazySeq(null, function(end, idx) {
      return function() {
        return cljs.core.cons.call(null, cljs.core.subs.call(null, s, 0, idx), cljs$analyzer$js_star_seg.call(null, cljs.core.subs.call(null, s, end + 1)));
      };
    }(end, idx), null, null);
  }
};
cljs.analyzer.NUMERIC_SET = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Symbol(null, "any", "any", -948528346, null), null, new cljs.core.Symbol(null, "long", "long", 1469079434, null), null, new cljs.core.Symbol(null, "double", "double", -1769548886, null), null, new cljs.core.Symbol(null, "number", "number", -1084057331, null), null], null), null);
cljs.analyzer.numeric_type_QMARK_ = function cljs$analyzer$numeric_type_QMARK_(t) {
  if (t == null) {
    return true;
  } else {
    if (t instanceof cljs.core.Symbol && !(cljs.core.get.call(null, cljs.analyzer.NUMERIC_SET, t) == null)) {
      return true;
    } else {
      if (cljs.analyzer.cljs_set_QMARK_.call(null, t)) {
        return cljs.core.contains_QMARK_.call(null, t, new cljs.core.Symbol(null, "number", "number", -1084057331, null)) || cljs.core.contains_QMARK_.call(null, t, new cljs.core.Symbol(null, "long", "long", 1469079434, null)) || cljs.core.contains_QMARK_.call(null, t, new cljs.core.Symbol(null, "double", "double", -1769548886, null)) || cljs.core.contains_QMARK_.call(null, t, new cljs.core.Symbol(null, "any", "any", -948528346, null));
      } else {
        return null;
      }
    }
  }
};
cljs.analyzer.analyze_js_star_STAR_ = function cljs$analyzer$analyze_js_star_STAR_(env, jsform, args, form) {
  var enve = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var argexprs = cljs.core.vec.call(null, cljs.core.map.call(null, function(enve) {
    return function(p1__7344_SHARP_) {
      return cljs.analyzer.analyze.call(null, enve, p1__7344_SHARP_);
    };
  }(enve), args));
  var form_meta = cljs.core.meta.call(null, form);
  var segs = cljs.analyzer.js_star_seg.call(null, jsform);
  var tag = cljs.analyzer.get_js_tag.call(null, form);
  var js_op = (new cljs.core.Keyword(null, "js-op", "js-op", -1046277897)).cljs$core$IFn$_invoke$arity$1(form_meta);
  var numeric = (new cljs.core.Keyword(null, "numeric", "numeric", -1495594714)).cljs$core$IFn$_invoke$arity$1(form_meta);
  if (numeric === true) {
    var types_7346 = cljs.core.map.call(null, function(enve, argexprs, form_meta, segs, tag, js_op, numeric) {
      return function(p1__7345_SHARP_) {
        return cljs.analyzer.infer_tag.call(null, env, p1__7345_SHARP_);
      };
    }(enve, argexprs, form_meta, segs, tag, js_op, numeric), argexprs);
    if (cljs.core.every_QMARK_.call(null, cljs.analyzer.numeric_type_QMARK_, types_7346)) {
    } else {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "invalid-arithmetic", "invalid-arithmetic", 1917075065), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "js-op", "js-op", -1046277897), js_op, new cljs.core.Keyword(null, "types", "types", 590030639), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, types_7346)], null));
    }
  } else {
  }
  return cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "args", "args", 1315556576), new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.Keyword(null, "numeric", "numeric", -1495594714), new cljs.core.Keyword(null, "segs", "segs", -1940299576), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "env", "env", -1815813235), new cljs.core.Keyword(null, "js-op", "js-op", -1046277897), new cljs.core.Keyword(null, "form", "form", 
  -1624062471), new cljs.core.Keyword(null, "tag", "tag", -1290361223)], [argexprs, argexprs, numeric, segs, new cljs.core.Keyword(null, "js", "js", 1768080579), env, js_op, form, tag]);
};
cljs.analyzer.analyze_js_star = function cljs$analyzer$analyze_js_star(env, jsform, args, form) {
  var _STAR_recur_frames_STAR_7348 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    return cljs.analyzer.analyze_js_star_STAR_.call(null, env, jsform, args, form);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7348;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), function(op, env, p__7349, _, ___$1) {
  var vec__7350 = p__7349;
  var ___$2 = cljs.core.nth.call(null, vec__7350, 0, null);
  var jsform = cljs.core.nth.call(null, vec__7350, 1, null);
  var args = cljs.core.nthnext.call(null, vec__7350, 2);
  var form = vec__7350;
  if (typeof jsform === "string") {
  } else {
    throw cljs.analyzer.error.call(null, env, "Invalid js* form");
  }
  if (!(args == null)) {
    return cljs.analyzer.analyze_js_star.call(null, env, jsform, args, form);
  } else {
    var code = cljs.core.apply.call(null, cljs.core.str, cljs.analyzer.js_star_interp.call(null, env, jsform));
    var tag = cljs.analyzer.get_js_tag.call(null, form);
    var form_meta = cljs.core.meta.call(null, form);
    var js_op = (new cljs.core.Keyword(null, "js-op", "js-op", -1046277897)).cljs$core$IFn$_invoke$arity$1(form_meta);
    var numeric = (new cljs.core.Keyword(null, "numeric", "numeric", -1495594714)).cljs$core$IFn$_invoke$arity$1(form_meta);
    return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "js", "js", 1768080579), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "code", "code", 1586293142), code, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag, new cljs.core.Keyword(null, "js-op", "js-op", -1046277897), js_op, new cljs.core.Keyword(null, 
    "numeric", "numeric", -1495594714), numeric], null);
  }
});
cljs.analyzer.analyzed_QMARK_ = function cljs$analyzer$analyzed_QMARK_(f) {
  return cljs.core.contains_QMARK_.call(null, cljs.core.meta.call(null, f), new cljs.core.Keyword("cljs.analyzer", "analyzed", "cljs.analyzer/analyzed", -735094162));
};
cljs.analyzer.all_values_QMARK_ = function cljs$analyzer$all_values_QMARK_(exprs) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "constant", "constant", -379609303), null, new cljs.core.Keyword(null, "var", "var", -769682797), null], null), null), cljs.core.map.call(null, new cljs.core.Keyword(null, "op", "op", -1882987955), exprs));
};
cljs.analyzer.valid_arity_QMARK_ = function cljs$analyzer$valid_arity_QMARK_(argc, method_params) {
  return cljs.core.boolean$.call(null, cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([argc], true), cljs.core.map.call(null, cljs.core.count, method_params)));
};
cljs.analyzer.parse_invoke_STAR_ = function cljs$analyzer$parse_invoke_STAR_(env, p__7352) {
  var vec__7356 = p__7352;
  var f = cljs.core.nth.call(null, vec__7356, 0, null);
  var args = cljs.core.nthnext.call(null, vec__7356, 1);
  var form = vec__7356;
  var enve = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var fexpr = cljs.analyzer.analyze.call(null, enve, f);
  var argc = cljs.core.count.call(null, args);
  var fn_var_QMARK_ = (new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(fexpr));
  if (fn_var_QMARK_) {
    var map__7357_7359 = (new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(fexpr);
    var map__7357_7360__$1 = (!(map__7357_7359 == null) ? map__7357_7359.cljs$lang$protocol_mask$partition0$ & 64 || map__7357_7359.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7357_7359) : map__7357_7359;
    var variadic_7361 = cljs.core.get.call(null, map__7357_7360__$1, new cljs.core.Keyword(null, "variadic", "variadic", 882626057));
    var max_fixed_arity_7362 = cljs.core.get.call(null, map__7357_7360__$1, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543));
    var method_params_7363 = cljs.core.get.call(null, map__7357_7360__$1, new cljs.core.Keyword(null, "method-params", "method-params", -980792179));
    var name_7364 = cljs.core.get.call(null, map__7357_7360__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
    if (!cljs.analyzer.valid_arity_QMARK_.call(null, argc, method_params_7363) && (!variadic_7361 || variadic_7361 && argc < max_fixed_arity_7362)) {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "fn-arity", "fn-arity", -403576501), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), name_7364, new cljs.core.Keyword(null, "argc", "argc", -1452839519), argc], null));
    } else {
    }
  } else {
  }
  var deprecated_QMARK__7365 = (new cljs.core.Keyword(null, "deprecated", "deprecated", 1498275348)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(fexpr));
  var no_warn_QMARK__7366 = (new cljs.core.Keyword(null, "deprecation-nowarn", "deprecation-nowarn", -1762828044)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, form));
  if (cljs.core.boolean$.call(null, deprecated_QMARK__7365) && !cljs.core.boolean$.call(null, no_warn_QMARK__7366)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "fn-deprecated", "fn-deprecated", 626877647), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "fexpr", "fexpr", -122857150), fexpr], null));
  } else {
  }
  if ((new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(fexpr)) == null) {
  } else {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "invoke-ctor", "invoke-ctor", -756052704), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "fexpr", "fexpr", -122857150), fexpr], null));
  }
  var ana_expr = function(enve, fexpr, argc, fn_var_QMARK_, vec__7356, f, args, form) {
    return function(p1__7351_SHARP_) {
      return cljs.analyzer.analyze.call(null, enve, p1__7351_SHARP_);
    };
  }(enve, fexpr, argc, fn_var_QMARK_, vec__7356, f, args, form);
  var argexprs = cljs.core.map.call(null, ana_expr, args);
  if (!cljs.core.boolean$.call(null, cljs.analyzer._STAR_cljs_static_fns_STAR_) || !(f instanceof cljs.core.Symbol) || fn_var_QMARK_ || cljs.analyzer.analyzed_QMARK_.call(null, f) || cljs.analyzer.all_values_QMARK_.call(null, argexprs)) {
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "invoke", "invoke", 1145927159), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "f", "f", -1597136552), fexpr, new cljs.core.Keyword(null, "args", "args", 1315556576), cljs.core.vec.call(null, argexprs), new cljs.core.Keyword(null, "children", "children", -940561982), 
    cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fexpr], null), argexprs)], null);
  } else {
    var arg_syms = cljs.core.take.call(null, argc, cljs.core.repeatedly.call(null, cljs.core.gensym));
    return cljs.analyzer.analyze.call(null, env, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.vec.call(null, cljs.core.interleave.call(null, arg_syms, args))))))), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vary_meta.call(null, f, cljs.core.assoc, new cljs.core.Keyword("cljs.analyzer", "analyzed", "cljs.analyzer/analyzed", -735094162), true)), arg_syms))))))));
  }
};
cljs.analyzer.parse_invoke = function cljs$analyzer$parse_invoke(env, form) {
  var _STAR_recur_frames_STAR_7368 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    return cljs.analyzer.parse_invoke_STAR_.call(null, env, form);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7368;
  }
};
cljs.analyzer.analyze_symbol = function cljs$analyzer$analyze_symbol(env, sym) {
  if ((new cljs.core.Keyword(null, "quoted?", "quoted?", 1464649621)).cljs$core$IFn$_invoke$arity$1(env)) {
    return cljs.analyzer.analyze_wrap_meta.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "constant", "constant", -379609303), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), sym, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "Symbol", "cljs.core/Symbol", 292989338, null)], null));
  } else {
    var map__7371 = cljs.core.meta.call(null, sym);
    var map__7371__$1 = (!(map__7371 == null) ? map__7371.cljs$lang$protocol_mask$partition0$ & 64 || map__7371.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7371) : map__7371;
    var line = cljs.core.get.call(null, map__7371__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
    var column = cljs.core.get.call(null, map__7371__$1, new cljs.core.Keyword(null, "column", "column", 2078222095));
    var env__$1 = !(line == null) ? cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "line", "line", 212345235), line) : env;
    var env__$2 = !(column == null) ? cljs.core.assoc.call(null, env__$1, new cljs.core.Keyword(null, "column", "column", 2078222095), column) : env__$1;
    var ret = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "env", "env", -1815813235), env__$2, new cljs.core.Keyword(null, "form", "form", -1624062471), sym], null);
    var lcls = (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env__$2);
    var lb = cljs.core.get.call(null, lcls, sym);
    if (!(lb == null)) {
      return cljs.core.assoc.call(null, ret, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var", "var", -769682797), new cljs.core.Keyword(null, "info", "info", -317069002), lb);
    } else {
      if (!((new cljs.core.Keyword(null, "def-var", "def-var", -698214377)).cljs$core$IFn$_invoke$arity$1(env__$2) === true)) {
        var sym_meta = cljs.core.meta.call(null, sym);
        var info = !cljs.core.contains_QMARK_.call(null, sym_meta, new cljs.core.Keyword("cljs.analyzer", "analyzed", "cljs.analyzer/analyzed", -735094162)) ? cljs.analyzer.resolve_existing_var.call(null, env__$2, sym) : cljs.analyzer.resolve_var.call(null, env__$2, sym);
        return cljs.core.assoc.call(null, ret, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var", "var", -769682797), new cljs.core.Keyword(null, "info", "info", -317069002), info);
      } else {
        var info = cljs.analyzer.resolve_var.call(null, env__$2, sym);
        return cljs.core.assoc.call(null, ret, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var", "var", -769682797), new cljs.core.Keyword(null, "info", "info", -317069002), info);
      }
    }
  }
};
cljs.analyzer.excluded_QMARK_ = function cljs$analyzer$excluded_QMARK_(env, sym) {
  if (!(cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "excludes", "excludes", -1791725945), sym) == null)) {
    return true;
  } else {
    return !(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177)), new cljs.core.Keyword(null, "excludes", "excludes", -1791725945), sym) == null);
  }
};
cljs.analyzer.used_QMARK_ = function cljs$analyzer$used_QMARK_(env, sym) {
  if (!(cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), sym) == null)) {
    return true;
  } else {
    return !(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177)), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), sym) == null);
  }
};
cljs.analyzer.get_expander_ns = function cljs$analyzer$get_expander_ns(env, nstr) {
  if ("clojure.core" === nstr) {
    return cljs.core.find_macros_ns.call(null, cljs.analyzer.CLJS_CORE_MACROS_SYM);
  } else {
    if ("clojure.repl" === nstr) {
      return cljs.core.find_macros_ns.call(null, new cljs.core.Symbol(null, "cljs.repl", "cljs.repl", 1767065658, null));
    } else {
      if (goog.string.contains(nstr, ".")) {
        return cljs.core.find_macros_ns.call(null, cljs.core.symbol.call(null, nstr));
      } else {
        var G__7374 = env;
        var G__7374__$1 = G__7374 == null ? null : (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(G__7374);
        var G__7374__$2 = G__7374__$1 == null ? null : (new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416)).cljs$core$IFn$_invoke$arity$1(G__7374__$1);
        var G__7374__$3 = G__7374__$2 == null ? null : cljs.core.get.call(null, G__7374__$2, cljs.core.symbol.call(null, nstr));
        var G__7374__$4 = G__7374__$3 == null ? null : cljs.core.find_ns.call(null, G__7374__$3);
        return G__7374__$4;
      }
    }
  }
};
cljs.analyzer.get_expander_STAR_ = function cljs$analyzer$get_expander_STAR_(sym, env) {
  if (!(cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783), sym) == null) || cljs.analyzer.excluded_QMARK_.call(null, env, sym) && !cljs.analyzer.used_QMARK_.call(null, env, sym)) {
    return null;
  } else {
    var nstr = cljs.core.namespace.call(null, sym);
    if (!(nstr == null)) {
      var ns = cljs.analyzer.get_expander_ns.call(null, env, nstr);
      if (ns == null) {
        return null;
      } else {
        return ns.findInternedVar(cljs.core.symbol.call(null, cljs.core.name.call(null, sym)));
      }
    } else {
      var nsym = cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), sym);
      if (!(nsym == null)) {
        return cljs.core.find_macros_ns.call(null, nsym).findInternedVar(sym);
      } else {
        return cljs.core.find_macros_ns.call(null, cljs.analyzer.CLJS_CORE_MACROS_SYM).findInternedVar(sym);
      }
    }
  }
};
cljs.analyzer.get_expander = function cljs$analyzer$get_expander(sym, env) {
  var mvar = cljs.analyzer.get_expander_STAR_.call(null, sym, env);
  if (!(mvar == null) && mvar.isMacro()) {
    return mvar;
  } else {
    return null;
  }
};
cljs.analyzer.macroexpand_1_STAR_ = function cljs$analyzer$macroexpand_1_STAR_(env, form) {
  var op = cljs.core.first.call(null, form);
  if (!(cljs.core.get.call(null, cljs.analyzer.specials, op) == null)) {
    return form;
  } else {
    var mac_var = op instanceof cljs.core.Symbol ? cljs.analyzer.get_expander.call(null, op, env) : null;
    if (!(mac_var == null)) {
      var form_SINGLEQUOTE_ = cljs.core.apply.call(null, cljs.core.deref.call(null, mac_var), form, env, cljs.core.rest.call(null, form));
      if (cljs.analyzer.cljs_seq_QMARK_.call(null, form_SINGLEQUOTE_)) {
        var sym_SINGLEQUOTE_ = cljs.core.first.call(null, form_SINGLEQUOTE_);
        var sym = cljs.core.first.call(null, form);
        if (cljs.core.symbol_identical_QMARK_.call(null, sym_SINGLEQUOTE_, cljs.analyzer.JS_STAR_SYM)) {
          var sym__$1 = cljs.core.namespace.call(null, sym) ? sym : cljs.core.symbol.call(null, "cljs.core", [cljs.core.str(sym)].join(""));
          var js_op = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "js-op", "js-op", -1046277897), sym__$1], null);
          var js_op__$1 = (new cljs.core.Keyword("cljs.analyzer", "numeric", "cljs.analyzer/numeric", 1415704188)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, mac_var)) === true ? cljs.core.assoc.call(null, js_op, new cljs.core.Keyword(null, "numeric", "numeric", -1495594714), true) : js_op;
          return cljs.core.vary_meta.call(null, form_SINGLEQUOTE_, cljs.core.merge, js_op__$1);
        } else {
          return form_SINGLEQUOTE_;
        }
      } else {
        return form_SINGLEQUOTE_;
      }
    } else {
      if (op instanceof cljs.core.Symbol) {
        var opname = [cljs.core.str(op)].join("");
        if ("." === opname.charAt(0)) {
          var vec__7376 = cljs.core.next.call(null, form);
          var target = cljs.core.nth.call(null, vec__7376, 0, null);
          var args = cljs.core.nthnext.call(null, vec__7376, 1);
          return cljs.core.with_meta.call(null, cljs.core.list_STAR_.call(null, cljs.analyzer.DOT_SYM, target, cljs.core.symbol.call(null, cljs.core.subs.call(null, opname, 1)), args), cljs.core.meta.call(null, form));
        } else {
          if ("." === opname.charAt(opname.length - 1)) {
            return cljs.core.with_meta.call(null, cljs.core.list_STAR_.call(null, cljs.analyzer.NEW_SYM, cljs.core.symbol.call(null, cljs.core.subs.call(null, opname, 0, cljs.core.count.call(null, opname) - 1)), cljs.core.next.call(null, form)), cljs.core.meta.call(null, form));
          } else {
            return form;
          }
        }
      } else {
        return form;
      }
    }
  }
};
cljs.analyzer.macroexpand_1 = function cljs$analyzer$macroexpand_1(env, form) {
  var val__5424__auto__ = cljs.env._STAR_compiler_STAR_;
  if (val__5424__auto__ == null) {
    cljs.env._STAR_compiler_STAR_ = cljs.env.default_compiler_env.call(null);
  } else {
  }
  try {
    try {
      return cljs.analyzer.macroexpand_1_STAR_.call(null, env, form);
    } catch (e7378) {
      var err__5460__auto__ = e7378;
      if (cljs.analyzer.analysis_error_QMARK_.call(null, err__5460__auto__)) {
        throw err__5460__auto__;
      } else {
        throw cljs.analyzer.error.call(null, env, err__5460__auto__.message, err__5460__auto__);
      }
    }
  } finally {
    if (val__5424__auto__ == null) {
      cljs.env._STAR_compiler_STAR_ = null;
    } else {
    }
  }
};
cljs.analyzer.analyze_seq_STAR_ = function cljs$analyzer$analyze_seq_STAR_(op, env, form, name, opts) {
  if (!(cljs.core.get.call(null, cljs.analyzer.specials, op) == null)) {
    return cljs.analyzer.parse.call(null, op, env, form, name, opts);
  } else {
    return cljs.analyzer.parse_invoke.call(null, env, form);
  }
};
cljs.analyzer.analyze_seq_STAR__wrap = function cljs$analyzer$analyze_seq_STAR__wrap(op, env, form, name, opts) {
  try {
    return cljs.analyzer.analyze_seq_STAR_.call(null, op, env, form, name, opts);
  } catch (e7380) {
    var err__5460__auto__ = e7380;
    if (cljs.analyzer.analysis_error_QMARK_.call(null, err__5460__auto__)) {
      throw err__5460__auto__;
    } else {
      throw cljs.analyzer.error.call(null, env, err__5460__auto__.message, err__5460__auto__);
    }
  }
};
cljs.analyzer.analyze_seq = function cljs$analyzer$analyze_seq() {
  var args7381 = [];
  var len__5099__auto___7384 = arguments.length;
  var i__5100__auto___7385 = 0;
  while (true) {
    if (i__5100__auto___7385 < len__5099__auto___7384) {
      args7381.push(arguments[i__5100__auto___7385]);
      var G__7386 = i__5100__auto___7385 + 1;
      i__5100__auto___7385 = G__7386;
      continue;
    } else {
    }
    break;
  }
  var G__7383 = args7381.length;
  switch(G__7383) {
    case 3:
      return cljs.analyzer.analyze_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.analyze_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7381.length)].join(""));;
  }
};
cljs.analyzer.analyze_seq.cljs$core$IFn$_invoke$arity$3 = function(env, form, name) {
  return cljs.analyzer.analyze_seq.call(null, env, form, name, null);
};
cljs.analyzer.analyze_seq.cljs$core$IFn$_invoke$arity$4 = function(env, form, name, opts) {
  if ((new cljs.core.Keyword(null, "quoted?", "quoted?", 1464649621)).cljs$core$IFn$_invoke$arity$1(env)) {
    return cljs.analyzer.analyze_list.call(null, env, form);
  } else {
    var line = (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, form));
    var line__$1 = line == null ? (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env) : null;
    var col = (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, form));
    var col__$1 = col == null ? (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(env) : null;
    var env__$1 = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "line", "line", 212345235), line__$1, new cljs.core.Keyword(null, "column", "column", 2078222095), col__$1);
    var op = cljs.core.first.call(null, form);
    if (op == null) {
      throw cljs.analyzer.error.call(null, env__$1, "Can't call nil");
    } else {
    }
    var mform = cljs.analyzer.macroexpand_1.call(null, env__$1, form);
    if (form === mform) {
      return cljs.analyzer.analyze_seq_STAR__wrap.call(null, op, env__$1, form, name, opts);
    } else {
      return cljs.analyzer.analyze.call(null, env__$1, mform, name, opts);
    }
  }
};
cljs.analyzer.analyze_seq.cljs$lang$maxFixedArity = 4;
cljs.analyzer.analyze_map = function cljs$analyzer$analyze_map(env, form) {
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var ks = function() {
    var _STAR_recur_frames_STAR_7392 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.vec.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_7392, expr_env) {
        return function(p1__7388_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__7388_SHARP_);
        };
      }(_STAR_recur_frames_STAR_7392, expr_env), cljs.core.keys.call(null, form)));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7392;
    }
  }();
  var vs = function() {
    var _STAR_recur_frames_STAR_7393 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.vec.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_7393, expr_env, ks) {
        return function(p1__7389_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__7389_SHARP_);
        };
      }(_STAR_recur_frames_STAR_7393, expr_env, ks), cljs.core.vals.call(null, form)));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7393;
    }
  }();
  return cljs.analyzer.analyze_wrap_meta.call(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "map", "map", 1371690461), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "keys", "keys", 1068423698), ks, new cljs.core.Keyword(null, "vals", "vals", 768058733), vs, new cljs.core.Keyword(null, "children", "children", 
  -940561982), cljs.core.vec.call(null, cljs.core.interleave.call(null, ks, vs)), new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "IMap", "cljs.core/IMap", 1407777598, null)], null));
};
cljs.analyzer.analyze_list = function cljs$analyzer$analyze_list(env, form) {
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var items = function() {
    var _STAR_recur_frames_STAR_7396 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.doall.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_7396, expr_env) {
        return function(p1__7394_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__7394_SHARP_);
        };
      }(_STAR_recur_frames_STAR_7396, expr_env), form));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7396;
    }
  }();
  return cljs.analyzer.analyze_wrap_meta.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "list", "list", 765357683), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "items", "items", 1031954938), items, new cljs.core.Keyword(null, "children", "children", -940561982), items, new cljs.core.Keyword(null, "tag", 
  "tag", -1290361223), new cljs.core.Symbol("cljs.core", "IList", "cljs.core/IList", 1015168964, null)], null));
};
cljs.analyzer.analyze_vector = function cljs$analyzer$analyze_vector(env, form) {
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var items = function() {
    var _STAR_recur_frames_STAR_7399 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.vec.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_7399, expr_env) {
        return function(p1__7397_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__7397_SHARP_);
        };
      }(_STAR_recur_frames_STAR_7399, expr_env), form));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7399;
    }
  }();
  return cljs.analyzer.analyze_wrap_meta.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "vector", "vector", 1902966158), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "items", "items", 1031954938), items, new cljs.core.Keyword(null, "children", "children", -940561982), items, new cljs.core.Keyword(null, 
  "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "IVector", "cljs.core/IVector", 1711112835, null)], null));
};
cljs.analyzer.analyze_set = function cljs$analyzer$analyze_set(env, form) {
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var items = function() {
    var _STAR_recur_frames_STAR_7402 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.vec.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_7402, expr_env) {
        return function(p1__7400_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__7400_SHARP_);
        };
      }(_STAR_recur_frames_STAR_7402, expr_env), form));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7402;
    }
  }();
  return cljs.analyzer.analyze_wrap_meta.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "set", "set", 304602554), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "items", "items", 1031954938), items, new cljs.core.Keyword(null, "children", "children", -940561982), items, new cljs.core.Keyword(null, "tag", 
  "tag", -1290361223), new cljs.core.Symbol("cljs.core", "ISet", "cljs.core/ISet", 2003412810, null)], null));
};
cljs.analyzer.analyze_js_value = function cljs$analyzer$analyze_js_value(env, form) {
  var val = form.val;
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var items = cljs.core.map_QMARK_.call(null, val) ? cljs.core.zipmap.call(null, cljs.core.keys.call(null, val), function() {
    var _STAR_recur_frames_STAR_7407 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.doall.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_7407, val, expr_env) {
        return function(p1__7403_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__7403_SHARP_);
        };
      }(_STAR_recur_frames_STAR_7407, val, expr_env), cljs.core.vals.call(null, val)));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7407;
    }
  }()) : function() {
    var _STAR_recur_frames_STAR_7408 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.doall.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_7408, val, expr_env) {
        return function(p1__7404_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__7404_SHARP_);
        };
      }(_STAR_recur_frames_STAR_7408, val, expr_env), val));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_7408;
    }
  }();
  return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "js-value", "js-value", -758336661), new cljs.core.Keyword(null, "js-type", "js-type", 539386702), cljs.core.map_QMARK_.call(null, val) ? new cljs.core.Keyword(null, "object", "object", 1474613949) : new cljs.core.Keyword(null, "array", "array", -2080713842), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), 
  form, new cljs.core.Keyword(null, "items", "items", 1031954938), items, new cljs.core.Keyword(null, "children", "children", -940561982), items, new cljs.core.Keyword(null, "tag", "tag", -1290361223), cljs.core.map_QMARK_.call(null, val) ? new cljs.core.Symbol(null, "object", "object", -1179821820, null) : new cljs.core.Symbol(null, "array", "array", -440182315, null)], null);
};
cljs.analyzer.elide_reader_meta = function cljs$analyzer$elide_reader_meta(m) {
  return cljs.core.dissoc.call(null, m, new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "source", "source", -433931539));
};
cljs.analyzer.analyze_wrap_meta = function cljs$analyzer$analyze_wrap_meta(expr) {
  var form = (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(expr);
  var m = cljs.analyzer.elide_reader_meta.call(null, cljs.core.meta.call(null, form));
  if (cljs.core.seq.call(null, m)) {
    var env = (new cljs.core.Keyword(null, "env", "env", -1815813235)).cljs$core$IFn$_invoke$arity$1(expr);
    var expr__$1 = cljs.core.assoc_in.call(null, expr, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "env", "env", -1815813235), new cljs.core.Keyword(null, "context", "context", -830191113)], null), new cljs.core.Keyword(null, "expr", "expr", 745722291));
    var meta_expr = cljs.analyzer.analyze_map.call(null, (new cljs.core.Keyword(null, "env", "env", -1815813235)).cljs$core$IFn$_invoke$arity$1(expr__$1), m);
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "meta", "meta", 1499536964), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "meta", "meta", 1499536964), meta_expr, new cljs.core.Keyword(null, "expr", "expr", 745722291), expr__$1, new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [meta_expr, expr__$1], null)], null);
  } else {
    return expr;
  }
};
cljs.analyzer.infer_type = function cljs$analyzer$infer_type(env, ast, _) {
  var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(ast);
  if (tag == null) {
    var tag__$1 = cljs.analyzer.infer_tag.call(null, env, ast);
    if (!(tag__$1 == null)) {
      return cljs.core.assoc.call(null, ast, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag__$1);
    } else {
      return ast;
    }
  } else {
    return ast;
  }
};
cljs.analyzer.ns_side_effects = function cljs$analyzer$ns_side_effects(env, p__7409, opts) {
  var map__7422 = p__7409;
  var map__7422__$1 = (!(map__7422 == null) ? map__7422.cljs$lang$protocol_mask$partition0$ & 64 || map__7422.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7422) : map__7422;
  var ast = map__7422__$1;
  var op = cljs.core.get.call(null, map__7422__$1, new cljs.core.Keyword(null, "op", "op", -1882987955));
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "ns", "ns", 441598760), op)) {
    var map__7424 = ast;
    var map__7424__$1 = (!(map__7424 == null) ? map__7424.cljs$lang$protocol_mask$partition0$ & 64 || map__7424.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7424) : map__7424;
    var deps = cljs.core.get.call(null, map__7424__$1, new cljs.core.Keyword(null, "deps", "deps", 1883360319));
    var uses = cljs.core.get.call(null, map__7424__$1, new cljs.core.Keyword(null, "uses", "uses", 232664692));
    var require_macros = cljs.core.get.call(null, map__7424__$1, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416));
    var use_macros = cljs.core.get.call(null, map__7424__$1, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393));
    var reload = cljs.core.get.call(null, map__7424__$1, new cljs.core.Keyword(null, "reload", "reload", 863702807));
    var reloads = cljs.core.get.call(null, map__7424__$1, new cljs.core.Keyword(null, "reloads", "reloads", 610698522));
    if (function() {
      var and__4048__auto__ = cljs.analyzer._STAR_analyze_deps_STAR_;
      if (and__4048__auto__) {
        return cljs.core.seq.call(null, deps);
      } else {
        return and__4048__auto__;
      }
    }()) {
      cljs.analyzer.analyze_deps.call(null, cljs.core.name, deps, env, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "macros-ns", "macros-ns", 1626844933)));
    } else {
    }
    if (function() {
      var and__4048__auto__ = cljs.analyzer._STAR_analyze_deps_STAR_;
      if (and__4048__auto__) {
        return cljs.core.seq.call(null, uses);
      } else {
        return and__4048__auto__;
      }
    }()) {
      cljs.analyzer.check_uses.call(null, uses, env);
    } else {
    }
    if (cljs.analyzer._STAR_load_macros_STAR_) {
      cljs.analyzer.load_core.call(null);
      var seq__7426_7434 = cljs.core.seq.call(null, cljs.core.vals.call(null, use_macros));
      var chunk__7427_7435 = null;
      var count__7428_7436 = 0;
      var i__7429_7437 = 0;
      while (true) {
        if (i__7429_7437 < count__7428_7436) {
          var nsym_7438 = cljs.core._nth.call(null, chunk__7427_7435, i__7429_7437);
          var k_7439 = function() {
            var or__4060__auto__ = (new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393)).cljs$core$IFn$_invoke$arity$1(reload);
            if (or__4060__auto__) {
              return or__4060__auto__;
            } else {
              var or__4060__auto____$1 = cljs.core.get_in.call(null, reloads, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), nsym_7438], null));
              if (or__4060__auto____$1) {
                return or__4060__auto____$1;
              } else {
                var and__4048__auto__ = cljs.core._EQ_.call(null, nsym_7438, cljs.core.name);
                if (and__4048__auto__) {
                  var and__4048__auto____$1 = cljs.analyzer._STAR_reload_macros_STAR_;
                  if (and__4048__auto____$1) {
                    return new cljs.core.Keyword(null, "reload", "reload", 863702807);
                  } else {
                    return and__4048__auto____$1;
                  }
                } else {
                  return and__4048__auto__;
                }
              }
            }
          }();
          if (k_7439) {
            cljs.core.require.call(null, nsym_7438, k_7439);
          } else {
            cljs.core.require.call(null, nsym_7438);
          }
          cljs.analyzer.intern_macros.call(null, nsym_7438, k_7439);
          var G__7440 = seq__7426_7434;
          var G__7441 = chunk__7427_7435;
          var G__7442 = count__7428_7436;
          var G__7443 = i__7429_7437 + 1;
          seq__7426_7434 = G__7440;
          chunk__7427_7435 = G__7441;
          count__7428_7436 = G__7442;
          i__7429_7437 = G__7443;
          continue;
        } else {
          var temp__4425__auto___7444 = cljs.core.seq.call(null, seq__7426_7434);
          if (temp__4425__auto___7444) {
            var seq__7426_7445__$1 = temp__4425__auto___7444;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__7426_7445__$1)) {
              var c__4844__auto___7446 = cljs.core.chunk_first.call(null, seq__7426_7445__$1);
              var G__7447 = cljs.core.chunk_rest.call(null, seq__7426_7445__$1);
              var G__7448 = c__4844__auto___7446;
              var G__7449 = cljs.core.count.call(null, c__4844__auto___7446);
              var G__7450 = 0;
              seq__7426_7434 = G__7447;
              chunk__7427_7435 = G__7448;
              count__7428_7436 = G__7449;
              i__7429_7437 = G__7450;
              continue;
            } else {
              var nsym_7451 = cljs.core.first.call(null, seq__7426_7445__$1);
              var k_7452 = function() {
                var or__4060__auto__ = (new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393)).cljs$core$IFn$_invoke$arity$1(reload);
                if (or__4060__auto__) {
                  return or__4060__auto__;
                } else {
                  var or__4060__auto____$1 = cljs.core.get_in.call(null, reloads, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), nsym_7451], null));
                  if (or__4060__auto____$1) {
                    return or__4060__auto____$1;
                  } else {
                    var and__4048__auto__ = cljs.core._EQ_.call(null, nsym_7451, cljs.core.name);
                    if (and__4048__auto__) {
                      var and__4048__auto____$1 = cljs.analyzer._STAR_reload_macros_STAR_;
                      if (and__4048__auto____$1) {
                        return new cljs.core.Keyword(null, "reload", "reload", 863702807);
                      } else {
                        return and__4048__auto____$1;
                      }
                    } else {
                      return and__4048__auto__;
                    }
                  }
                }
              }();
              if (k_7452) {
                cljs.core.require.call(null, nsym_7451, k_7452);
              } else {
                cljs.core.require.call(null, nsym_7451);
              }
              cljs.analyzer.intern_macros.call(null, nsym_7451, k_7452);
              var G__7453 = cljs.core.next.call(null, seq__7426_7445__$1);
              var G__7454 = null;
              var G__7455 = 0;
              var G__7456 = 0;
              seq__7426_7434 = G__7453;
              chunk__7427_7435 = G__7454;
              count__7428_7436 = G__7455;
              i__7429_7437 = G__7456;
              continue;
            }
          } else {
          }
        }
        break;
      }
      var seq__7430_7457 = cljs.core.seq.call(null, cljs.core.vals.call(null, require_macros));
      var chunk__7431_7458 = null;
      var count__7432_7459 = 0;
      var i__7433_7460 = 0;
      while (true) {
        if (i__7433_7460 < count__7432_7459) {
          var nsym_7461 = cljs.core._nth.call(null, chunk__7431_7458, i__7433_7460);
          var k_7462 = function() {
            var or__4060__auto__ = (new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416)).cljs$core$IFn$_invoke$arity$1(reload);
            if (or__4060__auto__) {
              return or__4060__auto__;
            } else {
              var or__4060__auto____$1 = cljs.core.get_in.call(null, reloads, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), nsym_7461], null));
              if (or__4060__auto____$1) {
                return or__4060__auto____$1;
              } else {
                var and__4048__auto__ = cljs.core._EQ_.call(null, nsym_7461, cljs.core.name);
                if (and__4048__auto__) {
                  var and__4048__auto____$1 = cljs.analyzer._STAR_reload_macros_STAR_;
                  if (and__4048__auto____$1) {
                    return new cljs.core.Keyword(null, "reload", "reload", 863702807);
                  } else {
                    return and__4048__auto____$1;
                  }
                } else {
                  return and__4048__auto__;
                }
              }
            }
          }();
          if (k_7462) {
            cljs.core.require.call(null, nsym_7461, k_7462);
          } else {
            cljs.core.require.call(null, nsym_7461);
          }
          cljs.analyzer.intern_macros.call(null, nsym_7461, k_7462);
          var G__7463 = seq__7430_7457;
          var G__7464 = chunk__7431_7458;
          var G__7465 = count__7432_7459;
          var G__7466 = i__7433_7460 + 1;
          seq__7430_7457 = G__7463;
          chunk__7431_7458 = G__7464;
          count__7432_7459 = G__7465;
          i__7433_7460 = G__7466;
          continue;
        } else {
          var temp__4425__auto___7467 = cljs.core.seq.call(null, seq__7430_7457);
          if (temp__4425__auto___7467) {
            var seq__7430_7468__$1 = temp__4425__auto___7467;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__7430_7468__$1)) {
              var c__4844__auto___7469 = cljs.core.chunk_first.call(null, seq__7430_7468__$1);
              var G__7470 = cljs.core.chunk_rest.call(null, seq__7430_7468__$1);
              var G__7471 = c__4844__auto___7469;
              var G__7472 = cljs.core.count.call(null, c__4844__auto___7469);
              var G__7473 = 0;
              seq__7430_7457 = G__7470;
              chunk__7431_7458 = G__7471;
              count__7432_7459 = G__7472;
              i__7433_7460 = G__7473;
              continue;
            } else {
              var nsym_7474 = cljs.core.first.call(null, seq__7430_7468__$1);
              var k_7475 = function() {
                var or__4060__auto__ = (new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416)).cljs$core$IFn$_invoke$arity$1(reload);
                if (or__4060__auto__) {
                  return or__4060__auto__;
                } else {
                  var or__4060__auto____$1 = cljs.core.get_in.call(null, reloads, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), nsym_7474], null));
                  if (or__4060__auto____$1) {
                    return or__4060__auto____$1;
                  } else {
                    var and__4048__auto__ = cljs.core._EQ_.call(null, nsym_7474, cljs.core.name);
                    if (and__4048__auto__) {
                      var and__4048__auto____$1 = cljs.analyzer._STAR_reload_macros_STAR_;
                      if (and__4048__auto____$1) {
                        return new cljs.core.Keyword(null, "reload", "reload", 863702807);
                      } else {
                        return and__4048__auto____$1;
                      }
                    } else {
                      return and__4048__auto__;
                    }
                  }
                }
              }();
              if (k_7475) {
                cljs.core.require.call(null, nsym_7474, k_7475);
              } else {
                cljs.core.require.call(null, nsym_7474);
              }
              cljs.analyzer.intern_macros.call(null, nsym_7474, k_7475);
              var G__7476 = cljs.core.next.call(null, seq__7430_7468__$1);
              var G__7477 = null;
              var G__7478 = 0;
              var G__7479 = 0;
              seq__7430_7457 = G__7476;
              chunk__7431_7458 = G__7477;
              count__7432_7459 = G__7478;
              i__7433_7460 = G__7479;
              continue;
            }
          } else {
          }
        }
        break;
      }
      if (cljs.core.seq.call(null, use_macros)) {
        cljs.analyzer.check_use_macros.call(null, use_macros, env);
      } else {
      }
    } else {
    }
    return ast;
  } else {
    return ast;
  }
};
cljs.analyzer._STAR_passes_STAR_ = null;
cljs.analyzer.analyze_form = function cljs$analyzer$analyze_form(env, form, name, opts) {
  if (form instanceof cljs.core.Symbol) {
    return cljs.analyzer.analyze_symbol.call(null, env, form);
  } else {
    if (cljs.analyzer.cljs_seq_QMARK_.call(null, form) && cljs.core.seq.call(null, form)) {
      return cljs.analyzer.analyze_seq.call(null, env, form, name, opts);
    } else {
      if (cljs.analyzer.cljs_map_QMARK_.call(null, form)) {
        return cljs.analyzer.analyze_map.call(null, env, form);
      } else {
        if (cljs.analyzer.cljs_vector_QMARK_.call(null, form)) {
          return cljs.analyzer.analyze_vector.call(null, env, form);
        } else {
          if (cljs.analyzer.cljs_set_QMARK_.call(null, form)) {
            return cljs.analyzer.analyze_set.call(null, env, form);
          } else {
            if (form instanceof cljs.core.Keyword) {
              return cljs.analyzer.analyze_keyword.call(null, env, form);
            } else {
              if (form instanceof cljs.tagged_literals.JSValue) {
                return cljs.analyzer.analyze_js_value.call(null, env, form);
              } else {
                if (cljs.core._EQ_.call(null, cljs.core.List.EMPTY, form)) {
                  return cljs.analyzer.analyze_list.call(null, env, form);
                } else {
                  var tag = form == null ? cljs.analyzer.CLJ_NIL_SYM : typeof form === "number" ? cljs.analyzer.NUMBER_SYM : typeof form === "string" ? cljs.analyzer.STRING_SYM : form === true ? cljs.analyzer.BOOLEAN_SYM : form === false ? cljs.analyzer.BOOLEAN_SYM : null;
                  var G__7481 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "constant", "constant", -379609303), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form], null);
                  var G__7481__$1 = tag ? cljs.core.assoc.call(null, G__7481, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag) : G__7481;
                  return G__7481__$1;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.analyzer.analyze_STAR_ = function cljs$analyzer$analyze_STAR_(env, form, name, opts) {
  var passes = cljs.analyzer._STAR_passes_STAR_;
  var passes__$1 = passes == null ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.analyzer.infer_type], null) : null;
  var form__$1 = form instanceof cljs.core.LazySeq ? cljs.core.seq.call(null, form) ? form : cljs.core.List.EMPTY : form;
  var ast = cljs.analyzer.analyze_form.call(null, env, form__$1, name, opts);
  return cljs.core.reduce.call(null, function(passes, passes__$1, form__$1, ast) {
    return function(ast__$1, pass) {
      return pass.call(null, env, ast__$1, opts);
    };
  }(passes, passes__$1, form__$1, ast), ast, passes__$1);
};
cljs.analyzer.analyze = function cljs$analyzer$analyze() {
  var args7482 = [];
  var len__5099__auto___7487 = arguments.length;
  var i__5100__auto___7488 = 0;
  while (true) {
    if (i__5100__auto___7488 < len__5099__auto___7487) {
      args7482.push(arguments[i__5100__auto___7488]);
      var G__7489 = i__5100__auto___7488 + 1;
      i__5100__auto___7488 = G__7489;
      continue;
    } else {
    }
    break;
  }
  var G__7484 = args7482.length;
  switch(G__7484) {
    case 2:
      return cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7482.length)].join(""));;
  }
};
cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 = function(env, form) {
  return cljs.analyzer.analyze.call(null, env, form, null);
};
cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$3 = function(env, form, name) {
  return cljs.analyzer.analyze.call(null, env, form, name, null);
};
cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4 = function(env, form, name, opts) {
  var val__5424__auto__ = cljs.env._STAR_compiler_STAR_;
  if (val__5424__auto__ == null) {
    cljs.env._STAR_compiler_STAR_ = cljs.env.default_compiler_env.call(null);
  } else {
  }
  try {
    try {
      var _STAR_alias_map_STAR_7486 = cljs.tools.reader._STAR_alias_map_STAR_;
      cljs.tools.reader._STAR_alias_map_STAR_ = function() {
        var or__4060__auto__ = cljs.tools.reader._STAR_alias_map_STAR_;
        if (or__4060__auto__) {
          return or__4060__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }();
      try {
        return cljs.analyzer.analyze_STAR_.call(null, env, form, name, opts);
      } finally {
        cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_7486;
      }
    } catch (e7485) {
      var err__5460__auto__ = e7485;
      if (cljs.analyzer.analysis_error_QMARK_.call(null, err__5460__auto__)) {
        throw err__5460__auto__;
      } else {
        throw cljs.analyzer.error.call(null, env, err__5460__auto__.message, err__5460__auto__);
      }
    }
  } finally {
    if (val__5424__auto__ == null) {
      cljs.env._STAR_compiler_STAR_ = null;
    } else {
    }
  }
};
cljs.analyzer.analyze.cljs$lang$maxFixedArity = 4;
cljs.analyzer.resolve_symbol = function cljs$analyzer$resolve_symbol(s) {
  return (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.analyzer._STAR_cljs_ns_STAR_], null)], null), s));
};
goog.provide("cljs.source_map.base64");
goog.require("cljs.core");
cljs.source_map.base64.chars64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
cljs.source_map.base64.char__GT_int = cljs.core.zipmap.call(null, cljs.source_map.base64.chars64, cljs.core.range.call(null, 0, 64));
cljs.source_map.base64.int__GT_char = cljs.core.zipmap.call(null, cljs.core.range.call(null, 0, 64), cljs.source_map.base64.chars64);
cljs.source_map.base64.encode = function cljs$source_map$base64$encode(n) {
  var e = cljs.core.find.call(null, cljs.source_map.base64.int__GT_char, n);
  if (cljs.core.truth_(e)) {
    return cljs.core.second.call(null, e);
  } else {
    throw new Error([cljs.core.str("Must be between 0 and 63: "), cljs.core.str(n)].join(""));
  }
};
cljs.source_map.base64.decode = function cljs$source_map$base64$decode(c) {
  var e = cljs.core.find.call(null, cljs.source_map.base64.char__GT_int, c);
  if (cljs.core.truth_(e)) {
    return cljs.core.second.call(null, e);
  } else {
    throw new Error([cljs.core.str("Not a valid base 64 digit: "), cljs.core.str(c)].join(""));
  }
};
goog.provide("cljs.source_map.base64_vlq");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("cljs.source_map.base64");
goog.require("goog.string.StringBuffer");
cljs.source_map.base64_vlq.vlq_base_shift = 5;
cljs.source_map.base64_vlq.vlq_base = 1 << cljs.source_map.base64_vlq.vlq_base_shift;
cljs.source_map.base64_vlq.vlq_base_mask = cljs.source_map.base64_vlq.vlq_base - 1;
cljs.source_map.base64_vlq.vlq_continuation_bit = cljs.source_map.base64_vlq.vlq_base;
cljs.source_map.base64_vlq.to_vlq_signed = function cljs$source_map$base64_vlq$to_vlq_signed(v) {
  if (v < 0) {
    return (-v << 1) + 1;
  } else {
    return (v << 1) + 0;
  }
};
cljs.source_map.base64_vlq.from_vlq_signed = function cljs$source_map$base64_vlq$from_vlq_signed(v) {
  var neg_QMARK_ = cljs.core._EQ_.call(null, v & 1, 1);
  var shifted = v >> 1;
  if (neg_QMARK_) {
    return -shifted;
  } else {
    return shifted;
  }
};
cljs.source_map.base64_vlq.encode_val = function cljs$source_map$base64_vlq$encode_val(n) {
  var sb = new goog.string.StringBuffer;
  var vlq = cljs.source_map.base64_vlq.to_vlq_signed.call(null, n);
  var digit_9686 = vlq & cljs.source_map.base64_vlq.vlq_base_mask;
  var vlq_9687__$1 = vlq >>> cljs.source_map.base64_vlq.vlq_base_shift;
  while (true) {
    if (vlq_9687__$1 > 0) {
      var digit_9688__$1 = digit_9686 | cljs.source_map.base64_vlq.vlq_continuation_bit;
      sb.append(cljs.source_map.base64.encode.call(null, digit_9688__$1));
      var G__9689 = vlq_9687__$1 & cljs.source_map.base64_vlq.vlq_base_mask;
      var G__9690 = vlq_9687__$1 >>> cljs.source_map.base64_vlq.vlq_base_shift;
      digit_9686 = G__9689;
      vlq_9687__$1 = G__9690;
      continue;
    } else {
      sb.append(cljs.source_map.base64.encode.call(null, digit_9686));
    }
    break;
  }
  return [cljs.core.str(sb)].join("");
};
cljs.source_map.base64_vlq.encode = function cljs$source_map$base64_vlq$encode(v) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, cljs.source_map.base64_vlq.encode_val, v));
};
cljs.source_map.base64_vlq.decode = function cljs$source_map$base64_vlq$decode(s) {
  var l = s.length;
  var i = 0;
  var result = 0;
  var shift = 0;
  while (true) {
    if (i >= l) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    } else {
    }
    var digit = cljs.source_map.base64.decode.call(null, s.charAt(i));
    var i__$1 = i + 1;
    var continuation_QMARK_ = (digit & cljs.source_map.base64_vlq.vlq_continuation_bit) > 0;
    var digit__$1 = digit & cljs.source_map.base64_vlq.vlq_base_mask;
    var result__$1 = result + (digit__$1 << shift);
    var shift__$1 = shift + cljs.source_map.base64_vlq.vlq_base_shift;
    if (continuation_QMARK_) {
      var G__9691 = i__$1;
      var G__9692 = result__$1;
      var G__9693 = shift__$1;
      i = G__9691;
      result = G__9692;
      shift = G__9693;
      continue;
    } else {
      return new cljs.core.LazySeq(null, function(i, result, shift, i__$1, continuation_QMARK_, digit__$1, result__$1, shift__$1, digit, l) {
        return function() {
          return cljs.core.cons.call(null, cljs.source_map.base64_vlq.from_vlq_signed.call(null, result__$1), function() {
            var s__$1 = s.substring(i__$1);
            if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s__$1))) {
              return null;
            } else {
              return cljs$source_map$base64_vlq$decode.call(null, s__$1);
            }
          }());
        };
      }(i, result, shift, i__$1, continuation_QMARK_, digit__$1, result__$1, shift__$1, digit, l), null, null);
    }
    break;
  }
};
goog.provide("cljs.source_map");
goog.require("cljs.core");
goog.require("goog.object");
goog.require("clojure.string");
goog.require("clojure.set");
goog.require("cljs.source_map.base64_vlq");
cljs.source_map.indexed_sources = function cljs$source_map$indexed_sources(sources) {
  return cljs.core.reduce.call(null, function(m, p__9311) {
    var vec__9312 = p__9311;
    var i = cljs.core.nth.call(null, vec__9312, 0, null);
    var v = cljs.core.nth.call(null, vec__9312, 1, null);
    return cljs.core.assoc.call(null, m, v, i);
  }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map_indexed.call(null, function(a, b) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b], null);
  }, sources));
};
cljs.source_map.source_compare = function cljs$source_map$source_compare(sources) {
  var sources__$1 = cljs.source_map.indexed_sources.call(null, sources);
  return function(sources__$1) {
    return function(a, b) {
      return cljs.core.compare.call(null, sources__$1.call(null, a), sources__$1.call(null, b));
    };
  }(sources__$1);
};
cljs.source_map.seg__GT_map = function cljs$source_map$seg__GT_map(seg, source_map) {
  var vec__9314 = seg;
  var gcol = cljs.core.nth.call(null, vec__9314, 0, null);
  var source = cljs.core.nth.call(null, vec__9314, 1, null);
  var line = cljs.core.nth.call(null, vec__9314, 2, null);
  var col = cljs.core.nth.call(null, vec__9314, 3, null);
  var name = cljs.core.nth.call(null, vec__9314, 4, null);
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "gcol", "gcol", 309250807), gcol, new cljs.core.Keyword(null, "source", "source", -433931539), goog.object.get(source_map, "sources", source).split("?")[0], new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "col", "col", -1959363084), col, new cljs.core.Keyword(null, "name", "name", 1843675177), function() {
    var temp__4425__auto__ = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, seg));
    if (cljs.core.truth_(temp__4425__auto__)) {
      var name__$1 = temp__4425__auto__;
      return goog.object.get(source_map, "names", name__$1);
    } else {
      return null;
    }
  }()], null);
};
cljs.source_map.seg_combine = function cljs$source_map$seg_combine(seg, relseg) {
  var vec__9317 = seg;
  var gcol = cljs.core.nth.call(null, vec__9317, 0, null);
  var source = cljs.core.nth.call(null, vec__9317, 1, null);
  var line = cljs.core.nth.call(null, vec__9317, 2, null);
  var col = cljs.core.nth.call(null, vec__9317, 3, null);
  var name = cljs.core.nth.call(null, vec__9317, 4, null);
  var vec__9318 = relseg;
  var rgcol = cljs.core.nth.call(null, vec__9318, 0, null);
  var rsource = cljs.core.nth.call(null, vec__9318, 1, null);
  var rline = cljs.core.nth.call(null, vec__9318, 2, null);
  var rcol = cljs.core.nth.call(null, vec__9318, 3, null);
  var rname = cljs.core.nth.call(null, vec__9318, 4, null);
  var nseg = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [gcol + rgcol, function() {
    var or__4060__auto__ = source;
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return 0;
    }
  }() + rsource, function() {
    var or__4060__auto__ = line;
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return 0;
    }
  }() + rline, function() {
    var or__4060__auto__ = col;
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return 0;
    }
  }() + rcol, function() {
    var or__4060__auto__ = name;
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return 0;
    }
  }() + rname], null);
  if (cljs.core.truth_(name)) {
    return cljs.core.with_meta.call(null, nseg, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name + rname], null));
  } else {
    return nseg;
  }
};
cljs.source_map.update_reverse_result = function cljs$source_map$update_reverse_result(result, segmap, gline) {
  var map__9321 = segmap;
  var map__9321__$1 = (!(map__9321 == null) ? map__9321.cljs$lang$protocol_mask$partition0$ & 64 || map__9321.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9321) : map__9321;
  var gcol = cljs.core.get.call(null, map__9321__$1, new cljs.core.Keyword(null, "gcol", "gcol", 309250807));
  var source = cljs.core.get.call(null, map__9321__$1, new cljs.core.Keyword(null, "source", "source", -433931539));
  var line = cljs.core.get.call(null, map__9321__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var col = cljs.core.get.call(null, map__9321__$1, new cljs.core.Keyword(null, "col", "col", -1959363084));
  var name = cljs.core.get.call(null, map__9321__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var d = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "gline", "gline", -1086242431), gline, new cljs.core.Keyword(null, "gcol", "gcol", 309250807), gcol], null);
  var d__$1 = cljs.core.truth_(name) ? cljs.core.assoc.call(null, d, new cljs.core.Keyword(null, "name", "name", 1843675177), name) : d;
  return cljs.core.update_in.call(null, result, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [source], null), cljs.core.fnil.call(null, function(map__9321, map__9321__$1, gcol, source, line, col, name, d, d__$1) {
    return function(m) {
      return cljs.core.update_in.call(null, m, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [line], null), cljs.core.fnil.call(null, function(map__9321, map__9321__$1, gcol, source, line, col, name, d, d__$1) {
        return function(m__$1) {
          return cljs.core.update_in.call(null, m__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [col], null), cljs.core.fnil.call(null, function(map__9321, map__9321__$1, gcol, source, line, col, name, d, d__$1) {
            return function(v) {
              return cljs.core.conj.call(null, v, d__$1);
            };
          }(map__9321, map__9321__$1, gcol, source, line, col, name, d, d__$1), cljs.core.PersistentVector.EMPTY));
        };
      }(map__9321, map__9321__$1, gcol, source, line, col, name, d, d__$1), cljs.core.sorted_map.call(null)));
    };
  }(map__9321, map__9321__$1, gcol, source, line, col, name, d, d__$1), cljs.core.sorted_map.call(null)));
};
cljs.source_map.decode_reverse = function cljs$source_map$decode_reverse() {
  var args9323 = [];
  var len__5099__auto___9327 = arguments.length;
  var i__5100__auto___9328 = 0;
  while (true) {
    if (i__5100__auto___9328 < len__5099__auto___9327) {
      args9323.push(arguments[i__5100__auto___9328]);
      var G__9329 = i__5100__auto___9328 + 1;
      i__5100__auto___9328 = G__9329;
      continue;
    } else {
    }
    break;
  }
  var G__9325 = args9323.length;
  switch(G__9325) {
    case 1:
      return cljs.source_map.decode_reverse.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.source_map.decode_reverse.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9323.length)].join(""));;
  }
};
cljs.source_map.decode_reverse.cljs$core$IFn$_invoke$arity$1 = function(source_map) {
  return cljs.source_map.decode_reverse.call(null, goog.object.get(source_map, "mappings"), source_map);
};
cljs.source_map.decode_reverse.cljs$core$IFn$_invoke$arity$2 = function(mappings, source_map) {
  var sources = goog.object.get(source_map, "sources");
  var relseg_init = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, 0, 0], null);
  var lines = cljs.core.seq.call(null, clojure.string.split.call(null, mappings, /;/));
  var gline = 0;
  var lines__$1 = lines;
  var relseg = relseg_init;
  var result = cljs.core.sorted_map_by.call(null, cljs.source_map.source_compare.call(null, sources));
  while (true) {
    if (lines__$1) {
      var line = cljs.core.first.call(null, lines__$1);
      var vec__9326 = cljs.core.truth_(clojure.string.blank_QMARK_.call(null, line)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [result, relseg], null) : function() {
        var segs = cljs.core.seq.call(null, clojure.string.split.call(null, line, /,/));
        var segs__$1 = segs;
        var relseg__$1 = relseg;
        var result__$1 = result;
        while (true) {
          if (segs__$1) {
            var seg = cljs.core.first.call(null, segs__$1);
            var nrelseg = cljs.source_map.seg_combine.call(null, cljs.source_map.base64_vlq.decode.call(null, seg), relseg__$1);
            var G__9331 = cljs.core.next.call(null, segs__$1);
            var G__9332 = nrelseg;
            var G__9333 = cljs.source_map.update_reverse_result.call(null, result__$1, cljs.source_map.seg__GT_map.call(null, nrelseg, source_map), gline);
            segs__$1 = G__9331;
            relseg__$1 = G__9332;
            result__$1 = G__9333;
            continue;
          } else {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [result__$1, relseg__$1], null);
          }
          break;
        }
      }();
      var result__$1 = cljs.core.nth.call(null, vec__9326, 0, null);
      var relseg__$1 = cljs.core.nth.call(null, vec__9326, 1, null);
      var G__9334 = gline + 1;
      var G__9335 = cljs.core.next.call(null, lines__$1);
      var G__9336 = cljs.core.assoc.call(null, relseg__$1, 0, 0);
      var G__9337 = result__$1;
      gline = G__9334;
      lines__$1 = G__9335;
      relseg = G__9336;
      result = G__9337;
      continue;
    } else {
      return result;
    }
    break;
  }
};
cljs.source_map.decode_reverse.cljs$lang$maxFixedArity = 2;
cljs.source_map.update_result = function cljs$source_map$update_result(result, segmap, gline) {
  var map__9341 = segmap;
  var map__9341__$1 = (!(map__9341 == null) ? map__9341.cljs$lang$protocol_mask$partition0$ & 64 || map__9341.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9341) : map__9341;
  var gcol = cljs.core.get.call(null, map__9341__$1, new cljs.core.Keyword(null, "gcol", "gcol", 309250807));
  var source = cljs.core.get.call(null, map__9341__$1, new cljs.core.Keyword(null, "source", "source", -433931539));
  var line = cljs.core.get.call(null, map__9341__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var col = cljs.core.get.call(null, map__9341__$1, new cljs.core.Keyword(null, "col", "col", -1959363084));
  var name = cljs.core.get.call(null, map__9341__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var d = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "col", "col", -1959363084), col, new cljs.core.Keyword(null, "source", "source", -433931539), source], null);
  var d__$1 = cljs.core.truth_(name) ? cljs.core.assoc.call(null, d, new cljs.core.Keyword(null, "name", "name", 1843675177), name) : d;
  return cljs.core.update_in.call(null, result, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [gline], null), cljs.core.fnil.call(null, function(map__9341, map__9341__$1, gcol, source, line, col, name, d, d__$1) {
    return function(m) {
      return cljs.core.update_in.call(null, m, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [gcol], null), cljs.core.fnil.call(null, function(map__9341, map__9341__$1, gcol, source, line, col, name, d, d__$1) {
        return function(p1__9338_SHARP_) {
          return cljs.core.conj.call(null, p1__9338_SHARP_, d__$1);
        };
      }(map__9341, map__9341__$1, gcol, source, line, col, name, d, d__$1), cljs.core.PersistentVector.EMPTY));
    };
  }(map__9341, map__9341__$1, gcol, source, line, col, name, d, d__$1), cljs.core.sorted_map.call(null)));
};
cljs.source_map.decode = function cljs$source_map$decode() {
  var args9343 = [];
  var len__5099__auto___9347 = arguments.length;
  var i__5100__auto___9348 = 0;
  while (true) {
    if (i__5100__auto___9348 < len__5099__auto___9347) {
      args9343.push(arguments[i__5100__auto___9348]);
      var G__9349 = i__5100__auto___9348 + 1;
      i__5100__auto___9348 = G__9349;
      continue;
    } else {
    }
    break;
  }
  var G__9345 = args9343.length;
  switch(G__9345) {
    case 1:
      return cljs.source_map.decode.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.source_map.decode.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9343.length)].join(""));;
  }
};
cljs.source_map.decode.cljs$core$IFn$_invoke$arity$1 = function(source_map) {
  return cljs.source_map.decode.call(null, goog.object.get(source_map, "mappings"), source_map);
};
cljs.source_map.decode.cljs$core$IFn$_invoke$arity$2 = function(mappings, source_map) {
  var sources = goog.object.get(source_map, "sources");
  var relseg_init = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, 0, 0], null);
  var lines = cljs.core.seq.call(null, clojure.string.split.call(null, mappings, /;/));
  var gline = 0;
  var lines__$1 = lines;
  var relseg = relseg_init;
  var result = cljs.core.PersistentArrayMap.EMPTY;
  while (true) {
    if (lines__$1) {
      var line = cljs.core.first.call(null, lines__$1);
      var vec__9346 = cljs.core.truth_(clojure.string.blank_QMARK_.call(null, line)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [result, relseg], null) : function() {
        var segs = cljs.core.seq.call(null, clojure.string.split.call(null, line, /,/));
        var segs__$1 = segs;
        var relseg__$1 = relseg;
        var result__$1 = result;
        while (true) {
          if (segs__$1) {
            var seg = cljs.core.first.call(null, segs__$1);
            var nrelseg = cljs.source_map.seg_combine.call(null, cljs.source_map.base64_vlq.decode.call(null, seg), relseg__$1);
            var G__9351 = cljs.core.next.call(null, segs__$1);
            var G__9352 = nrelseg;
            var G__9353 = cljs.source_map.update_result.call(null, result__$1, cljs.source_map.seg__GT_map.call(null, nrelseg, source_map), gline);
            segs__$1 = G__9351;
            relseg__$1 = G__9352;
            result__$1 = G__9353;
            continue;
          } else {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [result__$1, relseg__$1], null);
          }
          break;
        }
      }();
      var result__$1 = cljs.core.nth.call(null, vec__9346, 0, null);
      var relseg__$1 = cljs.core.nth.call(null, vec__9346, 1, null);
      var G__9354 = gline + 1;
      var G__9355 = cljs.core.next.call(null, lines__$1);
      var G__9356 = cljs.core.assoc.call(null, relseg__$1, 0, 0);
      var G__9357 = result__$1;
      gline = G__9354;
      lines__$1 = G__9355;
      relseg = G__9356;
      result = G__9357;
      continue;
    } else {
      return result;
    }
    break;
  }
};
cljs.source_map.decode.cljs$lang$maxFixedArity = 2;
cljs.source_map.lines__GT_segs = function cljs$source_map$lines__GT_segs(lines) {
  var relseg = cljs.core.atom.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0, 0, 0], null));
  return cljs.core.reduce.call(null, function(relseg) {
    return function(segs, cols) {
      cljs.core.swap_BANG_.call(null, relseg, function(relseg) {
        return function(p__9364) {
          var vec__9365 = p__9364;
          var _ = cljs.core.nth.call(null, vec__9365, 0, null);
          var source = cljs.core.nth.call(null, vec__9365, 1, null);
          var line = cljs.core.nth.call(null, vec__9365, 2, null);
          var col = cljs.core.nth.call(null, vec__9365, 3, null);
          var name = cljs.core.nth.call(null, vec__9365, 4, null);
          return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, source, line, col, name], null);
        };
      }(relseg));
      return cljs.core.conj.call(null, segs, cljs.core.reduce.call(null, function(relseg) {
        return function(cols__$1, p__9366) {
          var vec__9367 = p__9366;
          var gcol = cljs.core.nth.call(null, vec__9367, 0, null);
          var sidx = cljs.core.nth.call(null, vec__9367, 1, null);
          var line = cljs.core.nth.call(null, vec__9367, 2, null);
          var col = cljs.core.nth.call(null, vec__9367, 3, null);
          var name = cljs.core.nth.call(null, vec__9367, 4, null);
          var seg = vec__9367;
          var offset = cljs.core.map.call(null, cljs.core._, seg, cljs.core.deref.call(null, relseg));
          cljs.core.swap_BANG_.call(null, relseg, function(offset, vec__9367, gcol, sidx, line, col, name, seg, relseg) {
            return function(p__9368) {
              var vec__9369 = p__9368;
              var _ = cljs.core.nth.call(null, vec__9369, 0, null);
              var ___$1 = cljs.core.nth.call(null, vec__9369, 1, null);
              var ___$2 = cljs.core.nth.call(null, vec__9369, 2, null);
              var ___$3 = cljs.core.nth.call(null, vec__9369, 3, null);
              var lname = cljs.core.nth.call(null, vec__9369, 4, null);
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [gcol, sidx, line, col, function() {
                var or__4060__auto__ = name;
                if (cljs.core.truth_(or__4060__auto__)) {
                  return or__4060__auto__;
                } else {
                  return lname;
                }
              }()], null);
            };
          }(offset, vec__9367, gcol, sidx, line, col, name, seg, relseg));
          return cljs.core.conj.call(null, cols__$1, cljs.source_map.base64_vlq.encode.call(null, offset));
        };
      }(relseg), cljs.core.PersistentVector.EMPTY, cols));
    };
  }(relseg), cljs.core.PersistentVector.EMPTY, lines);
};
cljs.source_map.encode = function cljs$source_map$encode(m, opts) {
  var lines = cljs.core.atom.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY], null));
  var names__GT_idx = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var name_idx = cljs.core.atom.call(null, 0);
  var preamble_lines = cljs.core.take.call(null, function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "preamble-line-count", "preamble-line-count", -659949744)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return 0;
    }
  }(), cljs.core.repeat.call(null, cljs.core.PersistentVector.EMPTY));
  var info__GT_segv = function(lines, names__GT_idx, name_idx, preamble_lines) {
    return function(info, source_idx, line, col) {
      var segv = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "gcol", "gcol", 309250807)).cljs$core$IFn$_invoke$arity$1(info), source_idx, line, col], null);
      var temp__4423__auto__ = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var name = temp__4423__auto__;
        var idx = function() {
          var temp__4423__auto____$1 = cljs.core.get.call(null, cljs.core.deref.call(null, names__GT_idx), name);
          if (cljs.core.truth_(temp__4423__auto____$1)) {
            var idx = temp__4423__auto____$1;
            return idx;
          } else {
            var cidx = cljs.core.deref.call(null, name_idx);
            cljs.core.swap_BANG_.call(null, names__GT_idx, cljs.core.assoc, name, cidx);
            cljs.core.swap_BANG_.call(null, name_idx, cljs.core.inc);
            return cidx;
          }
        }();
        return cljs.core.conj.call(null, segv, idx);
      } else {
        return segv;
      }
    };
  }(lines, names__GT_idx, name_idx, preamble_lines);
  var encode_cols = function(lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv) {
    return function(infos, source_idx, line, col) {
      var seq__9423 = cljs.core.seq.call(null, infos);
      var chunk__9424 = null;
      var count__9425 = 0;
      var i__9426 = 0;
      while (true) {
        if (i__9426 < count__9425) {
          var info = cljs.core._nth.call(null, chunk__9424, i__9426);
          var segv_9473 = info__GT_segv.call(null, info, source_idx, line, col);
          var gline_9474 = (new cljs.core.Keyword(null, "gline", "gline", -1086242431)).cljs$core$IFn$_invoke$arity$1(info);
          var lc_9475 = cljs.core.count.call(null, cljs.core.deref.call(null, lines));
          if (gline_9474 > lc_9475 - 1) {
            cljs.core.swap_BANG_.call(null, lines, function(seq__9423, chunk__9424, count__9425, i__9426, segv_9473, gline_9474, lc_9475, info, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv) {
              return function(lines__$1) {
                return cljs.core.conj.call(null, cljs.core.into.call(null, lines__$1, cljs.core.repeat.call(null, gline_9474 - (lc_9475 - 1) - 1, cljs.core.PersistentVector.EMPTY)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [segv_9473], null));
              };
            }(seq__9423, chunk__9424, count__9425, i__9426, segv_9473, gline_9474, lc_9475, info, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv));
          } else {
            cljs.core.swap_BANG_.call(null, lines, function(seq__9423, chunk__9424, count__9425, i__9426, segv_9473, gline_9474, lc_9475, info, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv) {
              return function(lines__$1) {
                return cljs.core.update_in.call(null, lines__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [gline_9474], null), cljs.core.conj, segv_9473);
              };
            }(seq__9423, chunk__9424, count__9425, i__9426, segv_9473, gline_9474, lc_9475, info, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv));
          }
          var G__9476 = seq__9423;
          var G__9477 = chunk__9424;
          var G__9478 = count__9425;
          var G__9479 = i__9426 + 1;
          seq__9423 = G__9476;
          chunk__9424 = G__9477;
          count__9425 = G__9478;
          i__9426 = G__9479;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__9423);
          if (temp__4425__auto__) {
            var seq__9423__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9423__$1)) {
              var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__9423__$1);
              var G__9480 = cljs.core.chunk_rest.call(null, seq__9423__$1);
              var G__9481 = c__4844__auto__;
              var G__9482 = cljs.core.count.call(null, c__4844__auto__);
              var G__9483 = 0;
              seq__9423 = G__9480;
              chunk__9424 = G__9481;
              count__9425 = G__9482;
              i__9426 = G__9483;
              continue;
            } else {
              var info = cljs.core.first.call(null, seq__9423__$1);
              var segv_9484 = info__GT_segv.call(null, info, source_idx, line, col);
              var gline_9485 = (new cljs.core.Keyword(null, "gline", "gline", -1086242431)).cljs$core$IFn$_invoke$arity$1(info);
              var lc_9486 = cljs.core.count.call(null, cljs.core.deref.call(null, lines));
              if (gline_9485 > lc_9486 - 1) {
                cljs.core.swap_BANG_.call(null, lines, function(seq__9423, chunk__9424, count__9425, i__9426, segv_9484, gline_9485, lc_9486, info, seq__9423__$1, temp__4425__auto__, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv) {
                  return function(lines__$1) {
                    return cljs.core.conj.call(null, cljs.core.into.call(null, lines__$1, cljs.core.repeat.call(null, gline_9485 - (lc_9486 - 1) - 1, cljs.core.PersistentVector.EMPTY)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [segv_9484], null));
                  };
                }(seq__9423, chunk__9424, count__9425, i__9426, segv_9484, gline_9485, lc_9486, info, seq__9423__$1, temp__4425__auto__, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv));
              } else {
                cljs.core.swap_BANG_.call(null, lines, function(seq__9423, chunk__9424, count__9425, i__9426, segv_9484, gline_9485, lc_9486, info, seq__9423__$1, temp__4425__auto__, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv) {
                  return function(lines__$1) {
                    return cljs.core.update_in.call(null, lines__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [gline_9485], null), cljs.core.conj, segv_9484);
                  };
                }(seq__9423, chunk__9424, count__9425, i__9426, segv_9484, gline_9485, lc_9486, info, seq__9423__$1, temp__4425__auto__, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv));
              }
              var G__9487 = cljs.core.next.call(null, seq__9423__$1);
              var G__9488 = null;
              var G__9489 = 0;
              var G__9490 = 0;
              seq__9423 = G__9487;
              chunk__9424 = G__9488;
              count__9425 = G__9489;
              i__9426 = G__9490;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
  }(lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv);
  var seq__9427_9491 = cljs.core.seq.call(null, cljs.core.map_indexed.call(null, function(lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv, encode_cols) {
    return function(i, v) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i, v], null);
    };
  }(lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv, encode_cols), m));
  var chunk__9428_9492 = null;
  var count__9429_9493 = 0;
  var i__9430_9494 = 0;
  while (true) {
    if (i__9430_9494 < count__9429_9493) {
      var vec__9431_9495 = cljs.core._nth.call(null, chunk__9428_9492, i__9430_9494);
      var source_idx_9496 = cljs.core.nth.call(null, vec__9431_9495, 0, null);
      var vec__9432_9497 = cljs.core.nth.call(null, vec__9431_9495, 1, null);
      var __9498 = cljs.core.nth.call(null, vec__9432_9497, 0, null);
      var lines_9499__$1 = cljs.core.nth.call(null, vec__9432_9497, 1, null);
      var seq__9433_9500 = cljs.core.seq.call(null, lines_9499__$1);
      var chunk__9434_9501 = null;
      var count__9435_9502 = 0;
      var i__9436_9503 = 0;
      while (true) {
        if (i__9436_9503 < count__9435_9502) {
          var vec__9437_9504 = cljs.core._nth.call(null, chunk__9434_9501, i__9436_9503);
          var line_9505 = cljs.core.nth.call(null, vec__9437_9504, 0, null);
          var cols_9506 = cljs.core.nth.call(null, vec__9437_9504, 1, null);
          var seq__9438_9507 = cljs.core.seq.call(null, cols_9506);
          var chunk__9439_9508 = null;
          var count__9440_9509 = 0;
          var i__9441_9510 = 0;
          while (true) {
            if (i__9441_9510 < count__9440_9509) {
              var vec__9442_9511 = cljs.core._nth.call(null, chunk__9439_9508, i__9441_9510);
              var col_9512 = cljs.core.nth.call(null, vec__9442_9511, 0, null);
              var infos_9513 = cljs.core.nth.call(null, vec__9442_9511, 1, null);
              encode_cols.call(null, infos_9513, source_idx_9496, line_9505, col_9512);
              var G__9514 = seq__9438_9507;
              var G__9515 = chunk__9439_9508;
              var G__9516 = count__9440_9509;
              var G__9517 = i__9441_9510 + 1;
              seq__9438_9507 = G__9514;
              chunk__9439_9508 = G__9515;
              count__9440_9509 = G__9516;
              i__9441_9510 = G__9517;
              continue;
            } else {
              var temp__4425__auto___9518 = cljs.core.seq.call(null, seq__9438_9507);
              if (temp__4425__auto___9518) {
                var seq__9438_9519__$1 = temp__4425__auto___9518;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__9438_9519__$1)) {
                  var c__4844__auto___9520 = cljs.core.chunk_first.call(null, seq__9438_9519__$1);
                  var G__9521 = cljs.core.chunk_rest.call(null, seq__9438_9519__$1);
                  var G__9522 = c__4844__auto___9520;
                  var G__9523 = cljs.core.count.call(null, c__4844__auto___9520);
                  var G__9524 = 0;
                  seq__9438_9507 = G__9521;
                  chunk__9439_9508 = G__9522;
                  count__9440_9509 = G__9523;
                  i__9441_9510 = G__9524;
                  continue;
                } else {
                  var vec__9443_9525 = cljs.core.first.call(null, seq__9438_9519__$1);
                  var col_9526 = cljs.core.nth.call(null, vec__9443_9525, 0, null);
                  var infos_9527 = cljs.core.nth.call(null, vec__9443_9525, 1, null);
                  encode_cols.call(null, infos_9527, source_idx_9496, line_9505, col_9526);
                  var G__9528 = cljs.core.next.call(null, seq__9438_9519__$1);
                  var G__9529 = null;
                  var G__9530 = 0;
                  var G__9531 = 0;
                  seq__9438_9507 = G__9528;
                  chunk__9439_9508 = G__9529;
                  count__9440_9509 = G__9530;
                  i__9441_9510 = G__9531;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var G__9532 = seq__9433_9500;
          var G__9533 = chunk__9434_9501;
          var G__9534 = count__9435_9502;
          var G__9535 = i__9436_9503 + 1;
          seq__9433_9500 = G__9532;
          chunk__9434_9501 = G__9533;
          count__9435_9502 = G__9534;
          i__9436_9503 = G__9535;
          continue;
        } else {
          var temp__4425__auto___9536 = cljs.core.seq.call(null, seq__9433_9500);
          if (temp__4425__auto___9536) {
            var seq__9433_9537__$1 = temp__4425__auto___9536;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9433_9537__$1)) {
              var c__4844__auto___9538 = cljs.core.chunk_first.call(null, seq__9433_9537__$1);
              var G__9539 = cljs.core.chunk_rest.call(null, seq__9433_9537__$1);
              var G__9540 = c__4844__auto___9538;
              var G__9541 = cljs.core.count.call(null, c__4844__auto___9538);
              var G__9542 = 0;
              seq__9433_9500 = G__9539;
              chunk__9434_9501 = G__9540;
              count__9435_9502 = G__9541;
              i__9436_9503 = G__9542;
              continue;
            } else {
              var vec__9444_9543 = cljs.core.first.call(null, seq__9433_9537__$1);
              var line_9544 = cljs.core.nth.call(null, vec__9444_9543, 0, null);
              var cols_9545 = cljs.core.nth.call(null, vec__9444_9543, 1, null);
              var seq__9445_9546 = cljs.core.seq.call(null, cols_9545);
              var chunk__9446_9547 = null;
              var count__9447_9548 = 0;
              var i__9448_9549 = 0;
              while (true) {
                if (i__9448_9549 < count__9447_9548) {
                  var vec__9449_9550 = cljs.core._nth.call(null, chunk__9446_9547, i__9448_9549);
                  var col_9551 = cljs.core.nth.call(null, vec__9449_9550, 0, null);
                  var infos_9552 = cljs.core.nth.call(null, vec__9449_9550, 1, null);
                  encode_cols.call(null, infos_9552, source_idx_9496, line_9544, col_9551);
                  var G__9553 = seq__9445_9546;
                  var G__9554 = chunk__9446_9547;
                  var G__9555 = count__9447_9548;
                  var G__9556 = i__9448_9549 + 1;
                  seq__9445_9546 = G__9553;
                  chunk__9446_9547 = G__9554;
                  count__9447_9548 = G__9555;
                  i__9448_9549 = G__9556;
                  continue;
                } else {
                  var temp__4425__auto___9557__$1 = cljs.core.seq.call(null, seq__9445_9546);
                  if (temp__4425__auto___9557__$1) {
                    var seq__9445_9558__$1 = temp__4425__auto___9557__$1;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__9445_9558__$1)) {
                      var c__4844__auto___9559 = cljs.core.chunk_first.call(null, seq__9445_9558__$1);
                      var G__9560 = cljs.core.chunk_rest.call(null, seq__9445_9558__$1);
                      var G__9561 = c__4844__auto___9559;
                      var G__9562 = cljs.core.count.call(null, c__4844__auto___9559);
                      var G__9563 = 0;
                      seq__9445_9546 = G__9560;
                      chunk__9446_9547 = G__9561;
                      count__9447_9548 = G__9562;
                      i__9448_9549 = G__9563;
                      continue;
                    } else {
                      var vec__9450_9564 = cljs.core.first.call(null, seq__9445_9558__$1);
                      var col_9565 = cljs.core.nth.call(null, vec__9450_9564, 0, null);
                      var infos_9566 = cljs.core.nth.call(null, vec__9450_9564, 1, null);
                      encode_cols.call(null, infos_9566, source_idx_9496, line_9544, col_9565);
                      var G__9567 = cljs.core.next.call(null, seq__9445_9558__$1);
                      var G__9568 = null;
                      var G__9569 = 0;
                      var G__9570 = 0;
                      seq__9445_9546 = G__9567;
                      chunk__9446_9547 = G__9568;
                      count__9447_9548 = G__9569;
                      i__9448_9549 = G__9570;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              var G__9571 = cljs.core.next.call(null, seq__9433_9537__$1);
              var G__9572 = null;
              var G__9573 = 0;
              var G__9574 = 0;
              seq__9433_9500 = G__9571;
              chunk__9434_9501 = G__9572;
              count__9435_9502 = G__9573;
              i__9436_9503 = G__9574;
              continue;
            }
          } else {
          }
        }
        break;
      }
      var G__9575 = seq__9427_9491;
      var G__9576 = chunk__9428_9492;
      var G__9577 = count__9429_9493;
      var G__9578 = i__9430_9494 + 1;
      seq__9427_9491 = G__9575;
      chunk__9428_9492 = G__9576;
      count__9429_9493 = G__9577;
      i__9430_9494 = G__9578;
      continue;
    } else {
      var temp__4425__auto___9579 = cljs.core.seq.call(null, seq__9427_9491);
      if (temp__4425__auto___9579) {
        var seq__9427_9580__$1 = temp__4425__auto___9579;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9427_9580__$1)) {
          var c__4844__auto___9581 = cljs.core.chunk_first.call(null, seq__9427_9580__$1);
          var G__9582 = cljs.core.chunk_rest.call(null, seq__9427_9580__$1);
          var G__9583 = c__4844__auto___9581;
          var G__9584 = cljs.core.count.call(null, c__4844__auto___9581);
          var G__9585 = 0;
          seq__9427_9491 = G__9582;
          chunk__9428_9492 = G__9583;
          count__9429_9493 = G__9584;
          i__9430_9494 = G__9585;
          continue;
        } else {
          var vec__9451_9586 = cljs.core.first.call(null, seq__9427_9580__$1);
          var source_idx_9587 = cljs.core.nth.call(null, vec__9451_9586, 0, null);
          var vec__9452_9588 = cljs.core.nth.call(null, vec__9451_9586, 1, null);
          var __9589 = cljs.core.nth.call(null, vec__9452_9588, 0, null);
          var lines_9590__$1 = cljs.core.nth.call(null, vec__9452_9588, 1, null);
          var seq__9453_9591 = cljs.core.seq.call(null, lines_9590__$1);
          var chunk__9454_9592 = null;
          var count__9455_9593 = 0;
          var i__9456_9594 = 0;
          while (true) {
            if (i__9456_9594 < count__9455_9593) {
              var vec__9457_9595 = cljs.core._nth.call(null, chunk__9454_9592, i__9456_9594);
              var line_9596 = cljs.core.nth.call(null, vec__9457_9595, 0, null);
              var cols_9597 = cljs.core.nth.call(null, vec__9457_9595, 1, null);
              var seq__9458_9598 = cljs.core.seq.call(null, cols_9597);
              var chunk__9459_9599 = null;
              var count__9460_9600 = 0;
              var i__9461_9601 = 0;
              while (true) {
                if (i__9461_9601 < count__9460_9600) {
                  var vec__9462_9602 = cljs.core._nth.call(null, chunk__9459_9599, i__9461_9601);
                  var col_9603 = cljs.core.nth.call(null, vec__9462_9602, 0, null);
                  var infos_9604 = cljs.core.nth.call(null, vec__9462_9602, 1, null);
                  encode_cols.call(null, infos_9604, source_idx_9587, line_9596, col_9603);
                  var G__9605 = seq__9458_9598;
                  var G__9606 = chunk__9459_9599;
                  var G__9607 = count__9460_9600;
                  var G__9608 = i__9461_9601 + 1;
                  seq__9458_9598 = G__9605;
                  chunk__9459_9599 = G__9606;
                  count__9460_9600 = G__9607;
                  i__9461_9601 = G__9608;
                  continue;
                } else {
                  var temp__4425__auto___9609__$1 = cljs.core.seq.call(null, seq__9458_9598);
                  if (temp__4425__auto___9609__$1) {
                    var seq__9458_9610__$1 = temp__4425__auto___9609__$1;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__9458_9610__$1)) {
                      var c__4844__auto___9611 = cljs.core.chunk_first.call(null, seq__9458_9610__$1);
                      var G__9612 = cljs.core.chunk_rest.call(null, seq__9458_9610__$1);
                      var G__9613 = c__4844__auto___9611;
                      var G__9614 = cljs.core.count.call(null, c__4844__auto___9611);
                      var G__9615 = 0;
                      seq__9458_9598 = G__9612;
                      chunk__9459_9599 = G__9613;
                      count__9460_9600 = G__9614;
                      i__9461_9601 = G__9615;
                      continue;
                    } else {
                      var vec__9463_9616 = cljs.core.first.call(null, seq__9458_9610__$1);
                      var col_9617 = cljs.core.nth.call(null, vec__9463_9616, 0, null);
                      var infos_9618 = cljs.core.nth.call(null, vec__9463_9616, 1, null);
                      encode_cols.call(null, infos_9618, source_idx_9587, line_9596, col_9617);
                      var G__9619 = cljs.core.next.call(null, seq__9458_9610__$1);
                      var G__9620 = null;
                      var G__9621 = 0;
                      var G__9622 = 0;
                      seq__9458_9598 = G__9619;
                      chunk__9459_9599 = G__9620;
                      count__9460_9600 = G__9621;
                      i__9461_9601 = G__9622;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              var G__9623 = seq__9453_9591;
              var G__9624 = chunk__9454_9592;
              var G__9625 = count__9455_9593;
              var G__9626 = i__9456_9594 + 1;
              seq__9453_9591 = G__9623;
              chunk__9454_9592 = G__9624;
              count__9455_9593 = G__9625;
              i__9456_9594 = G__9626;
              continue;
            } else {
              var temp__4425__auto___9627__$1 = cljs.core.seq.call(null, seq__9453_9591);
              if (temp__4425__auto___9627__$1) {
                var seq__9453_9628__$1 = temp__4425__auto___9627__$1;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__9453_9628__$1)) {
                  var c__4844__auto___9629 = cljs.core.chunk_first.call(null, seq__9453_9628__$1);
                  var G__9630 = cljs.core.chunk_rest.call(null, seq__9453_9628__$1);
                  var G__9631 = c__4844__auto___9629;
                  var G__9632 = cljs.core.count.call(null, c__4844__auto___9629);
                  var G__9633 = 0;
                  seq__9453_9591 = G__9630;
                  chunk__9454_9592 = G__9631;
                  count__9455_9593 = G__9632;
                  i__9456_9594 = G__9633;
                  continue;
                } else {
                  var vec__9464_9634 = cljs.core.first.call(null, seq__9453_9628__$1);
                  var line_9635 = cljs.core.nth.call(null, vec__9464_9634, 0, null);
                  var cols_9636 = cljs.core.nth.call(null, vec__9464_9634, 1, null);
                  var seq__9465_9637 = cljs.core.seq.call(null, cols_9636);
                  var chunk__9466_9638 = null;
                  var count__9467_9639 = 0;
                  var i__9468_9640 = 0;
                  while (true) {
                    if (i__9468_9640 < count__9467_9639) {
                      var vec__9469_9641 = cljs.core._nth.call(null, chunk__9466_9638, i__9468_9640);
                      var col_9642 = cljs.core.nth.call(null, vec__9469_9641, 0, null);
                      var infos_9643 = cljs.core.nth.call(null, vec__9469_9641, 1, null);
                      encode_cols.call(null, infos_9643, source_idx_9587, line_9635, col_9642);
                      var G__9644 = seq__9465_9637;
                      var G__9645 = chunk__9466_9638;
                      var G__9646 = count__9467_9639;
                      var G__9647 = i__9468_9640 + 1;
                      seq__9465_9637 = G__9644;
                      chunk__9466_9638 = G__9645;
                      count__9467_9639 = G__9646;
                      i__9468_9640 = G__9647;
                      continue;
                    } else {
                      var temp__4425__auto___9648__$2 = cljs.core.seq.call(null, seq__9465_9637);
                      if (temp__4425__auto___9648__$2) {
                        var seq__9465_9649__$1 = temp__4425__auto___9648__$2;
                        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9465_9649__$1)) {
                          var c__4844__auto___9650 = cljs.core.chunk_first.call(null, seq__9465_9649__$1);
                          var G__9651 = cljs.core.chunk_rest.call(null, seq__9465_9649__$1);
                          var G__9652 = c__4844__auto___9650;
                          var G__9653 = cljs.core.count.call(null, c__4844__auto___9650);
                          var G__9654 = 0;
                          seq__9465_9637 = G__9651;
                          chunk__9466_9638 = G__9652;
                          count__9467_9639 = G__9653;
                          i__9468_9640 = G__9654;
                          continue;
                        } else {
                          var vec__9470_9655 = cljs.core.first.call(null, seq__9465_9649__$1);
                          var col_9656 = cljs.core.nth.call(null, vec__9470_9655, 0, null);
                          var infos_9657 = cljs.core.nth.call(null, vec__9470_9655, 1, null);
                          encode_cols.call(null, infos_9657, source_idx_9587, line_9635, col_9656);
                          var G__9658 = cljs.core.next.call(null, seq__9465_9649__$1);
                          var G__9659 = null;
                          var G__9660 = 0;
                          var G__9661 = 0;
                          seq__9465_9637 = G__9658;
                          chunk__9466_9638 = G__9659;
                          count__9467_9639 = G__9660;
                          i__9468_9640 = G__9661;
                          continue;
                        }
                      } else {
                      }
                    }
                    break;
                  }
                  var G__9662 = cljs.core.next.call(null, seq__9453_9628__$1);
                  var G__9663 = null;
                  var G__9664 = 0;
                  var G__9665 = 0;
                  seq__9453_9591 = G__9662;
                  chunk__9454_9592 = G__9663;
                  count__9455_9593 = G__9664;
                  i__9456_9594 = G__9665;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var G__9666 = cljs.core.next.call(null, seq__9427_9580__$1);
          var G__9667 = null;
          var G__9668 = 0;
          var G__9669 = 0;
          seq__9427_9491 = G__9666;
          chunk__9428_9492 = G__9667;
          count__9429_9493 = G__9668;
          i__9430_9494 = G__9669;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var source_map_file_contents = function() {
    var G__9471 = {"version":3, "file":(new cljs.core.Keyword(null, "file", "file", -1269645878)).cljs$core$IFn$_invoke$arity$1(opts), "sources":function() {
      var paths = cljs.core.keys.call(null, m);
      var f = cljs.core.comp.call(null, (new cljs.core.Keyword(null, "source-map-timestamp", "source-map-timestamp", 1973015633)).cljs$core$IFn$_invoke$arity$1(opts) === true ? function(paths, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv, encode_cols) {
        return function(p1__9370_SHARP_) {
          return [cljs.core.str(p1__9370_SHARP_), cljs.core.str("?rel="), cljs.core.str((new Date).valueOf())].join("");
        };
      }(paths, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv, encode_cols) : cljs.core.identity, function(paths, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv, encode_cols) {
        return function(p1__9371_SHARP_) {
          return cljs.core.last.call(null, clojure.string.split.call(null, p1__9371_SHARP_, /\//));
        };
      }(paths, lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv, encode_cols));
      return cljs.core.into_array.call(null, cljs.core.map.call(null, f, paths));
    }(), "lineCount":(new cljs.core.Keyword(null, "lines", "lines", -700165781)).cljs$core$IFn$_invoke$arity$1(opts), "mappings":clojure.string.join.call(null, ";", cljs.core.map.call(null, function(lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv, encode_cols) {
      return function(p1__9372_SHARP_) {
        return clojure.string.join.call(null, ",", p1__9372_SHARP_);
      };
    }(lines, names__GT_idx, name_idx, preamble_lines, info__GT_segv, encode_cols), cljs.source_map.lines__GT_segs.call(null, cljs.core.concat.call(null, preamble_lines, cljs.core.deref.call(null, lines))))), "names":cljs.core.into_array.call(null, cljs.core.map.call(null, clojure.set.map_invert.call(null, cljs.core.deref.call(null, names__GT_idx)), cljs.core.range.call(null, cljs.core.count.call(null, cljs.core.deref.call(null, names__GT_idx)))))};
    var G__9471__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "sources-content", "sources-content", 1729970239)).cljs$core$IFn$_invoke$arity$1(opts)) ? function() {
      var G__9472 = G__9471;
      goog.object.set(G__9472, "sourcesContent", cljs.core.into_array.call(null, (new cljs.core.Keyword(null, "sources-content", "sources-content", 1729970239)).cljs$core$IFn$_invoke$arity$1(opts)));
      return G__9472;
    }() : G__9471;
    return G__9471__$1;
  }();
  return JSON.stringify(source_map_file_contents);
};
cljs.source_map.merge_source_maps = function cljs$source_map$merge_source_maps(cljs_map, js_map) {
  var line_map_seq = cljs.core.seq.call(null, cljs_map);
  var new_lines = cljs.core.sorted_map.call(null);
  while (true) {
    if (line_map_seq) {
      var vec__9675 = cljs.core.first.call(null, line_map_seq);
      var line = cljs.core.nth.call(null, vec__9675, 0, null);
      var col_map = cljs.core.nth.call(null, vec__9675, 1, null);
      var new_cols = function() {
        var col_map_seq = cljs.core.seq.call(null, col_map);
        var new_cols = cljs.core.sorted_map.call(null);
        while (true) {
          if (col_map_seq) {
            var vec__9676 = cljs.core.first.call(null, col_map_seq);
            var col = cljs.core.nth.call(null, vec__9676, 0, null);
            var infos = cljs.core.nth.call(null, vec__9676, 1, null);
            var G__9680 = cljs.core.next.call(null, col_map_seq);
            var G__9681 = cljs.core.assoc.call(null, new_cols, col, cljs.core.reduce.call(null, function(col_map_seq, new_cols, line_map_seq, new_lines, vec__9676, col, infos, vec__9675, line, col_map) {
              return function(v, p__9677) {
                var map__9678 = p__9677;
                var map__9678__$1 = (!(map__9678 == null) ? map__9678.cljs$lang$protocol_mask$partition0$ & 64 || map__9678.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9678) : map__9678;
                var gline = cljs.core.get.call(null, map__9678__$1, new cljs.core.Keyword(null, "gline", "gline", -1086242431));
                var gcol = cljs.core.get.call(null, map__9678__$1, new cljs.core.Keyword(null, "gcol", "gcol", 309250807));
                return cljs.core.into.call(null, v, cljs.core.get_in.call(null, js_map, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [gline, gcol], null)));
              };
            }(col_map_seq, new_cols, line_map_seq, new_lines, vec__9676, col, infos, vec__9675, line, col_map), cljs.core.PersistentVector.EMPTY, infos));
            col_map_seq = G__9680;
            new_cols = G__9681;
            continue;
          } else {
            return new_cols;
          }
          break;
        }
      }();
      var G__9682 = cljs.core.next.call(null, line_map_seq);
      var G__9683 = cljs.core.assoc.call(null, new_lines, line, new_cols);
      line_map_seq = G__9682;
      new_lines = G__9683;
      continue;
    } else {
      return new_lines;
    }
    break;
  }
};
goog.provide("cljs.compiler");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("cljs.tools.reader");
goog.require("cljs.env");
goog.require("cljs.analyzer");
goog.require("cljs.source_map");
goog.require("goog.string.StringBuffer");
goog.require("clojure.string");
cljs.compiler.js_reserved = cljs.analyzer.js_reserved;
cljs.compiler._STAR_dependents_STAR_ = null;
cljs.compiler._STAR_inputs_STAR_ = null;
cljs.compiler._STAR_source_map_data_STAR_ = null;
cljs.compiler._STAR_lexical_renames_STAR_ = cljs.core.PersistentArrayMap.EMPTY;
cljs.compiler.cljs_reserved_file_names = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, ["deps.cljs", null], null), null);
cljs.compiler.ns_first_segments = function cljs$compiler$ns_first_segments() {
  var get_first_ns_segment = function cljs$compiler$ns_first_segments_$_get_first_ns_segment(ns) {
    return cljs.core.first.call(null, clojure.string.split.call(null, [cljs.core.str(ns)].join(""), /\./));
  };
  return cljs.core.map.call(null, get_first_ns_segment, cljs.core.keys.call(null, (new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_))));
};
cljs.compiler.shadow_depth = function cljs$compiler$shadow_depth(s) {
  var map__9706 = s;
  var map__9706__$1 = (!(map__9706 == null) ? map__9706.cljs$lang$protocol_mask$partition0$ & 64 || map__9706.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9706) : map__9706;
  var name = cljs.core.get.call(null, map__9706__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var info = cljs.core.get.call(null, map__9706__$1, new cljs.core.Keyword(null, "info", "info", -317069002));
  var d = 0;
  var G__9709 = info;
  var map__9710 = G__9709;
  var map__9710__$1 = (!(map__9710 == null) ? map__9710.cljs$lang$protocol_mask$partition0$ & 64 || map__9710.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9710) : map__9710;
  var shadow = cljs.core.get.call(null, map__9710__$1, new cljs.core.Keyword(null, "shadow", "shadow", 873231803));
  var d__$1 = d;
  var G__9709__$1 = G__9709;
  while (true) {
    var d__$2 = d__$1;
    var map__9712 = G__9709__$1;
    var map__9712__$1 = (!(map__9712 == null) ? map__9712.cljs$lang$protocol_mask$partition0$ & 64 || map__9712.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9712) : map__9712;
    var shadow__$1 = cljs.core.get.call(null, map__9712__$1, new cljs.core.Keyword(null, "shadow", "shadow", 873231803));
    if (cljs.core.truth_(shadow__$1)) {
      var G__9714 = d__$2 + 1;
      var G__9715 = shadow__$1;
      d__$1 = G__9714;
      G__9709__$1 = G__9715;
      continue;
    } else {
      if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([[cljs.core.str(name)].join("")], true), cljs.compiler.ns_first_segments.call(null)))) {
        return d__$2 + 1;
      } else {
        return d__$2;
      }
    }
    break;
  }
};
cljs.compiler.fn_self_name = function cljs$compiler$fn_self_name(p__9716) {
  var map__9721 = p__9716;
  var map__9721__$1 = (!(map__9721 == null) ? map__9721.cljs$lang$protocol_mask$partition0$ & 64 || map__9721.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9721) : map__9721;
  var name_var = map__9721__$1;
  var name = cljs.core.get.call(null, map__9721__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var info = cljs.core.get.call(null, map__9721__$1, new cljs.core.Keyword(null, "info", "info", -317069002));
  var name__$1 = clojure.string.replace.call(null, [cljs.core.str(name)].join(""), "..", "_DOT__DOT_");
  var map__9723 = info;
  var map__9723__$1 = (!(map__9723 == null) ? map__9723.cljs$lang$protocol_mask$partition0$ & 64 || map__9723.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9723) : map__9723;
  var ns = cljs.core.get.call(null, map__9723__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760));
  var fn_scope = cljs.core.get.call(null, map__9723__$1, new cljs.core.Keyword(null, "fn-scope", "fn-scope", -865664859));
  var scoped_name = cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, "_$_", cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.str, new cljs.core.Keyword(null, "name", "name", 1843675177)), fn_scope), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name__$1], null))));
  return cljs.core.symbol.call(null, cljs.compiler.munge.call(null, [cljs.core.str(clojure.string.replace.call(null, [cljs.core.str(ns)].join(""), ".", "$")), cljs.core.str("$"), cljs.core.str(scoped_name)].join("")));
};
cljs.compiler.munge_reserved = function cljs$compiler$munge_reserved(reserved) {
  return function(s) {
    if (!(cljs.core.get.call(null, reserved, s) == null)) {
      return [cljs.core.str(s), cljs.core.str("$")].join("");
    } else {
      return s;
    }
  };
};
cljs.compiler.munge = function cljs$compiler$munge() {
  var args9725 = [];
  var len__5099__auto___9728 = arguments.length;
  var i__5100__auto___9729 = 0;
  while (true) {
    if (i__5100__auto___9729 < len__5099__auto___9728) {
      args9725.push(arguments[i__5100__auto___9729]);
      var G__9730 = i__5100__auto___9729 + 1;
      i__5100__auto___9729 = G__9730;
      continue;
    } else {
    }
    break;
  }
  var G__9727 = args9725.length;
  switch(G__9727) {
    case 1:
      return cljs.compiler.munge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.compiler.munge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9725.length)].join(""));;
  }
};
cljs.compiler.munge.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.compiler.munge.call(null, s, cljs.compiler.js_reserved);
};
cljs.compiler.munge.cljs$core$IFn$_invoke$arity$2 = function(s, reserved) {
  if (cljs.analyzer.cljs_map_QMARK_.call(null, s)) {
    var name_var = s;
    var name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(name_var);
    var field = (new cljs.core.Keyword(null, "field", "field", -1302436500)).cljs$core$IFn$_invoke$arity$1(name_var);
    var info = (new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(name_var);
    if (!((new cljs.core.Keyword(null, "fn-self-name", "fn-self-name", 1461143531)).cljs$core$IFn$_invoke$arity$1(info) == null)) {
      return cljs.compiler.fn_self_name.call(null, s);
    } else {
      var depth = cljs.compiler.shadow_depth.call(null, s);
      var code = cljs.core._hash.call(null, name);
      var renamed = cljs.core.get.call(null, cljs.compiler._STAR_lexical_renames_STAR_, code);
      var name__$1 = field === true ? [cljs.core.str("self__."), cljs.core.str(name)].join("") : !(renamed == null) ? renamed : name;
      var munged_name = cljs.compiler.munge.call(null, name__$1, reserved);
      if (field === true || depth === 0) {
        return munged_name;
      } else {
        return cljs.core.symbol.call(null, [cljs.core.str(munged_name), cljs.core.str("__$"), cljs.core.str(depth)].join(""));
      }
    }
  } else {
    var ss = clojure.string.replace.call(null, [cljs.core.str(s)].join(""), "..", "_DOT__DOT_");
    var ss__$1 = clojure.string.replace.call(null, ss, new RegExp("\\/(.)"), ".$1");
    var rf = cljs.compiler.munge_reserved.call(null, reserved);
    var ss__$2 = cljs.core.map.call(null, rf, clojure.string.split.call(null, ss__$1, /\./));
    var ss__$3 = clojure.string.join.call(null, ".", ss__$2);
    var ms = cljs.core.munge.call(null, ss__$3);
    if (s instanceof cljs.core.Symbol) {
      return cljs.core.symbol.call(null, ms);
    } else {
      return ms;
    }
  }
};
cljs.compiler.munge.cljs$lang$maxFixedArity = 2;
cljs.compiler.comma_sep = function cljs$compiler$comma_sep(xs) {
  return cljs.core.interpose.call(null, ",", xs);
};
cljs.compiler.escape_char = function cljs$compiler$escape_char(c) {
  var cp = goog.string.hashCode(c);
  var G__9733 = cp;
  switch(G__9733) {
    case 34:
      return '\\"';
      break;
    case 92:
      return "\\\\";
      break;
    case 8:
      return "\\b";
      break;
    case 12:
      return "\\f";
      break;
    case 10:
      return "\\n";
      break;
    case 13:
      return "\\r";
      break;
    case 9:
      return "\\t";
      break;
    default:
      if (31 < cp && cp < 127) {
        return c;
      } else {
        return [cljs.core.str("\\u"), cljs.core.str(cp.toString(16))].join("");
      }
    ;
  }
};
cljs.compiler.escape_string = function cljs$compiler$escape_string(s) {
  var sb = new goog.string.StringBuffer;
  var seq__9739_9743 = cljs.core.seq.call(null, s);
  var chunk__9740_9744 = null;
  var count__9741_9745 = 0;
  var i__9742_9746 = 0;
  while (true) {
    if (i__9742_9746 < count__9741_9745) {
      var c_9747 = cljs.core._nth.call(null, chunk__9740_9744, i__9742_9746);
      sb.append(cljs.compiler.escape_char.call(null, c_9747));
      var G__9748 = seq__9739_9743;
      var G__9749 = chunk__9740_9744;
      var G__9750 = count__9741_9745;
      var G__9751 = i__9742_9746 + 1;
      seq__9739_9743 = G__9748;
      chunk__9740_9744 = G__9749;
      count__9741_9745 = G__9750;
      i__9742_9746 = G__9751;
      continue;
    } else {
      var temp__4425__auto___9752 = cljs.core.seq.call(null, seq__9739_9743);
      if (temp__4425__auto___9752) {
        var seq__9739_9753__$1 = temp__4425__auto___9752;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9739_9753__$1)) {
          var c__4844__auto___9754 = cljs.core.chunk_first.call(null, seq__9739_9753__$1);
          var G__9755 = cljs.core.chunk_rest.call(null, seq__9739_9753__$1);
          var G__9756 = c__4844__auto___9754;
          var G__9757 = cljs.core.count.call(null, c__4844__auto___9754);
          var G__9758 = 0;
          seq__9739_9743 = G__9755;
          chunk__9740_9744 = G__9756;
          count__9741_9745 = G__9757;
          i__9742_9746 = G__9758;
          continue;
        } else {
          var c_9759 = cljs.core.first.call(null, seq__9739_9753__$1);
          sb.append(cljs.compiler.escape_char.call(null, c_9759));
          var G__9760 = cljs.core.next.call(null, seq__9739_9753__$1);
          var G__9761 = null;
          var G__9762 = 0;
          var G__9763 = 0;
          seq__9739_9743 = G__9760;
          chunk__9740_9744 = G__9761;
          count__9741_9745 = G__9762;
          i__9742_9746 = G__9763;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return sb.toString();
};
cljs.compiler.wrap_in_double_quotes = function cljs$compiler$wrap_in_double_quotes(x) {
  return [cljs.core.str('"'), cljs.core.str(x), cljs.core.str('"')].join("");
};
if (typeof cljs.compiler.emit_STAR_ !== "undefined") {
} else {
  cljs.compiler.emit_STAR_ = function() {
    var method_table__4954__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__4955__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__4956__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__4957__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__4958__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.compiler", "emit*"), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4958__auto__, method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__);
  }();
}
cljs.compiler.emit = function cljs$compiler$emit(ast) {
  var val__5424__auto__ = cljs.env._STAR_compiler_STAR_;
  if (val__5424__auto__ == null) {
    cljs.env._STAR_compiler_STAR_ = cljs.env.default_compiler_env.call(null);
  } else {
  }
  try {
    if (cljs.core.truth_(cljs.compiler._STAR_source_map_data_STAR_)) {
      var map__9769_9774 = ast;
      var map__9769_9775__$1 = (!(map__9769_9774 == null) ? map__9769_9774.cljs$lang$protocol_mask$partition0$ & 64 || map__9769_9774.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9769_9774) : map__9769_9774;
      var env_9776 = cljs.core.get.call(null, map__9769_9775__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
      if (cljs.core.truth_((new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env_9776))) {
        var map__9771_9777 = env_9776;
        var map__9771_9778__$1 = (!(map__9771_9777 == null) ? map__9771_9777.cljs$lang$protocol_mask$partition0$ & 64 || map__9771_9777.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9771_9777) : map__9771_9777;
        var line_9779 = cljs.core.get.call(null, map__9771_9778__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
        var column_9780 = cljs.core.get.call(null, map__9771_9778__$1, new cljs.core.Keyword(null, "column", "column", 2078222095));
        cljs.core.swap_BANG_.call(null, cljs.compiler._STAR_source_map_data_STAR_, function(map__9771_9777, map__9771_9778__$1, line_9779, column_9780, map__9769_9774, map__9769_9775__$1, env_9776, val__5424__auto__) {
          return function(m) {
            var minfo = function() {
              var G__9773 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "gcol", "gcol", 309250807), (new cljs.core.Keyword(null, "gen-col", "gen-col", 1901918303)).cljs$core$IFn$_invoke$arity$1(m), new cljs.core.Keyword(null, "gline", "gline", -1086242431), (new cljs.core.Keyword(null, "gen-line", "gen-line", 589592125)).cljs$core$IFn$_invoke$arity$1(m)], null);
              var G__9773__$1 = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(ast), new cljs.core.Keyword(null, "var", "var", -769682797)) ? cljs.core.assoc.call(null, G__9773, new cljs.core.Keyword(null, "name", "name", 1843675177), [cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(ast)))].join("")) : 
              G__9773;
              return G__9773__$1;
            }();
            return cljs.core.update_in.call(null, m, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "source-map", "source-map", 1706252311), line_9779 - 1], null), cljs.core.fnil.call(null, function(minfo, map__9771_9777, map__9771_9778__$1, line_9779, column_9780, map__9769_9774, map__9769_9775__$1, env_9776, val__5424__auto__) {
              return function(line__$1) {
                return cljs.core.update_in.call(null, line__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(column_9780) ? column_9780 - 1 : 0], null), cljs.core.fnil.call(null, function(minfo, map__9771_9777, map__9771_9778__$1, line_9779, column_9780, map__9769_9774, map__9769_9775__$1, env_9776, val__5424__auto__) {
                  return function(column__$1) {
                    return cljs.core.conj.call(null, column__$1, minfo);
                  };
                }(minfo, map__9771_9777, map__9771_9778__$1, line_9779, column_9780, map__9769_9774, map__9769_9775__$1, env_9776, val__5424__auto__), cljs.core.PersistentVector.EMPTY));
              };
            }(minfo, map__9771_9777, map__9771_9778__$1, line_9779, column_9780, map__9769_9774, map__9769_9775__$1, env_9776, val__5424__auto__), cljs.core.sorted_map.call(null)));
          };
        }(map__9771_9777, map__9771_9778__$1, line_9779, column_9780, map__9769_9774, map__9769_9775__$1, env_9776, val__5424__auto__));
      } else {
      }
    } else {
    }
    return cljs.compiler.emit_STAR_.call(null, ast);
  } finally {
    if (val__5424__auto__ == null) {
      cljs.env._STAR_compiler_STAR_ = null;
    } else {
    }
  }
};
cljs.compiler.emits = function cljs$compiler$emits() {
  var args__5106__auto__ = [];
  var len__5099__auto___9787 = arguments.length;
  var i__5100__auto___9788 = 0;
  while (true) {
    if (i__5100__auto___9788 < len__5099__auto___9787) {
      args__5106__auto__.push(arguments[i__5100__auto___9788]);
      var G__9789 = i__5100__auto___9788 + 1;
      i__5100__auto___9788 = G__9789;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 0 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(0), 0) : null;
  return cljs.compiler.emits.cljs$core$IFn$_invoke$arity$variadic(argseq__5107__auto__);
};
cljs.compiler.emits.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var seq__9783_9790 = cljs.core.seq.call(null, xs);
  var chunk__9784_9791 = null;
  var count__9785_9792 = 0;
  var i__9786_9793 = 0;
  while (true) {
    if (i__9786_9793 < count__9785_9792) {
      var x_9794 = cljs.core._nth.call(null, chunk__9784_9791, i__9786_9793);
      if (x_9794 == null) {
      } else {
        if (cljs.analyzer.cljs_map_QMARK_.call(null, x_9794)) {
          cljs.compiler.emit.call(null, x_9794);
        } else {
          if (cljs.analyzer.cljs_seq_QMARK_.call(null, x_9794)) {
            cljs.core.apply.call(null, cljs.compiler.emits, x_9794);
          } else {
            if (goog.isFunction(x_9794)) {
              x_9794.call(null);
            } else {
              var s_9795 = cljs.core.print_str.call(null, x_9794);
              if (cljs.compiler._STAR_source_map_data_STAR_ == null) {
              } else {
                cljs.core.swap_BANG_.call(null, cljs.compiler._STAR_source_map_data_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "gen-col", "gen-col", 1901918303)], null), function(seq__9783_9790, chunk__9784_9791, count__9785_9792, i__9786_9793, s_9795, x_9794) {
                  return function(p1__9781_SHARP_) {
                    return p1__9781_SHARP_ + cljs.core.count.call(null, s_9795);
                  };
                }(seq__9783_9790, chunk__9784_9791, count__9785_9792, i__9786_9793, s_9795, x_9794));
              }
              cljs.core.print.call(null, s_9795);
            }
          }
        }
      }
      var G__9796 = seq__9783_9790;
      var G__9797 = chunk__9784_9791;
      var G__9798 = count__9785_9792;
      var G__9799 = i__9786_9793 + 1;
      seq__9783_9790 = G__9796;
      chunk__9784_9791 = G__9797;
      count__9785_9792 = G__9798;
      i__9786_9793 = G__9799;
      continue;
    } else {
      var temp__4425__auto___9800 = cljs.core.seq.call(null, seq__9783_9790);
      if (temp__4425__auto___9800) {
        var seq__9783_9801__$1 = temp__4425__auto___9800;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9783_9801__$1)) {
          var c__4844__auto___9802 = cljs.core.chunk_first.call(null, seq__9783_9801__$1);
          var G__9803 = cljs.core.chunk_rest.call(null, seq__9783_9801__$1);
          var G__9804 = c__4844__auto___9802;
          var G__9805 = cljs.core.count.call(null, c__4844__auto___9802);
          var G__9806 = 0;
          seq__9783_9790 = G__9803;
          chunk__9784_9791 = G__9804;
          count__9785_9792 = G__9805;
          i__9786_9793 = G__9806;
          continue;
        } else {
          var x_9807 = cljs.core.first.call(null, seq__9783_9801__$1);
          if (x_9807 == null) {
          } else {
            if (cljs.analyzer.cljs_map_QMARK_.call(null, x_9807)) {
              cljs.compiler.emit.call(null, x_9807);
            } else {
              if (cljs.analyzer.cljs_seq_QMARK_.call(null, x_9807)) {
                cljs.core.apply.call(null, cljs.compiler.emits, x_9807);
              } else {
                if (goog.isFunction(x_9807)) {
                  x_9807.call(null);
                } else {
                  var s_9808 = cljs.core.print_str.call(null, x_9807);
                  if (cljs.compiler._STAR_source_map_data_STAR_ == null) {
                  } else {
                    cljs.core.swap_BANG_.call(null, cljs.compiler._STAR_source_map_data_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "gen-col", "gen-col", 1901918303)], null), function(seq__9783_9790, chunk__9784_9791, count__9785_9792, i__9786_9793, s_9808, x_9807, seq__9783_9801__$1, temp__4425__auto___9800) {
                      return function(p1__9781_SHARP_) {
                        return p1__9781_SHARP_ + cljs.core.count.call(null, s_9808);
                      };
                    }(seq__9783_9790, chunk__9784_9791, count__9785_9792, i__9786_9793, s_9808, x_9807, seq__9783_9801__$1, temp__4425__auto___9800));
                  }
                  cljs.core.print.call(null, s_9808);
                }
              }
            }
          }
          var G__9809 = cljs.core.next.call(null, seq__9783_9801__$1);
          var G__9810 = null;
          var G__9811 = 0;
          var G__9812 = 0;
          seq__9783_9790 = G__9809;
          chunk__9784_9791 = G__9810;
          count__9785_9792 = G__9811;
          i__9786_9793 = G__9812;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return null;
};
cljs.compiler.emits.cljs$lang$maxFixedArity = 0;
cljs.compiler.emits.cljs$lang$applyTo = function(seq9782) {
  return cljs.compiler.emits.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9782));
};
cljs.compiler.emitln = function cljs$compiler$emitln() {
  var args__5106__auto__ = [];
  var len__5099__auto___9817 = arguments.length;
  var i__5100__auto___9818 = 0;
  while (true) {
    if (i__5100__auto___9818 < len__5099__auto___9817) {
      args__5106__auto__.push(arguments[i__5100__auto___9818]);
      var G__9819 = i__5100__auto___9818 + 1;
      i__5100__auto___9818 = G__9819;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 0 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(0), 0) : null;
  return cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(argseq__5107__auto__);
};
cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  cljs.core.apply.call(null, cljs.compiler.emits, xs);
  cljs.core.println.call(null);
  if (cljs.core.truth_(cljs.compiler._STAR_source_map_data_STAR_)) {
    cljs.core.swap_BANG_.call(null, cljs.compiler._STAR_source_map_data_STAR_, function(p__9814) {
      var map__9815 = p__9814;
      var map__9815__$1 = (!(map__9815 == null) ? map__9815.cljs$lang$protocol_mask$partition0$ & 64 || map__9815.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9815) : map__9815;
      var m = map__9815__$1;
      var gen_line = cljs.core.get.call(null, map__9815__$1, new cljs.core.Keyword(null, "gen-line", "gen-line", 589592125));
      return cljs.core.assoc.call(null, m, new cljs.core.Keyword(null, "gen-line", "gen-line", 589592125), gen_line + 1, new cljs.core.Keyword(null, "gen-col", "gen-col", 1901918303), 0);
    });
  } else {
  }
  return null;
};
cljs.compiler.emitln.cljs$lang$maxFixedArity = 0;
cljs.compiler.emitln.cljs$lang$applyTo = function(seq9813) {
  return cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9813));
};
cljs.compiler.emit_str = function cljs$compiler$emit_str(expr) {
  var sb__5015__auto__ = new goog.string.StringBuffer;
  var _STAR_print_newline_STAR_9822_9824 = cljs.core._STAR_print_newline_STAR_;
  var _STAR_print_fn_STAR_9823_9825 = cljs.core._STAR_print_fn_STAR_;
  cljs.core._STAR_print_newline_STAR_ = true;
  cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_9822_9824, _STAR_print_fn_STAR_9823_9825, sb__5015__auto__) {
    return function(x__5016__auto__) {
      return sb__5015__auto__.append(x__5016__auto__);
    };
  }(_STAR_print_newline_STAR_9822_9824, _STAR_print_fn_STAR_9823_9825, sb__5015__auto__);
  try {
    cljs.compiler.emit.call(null, expr);
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_9823_9825;
    cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_9822_9824;
  }
  return [cljs.core.str(sb__5015__auto__)].join("");
};
if (typeof cljs.compiler.emit_constant !== "undefined") {
} else {
  cljs.compiler.emit_constant = function() {
    var method_table__4954__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__4955__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__4956__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__4957__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__4958__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.compiler", "emit-constant"), cljs.core.type, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4958__auto__, method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.compiler.emit_constant, null, function(x) {
  return cljs.compiler.emits.call(null, "null");
});
cljs.core._add_method.call(null, cljs.compiler.emit_constant, Number, function(x) {
  return cljs.compiler.emits.call(null, x);
});
cljs.core._add_method.call(null, cljs.compiler.emit_constant, String, function(x) {
  return cljs.compiler.emits.call(null, cljs.compiler.wrap_in_double_quotes.call(null, cljs.compiler.escape_string.call(null, x)));
});
cljs.core._add_method.call(null, cljs.compiler.emit_constant, Boolean, function(x) {
  return cljs.compiler.emits.call(null, cljs.core.truth_(x) ? "true" : "false");
});
cljs.core._add_method.call(null, cljs.compiler.emit_constant, RegExp, function(x) {
  if (cljs.core._EQ_.call(null, "", [cljs.core.str(x)].join(""))) {
    return cljs.compiler.emits.call(null, '(new RegExp(""))');
  } else {
    var vec__9826 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, [cljs.core.str(x)].join(""));
    var _ = cljs.core.nth.call(null, vec__9826, 0, null);
    var flags = cljs.core.nth.call(null, vec__9826, 1, null);
    var pattern = cljs.core.nth.call(null, vec__9826, 2, null);
    return cljs.compiler.emits.call(null, pattern);
  }
});
cljs.compiler.emits_keyword = function cljs$compiler$emits_keyword(kw) {
  var ns = cljs.core.namespace.call(null, kw);
  var name = cljs.core.name.call(null, kw);
  cljs.compiler.emits.call(null, "new cljs.core.Keyword(");
  cljs.compiler.emit_constant.call(null, ns);
  cljs.compiler.emits.call(null, ",");
  cljs.compiler.emit_constant.call(null, name);
  cljs.compiler.emits.call(null, ",");
  cljs.compiler.emit_constant.call(null, cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name);
  cljs.compiler.emits.call(null, ",");
  cljs.compiler.emit_constant.call(null, cljs.core.hash.call(null, kw));
  return cljs.compiler.emits.call(null, ")");
};
cljs.core._add_method.call(null, cljs.compiler.emit_constant, cljs.core.Keyword, function(x) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "emit-constants", "emit-constants", -476585410)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "options", "options", 99638489)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_))))) {
    var value = x.call(null, (new cljs.core.Keyword("cljs.analyzer", "constant-table", "cljs.analyzer/constant-table", -114131889)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_)));
    return cljs.compiler.emits.call(null, "cljs.core.", value);
  } else {
    return cljs.compiler.emits_keyword.call(null, x);
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_constant, cljs.core.Symbol, function(x) {
  var ns = cljs.core.namespace.call(null, x);
  var name = cljs.core.name.call(null, x);
  var symstr = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  cljs.compiler.emits.call(null, "new cljs.core.Symbol(");
  cljs.compiler.emit_constant.call(null, ns);
  cljs.compiler.emits.call(null, ",");
  cljs.compiler.emit_constant.call(null, name);
  cljs.compiler.emits.call(null, ",");
  cljs.compiler.emit_constant.call(null, symstr);
  cljs.compiler.emits.call(null, ",");
  cljs.compiler.emit_constant.call(null, cljs.core.hash.call(null, x));
  cljs.compiler.emits.call(null, ",");
  cljs.compiler.emit_constant.call(null, null);
  return cljs.compiler.emits.call(null, ")");
});
cljs.core._add_method.call(null, cljs.compiler.emit_constant, Date, function(date) {
  return cljs.compiler.emits.call(null, "new Date(", date.getTime(), ")");
});
cljs.core._add_method.call(null, cljs.compiler.emit_constant, cljs.core.UUID, function(uuid) {
  return cljs.compiler.emits.call(null, 'new cljs.core.UUID("', uuid.toString(), '")');
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "no-op", "no-op", -93046065), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "var", "var", -769682797), function(p__9828) {
  var map__9829 = p__9828;
  var map__9829__$1 = (!(map__9829 == null) ? map__9829.cljs$lang$protocol_mask$partition0$ & 64 || map__9829.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9829) : map__9829;
  var arg = map__9829__$1;
  var info = cljs.core.get.call(null, map__9829__$1, new cljs.core.Keyword(null, "info", "info", -317069002));
  var env = cljs.core.get.call(null, map__9829__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var form = cljs.core.get.call(null, map__9829__$1, new cljs.core.Keyword(null, "form", "form", -1624062471));
  var var_name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info);
  var info__$1 = cljs.core._EQ_.call(null, cljs.core.namespace.call(null, var_name), "js") ? function() {
    var js_module_name = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "js-module-index", "js-module-index", 2072061931), cljs.core.name.call(null, var_name)], null));
    var or__4060__auto__ = js_module_name;
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.core.name.call(null, var_name);
    }
  }() : info;
  if (cljs.core.truth_((new cljs.core.Keyword(null, "binding-form?", "binding-form?", 1728940169)).cljs$core$IFn$_invoke$arity$1(arg))) {
    return cljs.compiler.emits.call(null, cljs.compiler.munge.call(null, arg));
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "statement", "statement", -32780863), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
      return null;
    } else {
      var env__6088__auto__ = env;
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
        cljs.compiler.emits.call(null, "return ");
      } else {
      }
      cljs.compiler.emits.call(null, function() {
        var G__9831 = info__$1;
        var G__9831__$1 = cljs.core.not_EQ_.call(null, form, new cljs.core.Symbol("js", "-Infinity", "js/-Infinity", 958706333, null)) ? cljs.compiler.munge.call(null, G__9831) : G__9831;
        return G__9831__$1;
      }());
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
        return null;
      } else {
        return cljs.compiler.emitln.call(null, ";");
      }
    }
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "var-special", "var-special", 1131576802), function(p__9832) {
  var map__9833 = p__9832;
  var map__9833__$1 = (!(map__9833 == null) ? map__9833.cljs$lang$protocol_mask$partition0$ & 64 || map__9833.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9833) : map__9833;
  var arg = map__9833__$1;
  var env = cljs.core.get.call(null, map__9833__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var var$ = cljs.core.get.call(null, map__9833__$1, new cljs.core.Keyword(null, "var", "var", -769682797));
  var sym = cljs.core.get.call(null, map__9833__$1, new cljs.core.Keyword(null, "sym", "sym", -1444860305));
  var meta = cljs.core.get.call(null, map__9833__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  if (cljs.analyzer.ast_QMARK_.call(null, sym)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("ana", "ast?", "ana/ast?", 1470128118, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null))))].join(""));
  }
  if (cljs.analyzer.ast_QMARK_.call(null, meta)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("ana", "ast?", "ana/ast?", 1470128118, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null))))].join(""));
  }
  var map__9835 = (new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(var$);
  var map__9835__$1 = (!(map__9835 == null) ? map__9835.cljs$lang$protocol_mask$partition0$ & 64 || map__9835.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9835) : map__9835;
  var name = cljs.core.get.call(null, map__9835__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  cljs.compiler.emits.call(null, "new cljs.core.Var(function(){return ", cljs.compiler.munge.call(null, name), ";},", sym, ",", meta, ")");
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), function(p__9837) {
  var map__9838 = p__9837;
  var map__9838__$1 = (!(map__9838 == null) ? map__9838.cljs$lang$protocol_mask$partition0$ & 64 || map__9838.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9838) : map__9838;
  var expr = cljs.core.get.call(null, map__9838__$1, new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var meta = cljs.core.get.call(null, map__9838__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var env = cljs.core.get.call(null, map__9838__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  cljs.compiler.emits.call(null, "cljs.core.with_meta(", expr, ",", meta, ")");
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.compiler.array_map_threshold = 8;
cljs.compiler.distinct_keys_QMARK_ = function cljs$compiler$distinct_keys_QMARK_(keys) {
  return cljs.core.every_QMARK_.call(null, function(p1__9840_SHARP_) {
    return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(p1__9840_SHARP_), new cljs.core.Keyword(null, "constant", "constant", -379609303));
  }, keys) && cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, keys)), cljs.core.count.call(null, keys));
};
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "map", "map", 1371690461), function(p__9841) {
  var map__9842 = p__9841;
  var map__9842__$1 = (!(map__9842 == null) ? map__9842.cljs$lang$protocol_mask$partition0$ & 64 || map__9842.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9842) : map__9842;
  var env = cljs.core.get.call(null, map__9842__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var keys = cljs.core.get.call(null, map__9842__$1, new cljs.core.Keyword(null, "keys", "keys", 1068423698));
  var vals = cljs.core.get.call(null, map__9842__$1, new cljs.core.Keyword(null, "vals", "vals", 768058733));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  if (cljs.core.count.call(null, keys) === 0) {
    cljs.compiler.emits.call(null, "cljs.core.PersistentArrayMap.EMPTY");
  } else {
    if (cljs.core.count.call(null, keys) <= cljs.compiler.array_map_threshold) {
      if (cljs.core.truth_(cljs.compiler.distinct_keys_QMARK_.call(null, keys))) {
        cljs.compiler.emits.call(null, "new cljs.core.PersistentArrayMap(null, ", cljs.core.count.call(null, keys), ", [", cljs.compiler.comma_sep.call(null, cljs.core.interleave.call(null, keys, vals)), "], null)");
      } else {
        cljs.compiler.emits.call(null, "new cljs.core.PersistentArrayMap.fromArray([", cljs.compiler.comma_sep.call(null, cljs.core.interleave.call(null, keys, vals)), "], true, false)");
      }
    } else {
      cljs.compiler.emits.call(null, "cljs.core.PersistentHashMap.fromArrays([", cljs.compiler.comma_sep.call(null, keys), "],[", cljs.compiler.comma_sep.call(null, vals), "])");
    }
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "list", "list", 765357683), function(p__9844) {
  var map__9845 = p__9844;
  var map__9845__$1 = (!(map__9845 == null) ? map__9845.cljs$lang$protocol_mask$partition0$ & 64 || map__9845.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9845) : map__9845;
  var items = cljs.core.get.call(null, map__9845__$1, new cljs.core.Keyword(null, "items", "items", 1031954938));
  var env = cljs.core.get.call(null, map__9845__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  if (cljs.core.empty_QMARK_.call(null, items)) {
    cljs.compiler.emits.call(null, "cljs.core.List.EMPTY");
  } else {
    cljs.compiler.emits.call(null, "cljs.core.list(", cljs.compiler.comma_sep.call(null, items), ")");
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "vector", "vector", 1902966158), function(p__9847) {
  var map__9848 = p__9847;
  var map__9848__$1 = (!(map__9848 == null) ? map__9848.cljs$lang$protocol_mask$partition0$ & 64 || map__9848.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9848) : map__9848;
  var items = cljs.core.get.call(null, map__9848__$1, new cljs.core.Keyword(null, "items", "items", 1031954938));
  var env = cljs.core.get.call(null, map__9848__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  if (cljs.core.empty_QMARK_.call(null, items)) {
    cljs.compiler.emits.call(null, "cljs.core.PersistentVector.EMPTY");
  } else {
    var cnt_9850 = cljs.core.count.call(null, items);
    if (cnt_9850 < 32) {
      cljs.compiler.emits.call(null, "new cljs.core.PersistentVector(null, ", cnt_9850, ", 5, cljs.core.PersistentVector.EMPTY_NODE, [", cljs.compiler.comma_sep.call(null, items), "], null)");
    } else {
      cljs.compiler.emits.call(null, "cljs.core.PersistentVector.fromArray([", cljs.compiler.comma_sep.call(null, items), "], true)");
    }
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.compiler.distinct_constants_QMARK_ = function cljs$compiler$distinct_constants_QMARK_(items) {
  return cljs.core.every_QMARK_.call(null, function(p1__9851_SHARP_) {
    return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(p1__9851_SHARP_), new cljs.core.Keyword(null, "constant", "constant", -379609303));
  }, items) && cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, items)), cljs.core.count.call(null, items));
};
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "set", "set", 304602554), function(p__9852) {
  var map__9853 = p__9852;
  var map__9853__$1 = (!(map__9853 == null) ? map__9853.cljs$lang$protocol_mask$partition0$ & 64 || map__9853.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9853) : map__9853;
  var items = cljs.core.get.call(null, map__9853__$1, new cljs.core.Keyword(null, "items", "items", 1031954938));
  var env = cljs.core.get.call(null, map__9853__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  if (cljs.core.empty_QMARK_.call(null, items)) {
    cljs.compiler.emits.call(null, "cljs.core.PersistentHashSet.EMPTY");
  } else {
    if (cljs.core.truth_(cljs.compiler.distinct_constants_QMARK_.call(null, items))) {
      cljs.compiler.emits.call(null, "new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, ", cljs.core.count.call(null, items), ", [", cljs.compiler.comma_sep.call(null, cljs.core.interleave.call(null, items, cljs.core.repeat.call(null, "null"))), "], null), null)");
    } else {
      cljs.compiler.emits.call(null, "cljs.core.PersistentHashSet.fromArray([", cljs.compiler.comma_sep.call(null, items), "], true)");
    }
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "js-value", "js-value", -758336661), function(p__9855) {
  var map__9856 = p__9855;
  var map__9856__$1 = (!(map__9856 == null) ? map__9856.cljs$lang$protocol_mask$partition0$ & 64 || map__9856.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9856) : map__9856;
  var items = cljs.core.get.call(null, map__9856__$1, new cljs.core.Keyword(null, "items", "items", 1031954938));
  var js_type = cljs.core.get.call(null, map__9856__$1, new cljs.core.Keyword(null, "js-type", "js-type", 539386702));
  var env = cljs.core.get.call(null, map__9856__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  if (cljs.core._EQ_.call(null, js_type, new cljs.core.Keyword(null, "object", "object", 1474613949))) {
    cljs.compiler.emits.call(null, "{");
    var temp__4425__auto___9866 = cljs.core.seq.call(null, items);
    if (temp__4425__auto___9866) {
      var items_9867__$1 = temp__4425__auto___9866;
      var vec__9858_9868 = items_9867__$1;
      var vec__9859_9869 = cljs.core.nth.call(null, vec__9858_9868, 0, null);
      var k_9870 = cljs.core.nth.call(null, vec__9859_9869, 0, null);
      var v_9871 = cljs.core.nth.call(null, vec__9859_9869, 1, null);
      var r_9872 = cljs.core.nthnext.call(null, vec__9858_9868, 1);
      cljs.compiler.emits.call(null, '"', cljs.core.name.call(null, k_9870), '": ', v_9871);
      var seq__9860_9873 = cljs.core.seq.call(null, r_9872);
      var chunk__9861_9874 = null;
      var count__9862_9875 = 0;
      var i__9863_9876 = 0;
      while (true) {
        if (i__9863_9876 < count__9862_9875) {
          var vec__9864_9877 = cljs.core._nth.call(null, chunk__9861_9874, i__9863_9876);
          var k_9878__$1 = cljs.core.nth.call(null, vec__9864_9877, 0, null);
          var v_9879__$1 = cljs.core.nth.call(null, vec__9864_9877, 1, null);
          cljs.compiler.emits.call(null, ', "', cljs.core.name.call(null, k_9878__$1), '": ', v_9879__$1);
          var G__9880 = seq__9860_9873;
          var G__9881 = chunk__9861_9874;
          var G__9882 = count__9862_9875;
          var G__9883 = i__9863_9876 + 1;
          seq__9860_9873 = G__9880;
          chunk__9861_9874 = G__9881;
          count__9862_9875 = G__9882;
          i__9863_9876 = G__9883;
          continue;
        } else {
          var temp__4425__auto___9884__$1 = cljs.core.seq.call(null, seq__9860_9873);
          if (temp__4425__auto___9884__$1) {
            var seq__9860_9885__$1 = temp__4425__auto___9884__$1;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9860_9885__$1)) {
              var c__4844__auto___9886 = cljs.core.chunk_first.call(null, seq__9860_9885__$1);
              var G__9887 = cljs.core.chunk_rest.call(null, seq__9860_9885__$1);
              var G__9888 = c__4844__auto___9886;
              var G__9889 = cljs.core.count.call(null, c__4844__auto___9886);
              var G__9890 = 0;
              seq__9860_9873 = G__9887;
              chunk__9861_9874 = G__9888;
              count__9862_9875 = G__9889;
              i__9863_9876 = G__9890;
              continue;
            } else {
              var vec__9865_9891 = cljs.core.first.call(null, seq__9860_9885__$1);
              var k_9892__$1 = cljs.core.nth.call(null, vec__9865_9891, 0, null);
              var v_9893__$1 = cljs.core.nth.call(null, vec__9865_9891, 1, null);
              cljs.compiler.emits.call(null, ', "', cljs.core.name.call(null, k_9892__$1), '": ', v_9893__$1);
              var G__9894 = cljs.core.next.call(null, seq__9860_9885__$1);
              var G__9895 = null;
              var G__9896 = 0;
              var G__9897 = 0;
              seq__9860_9873 = G__9894;
              chunk__9861_9874 = G__9895;
              count__9862_9875 = G__9896;
              i__9863_9876 = G__9897;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
    }
    cljs.compiler.emits.call(null, "}");
  } else {
    cljs.compiler.emits.call(null, "[", cljs.compiler.comma_sep.call(null, items), "]");
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "constant", "constant", -379609303), function(p__9898) {
  var map__9899 = p__9898;
  var map__9899__$1 = (!(map__9899 == null) ? map__9899.cljs$lang$protocol_mask$partition0$ & 64 || map__9899.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9899) : map__9899;
  var form = cljs.core.get.call(null, map__9899__$1, new cljs.core.Keyword(null, "form", "form", -1624062471));
  var env = cljs.core.get.call(null, map__9899__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "statement", "statement", -32780863), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
    return null;
  } else {
    var env__6088__auto__ = env;
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
      cljs.compiler.emits.call(null, "return ");
    } else {
    }
    cljs.compiler.emit_constant.call(null, form);
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
      return null;
    } else {
      return cljs.compiler.emitln.call(null, ";");
    }
  }
});
cljs.compiler.truthy_constant_QMARK_ = function cljs$compiler$truthy_constant_QMARK_(p__9901) {
  var map__9904 = p__9901;
  var map__9904__$1 = (!(map__9904 == null) ? map__9904.cljs$lang$protocol_mask$partition0$ & 64 || map__9904.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9904) : map__9904;
  var op = cljs.core.get.call(null, map__9904__$1, new cljs.core.Keyword(null, "op", "op", -1882987955));
  var form = cljs.core.get.call(null, map__9904__$1, new cljs.core.Keyword(null, "form", "form", -1624062471));
  var and__4048__auto__ = cljs.core._EQ_.call(null, op, new cljs.core.Keyword(null, "constant", "constant", -379609303));
  if (and__4048__auto__) {
    var and__4048__auto____$1 = form;
    if (cljs.core.truth_(and__4048__auto____$1)) {
      return !(typeof form === "string" && cljs.core._EQ_.call(null, form, "") || typeof form === "number" && form === 0);
    } else {
      return and__4048__auto____$1;
    }
  } else {
    return and__4048__auto__;
  }
};
cljs.compiler.falsey_constant_QMARK_ = function cljs$compiler$falsey_constant_QMARK_(p__9906) {
  var map__9909 = p__9906;
  var map__9909__$1 = (!(map__9909 == null) ? map__9909.cljs$lang$protocol_mask$partition0$ & 64 || map__9909.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9909) : map__9909;
  var op = cljs.core.get.call(null, map__9909__$1, new cljs.core.Keyword(null, "op", "op", -1882987955));
  var form = cljs.core.get.call(null, map__9909__$1, new cljs.core.Keyword(null, "form", "form", -1624062471));
  return cljs.core._EQ_.call(null, op, new cljs.core.Keyword(null, "constant", "constant", -379609303)) && (form === false || form == null);
};
cljs.compiler.safe_test_QMARK_ = function cljs$compiler$safe_test_QMARK_(env, e) {
  var tag = cljs.analyzer.infer_tag.call(null, env, e);
  var or__4060__auto__ = (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "seq", "seq", -177272256, null), null, new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), null], null), null)).call(null, tag);
  if (cljs.core.truth_(or__4060__auto__)) {
    return or__4060__auto__;
  } else {
    return cljs.compiler.truthy_constant_QMARK_.call(null, e);
  }
};
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "if", "if", -458814265), function(p__9911) {
  var map__9912 = p__9911;
  var map__9912__$1 = (!(map__9912 == null) ? map__9912.cljs$lang$protocol_mask$partition0$ & 64 || map__9912.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9912) : map__9912;
  var test = cljs.core.get.call(null, map__9912__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
  var then = cljs.core.get.call(null, map__9912__$1, new cljs.core.Keyword(null, "then", "then", 460598070));
  var else$ = cljs.core.get.call(null, map__9912__$1, new cljs.core.Keyword(null, "else", "else", -1508377146));
  var env = cljs.core.get.call(null, map__9912__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var unchecked = cljs.core.get.call(null, map__9912__$1, new cljs.core.Keyword(null, "unchecked", "unchecked", 924418378));
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env);
  var checked = cljs.core.not.call(null, function() {
    var or__4060__auto__ = unchecked;
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.compiler.safe_test_QMARK_.call(null, env, test);
    }
  }());
  if (cljs.core.truth_(cljs.compiler.truthy_constant_QMARK_.call(null, test))) {
    return cljs.compiler.emitln.call(null, then);
  } else {
    if (cljs.core.truth_(cljs.compiler.falsey_constant_QMARK_.call(null, test))) {
      return cljs.compiler.emitln.call(null, else$);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context)) {
        return cljs.compiler.emits.call(null, "(", checked ? "cljs.core.truth_" : null, "(", test, ")?", then, ":", else$, ")");
      } else {
        if (checked) {
          cljs.compiler.emitln.call(null, "if(cljs.core.truth_(", test, ")){");
        } else {
          cljs.compiler.emitln.call(null, "if(", test, "){");
        }
        cljs.compiler.emitln.call(null, then, "} else {");
        return cljs.compiler.emitln.call(null, else$, "}");
      }
    }
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "case*", "case*", 716180697), function(p__9914) {
  var map__9915 = p__9914;
  var map__9915__$1 = (!(map__9915 == null) ? map__9915.cljs$lang$protocol_mask$partition0$ & 64 || map__9915.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9915) : map__9915;
  var v = cljs.core.get.call(null, map__9915__$1, new cljs.core.Keyword(null, "v", "v", 21465059));
  var tests = cljs.core.get.call(null, map__9915__$1, new cljs.core.Keyword(null, "tests", "tests", -1041085625));
  var thens = cljs.core.get.call(null, map__9915__$1, new cljs.core.Keyword(null, "thens", "thens", 226631442));
  var default$ = cljs.core.get.call(null, map__9915__$1, new cljs.core.Keyword(null, "default", "default", -1987822328));
  var env = cljs.core.get.call(null, map__9915__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env), new cljs.core.Keyword(null, "expr", "expr", 745722291))) {
    cljs.compiler.emitln.call(null, "(function(){");
  } else {
  }
  var gs = cljs.core.gensym.call(null, "caseval__");
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
    cljs.compiler.emitln.call(null, "var ", gs, ";");
  } else {
  }
  cljs.compiler.emitln.call(null, "switch (", v, ") {");
  var seq__9917_9931 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, cljs.core.interleave.call(null, tests, thens)));
  var chunk__9918_9932 = null;
  var count__9919_9933 = 0;
  var i__9920_9934 = 0;
  while (true) {
    if (i__9920_9934 < count__9919_9933) {
      var vec__9921_9935 = cljs.core._nth.call(null, chunk__9918_9932, i__9920_9934);
      var ts_9936 = cljs.core.nth.call(null, vec__9921_9935, 0, null);
      var then_9937 = cljs.core.nth.call(null, vec__9921_9935, 1, null);
      var seq__9922_9938 = cljs.core.seq.call(null, ts_9936);
      var chunk__9923_9939 = null;
      var count__9924_9940 = 0;
      var i__9925_9941 = 0;
      while (true) {
        if (i__9925_9941 < count__9924_9940) {
          var test_9942 = cljs.core._nth.call(null, chunk__9923_9939, i__9925_9941);
          cljs.compiler.emitln.call(null, "case ", test_9942, ":");
          var G__9943 = seq__9922_9938;
          var G__9944 = chunk__9923_9939;
          var G__9945 = count__9924_9940;
          var G__9946 = i__9925_9941 + 1;
          seq__9922_9938 = G__9943;
          chunk__9923_9939 = G__9944;
          count__9924_9940 = G__9945;
          i__9925_9941 = G__9946;
          continue;
        } else {
          var temp__4425__auto___9947 = cljs.core.seq.call(null, seq__9922_9938);
          if (temp__4425__auto___9947) {
            var seq__9922_9948__$1 = temp__4425__auto___9947;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9922_9948__$1)) {
              var c__4844__auto___9949 = cljs.core.chunk_first.call(null, seq__9922_9948__$1);
              var G__9950 = cljs.core.chunk_rest.call(null, seq__9922_9948__$1);
              var G__9951 = c__4844__auto___9949;
              var G__9952 = cljs.core.count.call(null, c__4844__auto___9949);
              var G__9953 = 0;
              seq__9922_9938 = G__9950;
              chunk__9923_9939 = G__9951;
              count__9924_9940 = G__9952;
              i__9925_9941 = G__9953;
              continue;
            } else {
              var test_9954 = cljs.core.first.call(null, seq__9922_9948__$1);
              cljs.compiler.emitln.call(null, "case ", test_9954, ":");
              var G__9955 = cljs.core.next.call(null, seq__9922_9948__$1);
              var G__9956 = null;
              var G__9957 = 0;
              var G__9958 = 0;
              seq__9922_9938 = G__9955;
              chunk__9923_9939 = G__9956;
              count__9924_9940 = G__9957;
              i__9925_9941 = G__9958;
              continue;
            }
          } else {
          }
        }
        break;
      }
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
        cljs.compiler.emitln.call(null, gs, "=", then_9937);
      } else {
        cljs.compiler.emitln.call(null, then_9937);
      }
      cljs.compiler.emitln.call(null, "break;");
      var G__9959 = seq__9917_9931;
      var G__9960 = chunk__9918_9932;
      var G__9961 = count__9919_9933;
      var G__9962 = i__9920_9934 + 1;
      seq__9917_9931 = G__9959;
      chunk__9918_9932 = G__9960;
      count__9919_9933 = G__9961;
      i__9920_9934 = G__9962;
      continue;
    } else {
      var temp__4425__auto___9963 = cljs.core.seq.call(null, seq__9917_9931);
      if (temp__4425__auto___9963) {
        var seq__9917_9964__$1 = temp__4425__auto___9963;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9917_9964__$1)) {
          var c__4844__auto___9965 = cljs.core.chunk_first.call(null, seq__9917_9964__$1);
          var G__9966 = cljs.core.chunk_rest.call(null, seq__9917_9964__$1);
          var G__9967 = c__4844__auto___9965;
          var G__9968 = cljs.core.count.call(null, c__4844__auto___9965);
          var G__9969 = 0;
          seq__9917_9931 = G__9966;
          chunk__9918_9932 = G__9967;
          count__9919_9933 = G__9968;
          i__9920_9934 = G__9969;
          continue;
        } else {
          var vec__9926_9970 = cljs.core.first.call(null, seq__9917_9964__$1);
          var ts_9971 = cljs.core.nth.call(null, vec__9926_9970, 0, null);
          var then_9972 = cljs.core.nth.call(null, vec__9926_9970, 1, null);
          var seq__9927_9973 = cljs.core.seq.call(null, ts_9971);
          var chunk__9928_9974 = null;
          var count__9929_9975 = 0;
          var i__9930_9976 = 0;
          while (true) {
            if (i__9930_9976 < count__9929_9975) {
              var test_9977 = cljs.core._nth.call(null, chunk__9928_9974, i__9930_9976);
              cljs.compiler.emitln.call(null, "case ", test_9977, ":");
              var G__9978 = seq__9927_9973;
              var G__9979 = chunk__9928_9974;
              var G__9980 = count__9929_9975;
              var G__9981 = i__9930_9976 + 1;
              seq__9927_9973 = G__9978;
              chunk__9928_9974 = G__9979;
              count__9929_9975 = G__9980;
              i__9930_9976 = G__9981;
              continue;
            } else {
              var temp__4425__auto___9982__$1 = cljs.core.seq.call(null, seq__9927_9973);
              if (temp__4425__auto___9982__$1) {
                var seq__9927_9983__$1 = temp__4425__auto___9982__$1;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__9927_9983__$1)) {
                  var c__4844__auto___9984 = cljs.core.chunk_first.call(null, seq__9927_9983__$1);
                  var G__9985 = cljs.core.chunk_rest.call(null, seq__9927_9983__$1);
                  var G__9986 = c__4844__auto___9984;
                  var G__9987 = cljs.core.count.call(null, c__4844__auto___9984);
                  var G__9988 = 0;
                  seq__9927_9973 = G__9985;
                  chunk__9928_9974 = G__9986;
                  count__9929_9975 = G__9987;
                  i__9930_9976 = G__9988;
                  continue;
                } else {
                  var test_9989 = cljs.core.first.call(null, seq__9927_9983__$1);
                  cljs.compiler.emitln.call(null, "case ", test_9989, ":");
                  var G__9990 = cljs.core.next.call(null, seq__9927_9983__$1);
                  var G__9991 = null;
                  var G__9992 = 0;
                  var G__9993 = 0;
                  seq__9927_9973 = G__9990;
                  chunk__9928_9974 = G__9991;
                  count__9929_9975 = G__9992;
                  i__9930_9976 = G__9993;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
            cljs.compiler.emitln.call(null, gs, "=", then_9972);
          } else {
            cljs.compiler.emitln.call(null, then_9972);
          }
          cljs.compiler.emitln.call(null, "break;");
          var G__9994 = cljs.core.next.call(null, seq__9917_9964__$1);
          var G__9995 = null;
          var G__9996 = 0;
          var G__9997 = 0;
          seq__9917_9931 = G__9994;
          chunk__9918_9932 = G__9995;
          count__9919_9933 = G__9996;
          i__9920_9934 = G__9997;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.truth_(default$)) {
    cljs.compiler.emitln.call(null, "default:");
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
      cljs.compiler.emitln.call(null, gs, "=", default$);
    } else {
      cljs.compiler.emitln.call(null, default$);
    }
  } else {
  }
  cljs.compiler.emitln.call(null, "}");
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
    return cljs.compiler.emitln.call(null, "return ", gs, ";})()");
  } else {
    return null;
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "throw", "throw", -1044625833), function(p__9998) {
  var map__9999 = p__9998;
  var map__9999__$1 = (!(map__9999 == null) ? map__9999.cljs$lang$protocol_mask$partition0$ & 64 || map__9999.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9999) : map__9999;
  var throw$ = cljs.core.get.call(null, map__9999__$1, new cljs.core.Keyword(null, "throw", "throw", -1044625833));
  var env = cljs.core.get.call(null, map__9999__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
    return cljs.compiler.emits.call(null, "(function(){throw ", throw$, "})()");
  } else {
    return cljs.compiler.emitln.call(null, "throw ", throw$, ";");
  }
});
cljs.compiler.emit_comment = function cljs$compiler$emit_comment(doc, jsdoc) {
  var docs = cljs.core.truth_(doc) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [doc], null) : null;
  var docs__$1 = cljs.core.truth_(jsdoc) ? cljs.core.concat.call(null, docs, jsdoc) : docs;
  var docs__$2 = cljs.core.remove.call(null, cljs.core.nil_QMARK_, docs__$1);
  var print_comment_lines = function(docs, docs__$1, docs__$2) {
    return function cljs$compiler$emit_comment_$_print_comment_lines(e) {
      var seq__10033 = cljs.core.seq.call(null, clojure.string.split_lines.call(null, e));
      var chunk__10034 = null;
      var count__10035 = 0;
      var i__10036 = 0;
      while (true) {
        if (i__10036 < count__10035) {
          var next_line = cljs.core._nth.call(null, chunk__10034, i__10036);
          cljs.compiler.emitln.call(null, " * ", clojure.string.replace.call(null, clojure.string.trim.call(null, next_line), "*/", "* /"));
          var G__10041 = seq__10033;
          var G__10042 = chunk__10034;
          var G__10043 = count__10035;
          var G__10044 = i__10036 + 1;
          seq__10033 = G__10041;
          chunk__10034 = G__10042;
          count__10035 = G__10043;
          i__10036 = G__10044;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__10033);
          if (temp__4425__auto__) {
            var seq__10033__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10033__$1)) {
              var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__10033__$1);
              var G__10045 = cljs.core.chunk_rest.call(null, seq__10033__$1);
              var G__10046 = c__4844__auto__;
              var G__10047 = cljs.core.count.call(null, c__4844__auto__);
              var G__10048 = 0;
              seq__10033 = G__10045;
              chunk__10034 = G__10046;
              count__10035 = G__10047;
              i__10036 = G__10048;
              continue;
            } else {
              var next_line = cljs.core.first.call(null, seq__10033__$1);
              cljs.compiler.emitln.call(null, " * ", clojure.string.replace.call(null, clojure.string.trim.call(null, next_line), "*/", "* /"));
              var G__10049 = cljs.core.next.call(null, seq__10033__$1);
              var G__10050 = null;
              var G__10051 = 0;
              var G__10052 = 0;
              seq__10033 = G__10049;
              chunk__10034 = G__10050;
              count__10035 = G__10051;
              i__10036 = G__10052;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
  }(docs, docs__$1, docs__$2);
  if (cljs.core.seq.call(null, docs__$2)) {
    cljs.compiler.emitln.call(null, "/**");
    var seq__10037_10053 = cljs.core.seq.call(null, docs__$2);
    var chunk__10038_10054 = null;
    var count__10039_10055 = 0;
    var i__10040_10056 = 0;
    while (true) {
      if (i__10040_10056 < count__10039_10055) {
        var e_10057 = cljs.core._nth.call(null, chunk__10038_10054, i__10040_10056);
        if (cljs.core.truth_(e_10057)) {
          print_comment_lines.call(null, e_10057);
        } else {
        }
        var G__10058 = seq__10037_10053;
        var G__10059 = chunk__10038_10054;
        var G__10060 = count__10039_10055;
        var G__10061 = i__10040_10056 + 1;
        seq__10037_10053 = G__10058;
        chunk__10038_10054 = G__10059;
        count__10039_10055 = G__10060;
        i__10040_10056 = G__10061;
        continue;
      } else {
        var temp__4425__auto___10062 = cljs.core.seq.call(null, seq__10037_10053);
        if (temp__4425__auto___10062) {
          var seq__10037_10063__$1 = temp__4425__auto___10062;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10037_10063__$1)) {
            var c__4844__auto___10064 = cljs.core.chunk_first.call(null, seq__10037_10063__$1);
            var G__10065 = cljs.core.chunk_rest.call(null, seq__10037_10063__$1);
            var G__10066 = c__4844__auto___10064;
            var G__10067 = cljs.core.count.call(null, c__4844__auto___10064);
            var G__10068 = 0;
            seq__10037_10053 = G__10065;
            chunk__10038_10054 = G__10066;
            count__10039_10055 = G__10067;
            i__10040_10056 = G__10068;
            continue;
          } else {
            var e_10069 = cljs.core.first.call(null, seq__10037_10063__$1);
            if (cljs.core.truth_(e_10069)) {
              print_comment_lines.call(null, e_10069);
            } else {
            }
            var G__10070 = cljs.core.next.call(null, seq__10037_10063__$1);
            var G__10071 = null;
            var G__10072 = 0;
            var G__10073 = 0;
            seq__10037_10053 = G__10070;
            chunk__10038_10054 = G__10071;
            count__10039_10055 = G__10072;
            i__10040_10056 = G__10073;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return cljs.compiler.emitln.call(null, " */");
  } else {
    return null;
  }
};
cljs.compiler.valid_define_value_QMARK_ = function cljs$compiler$valid_define_value_QMARK_(x) {
  return typeof x === "string" || x === true || x === false || typeof x === "number";
};
cljs.compiler.get_define = function cljs$compiler$get_define(mname, jsdoc) {
  var opts = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword(null, "options", "options", 99638489));
  var and__4048__auto__ = cljs.core.some.call(null, function(opts) {
    return function(p1__10075_SHARP_) {
      return goog.string.startsWith(p1__10075_SHARP_, "@define");
    };
  }(opts), jsdoc);
  if (cljs.core.truth_(and__4048__auto__)) {
    var and__4048__auto____$1 = opts;
    if (cljs.core.truth_(and__4048__auto____$1)) {
      var and__4048__auto____$2 = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "optimizations", "optimizations", -2047476854)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "none", "none", 1333468478));
      if (and__4048__auto____$2) {
        var define = cljs.core.get_in.call(null, opts, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "closure-defines", "closure-defines", -1213856476), [cljs.core.str(mname)].join("")], null));
        if (cljs.core.truth_(cljs.compiler.valid_define_value_QMARK_.call(null, define))) {
          return cljs.core.pr_str.call(null, define);
        } else {
          return null;
        }
      } else {
        return and__4048__auto____$2;
      }
    } else {
      return and__4048__auto____$1;
    }
  } else {
    return and__4048__auto__;
  }
};
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "def", "def", -1043430536), function(p__10076) {
  var map__10077 = p__10076;
  var map__10077__$1 = (!(map__10077 == null) ? map__10077.cljs$lang$protocol_mask$partition0$ & 64 || map__10077.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10077) : map__10077;
  var name = cljs.core.get.call(null, map__10077__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var var$ = cljs.core.get.call(null, map__10077__$1, new cljs.core.Keyword(null, "var", "var", -769682797));
  var init = cljs.core.get.call(null, map__10077__$1, new cljs.core.Keyword(null, "init", "init", -1875481434));
  var env = cljs.core.get.call(null, map__10077__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var doc = cljs.core.get.call(null, map__10077__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
  var jsdoc = cljs.core.get.call(null, map__10077__$1, new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516));
  var export$ = cljs.core.get.call(null, map__10077__$1, new cljs.core.Keyword(null, "export", "export", 214356590));
  var test = cljs.core.get.call(null, map__10077__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
  var var_ast = cljs.core.get.call(null, map__10077__$1, new cljs.core.Keyword(null, "var-ast", "var-ast", 1200379319));
  var mname = cljs.compiler.munge.call(null, name);
  if (cljs.core.truth_(init)) {
    cljs.compiler.emit_comment.call(null, doc, cljs.core.concat.call(null, jsdoc, (new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516)).cljs$core$IFn$_invoke$arity$1(init)));
    if (cljs.core.truth_((new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320)).cljs$core$IFn$_invoke$arity$1(env))) {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
        cljs.compiler.emitln.call(null, "return (");
      } else {
      }
      cljs.compiler.emitln.call(null, "(function (){");
    } else {
    }
    cljs.compiler.emits.call(null, var$);
    cljs.compiler.emits.call(null, " = ", function() {
      var temp__4423__auto__ = cljs.compiler.get_define.call(null, mname, jsdoc);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var define = temp__4423__auto__;
        return define;
      } else {
        return init;
      }
    }());
    if (cljs.core.truth_((new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320)).cljs$core$IFn$_invoke$arity$1(env))) {
      cljs.compiler.emitln.call(null, "; return (");
      cljs.compiler.emits.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var-special", "var-special", 1131576802), new cljs.core.Keyword(null, "env", "env", -1815813235), cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291))], null), var_ast));
      cljs.compiler.emitln.call(null, ");})()");
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
        cljs.compiler.emitln.call(null, ")");
      } else {
      }
    } else {
    }
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
    } else {
      cljs.compiler.emitln.call(null, ";");
    }
    if (cljs.core.truth_(export$)) {
      cljs.compiler.emitln.call(null, "goog.exportSymbol('", cljs.compiler.munge.call(null, export$), "', ", mname, ");");
    } else {
    }
    if (cljs.core.truth_(function() {
      var and__4048__auto__ = cljs.analyzer._STAR_load_tests_STAR_;
      if (cljs.core.truth_(and__4048__auto__)) {
        return test;
      } else {
        return and__4048__auto__;
      }
    }())) {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
        cljs.compiler.emitln.call(null, ";");
      } else {
      }
      return cljs.compiler.emitln.call(null, var$, ".cljs$lang$test = ", test, ";");
    } else {
      return null;
    }
  } else {
    return null;
  }
});
cljs.compiler.emit_apply_to = function cljs$compiler$emit_apply_to(p__10079) {
  var map__10096 = p__10079;
  var map__10096__$1 = (!(map__10096 == null) ? map__10096.cljs$lang$protocol_mask$partition0$ & 64 || map__10096.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10096) : map__10096;
  var name = cljs.core.get.call(null, map__10096__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var params = cljs.core.get.call(null, map__10096__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var env = cljs.core.get.call(null, map__10096__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var arglist = cljs.core.gensym.call(null, "arglist__");
  var delegate_name = [cljs.core.str(cljs.compiler.munge.call(null, name)), cljs.core.str("__delegate")].join("");
  cljs.compiler.emitln.call(null, "(function (", arglist, "){");
  var seq__10098_10112 = cljs.core.seq.call(null, cljs.core.map_indexed.call(null, cljs.core.vector, cljs.core.drop_last.call(null, 2, params)));
  var chunk__10099_10113 = null;
  var count__10100_10114 = 0;
  var i__10101_10115 = 0;
  while (true) {
    if (i__10101_10115 < count__10100_10114) {
      var vec__10102_10116 = cljs.core._nth.call(null, chunk__10099_10113, i__10101_10115);
      var i_10117 = cljs.core.nth.call(null, vec__10102_10116, 0, null);
      var param_10118 = cljs.core.nth.call(null, vec__10102_10116, 1, null);
      cljs.compiler.emits.call(null, "var ");
      cljs.compiler.emit.call(null, param_10118);
      cljs.compiler.emits.call(null, " = cljs.core.first(");
      cljs.compiler.emitln.call(null, arglist, ");");
      cljs.compiler.emitln.call(null, arglist, " = cljs.core.next(", arglist, ");");
      var G__10119 = seq__10098_10112;
      var G__10120 = chunk__10099_10113;
      var G__10121 = count__10100_10114;
      var G__10122 = i__10101_10115 + 1;
      seq__10098_10112 = G__10119;
      chunk__10099_10113 = G__10120;
      count__10100_10114 = G__10121;
      i__10101_10115 = G__10122;
      continue;
    } else {
      var temp__4425__auto___10123 = cljs.core.seq.call(null, seq__10098_10112);
      if (temp__4425__auto___10123) {
        var seq__10098_10124__$1 = temp__4425__auto___10123;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10098_10124__$1)) {
          var c__4844__auto___10125 = cljs.core.chunk_first.call(null, seq__10098_10124__$1);
          var G__10126 = cljs.core.chunk_rest.call(null, seq__10098_10124__$1);
          var G__10127 = c__4844__auto___10125;
          var G__10128 = cljs.core.count.call(null, c__4844__auto___10125);
          var G__10129 = 0;
          seq__10098_10112 = G__10126;
          chunk__10099_10113 = G__10127;
          count__10100_10114 = G__10128;
          i__10101_10115 = G__10129;
          continue;
        } else {
          var vec__10103_10130 = cljs.core.first.call(null, seq__10098_10124__$1);
          var i_10131 = cljs.core.nth.call(null, vec__10103_10130, 0, null);
          var param_10132 = cljs.core.nth.call(null, vec__10103_10130, 1, null);
          cljs.compiler.emits.call(null, "var ");
          cljs.compiler.emit.call(null, param_10132);
          cljs.compiler.emits.call(null, " = cljs.core.first(");
          cljs.compiler.emitln.call(null, arglist, ");");
          cljs.compiler.emitln.call(null, arglist, " = cljs.core.next(", arglist, ");");
          var G__10133 = cljs.core.next.call(null, seq__10098_10124__$1);
          var G__10134 = null;
          var G__10135 = 0;
          var G__10136 = 0;
          seq__10098_10112 = G__10133;
          chunk__10099_10113 = G__10134;
          count__10100_10114 = G__10135;
          i__10101_10115 = G__10136;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (1 < cljs.core.count.call(null, params)) {
    cljs.compiler.emits.call(null, "var ");
    cljs.compiler.emit.call(null, cljs.core.last.call(null, cljs.core.butlast.call(null, params)));
    cljs.compiler.emitln.call(null, " = cljs.core.first(", arglist, ");");
    cljs.compiler.emits.call(null, "var ");
    cljs.compiler.emit.call(null, cljs.core.last.call(null, params));
    cljs.compiler.emitln.call(null, " = cljs.core.rest(", arglist, ");");
    cljs.compiler.emits.call(null, "return ", delegate_name, "(");
    var seq__10104_10137 = cljs.core.seq.call(null, params);
    var chunk__10105_10138 = null;
    var count__10106_10139 = 0;
    var i__10107_10140 = 0;
    while (true) {
      if (i__10107_10140 < count__10106_10139) {
        var param_10141 = cljs.core._nth.call(null, chunk__10105_10138, i__10107_10140);
        cljs.compiler.emit.call(null, param_10141);
        if (cljs.core._EQ_.call(null, param_10141, cljs.core.last.call(null, params))) {
        } else {
          cljs.compiler.emits.call(null, ",");
        }
        var G__10142 = seq__10104_10137;
        var G__10143 = chunk__10105_10138;
        var G__10144 = count__10106_10139;
        var G__10145 = i__10107_10140 + 1;
        seq__10104_10137 = G__10142;
        chunk__10105_10138 = G__10143;
        count__10106_10139 = G__10144;
        i__10107_10140 = G__10145;
        continue;
      } else {
        var temp__4425__auto___10146 = cljs.core.seq.call(null, seq__10104_10137);
        if (temp__4425__auto___10146) {
          var seq__10104_10147__$1 = temp__4425__auto___10146;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10104_10147__$1)) {
            var c__4844__auto___10148 = cljs.core.chunk_first.call(null, seq__10104_10147__$1);
            var G__10149 = cljs.core.chunk_rest.call(null, seq__10104_10147__$1);
            var G__10150 = c__4844__auto___10148;
            var G__10151 = cljs.core.count.call(null, c__4844__auto___10148);
            var G__10152 = 0;
            seq__10104_10137 = G__10149;
            chunk__10105_10138 = G__10150;
            count__10106_10139 = G__10151;
            i__10107_10140 = G__10152;
            continue;
          } else {
            var param_10153 = cljs.core.first.call(null, seq__10104_10147__$1);
            cljs.compiler.emit.call(null, param_10153);
            if (cljs.core._EQ_.call(null, param_10153, cljs.core.last.call(null, params))) {
            } else {
              cljs.compiler.emits.call(null, ",");
            }
            var G__10154 = cljs.core.next.call(null, seq__10104_10147__$1);
            var G__10155 = null;
            var G__10156 = 0;
            var G__10157 = 0;
            seq__10104_10137 = G__10154;
            chunk__10105_10138 = G__10155;
            count__10106_10139 = G__10156;
            i__10107_10140 = G__10157;
            continue;
          }
        } else {
        }
      }
      break;
    }
    cljs.compiler.emitln.call(null, ");");
  } else {
    cljs.compiler.emits.call(null, "var ");
    cljs.compiler.emit.call(null, cljs.core.last.call(null, params));
    cljs.compiler.emitln.call(null, " = cljs.core.seq(", arglist, ");");
    cljs.compiler.emits.call(null, "return ", delegate_name, "(");
    var seq__10108_10158 = cljs.core.seq.call(null, params);
    var chunk__10109_10159 = null;
    var count__10110_10160 = 0;
    var i__10111_10161 = 0;
    while (true) {
      if (i__10111_10161 < count__10110_10160) {
        var param_10162 = cljs.core._nth.call(null, chunk__10109_10159, i__10111_10161);
        cljs.compiler.emit.call(null, param_10162);
        if (cljs.core._EQ_.call(null, param_10162, cljs.core.last.call(null, params))) {
        } else {
          cljs.compiler.emits.call(null, ",");
        }
        var G__10163 = seq__10108_10158;
        var G__10164 = chunk__10109_10159;
        var G__10165 = count__10110_10160;
        var G__10166 = i__10111_10161 + 1;
        seq__10108_10158 = G__10163;
        chunk__10109_10159 = G__10164;
        count__10110_10160 = G__10165;
        i__10111_10161 = G__10166;
        continue;
      } else {
        var temp__4425__auto___10167 = cljs.core.seq.call(null, seq__10108_10158);
        if (temp__4425__auto___10167) {
          var seq__10108_10168__$1 = temp__4425__auto___10167;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10108_10168__$1)) {
            var c__4844__auto___10169 = cljs.core.chunk_first.call(null, seq__10108_10168__$1);
            var G__10170 = cljs.core.chunk_rest.call(null, seq__10108_10168__$1);
            var G__10171 = c__4844__auto___10169;
            var G__10172 = cljs.core.count.call(null, c__4844__auto___10169);
            var G__10173 = 0;
            seq__10108_10158 = G__10170;
            chunk__10109_10159 = G__10171;
            count__10110_10160 = G__10172;
            i__10111_10161 = G__10173;
            continue;
          } else {
            var param_10174 = cljs.core.first.call(null, seq__10108_10168__$1);
            cljs.compiler.emit.call(null, param_10174);
            if (cljs.core._EQ_.call(null, param_10174, cljs.core.last.call(null, params))) {
            } else {
              cljs.compiler.emits.call(null, ",");
            }
            var G__10175 = cljs.core.next.call(null, seq__10108_10168__$1);
            var G__10176 = null;
            var G__10177 = 0;
            var G__10178 = 0;
            seq__10108_10158 = G__10175;
            chunk__10109_10159 = G__10176;
            count__10110_10160 = G__10177;
            i__10111_10161 = G__10178;
            continue;
          }
        } else {
        }
      }
      break;
    }
    cljs.compiler.emitln.call(null, ");");
  }
  return cljs.compiler.emits.call(null, "})");
};
cljs.compiler.emit_fn_params = function cljs$compiler$emit_fn_params(params) {
  var seq__10183 = cljs.core.seq.call(null, params);
  var chunk__10184 = null;
  var count__10185 = 0;
  var i__10186 = 0;
  while (true) {
    if (i__10186 < count__10185) {
      var param = cljs.core._nth.call(null, chunk__10184, i__10186);
      cljs.compiler.emit.call(null, param);
      if (cljs.core._EQ_.call(null, param, cljs.core.last.call(null, params))) {
      } else {
        cljs.compiler.emits.call(null, ",");
      }
      var G__10187 = seq__10183;
      var G__10188 = chunk__10184;
      var G__10189 = count__10185;
      var G__10190 = i__10186 + 1;
      seq__10183 = G__10187;
      chunk__10184 = G__10188;
      count__10185 = G__10189;
      i__10186 = G__10190;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__10183);
      if (temp__4425__auto__) {
        var seq__10183__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10183__$1)) {
          var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__10183__$1);
          var G__10191 = cljs.core.chunk_rest.call(null, seq__10183__$1);
          var G__10192 = c__4844__auto__;
          var G__10193 = cljs.core.count.call(null, c__4844__auto__);
          var G__10194 = 0;
          seq__10183 = G__10191;
          chunk__10184 = G__10192;
          count__10185 = G__10193;
          i__10186 = G__10194;
          continue;
        } else {
          var param = cljs.core.first.call(null, seq__10183__$1);
          cljs.compiler.emit.call(null, param);
          if (cljs.core._EQ_.call(null, param, cljs.core.last.call(null, params))) {
          } else {
            cljs.compiler.emits.call(null, ",");
          }
          var G__10195 = cljs.core.next.call(null, seq__10183__$1);
          var G__10196 = null;
          var G__10197 = 0;
          var G__10198 = 0;
          seq__10183 = G__10195;
          chunk__10184 = G__10196;
          count__10185 = G__10197;
          i__10186 = G__10198;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.compiler.emit_fn_method = function cljs$compiler$emit_fn_method(p__10199) {
  var map__10202 = p__10199;
  var map__10202__$1 = (!(map__10202 == null) ? map__10202.cljs$lang$protocol_mask$partition0$ & 64 || map__10202.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10202) : map__10202;
  var type = cljs.core.get.call(null, map__10202__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
  var name = cljs.core.get.call(null, map__10202__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var variadic = cljs.core.get.call(null, map__10202__$1, new cljs.core.Keyword(null, "variadic", "variadic", 882626057));
  var params = cljs.core.get.call(null, map__10202__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var expr = cljs.core.get.call(null, map__10202__$1, new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var env = cljs.core.get.call(null, map__10202__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var recurs = cljs.core.get.call(null, map__10202__$1, new cljs.core.Keyword(null, "recurs", "recurs", -1959309309));
  var max_fixed_arity = cljs.core.get.call(null, map__10202__$1, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  cljs.compiler.emits.call(null, "(function ", cljs.compiler.munge.call(null, name), "(");
  cljs.compiler.emit_fn_params.call(null, params);
  cljs.compiler.emitln.call(null, "){");
  if (cljs.core.truth_(type)) {
    cljs.compiler.emitln.call(null, "var self__ = this;");
  } else {
  }
  if (cljs.core.truth_(recurs)) {
    cljs.compiler.emitln.call(null, "while(true){");
  } else {
  }
  cljs.compiler.emits.call(null, expr);
  if (cljs.core.truth_(recurs)) {
    cljs.compiler.emitln.call(null, "break;");
    cljs.compiler.emitln.call(null, "}");
  } else {
  }
  cljs.compiler.emits.call(null, "})");
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
};
cljs.compiler.emit_arguments_to_array = function cljs$compiler$emit_arguments_to_array(startslice) {
  if (startslice >= 0 && cljs.core.integer_QMARK_.call(null, startslice)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, ">=", ">=", 1016916022, null), new cljs.core.Symbol(null, "startslice", "startslice", 1404029423, null), 0), cljs.core.list(new cljs.core.Symbol(null, "integer?", "integer?", 1303791671, null), new cljs.core.Symbol(null, "startslice", "startslice", 1404029423, null)))))].join(""));
  }
  var mname = cljs.compiler.munge.call(null, cljs.core.gensym.call(null));
  var i = [cljs.core.str(mname), cljs.core.str("__i")].join("");
  var a = [cljs.core.str(mname), cljs.core.str("__a")].join("");
  cljs.compiler.emitln.call(null, "var ", i, " = 0, ", a, " = new Array(arguments.length -  ", startslice, ");");
  cljs.compiler.emitln.call(null, "while (", i, " < ", a, ".length) {", a, "[", i, "] = arguments[", i, " + ", startslice, "]; ++", i, ";}");
  return a;
};
cljs.compiler.emit_variadic_fn_method = function cljs$compiler$emit_variadic_fn_method(p__10204) {
  var map__10215 = p__10204;
  var map__10215__$1 = (!(map__10215 == null) ? map__10215.cljs$lang$protocol_mask$partition0$ & 64 || map__10215.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10215) : map__10215;
  var f = map__10215__$1;
  var type = cljs.core.get.call(null, map__10215__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
  var name = cljs.core.get.call(null, map__10215__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var variadic = cljs.core.get.call(null, map__10215__$1, new cljs.core.Keyword(null, "variadic", "variadic", 882626057));
  var params = cljs.core.get.call(null, map__10215__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var expr = cljs.core.get.call(null, map__10215__$1, new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var env = cljs.core.get.call(null, map__10215__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var recurs = cljs.core.get.call(null, map__10215__$1, new cljs.core.Keyword(null, "recurs", "recurs", -1959309309));
  var max_fixed_arity = cljs.core.get.call(null, map__10215__$1, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  var name_10225__$1 = function() {
    var or__4060__auto__ = name;
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.core.gensym.call(null);
    }
  }();
  var mname_10226 = cljs.compiler.munge.call(null, name_10225__$1);
  var delegate_name_10227 = [cljs.core.str(mname_10226), cljs.core.str("__delegate")].join("");
  cljs.compiler.emitln.call(null, "(function() { ");
  cljs.compiler.emits.call(null, "var ", delegate_name_10227, " = function (");
  var seq__10217_10228 = cljs.core.seq.call(null, params);
  var chunk__10218_10229 = null;
  var count__10219_10230 = 0;
  var i__10220_10231 = 0;
  while (true) {
    if (i__10220_10231 < count__10219_10230) {
      var param_10232 = cljs.core._nth.call(null, chunk__10218_10229, i__10220_10231);
      cljs.compiler.emit.call(null, param_10232);
      if (cljs.core._EQ_.call(null, param_10232, cljs.core.last.call(null, params))) {
      } else {
        cljs.compiler.emits.call(null, ",");
      }
      var G__10233 = seq__10217_10228;
      var G__10234 = chunk__10218_10229;
      var G__10235 = count__10219_10230;
      var G__10236 = i__10220_10231 + 1;
      seq__10217_10228 = G__10233;
      chunk__10218_10229 = G__10234;
      count__10219_10230 = G__10235;
      i__10220_10231 = G__10236;
      continue;
    } else {
      var temp__4425__auto___10237 = cljs.core.seq.call(null, seq__10217_10228);
      if (temp__4425__auto___10237) {
        var seq__10217_10238__$1 = temp__4425__auto___10237;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10217_10238__$1)) {
          var c__4844__auto___10239 = cljs.core.chunk_first.call(null, seq__10217_10238__$1);
          var G__10240 = cljs.core.chunk_rest.call(null, seq__10217_10238__$1);
          var G__10241 = c__4844__auto___10239;
          var G__10242 = cljs.core.count.call(null, c__4844__auto___10239);
          var G__10243 = 0;
          seq__10217_10228 = G__10240;
          chunk__10218_10229 = G__10241;
          count__10219_10230 = G__10242;
          i__10220_10231 = G__10243;
          continue;
        } else {
          var param_10244 = cljs.core.first.call(null, seq__10217_10238__$1);
          cljs.compiler.emit.call(null, param_10244);
          if (cljs.core._EQ_.call(null, param_10244, cljs.core.last.call(null, params))) {
          } else {
            cljs.compiler.emits.call(null, ",");
          }
          var G__10245 = cljs.core.next.call(null, seq__10217_10238__$1);
          var G__10246 = null;
          var G__10247 = 0;
          var G__10248 = 0;
          seq__10217_10228 = G__10245;
          chunk__10218_10229 = G__10246;
          count__10219_10230 = G__10247;
          i__10220_10231 = G__10248;
          continue;
        }
      } else {
      }
    }
    break;
  }
  cljs.compiler.emitln.call(null, "){");
  if (cljs.core.truth_(recurs)) {
    cljs.compiler.emitln.call(null, "while(true){");
  } else {
  }
  cljs.compiler.emits.call(null, expr);
  if (cljs.core.truth_(recurs)) {
    cljs.compiler.emitln.call(null, "break;");
    cljs.compiler.emitln.call(null, "}");
  } else {
  }
  cljs.compiler.emitln.call(null, "};");
  cljs.compiler.emitln.call(null, "var ", mname_10226, " = function (", cljs.compiler.comma_sep.call(null, cljs.core.truth_(variadic) ? cljs.core.concat.call(null, cljs.core.butlast.call(null, params), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "var_args", "var_args", 1214280389, null)], null)) : params), "){");
  if (cljs.core.truth_(type)) {
    cljs.compiler.emitln.call(null, "var self__ = this;");
  } else {
  }
  if (cljs.core.truth_(variadic)) {
    cljs.compiler.emits.call(null, "var ");
    cljs.compiler.emit.call(null, cljs.core.last.call(null, params));
    cljs.compiler.emitln.call(null, " = null;");
    cljs.compiler.emitln.call(null, "if (arguments.length > ", cljs.core.count.call(null, params) - 1, ") {");
    var a_10249 = cljs.compiler.emit_arguments_to_array.call(null, cljs.core.count.call(null, params) - 1);
    cljs.compiler.emitln.call(null, "  ", cljs.core.last.call(null, params), " = new cljs.core.IndexedSeq(", a_10249, ",0);");
    cljs.compiler.emitln.call(null, "} ");
  } else {
  }
  cljs.compiler.emits.call(null, "return ", delegate_name_10227, ".call(this,");
  var seq__10221_10250 = cljs.core.seq.call(null, params);
  var chunk__10222_10251 = null;
  var count__10223_10252 = 0;
  var i__10224_10253 = 0;
  while (true) {
    if (i__10224_10253 < count__10223_10252) {
      var param_10254 = cljs.core._nth.call(null, chunk__10222_10251, i__10224_10253);
      cljs.compiler.emit.call(null, param_10254);
      if (cljs.core._EQ_.call(null, param_10254, cljs.core.last.call(null, params))) {
      } else {
        cljs.compiler.emits.call(null, ",");
      }
      var G__10255 = seq__10221_10250;
      var G__10256 = chunk__10222_10251;
      var G__10257 = count__10223_10252;
      var G__10258 = i__10224_10253 + 1;
      seq__10221_10250 = G__10255;
      chunk__10222_10251 = G__10256;
      count__10223_10252 = G__10257;
      i__10224_10253 = G__10258;
      continue;
    } else {
      var temp__4425__auto___10259 = cljs.core.seq.call(null, seq__10221_10250);
      if (temp__4425__auto___10259) {
        var seq__10221_10260__$1 = temp__4425__auto___10259;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10221_10260__$1)) {
          var c__4844__auto___10261 = cljs.core.chunk_first.call(null, seq__10221_10260__$1);
          var G__10262 = cljs.core.chunk_rest.call(null, seq__10221_10260__$1);
          var G__10263 = c__4844__auto___10261;
          var G__10264 = cljs.core.count.call(null, c__4844__auto___10261);
          var G__10265 = 0;
          seq__10221_10250 = G__10262;
          chunk__10222_10251 = G__10263;
          count__10223_10252 = G__10264;
          i__10224_10253 = G__10265;
          continue;
        } else {
          var param_10266 = cljs.core.first.call(null, seq__10221_10260__$1);
          cljs.compiler.emit.call(null, param_10266);
          if (cljs.core._EQ_.call(null, param_10266, cljs.core.last.call(null, params))) {
          } else {
            cljs.compiler.emits.call(null, ",");
          }
          var G__10267 = cljs.core.next.call(null, seq__10221_10260__$1);
          var G__10268 = null;
          var G__10269 = 0;
          var G__10270 = 0;
          seq__10221_10250 = G__10267;
          chunk__10222_10251 = G__10268;
          count__10223_10252 = G__10269;
          i__10224_10253 = G__10270;
          continue;
        }
      } else {
      }
    }
    break;
  }
  cljs.compiler.emits.call(null, ");");
  cljs.compiler.emitln.call(null, "};");
  cljs.compiler.emitln.call(null, mname_10226, ".cljs$lang$maxFixedArity = ", max_fixed_arity, ";");
  cljs.compiler.emits.call(null, mname_10226, ".cljs$lang$applyTo = ");
  cljs.compiler.emit_apply_to.call(null, cljs.core.assoc.call(null, f, new cljs.core.Keyword(null, "name", "name", 1843675177), name_10225__$1));
  cljs.compiler.emitln.call(null, ";");
  cljs.compiler.emitln.call(null, mname_10226, ".cljs$core$IFn$_invoke$arity$variadic = ", delegate_name_10227, ";");
  cljs.compiler.emitln.call(null, "return ", mname_10226, ";");
  cljs.compiler.emitln.call(null, "})()");
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
};
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "fn", "fn", -1175266204), function(p__10274) {
  var map__10275 = p__10274;
  var map__10275__$1 = (!(map__10275 == null) ? map__10275.cljs$lang$protocol_mask$partition0$ & 64 || map__10275.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10275) : map__10275;
  var name = cljs.core.get.call(null, map__10275__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var env = cljs.core.get.call(null, map__10275__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var methods$ = cljs.core.get.call(null, map__10275__$1, new cljs.core.Keyword(null, "methods", "methods", 453930866));
  var max_fixed_arity = cljs.core.get.call(null, map__10275__$1, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543));
  var variadic = cljs.core.get.call(null, map__10275__$1, new cljs.core.Keyword(null, "variadic", "variadic", 882626057));
  var recur_frames = cljs.core.get.call(null, map__10275__$1, new cljs.core.Keyword(null, "recur-frames", "recur-frames", -307205196));
  var loop_lets = cljs.core.get.call(null, map__10275__$1, new cljs.core.Keyword(null, "loop-lets", "loop-lets", 2036794185));
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "statement", "statement", -32780863), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
    return null;
  } else {
    var loop_locals = cljs.core.seq.call(null, cljs.core.map.call(null, cljs.compiler.munge, cljs.core.concat.call(null, cljs.core.mapcat.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.filter.call(null, function(map__10275, map__10275__$1, name, env, methods$, max_fixed_arity, variadic, recur_frames, loop_lets) {
      return function(p1__10271_SHARP_) {
        var and__4048__auto__ = p1__10271_SHARP_;
        if (cljs.core.truth_(and__4048__auto__)) {
          return cljs.core.deref.call(null, (new cljs.core.Keyword(null, "flag", "flag", 1088647881)).cljs$core$IFn$_invoke$arity$1(p1__10271_SHARP_));
        } else {
          return and__4048__auto__;
        }
      };
    }(map__10275, map__10275__$1, name, env, methods$, max_fixed_arity, variadic, recur_frames, loop_lets), recur_frames)), cljs.core.mapcat.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), loop_lets))));
    if (loop_locals) {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
        cljs.compiler.emits.call(null, "return ");
      } else {
      }
      cljs.compiler.emitln.call(null, "((function (", cljs.compiler.comma_sep.call(null, cljs.core.map.call(null, cljs.compiler.munge, loop_locals)), "){");
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
      } else {
        cljs.compiler.emits.call(null, "return ");
      }
    } else {
    }
    if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, methods$))) {
      if (cljs.core.truth_(variadic)) {
        cljs.compiler.emit_variadic_fn_method.call(null, cljs.core.assoc.call(null, cljs.core.first.call(null, methods$), new cljs.core.Keyword(null, "name", "name", 1843675177), name));
      } else {
        cljs.compiler.emit_fn_method.call(null, cljs.core.assoc.call(null, cljs.core.first.call(null, methods$), new cljs.core.Keyword(null, "name", "name", 1843675177), name));
      }
    } else {
      var name_10296__$1 = function() {
        var or__4060__auto__ = name;
        if (cljs.core.truth_(or__4060__auto__)) {
          return or__4060__auto__;
        } else {
          return cljs.core.gensym.call(null);
        }
      }();
      var mname_10297 = cljs.compiler.munge.call(null, name_10296__$1);
      var maxparams_10298 = cljs.core.apply.call(null, cljs.core.max_key, cljs.core.count, cljs.core.map.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), methods$));
      var mmap_10299 = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(name_10296__$1, mname_10297, maxparams_10298, loop_locals, map__10275, map__10275__$1, name, env, methods$, max_fixed_arity, variadic, recur_frames, loop_lets) {
        return function(method) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.compiler.munge.call(null, cljs.core.symbol.call(null, [cljs.core.str(mname_10297), cljs.core.str("__"), cljs.core.str(cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(method)))].join(""))), method], null);
        };
      }(name_10296__$1, mname_10297, maxparams_10298, loop_locals, map__10275, map__10275__$1, name, env, methods$, max_fixed_arity, variadic, recur_frames, loop_lets), methods$));
      var ms_10300 = cljs.core.sort_by.call(null, function(name_10296__$1, mname_10297, maxparams_10298, mmap_10299, loop_locals, map__10275, map__10275__$1, name, env, methods$, max_fixed_arity, variadic, recur_frames, loop_lets) {
        return function(p1__10272_SHARP_) {
          return cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, p1__10272_SHARP_)));
        };
      }(name_10296__$1, mname_10297, maxparams_10298, mmap_10299, loop_locals, map__10275, map__10275__$1, name, env, methods$, max_fixed_arity, variadic, recur_frames, loop_lets), cljs.core.seq.call(null, mmap_10299));
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env))) {
        cljs.compiler.emits.call(null, "return ");
      } else {
      }
      cljs.compiler.emitln.call(null, "(function() {");
      cljs.compiler.emitln.call(null, "var ", mname_10297, " = null;");
      var seq__10277_10301 = cljs.core.seq.call(null, ms_10300);
      var chunk__10278_10302 = null;
      var count__10279_10303 = 0;
      var i__10280_10304 = 0;
      while (true) {
        if (i__10280_10304 < count__10279_10303) {
          var vec__10281_10305 = cljs.core._nth.call(null, chunk__10278_10302, i__10280_10304);
          var n_10306 = cljs.core.nth.call(null, vec__10281_10305, 0, null);
          var meth_10307 = cljs.core.nth.call(null, vec__10281_10305, 1, null);
          cljs.compiler.emits.call(null, "var ", n_10306, " = ");
          if (cljs.core.truth_((new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(meth_10307))) {
            cljs.compiler.emit_variadic_fn_method.call(null, meth_10307);
          } else {
            cljs.compiler.emit_fn_method.call(null, meth_10307);
          }
          cljs.compiler.emitln.call(null, ";");
          var G__10308 = seq__10277_10301;
          var G__10309 = chunk__10278_10302;
          var G__10310 = count__10279_10303;
          var G__10311 = i__10280_10304 + 1;
          seq__10277_10301 = G__10308;
          chunk__10278_10302 = G__10309;
          count__10279_10303 = G__10310;
          i__10280_10304 = G__10311;
          continue;
        } else {
          var temp__4425__auto___10312 = cljs.core.seq.call(null, seq__10277_10301);
          if (temp__4425__auto___10312) {
            var seq__10277_10313__$1 = temp__4425__auto___10312;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10277_10313__$1)) {
              var c__4844__auto___10314 = cljs.core.chunk_first.call(null, seq__10277_10313__$1);
              var G__10315 = cljs.core.chunk_rest.call(null, seq__10277_10313__$1);
              var G__10316 = c__4844__auto___10314;
              var G__10317 = cljs.core.count.call(null, c__4844__auto___10314);
              var G__10318 = 0;
              seq__10277_10301 = G__10315;
              chunk__10278_10302 = G__10316;
              count__10279_10303 = G__10317;
              i__10280_10304 = G__10318;
              continue;
            } else {
              var vec__10282_10319 = cljs.core.first.call(null, seq__10277_10313__$1);
              var n_10320 = cljs.core.nth.call(null, vec__10282_10319, 0, null);
              var meth_10321 = cljs.core.nth.call(null, vec__10282_10319, 1, null);
              cljs.compiler.emits.call(null, "var ", n_10320, " = ");
              if (cljs.core.truth_((new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(meth_10321))) {
                cljs.compiler.emit_variadic_fn_method.call(null, meth_10321);
              } else {
                cljs.compiler.emit_fn_method.call(null, meth_10321);
              }
              cljs.compiler.emitln.call(null, ";");
              var G__10322 = cljs.core.next.call(null, seq__10277_10313__$1);
              var G__10323 = null;
              var G__10324 = 0;
              var G__10325 = 0;
              seq__10277_10301 = G__10322;
              chunk__10278_10302 = G__10323;
              count__10279_10303 = G__10324;
              i__10280_10304 = G__10325;
              continue;
            }
          } else {
          }
        }
        break;
      }
      cljs.compiler.emitln.call(null, mname_10297, " = function(", cljs.compiler.comma_sep.call(null, cljs.core.truth_(variadic) ? cljs.core.concat.call(null, cljs.core.butlast.call(null, maxparams_10298), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "var_args", "var_args", 1214280389, null)], null)) : maxparams_10298), "){");
      if (cljs.core.truth_(variadic)) {
        cljs.compiler.emits.call(null, "var ");
        cljs.compiler.emit.call(null, cljs.core.last.call(null, maxparams_10298));
        cljs.compiler.emitln.call(null, " = var_args;");
      } else {
      }
      cljs.compiler.emitln.call(null, "switch(arguments.length){");
      var seq__10283_10326 = cljs.core.seq.call(null, ms_10300);
      var chunk__10284_10327 = null;
      var count__10285_10328 = 0;
      var i__10286_10329 = 0;
      while (true) {
        if (i__10286_10329 < count__10285_10328) {
          var vec__10287_10330 = cljs.core._nth.call(null, chunk__10284_10327, i__10286_10329);
          var n_10331 = cljs.core.nth.call(null, vec__10287_10330, 0, null);
          var meth_10332 = cljs.core.nth.call(null, vec__10287_10330, 1, null);
          if (cljs.core.truth_((new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(meth_10332))) {
            cljs.compiler.emitln.call(null, "default:");
            var restarg_10333 = cljs.compiler.munge.call(null, cljs.core.gensym.call(null));
            cljs.compiler.emitln.call(null, "var ", restarg_10333, " = null;");
            cljs.compiler.emitln.call(null, "if (arguments.length > ", max_fixed_arity, ") {");
            var a_10334 = cljs.compiler.emit_arguments_to_array.call(null, max_fixed_arity);
            cljs.compiler.emitln.call(null, restarg_10333, " = new cljs.core.IndexedSeq(", a_10334, ",0);");
            cljs.compiler.emitln.call(null, "}");
            cljs.compiler.emitln.call(null, "return ", n_10331, ".cljs$core$IFn$_invoke$arity$variadic(", cljs.compiler.comma_sep.call(null, cljs.core.butlast.call(null, maxparams_10298)), cljs.core.count.call(null, maxparams_10298) > 1 ? ", " : null, restarg_10333, ");");
          } else {
            var pcnt_10335 = cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(meth_10332));
            cljs.compiler.emitln.call(null, "case ", pcnt_10335, ":");
            cljs.compiler.emitln.call(null, "return ", n_10331, ".call(this", pcnt_10335 === 0 ? null : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.compiler.comma_sep.call(null, cljs.core.take.call(null, pcnt_10335, maxparams_10298))), ","), ");");
          }
          var G__10336 = seq__10283_10326;
          var G__10337 = chunk__10284_10327;
          var G__10338 = count__10285_10328;
          var G__10339 = i__10286_10329 + 1;
          seq__10283_10326 = G__10336;
          chunk__10284_10327 = G__10337;
          count__10285_10328 = G__10338;
          i__10286_10329 = G__10339;
          continue;
        } else {
          var temp__4425__auto___10340 = cljs.core.seq.call(null, seq__10283_10326);
          if (temp__4425__auto___10340) {
            var seq__10283_10341__$1 = temp__4425__auto___10340;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10283_10341__$1)) {
              var c__4844__auto___10342 = cljs.core.chunk_first.call(null, seq__10283_10341__$1);
              var G__10343 = cljs.core.chunk_rest.call(null, seq__10283_10341__$1);
              var G__10344 = c__4844__auto___10342;
              var G__10345 = cljs.core.count.call(null, c__4844__auto___10342);
              var G__10346 = 0;
              seq__10283_10326 = G__10343;
              chunk__10284_10327 = G__10344;
              count__10285_10328 = G__10345;
              i__10286_10329 = G__10346;
              continue;
            } else {
              var vec__10288_10347 = cljs.core.first.call(null, seq__10283_10341__$1);
              var n_10348 = cljs.core.nth.call(null, vec__10288_10347, 0, null);
              var meth_10349 = cljs.core.nth.call(null, vec__10288_10347, 1, null);
              if (cljs.core.truth_((new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(meth_10349))) {
                cljs.compiler.emitln.call(null, "default:");
                var restarg_10350 = cljs.compiler.munge.call(null, cljs.core.gensym.call(null));
                cljs.compiler.emitln.call(null, "var ", restarg_10350, " = null;");
                cljs.compiler.emitln.call(null, "if (arguments.length > ", max_fixed_arity, ") {");
                var a_10351 = cljs.compiler.emit_arguments_to_array.call(null, max_fixed_arity);
                cljs.compiler.emitln.call(null, restarg_10350, " = new cljs.core.IndexedSeq(", a_10351, ",0);");
                cljs.compiler.emitln.call(null, "}");
                cljs.compiler.emitln.call(null, "return ", n_10348, ".cljs$core$IFn$_invoke$arity$variadic(", cljs.compiler.comma_sep.call(null, cljs.core.butlast.call(null, maxparams_10298)), cljs.core.count.call(null, maxparams_10298) > 1 ? ", " : null, restarg_10350, ");");
              } else {
                var pcnt_10352 = cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(meth_10349));
                cljs.compiler.emitln.call(null, "case ", pcnt_10352, ":");
                cljs.compiler.emitln.call(null, "return ", n_10348, ".call(this", pcnt_10352 === 0 ? null : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.compiler.comma_sep.call(null, cljs.core.take.call(null, pcnt_10352, maxparams_10298))), ","), ");");
              }
              var G__10353 = cljs.core.next.call(null, seq__10283_10341__$1);
              var G__10354 = null;
              var G__10355 = 0;
              var G__10356 = 0;
              seq__10283_10326 = G__10353;
              chunk__10284_10327 = G__10354;
              count__10285_10328 = G__10355;
              i__10286_10329 = G__10356;
              continue;
            }
          } else {
          }
        }
        break;
      }
      cljs.compiler.emitln.call(null, "}");
      cljs.compiler.emitln.call(null, "throw(new Error('Invalid arity: ' + arguments.length));");
      cljs.compiler.emitln.call(null, "};");
      if (cljs.core.truth_(variadic)) {
        cljs.compiler.emitln.call(null, mname_10297, ".cljs$lang$maxFixedArity = ", max_fixed_arity, ";");
        cljs.compiler.emitln.call(null, mname_10297, ".cljs$lang$applyTo = ", cljs.core.some.call(null, function(name_10296__$1, mname_10297, maxparams_10298, mmap_10299, ms_10300, loop_locals, map__10275, map__10275__$1, name, env, methods$, max_fixed_arity, variadic, recur_frames, loop_lets) {
          return function(p1__10273_SHARP_) {
            var vec__10289 = p1__10273_SHARP_;
            var n = cljs.core.nth.call(null, vec__10289, 0, null);
            var m = cljs.core.nth.call(null, vec__10289, 1, null);
            if (cljs.core.truth_((new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(m))) {
              return n;
            } else {
              return null;
            }
          };
        }(name_10296__$1, mname_10297, maxparams_10298, mmap_10299, ms_10300, loop_locals, map__10275, map__10275__$1, name, env, methods$, max_fixed_arity, variadic, recur_frames, loop_lets), ms_10300), ".cljs$lang$applyTo;");
      } else {
      }
      var seq__10290_10357 = cljs.core.seq.call(null, ms_10300);
      var chunk__10291_10358 = null;
      var count__10292_10359 = 0;
      var i__10293_10360 = 0;
      while (true) {
        if (i__10293_10360 < count__10292_10359) {
          var vec__10294_10361 = cljs.core._nth.call(null, chunk__10291_10358, i__10293_10360);
          var n_10362 = cljs.core.nth.call(null, vec__10294_10361, 0, null);
          var meth_10363 = cljs.core.nth.call(null, vec__10294_10361, 1, null);
          var c_10364 = cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(meth_10363));
          if (cljs.core.truth_((new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(meth_10363))) {
            cljs.compiler.emitln.call(null, mname_10297, ".cljs$core$IFn$_invoke$arity$variadic = ", n_10362, ".cljs$core$IFn$_invoke$arity$variadic;");
          } else {
            cljs.compiler.emitln.call(null, mname_10297, ".cljs$core$IFn$_invoke$arity$", c_10364, " = ", n_10362, ";");
          }
          var G__10365 = seq__10290_10357;
          var G__10366 = chunk__10291_10358;
          var G__10367 = count__10292_10359;
          var G__10368 = i__10293_10360 + 1;
          seq__10290_10357 = G__10365;
          chunk__10291_10358 = G__10366;
          count__10292_10359 = G__10367;
          i__10293_10360 = G__10368;
          continue;
        } else {
          var temp__4425__auto___10369 = cljs.core.seq.call(null, seq__10290_10357);
          if (temp__4425__auto___10369) {
            var seq__10290_10370__$1 = temp__4425__auto___10369;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10290_10370__$1)) {
              var c__4844__auto___10371 = cljs.core.chunk_first.call(null, seq__10290_10370__$1);
              var G__10372 = cljs.core.chunk_rest.call(null, seq__10290_10370__$1);
              var G__10373 = c__4844__auto___10371;
              var G__10374 = cljs.core.count.call(null, c__4844__auto___10371);
              var G__10375 = 0;
              seq__10290_10357 = G__10372;
              chunk__10291_10358 = G__10373;
              count__10292_10359 = G__10374;
              i__10293_10360 = G__10375;
              continue;
            } else {
              var vec__10295_10376 = cljs.core.first.call(null, seq__10290_10370__$1);
              var n_10377 = cljs.core.nth.call(null, vec__10295_10376, 0, null);
              var meth_10378 = cljs.core.nth.call(null, vec__10295_10376, 1, null);
              var c_10379 = cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(meth_10378));
              if (cljs.core.truth_((new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(meth_10378))) {
                cljs.compiler.emitln.call(null, mname_10297, ".cljs$core$IFn$_invoke$arity$variadic = ", n_10377, ".cljs$core$IFn$_invoke$arity$variadic;");
              } else {
                cljs.compiler.emitln.call(null, mname_10297, ".cljs$core$IFn$_invoke$arity$", c_10379, " = ", n_10377, ";");
              }
              var G__10380 = cljs.core.next.call(null, seq__10290_10370__$1);
              var G__10381 = null;
              var G__10382 = 0;
              var G__10383 = 0;
              seq__10290_10357 = G__10380;
              chunk__10291_10358 = G__10381;
              count__10292_10359 = G__10382;
              i__10293_10360 = G__10383;
              continue;
            }
          } else {
          }
        }
        break;
      }
      cljs.compiler.emitln.call(null, "return ", mname_10297, ";");
      cljs.compiler.emitln.call(null, "})()");
    }
    if (loop_locals) {
      return cljs.compiler.emitln.call(null, ";})(", cljs.compiler.comma_sep.call(null, loop_locals), "))");
    } else {
      return null;
    }
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "do", "do", 46310725), function(p__10384) {
  var map__10385 = p__10384;
  var map__10385__$1 = (!(map__10385 == null) ? map__10385.cljs$lang$protocol_mask$partition0$ & 64 || map__10385.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10385) : map__10385;
  var statements = cljs.core.get.call(null, map__10385__$1, new cljs.core.Keyword(null, "statements", "statements", 600349855));
  var ret = cljs.core.get.call(null, map__10385__$1, new cljs.core.Keyword(null, "ret", "ret", -468222814));
  var env = cljs.core.get.call(null, map__10385__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env);
  if (cljs.core.truth_(function() {
    var and__4048__auto__ = statements;
    if (cljs.core.truth_(and__4048__auto__)) {
      return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context);
    } else {
      return and__4048__auto__;
    }
  }())) {
    cljs.compiler.emitln.call(null, "(function (){");
  } else {
  }
  var seq__10387_10391 = cljs.core.seq.call(null, statements);
  var chunk__10388_10392 = null;
  var count__10389_10393 = 0;
  var i__10390_10394 = 0;
  while (true) {
    if (i__10390_10394 < count__10389_10393) {
      var s_10395 = cljs.core._nth.call(null, chunk__10388_10392, i__10390_10394);
      cljs.compiler.emitln.call(null, s_10395);
      var G__10396 = seq__10387_10391;
      var G__10397 = chunk__10388_10392;
      var G__10398 = count__10389_10393;
      var G__10399 = i__10390_10394 + 1;
      seq__10387_10391 = G__10396;
      chunk__10388_10392 = G__10397;
      count__10389_10393 = G__10398;
      i__10390_10394 = G__10399;
      continue;
    } else {
      var temp__4425__auto___10400 = cljs.core.seq.call(null, seq__10387_10391);
      if (temp__4425__auto___10400) {
        var seq__10387_10401__$1 = temp__4425__auto___10400;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10387_10401__$1)) {
          var c__4844__auto___10402 = cljs.core.chunk_first.call(null, seq__10387_10401__$1);
          var G__10403 = cljs.core.chunk_rest.call(null, seq__10387_10401__$1);
          var G__10404 = c__4844__auto___10402;
          var G__10405 = cljs.core.count.call(null, c__4844__auto___10402);
          var G__10406 = 0;
          seq__10387_10391 = G__10403;
          chunk__10388_10392 = G__10404;
          count__10389_10393 = G__10405;
          i__10390_10394 = G__10406;
          continue;
        } else {
          var s_10407 = cljs.core.first.call(null, seq__10387_10401__$1);
          cljs.compiler.emitln.call(null, s_10407);
          var G__10408 = cljs.core.next.call(null, seq__10387_10401__$1);
          var G__10409 = null;
          var G__10410 = 0;
          var G__10411 = 0;
          seq__10387_10391 = G__10408;
          chunk__10388_10392 = G__10409;
          count__10389_10393 = G__10410;
          i__10390_10394 = G__10411;
          continue;
        }
      } else {
      }
    }
    break;
  }
  cljs.compiler.emit.call(null, ret);
  if (cljs.core.truth_(function() {
    var and__4048__auto__ = statements;
    if (cljs.core.truth_(and__4048__auto__)) {
      return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context);
    } else {
      return and__4048__auto__;
    }
  }())) {
    return cljs.compiler.emitln.call(null, "})()");
  } else {
    return null;
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "try", "try", 1380742522), function(p__10412) {
  var map__10413 = p__10412;
  var map__10413__$1 = (!(map__10413 == null) ? map__10413.cljs$lang$protocol_mask$partition0$ & 64 || map__10413.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10413) : map__10413;
  var env = cljs.core.get.call(null, map__10413__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var try$ = cljs.core.get.call(null, map__10413__$1, new cljs.core.Keyword(null, "try", "try", 1380742522));
  var catch$ = cljs.core.get.call(null, map__10413__$1, new cljs.core.Keyword(null, "catch", "catch", 1038065524));
  var name = cljs.core.get.call(null, map__10413__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var finally$ = cljs.core.get.call(null, map__10413__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env);
  if (cljs.core.truth_(function() {
    var or__4060__auto__ = name;
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return finally$;
    }
  }())) {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context)) {
      cljs.compiler.emits.call(null, "(function (){");
    } else {
    }
    cljs.compiler.emits.call(null, "try{", try$, "}");
    if (cljs.core.truth_(name)) {
      cljs.compiler.emits.call(null, "catch (", cljs.compiler.munge.call(null, name), "){", catch$, "}");
    } else {
    }
    if (cljs.core.truth_(finally$)) {
      if (cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "constant", "constant", -379609303), (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(finally$))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("finally block cannot contain constant"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not=", "not=", 1466536204, null), new cljs.core.Keyword(null, "constant", "constant", -379609303), cljs.core.list(new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Symbol(null, "finally", "finally", -1065347064, null)))))].join(""));
      }
      cljs.compiler.emits.call(null, "finally {", finally$, "}");
    } else {
    }
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context)) {
      return cljs.compiler.emits.call(null, "})()");
    } else {
      return null;
    }
  } else {
    return cljs.compiler.emits.call(null, try$);
  }
});
cljs.compiler.emit_let = function cljs$compiler$emit_let(p__10415, is_loop) {
  var map__10427 = p__10415;
  var map__10427__$1 = (!(map__10427 == null) ? map__10427.cljs$lang$protocol_mask$partition0$ & 64 || map__10427.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10427) : map__10427;
  var bindings = cljs.core.get.call(null, map__10427__$1, new cljs.core.Keyword(null, "bindings", "bindings", 1271397192));
  var expr = cljs.core.get.call(null, map__10427__$1, new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var env = cljs.core.get.call(null, map__10427__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env);
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context)) {
    cljs.compiler.emits.call(null, "(function (){");
  } else {
  }
  var _STAR_lexical_renames_STAR_10429_10438 = cljs.compiler._STAR_lexical_renames_STAR_;
  cljs.compiler._STAR_lexical_renames_STAR_ = cljs.core.into.call(null, cljs.compiler._STAR_lexical_renames_STAR_, cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "statement", "statement", -32780863), context) ? cljs.core.map.call(null, function(_STAR_lexical_renames_STAR_10429_10438, context, map__10427, map__10427__$1, bindings, expr, env) {
    return function(binding) {
      var name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(binding);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._hash.call(null, name), cljs.core.gensym.call(null, [cljs.core.str(name), cljs.core.str("-")].join(""))], null);
    };
  }(_STAR_lexical_renames_STAR_10429_10438, context, map__10427, map__10427__$1, bindings, expr, env), bindings) : null);
  try {
    var seq__10430_10439 = cljs.core.seq.call(null, bindings);
    var chunk__10431_10440 = null;
    var count__10432_10441 = 0;
    var i__10433_10442 = 0;
    while (true) {
      if (i__10433_10442 < count__10432_10441) {
        var map__10434_10443 = cljs.core._nth.call(null, chunk__10431_10440, i__10433_10442);
        var map__10434_10444__$1 = (!(map__10434_10443 == null) ? map__10434_10443.cljs$lang$protocol_mask$partition0$ & 64 || map__10434_10443.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10434_10443) : map__10434_10443;
        var binding_10445 = map__10434_10444__$1;
        var init_10446 = cljs.core.get.call(null, map__10434_10444__$1, new cljs.core.Keyword(null, "init", "init", -1875481434));
        cljs.compiler.emits.call(null, "var ");
        cljs.compiler.emit.call(null, binding_10445);
        cljs.compiler.emitln.call(null, " = ", init_10446, ";");
        var G__10447 = seq__10430_10439;
        var G__10448 = chunk__10431_10440;
        var G__10449 = count__10432_10441;
        var G__10450 = i__10433_10442 + 1;
        seq__10430_10439 = G__10447;
        chunk__10431_10440 = G__10448;
        count__10432_10441 = G__10449;
        i__10433_10442 = G__10450;
        continue;
      } else {
        var temp__4425__auto___10451 = cljs.core.seq.call(null, seq__10430_10439);
        if (temp__4425__auto___10451) {
          var seq__10430_10452__$1 = temp__4425__auto___10451;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10430_10452__$1)) {
            var c__4844__auto___10453 = cljs.core.chunk_first.call(null, seq__10430_10452__$1);
            var G__10454 = cljs.core.chunk_rest.call(null, seq__10430_10452__$1);
            var G__10455 = c__4844__auto___10453;
            var G__10456 = cljs.core.count.call(null, c__4844__auto___10453);
            var G__10457 = 0;
            seq__10430_10439 = G__10454;
            chunk__10431_10440 = G__10455;
            count__10432_10441 = G__10456;
            i__10433_10442 = G__10457;
            continue;
          } else {
            var map__10436_10458 = cljs.core.first.call(null, seq__10430_10452__$1);
            var map__10436_10459__$1 = (!(map__10436_10458 == null) ? map__10436_10458.cljs$lang$protocol_mask$partition0$ & 64 || map__10436_10458.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10436_10458) : map__10436_10458;
            var binding_10460 = map__10436_10459__$1;
            var init_10461 = cljs.core.get.call(null, map__10436_10459__$1, new cljs.core.Keyword(null, "init", "init", -1875481434));
            cljs.compiler.emits.call(null, "var ");
            cljs.compiler.emit.call(null, binding_10460);
            cljs.compiler.emitln.call(null, " = ", init_10461, ";");
            var G__10462 = cljs.core.next.call(null, seq__10430_10452__$1);
            var G__10463 = null;
            var G__10464 = 0;
            var G__10465 = 0;
            seq__10430_10439 = G__10462;
            chunk__10431_10440 = G__10463;
            count__10432_10441 = G__10464;
            i__10433_10442 = G__10465;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (cljs.core.truth_(is_loop)) {
      cljs.compiler.emitln.call(null, "while(true){");
    } else {
    }
    cljs.compiler.emits.call(null, expr);
    if (cljs.core.truth_(is_loop)) {
      cljs.compiler.emitln.call(null, "break;");
      cljs.compiler.emitln.call(null, "}");
    } else {
    }
  } finally {
    cljs.compiler._STAR_lexical_renames_STAR_ = _STAR_lexical_renames_STAR_10429_10438;
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context)) {
    return cljs.compiler.emits.call(null, "})()");
  } else {
    return null;
  }
};
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "let", "let", -1282412701), function(ast) {
  return cljs.compiler.emit_let.call(null, ast, false);
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "loop", "loop", -395552849), function(ast) {
  return cljs.compiler.emit_let.call(null, ast, true);
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "recur", "recur", -437573268), function(p__10466) {
  var map__10467 = p__10466;
  var map__10467__$1 = (!(map__10467 == null) ? map__10467.cljs$lang$protocol_mask$partition0$ & 64 || map__10467.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10467) : map__10467;
  var frame = cljs.core.get.call(null, map__10467__$1, new cljs.core.Keyword(null, "frame", "frame", -1711082588));
  var exprs = cljs.core.get.call(null, map__10467__$1, new cljs.core.Keyword(null, "exprs", "exprs", 1795829094));
  var env = cljs.core.get.call(null, map__10467__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var temps = cljs.core.vec.call(null, cljs.core.take.call(null, cljs.core.count.call(null, exprs), cljs.core.repeatedly.call(null, cljs.core.gensym)));
  var params = (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(frame);
  var n__4944__auto___10469 = cljs.core.count.call(null, exprs);
  var i_10470 = 0;
  while (true) {
    if (i_10470 < n__4944__auto___10469) {
      cljs.compiler.emitln.call(null, "var ", temps.call(null, i_10470), " = ", exprs.call(null, i_10470), ";");
      var G__10471 = i_10470 + 1;
      i_10470 = G__10471;
      continue;
    } else {
    }
    break;
  }
  var n__4944__auto___10472 = cljs.core.count.call(null, exprs);
  var i_10473 = 0;
  while (true) {
    if (i_10473 < n__4944__auto___10472) {
      cljs.compiler.emitln.call(null, cljs.compiler.munge.call(null, params.call(null, i_10473)), " = ", temps.call(null, i_10473), ";");
      var G__10474 = i_10473 + 1;
      i_10473 = G__10474;
      continue;
    } else {
    }
    break;
  }
  return cljs.compiler.emitln.call(null, "continue;");
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "letfn", "letfn", -2121022354), function(p__10475) {
  var map__10476 = p__10475;
  var map__10476__$1 = (!(map__10476 == null) ? map__10476.cljs$lang$protocol_mask$partition0$ & 64 || map__10476.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10476) : map__10476;
  var bindings = cljs.core.get.call(null, map__10476__$1, new cljs.core.Keyword(null, "bindings", "bindings", 1271397192));
  var expr = cljs.core.get.call(null, map__10476__$1, new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var env = cljs.core.get.call(null, map__10476__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env);
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context)) {
    cljs.compiler.emits.call(null, "(function (){");
  } else {
  }
  var seq__10478_10486 = cljs.core.seq.call(null, bindings);
  var chunk__10479_10487 = null;
  var count__10480_10488 = 0;
  var i__10481_10489 = 0;
  while (true) {
    if (i__10481_10489 < count__10480_10488) {
      var map__10482_10490 = cljs.core._nth.call(null, chunk__10479_10487, i__10481_10489);
      var map__10482_10491__$1 = (!(map__10482_10490 == null) ? map__10482_10490.cljs$lang$protocol_mask$partition0$ & 64 || map__10482_10490.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10482_10490) : map__10482_10490;
      var binding_10492 = map__10482_10491__$1;
      var init_10493 = cljs.core.get.call(null, map__10482_10491__$1, new cljs.core.Keyword(null, "init", "init", -1875481434));
      cljs.compiler.emitln.call(null, "var ", cljs.compiler.munge.call(null, binding_10492), " = ", init_10493, ";");
      var G__10494 = seq__10478_10486;
      var G__10495 = chunk__10479_10487;
      var G__10496 = count__10480_10488;
      var G__10497 = i__10481_10489 + 1;
      seq__10478_10486 = G__10494;
      chunk__10479_10487 = G__10495;
      count__10480_10488 = G__10496;
      i__10481_10489 = G__10497;
      continue;
    } else {
      var temp__4425__auto___10498 = cljs.core.seq.call(null, seq__10478_10486);
      if (temp__4425__auto___10498) {
        var seq__10478_10499__$1 = temp__4425__auto___10498;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10478_10499__$1)) {
          var c__4844__auto___10500 = cljs.core.chunk_first.call(null, seq__10478_10499__$1);
          var G__10501 = cljs.core.chunk_rest.call(null, seq__10478_10499__$1);
          var G__10502 = c__4844__auto___10500;
          var G__10503 = cljs.core.count.call(null, c__4844__auto___10500);
          var G__10504 = 0;
          seq__10478_10486 = G__10501;
          chunk__10479_10487 = G__10502;
          count__10480_10488 = G__10503;
          i__10481_10489 = G__10504;
          continue;
        } else {
          var map__10484_10505 = cljs.core.first.call(null, seq__10478_10499__$1);
          var map__10484_10506__$1 = (!(map__10484_10505 == null) ? map__10484_10505.cljs$lang$protocol_mask$partition0$ & 64 || map__10484_10505.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10484_10505) : map__10484_10505;
          var binding_10507 = map__10484_10506__$1;
          var init_10508 = cljs.core.get.call(null, map__10484_10506__$1, new cljs.core.Keyword(null, "init", "init", -1875481434));
          cljs.compiler.emitln.call(null, "var ", cljs.compiler.munge.call(null, binding_10507), " = ", init_10508, ";");
          var G__10509 = cljs.core.next.call(null, seq__10478_10499__$1);
          var G__10510 = null;
          var G__10511 = 0;
          var G__10512 = 0;
          seq__10478_10486 = G__10509;
          chunk__10479_10487 = G__10510;
          count__10480_10488 = G__10511;
          i__10481_10489 = G__10512;
          continue;
        }
      } else {
      }
    }
    break;
  }
  cljs.compiler.emits.call(null, expr);
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context)) {
    return cljs.compiler.emits.call(null, "})()");
  } else {
    return null;
  }
});
cljs.compiler.protocol_prefix = function cljs$compiler$protocol_prefix(psym) {
  return cljs.core.symbol.call(null, [cljs.core.str([cljs.core.str(psym)].join("").replace(".", "$").replace("/", "$")), cljs.core.str("$")].join(""));
};
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "invoke", "invoke", 1145927159), function(p__10515) {
  var map__10516 = p__10515;
  var map__10516__$1 = (!(map__10516 == null) ? map__10516.cljs$lang$protocol_mask$partition0$ & 64 || map__10516.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10516) : map__10516;
  var expr = map__10516__$1;
  var f = cljs.core.get.call(null, map__10516__$1, new cljs.core.Keyword(null, "f", "f", -1597136552));
  var args = cljs.core.get.call(null, map__10516__$1, new cljs.core.Keyword(null, "args", "args", 1315556576));
  var env = cljs.core.get.call(null, map__10516__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var info = (new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(f);
  var fn_QMARK_ = function() {
    var and__4048__auto__ = cljs.analyzer._STAR_cljs_static_fns_STAR_;
    if (cljs.core.truth_(and__4048__auto__)) {
      var and__4048__auto____$1 = cljs.core.not.call(null, (new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571)).cljs$core$IFn$_invoke$arity$1(info));
      if (and__4048__auto____$1) {
        return (new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730)).cljs$core$IFn$_invoke$arity$1(info);
      } else {
        return and__4048__auto____$1;
      }
    } else {
      return and__4048__auto__;
    }
  }();
  var protocol = (new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info);
  var tag = cljs.analyzer.infer_tag.call(null, env, cljs.core.first.call(null, (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(expr)));
  var proto_QMARK_ = function() {
    var and__4048__auto__ = protocol;
    if (cljs.core.truth_(and__4048__auto__)) {
      var and__4048__auto____$1 = tag;
      if (cljs.core.truth_(and__4048__auto____$1)) {
        var or__4060__auto__ = function() {
          var and__4048__auto____$2 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
          if (cljs.core.truth_(and__4048__auto____$2)) {
            var and__4048__auto____$3 = protocol;
            if (cljs.core.truth_(and__4048__auto____$3)) {
              return cljs.core._EQ_.call(null, tag, new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null));
            } else {
              return and__4048__auto____$3;
            }
          } else {
            return and__4048__auto____$2;
          }
        }();
        if (cljs.core.truth_(or__4060__auto__)) {
          return or__4060__auto__;
        } else {
          var and__4048__auto____$2 = function() {
            var or__4060__auto____$1 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
            if (cljs.core.truth_(or__4060__auto____$1)) {
              return or__4060__auto____$1;
            } else {
              return (new cljs.core.Keyword(null, "protocol-inline", "protocol-inline", 1550487556)).cljs$core$IFn$_invoke$arity$1(env);
            }
          }();
          if (cljs.core.truth_(and__4048__auto____$2)) {
            var or__4060__auto____$1 = cljs.core._EQ_.call(null, protocol, tag);
            if (or__4060__auto____$1) {
              return or__4060__auto____$1;
            } else {
              var and__4048__auto____$3 = !cljs.core.set_QMARK_.call(null, tag);
              if (and__4048__auto____$3) {
                var and__4048__auto____$4 = cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Symbol(null, "clj", "clj", 980036099, null), null, new cljs.core.Symbol(null, "any", "any", -948528346, null), null, new cljs.core.Symbol(null, "clj-or-nil", "clj-or-nil", -2008798668, null), null], null), null)).call(null, tag));
                if (and__4048__auto____$4) {
                  var temp__4425__auto__ = (new cljs.core.Keyword(null, "protocols", "protocols", -5615896)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_existing_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), tag));
                  if (cljs.core.truth_(temp__4425__auto__)) {
                    var ps = temp__4425__auto__;
                    return ps.call(null, protocol);
                  } else {
                    return null;
                  }
                } else {
                  return and__4048__auto____$4;
                }
              } else {
                return and__4048__auto____$3;
              }
            }
          } else {
            return and__4048__auto____$2;
          }
        }
      } else {
        return and__4048__auto____$1;
      }
    } else {
      return and__4048__auto__;
    }
  }();
  var opt_not_QMARK_ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info), new cljs.core.Symbol("cljs.core", "not", "cljs.core/not", 100665144, null)) && cljs.core._EQ_.call(null, cljs.analyzer.infer_tag.call(null, env, cljs.core.first.call(null, (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(expr))), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null));
  var ns = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(info);
  var js_QMARK_ = cljs.core._EQ_.call(null, ns, new cljs.core.Symbol(null, "js", "js", -886355190, null)) || cljs.core._EQ_.call(null, ns, new cljs.core.Symbol(null, "Math", "Math", 2033287572, null));
  var goog_QMARK_ = cljs.core.truth_(ns) ? function() {
    var or__4060__auto__ = cljs.core._EQ_.call(null, ns, new cljs.core.Symbol(null, "goog", "goog", -70603925, null));
    if (or__4060__auto__) {
      return or__4060__auto__;
    } else {
      var temp__4425__auto__ = [cljs.core.str(ns)].join("");
      if (cljs.core.truth_(temp__4425__auto__)) {
        var ns_str = temp__4425__auto__;
        return cljs.core._EQ_.call(null, cljs.core.get.call(null, clojure.string.split.call(null, ns_str, /\./), 0, null), "goog");
      } else {
        return null;
      }
    }
  }() : null;
  var keyword_QMARK_ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(f), new cljs.core.Keyword(null, "constant", "constant", -379609303)) && (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(f) instanceof cljs.core.Keyword;
  var vec__10518 = cljs.core.truth_(fn_QMARK_) ? function() {
    var arity = cljs.core.count.call(null, args);
    var variadic_QMARK_ = (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(info);
    var mps = (new cljs.core.Keyword(null, "method-params", "method-params", -980792179)).cljs$core$IFn$_invoke$arity$1(info);
    var mfa = (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(info);
    if (cljs.core.not.call(null, variadic_QMARK_) && cljs.core._EQ_.call(null, cljs.core.count.call(null, mps), 1)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f, null], null);
    } else {
      if (cljs.core.truth_(function() {
        var and__4048__auto__ = variadic_QMARK_;
        if (cljs.core.truth_(and__4048__auto__)) {
          return arity > mfa;
        } else {
          return and__4048__auto__;
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.update_in.call(null, f, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "info", "info", -317069002)], null), function(arity, variadic_QMARK_, mps, mfa, info, fn_QMARK_, protocol, tag, proto_QMARK_, opt_not_QMARK_, ns, js_QMARK_, goog_QMARK_, keyword_QMARK_, map__10516, map__10516__$1, expr, f, args, env) {
          return function(info__$1) {
            return cljs.core.update_in.call(null, cljs.core.assoc.call(null, info__$1, new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str(cljs.compiler.munge.call(null, info__$1)), cljs.core.str(".cljs$core$IFn$_invoke$arity$variadic")].join(""))), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "info", "info", -317069002)], null), function(arity, variadic_QMARK_, mps, mfa, info, fn_QMARK_, 
            protocol, tag, proto_QMARK_, opt_not_QMARK_, ns, js_QMARK_, goog_QMARK_, keyword_QMARK_, map__10516, map__10516__$1, expr, f, args, env) {
              return function(p1__10513_SHARP_) {
                return cljs.core.dissoc.call(null, cljs.core.dissoc.call(null, p1__10513_SHARP_, new cljs.core.Keyword(null, "shadow", "shadow", 873231803)), new cljs.core.Keyword(null, "fn-self-name", "fn-self-name", 1461143531));
              };
            }(arity, variadic_QMARK_, mps, mfa, info, fn_QMARK_, protocol, tag, proto_QMARK_, opt_not_QMARK_, ns, js_QMARK_, goog_QMARK_, keyword_QMARK_, map__10516, map__10516__$1, expr, f, args, env));
          };
        }(arity, variadic_QMARK_, mps, mfa, info, fn_QMARK_, protocol, tag, proto_QMARK_, opt_not_QMARK_, ns, js_QMARK_, goog_QMARK_, keyword_QMARK_, map__10516, map__10516__$1, expr, f, args, env)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), mfa], null)], null);
      } else {
        var arities = cljs.core.map.call(null, cljs.core.count, mps);
        if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([arity], true), arities))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.update_in.call(null, f, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "info", "info", -317069002)], null), function(arities, arity, variadic_QMARK_, mps, mfa, info, fn_QMARK_, protocol, tag, proto_QMARK_, opt_not_QMARK_, ns, js_QMARK_, goog_QMARK_, keyword_QMARK_, map__10516, map__10516__$1, expr, f, args, env) {
            return function(info__$1) {
              return cljs.core.update_in.call(null, cljs.core.assoc.call(null, info__$1, new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str(cljs.compiler.munge.call(null, info__$1)), cljs.core.str(".cljs$core$IFn$_invoke$arity$"), cljs.core.str(arity)].join(""))), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "info", "info", -317069002)], null), function(arities, arity, variadic_QMARK_, 
              mps, mfa, info, fn_QMARK_, protocol, tag, proto_QMARK_, opt_not_QMARK_, ns, js_QMARK_, goog_QMARK_, keyword_QMARK_, map__10516, map__10516__$1, expr, f, args, env) {
                return function(p1__10514_SHARP_) {
                  return cljs.core.dissoc.call(null, cljs.core.dissoc.call(null, p1__10514_SHARP_, new cljs.core.Keyword(null, "shadow", "shadow", 873231803)), new cljs.core.Keyword(null, "fn-self-name", "fn-self-name", 1461143531));
                };
              }(arities, arity, variadic_QMARK_, mps, mfa, info, fn_QMARK_, protocol, tag, proto_QMARK_, opt_not_QMARK_, ns, js_QMARK_, goog_QMARK_, keyword_QMARK_, map__10516, map__10516__$1, expr, f, args, env));
            };
          }(arities, arity, variadic_QMARK_, mps, mfa, info, fn_QMARK_, protocol, tag, proto_QMARK_, opt_not_QMARK_, ns, js_QMARK_, goog_QMARK_, keyword_QMARK_, map__10516, map__10516__$1, expr, f, args, env)), null], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f, null], null);
        }
      }
    }
  }() : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f, null], null);
  var f__$1 = cljs.core.nth.call(null, vec__10518, 0, null);
  var variadic_invoke = cljs.core.nth.call(null, vec__10518, 1, null);
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  if (opt_not_QMARK_) {
    cljs.compiler.emits.call(null, "!(", cljs.core.first.call(null, args), ")");
  } else {
    if (cljs.core.truth_(proto_QMARK_)) {
      var pimpl_10519 = [cljs.core.str(cljs.compiler.munge.call(null, cljs.compiler.protocol_prefix.call(null, protocol))), cljs.core.str(cljs.compiler.munge.call(null, cljs.core.name.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)))), cljs.core.str("$arity$"), cljs.core.str(cljs.core.count.call(null, args))].join("");
      cljs.compiler.emits.call(null, cljs.core.first.call(null, args), ".", pimpl_10519, "(", cljs.compiler.comma_sep.call(null, cljs.core.cons.call(null, "null", cljs.core.rest.call(null, args))), ")");
    } else {
      if (keyword_QMARK_) {
        cljs.compiler.emits.call(null, f__$1, ".cljs$core$IFn$_invoke$arity$", cljs.core.count.call(null, args), "(", cljs.compiler.comma_sep.call(null, args), ")");
      } else {
        if (cljs.core.truth_(variadic_invoke)) {
          var mfa_10520 = (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(variadic_invoke);
          cljs.compiler.emits.call(null, f__$1, "(", cljs.compiler.comma_sep.call(null, cljs.core.take.call(null, mfa_10520, args)), mfa_10520 === 0 ? null : ",", "cljs.core.array_seq([", cljs.compiler.comma_sep.call(null, cljs.core.drop.call(null, mfa_10520, args)), "], 0))");
        } else {
          if (cljs.core.truth_(function() {
            var or__4060__auto__ = fn_QMARK_;
            if (cljs.core.truth_(or__4060__auto__)) {
              return or__4060__auto__;
            } else {
              var or__4060__auto____$1 = js_QMARK_;
              if (or__4060__auto____$1) {
                return or__4060__auto____$1;
              } else {
                return goog_QMARK_;
              }
            }
          }())) {
            cljs.compiler.emits.call(null, f__$1, "(", cljs.compiler.comma_sep.call(null, args), ")");
          } else {
            if (cljs.core.truth_(function() {
              var and__4048__auto__ = cljs.analyzer._STAR_cljs_static_fns_STAR_;
              if (cljs.core.truth_(and__4048__auto__)) {
                return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(f__$1), new cljs.core.Keyword(null, "var", "var", -769682797));
              } else {
                return and__4048__auto__;
              }
            }())) {
              var fprop_10521 = [cljs.core.str(".cljs$core$IFn$_invoke$arity$"), cljs.core.str(cljs.core.count.call(null, args))].join("");
              cljs.compiler.emits.call(null, "(", f__$1, fprop_10521, " ? ", f__$1, fprop_10521, "(", cljs.compiler.comma_sep.call(null, args), ") : ", f__$1, ".call(", cljs.compiler.comma_sep.call(null, cljs.core.cons.call(null, "null", args)), "))");
            } else {
              cljs.compiler.emits.call(null, f__$1, ".call(", cljs.compiler.comma_sep.call(null, cljs.core.cons.call(null, "null", args)), ")");
            }
          }
        }
      }
    }
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "new", "new", -2085437848), function(p__10522) {
  var map__10523 = p__10522;
  var map__10523__$1 = (!(map__10523 == null) ? map__10523.cljs$lang$protocol_mask$partition0$ & 64 || map__10523.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10523) : map__10523;
  var ctor = cljs.core.get.call(null, map__10523__$1, new cljs.core.Keyword(null, "ctor", "ctor", 1750864802));
  var args = cljs.core.get.call(null, map__10523__$1, new cljs.core.Keyword(null, "args", "args", 1315556576));
  var env = cljs.core.get.call(null, map__10523__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  cljs.compiler.emits.call(null, "(new ", ctor, "(", cljs.compiler.comma_sep.call(null, args), "))");
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "set!", "set!", -1389817006), function(p__10525) {
  var map__10526 = p__10525;
  var map__10526__$1 = (!(map__10526 == null) ? map__10526.cljs$lang$protocol_mask$partition0$ & 64 || map__10526.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10526) : map__10526;
  var target = cljs.core.get.call(null, map__10526__$1, new cljs.core.Keyword(null, "target", "target", 253001721));
  var val = cljs.core.get.call(null, map__10526__$1, new cljs.core.Keyword(null, "val", "val", 128701612));
  var env = cljs.core.get.call(null, map__10526__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  cljs.compiler.emits.call(null, target, " = ", val);
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.compiler.load_libs = function cljs$compiler$load_libs(libs, seen, reloads) {
  var loaded_libs = cljs.compiler.munge.call(null, new cljs.core.Symbol(null, "cljs.core.*loaded-libs*", "cljs.core.*loaded-libs*", -1847086525, null));
  var loaded_libs_temp = cljs.compiler.munge.call(null, cljs.core.gensym.call(null, new cljs.core.Symbol(null, "cljs.core.*loaded-libs*", "cljs.core.*loaded-libs*", -1847086525, null)));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, libs)))) {
    cljs.compiler.emitln.call(null, "if(!COMPILED) ", loaded_libs_temp, " = ", loaded_libs, " || cljs.core.set();");
    cljs.compiler.emitln.call(null, "if(!COMPILED) ", loaded_libs, " = cljs.core.set();");
  } else {
  }
  var seq__10532_10536 = cljs.core.seq.call(null, cljs.core.remove.call(null, cljs.core.set.call(null, cljs.core.vals.call(null, seen)), cljs.core.distinct.call(null, cljs.core.vals.call(null, libs))));
  var chunk__10533_10537 = null;
  var count__10534_10538 = 0;
  var i__10535_10539 = 0;
  while (true) {
    if (i__10535_10539 < count__10534_10538) {
      var lib_10540 = cljs.core._nth.call(null, chunk__10533_10537, i__10535_10539);
      if (cljs.core.truth_(function() {
        var or__4060__auto__ = (new cljs.core.Keyword(null, "reload", "reload", 863702807)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, libs));
        if (cljs.core.truth_(or__4060__auto__)) {
          return or__4060__auto__;
        } else {
          return cljs.core._EQ_.call(null, cljs.core.get.call(null, reloads, lib_10540), new cljs.core.Keyword(null, "reload", "reload", 863702807));
        }
      }())) {
        cljs.compiler.emitln.call(null, "goog.require('", cljs.compiler.munge.call(null, lib_10540), "', 'reload');");
      } else {
        if (cljs.core.truth_(function() {
          var or__4060__auto__ = (new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, libs));
          if (cljs.core.truth_(or__4060__auto__)) {
            return or__4060__auto__;
          } else {
            return cljs.core._EQ_.call(null, cljs.core.get.call(null, reloads, lib_10540), new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200));
          }
        }())) {
          cljs.compiler.emitln.call(null, "goog.require('", cljs.compiler.munge.call(null, lib_10540), "', 'reload-all');");
        } else {
          cljs.compiler.emitln.call(null, "goog.require('", cljs.compiler.munge.call(null, lib_10540), "');");
        }
      }
      var G__10541 = seq__10532_10536;
      var G__10542 = chunk__10533_10537;
      var G__10543 = count__10534_10538;
      var G__10544 = i__10535_10539 + 1;
      seq__10532_10536 = G__10541;
      chunk__10533_10537 = G__10542;
      count__10534_10538 = G__10543;
      i__10535_10539 = G__10544;
      continue;
    } else {
      var temp__4425__auto___10545 = cljs.core.seq.call(null, seq__10532_10536);
      if (temp__4425__auto___10545) {
        var seq__10532_10546__$1 = temp__4425__auto___10545;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10532_10546__$1)) {
          var c__4844__auto___10547 = cljs.core.chunk_first.call(null, seq__10532_10546__$1);
          var G__10548 = cljs.core.chunk_rest.call(null, seq__10532_10546__$1);
          var G__10549 = c__4844__auto___10547;
          var G__10550 = cljs.core.count.call(null, c__4844__auto___10547);
          var G__10551 = 0;
          seq__10532_10536 = G__10548;
          chunk__10533_10537 = G__10549;
          count__10534_10538 = G__10550;
          i__10535_10539 = G__10551;
          continue;
        } else {
          var lib_10552 = cljs.core.first.call(null, seq__10532_10546__$1);
          if (cljs.core.truth_(function() {
            var or__4060__auto__ = (new cljs.core.Keyword(null, "reload", "reload", 863702807)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, libs));
            if (cljs.core.truth_(or__4060__auto__)) {
              return or__4060__auto__;
            } else {
              return cljs.core._EQ_.call(null, cljs.core.get.call(null, reloads, lib_10552), new cljs.core.Keyword(null, "reload", "reload", 863702807));
            }
          }())) {
            cljs.compiler.emitln.call(null, "goog.require('", cljs.compiler.munge.call(null, lib_10552), "', 'reload');");
          } else {
            if (cljs.core.truth_(function() {
              var or__4060__auto__ = (new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, libs));
              if (cljs.core.truth_(or__4060__auto__)) {
                return or__4060__auto__;
              } else {
                return cljs.core._EQ_.call(null, cljs.core.get.call(null, reloads, lib_10552), new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200));
              }
            }())) {
              cljs.compiler.emitln.call(null, "goog.require('", cljs.compiler.munge.call(null, lib_10552), "', 'reload-all');");
            } else {
              cljs.compiler.emitln.call(null, "goog.require('", cljs.compiler.munge.call(null, lib_10552), "');");
            }
          }
          var G__10553 = cljs.core.next.call(null, seq__10532_10546__$1);
          var G__10554 = null;
          var G__10555 = 0;
          var G__10556 = 0;
          seq__10532_10536 = G__10553;
          chunk__10533_10537 = G__10554;
          count__10534_10538 = G__10555;
          i__10535_10539 = G__10556;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, libs)))) {
    return cljs.compiler.emitln.call(null, "if(!COMPILED) ", loaded_libs, " = cljs.core.into(", loaded_libs_temp, ", ", loaded_libs, ");");
  } else {
    return null;
  }
};
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "ns", "ns", 441598760), function(p__10557) {
  var map__10558 = p__10557;
  var map__10558__$1 = (!(map__10558 == null) ? map__10558.cljs$lang$protocol_mask$partition0$ & 64 || map__10558.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10558) : map__10558;
  var name = cljs.core.get.call(null, map__10558__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var requires = cljs.core.get.call(null, map__10558__$1, new cljs.core.Keyword(null, "requires", "requires", -1201390927));
  var uses = cljs.core.get.call(null, map__10558__$1, new cljs.core.Keyword(null, "uses", "uses", 232664692));
  var require_macros = cljs.core.get.call(null, map__10558__$1, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416));
  var reloads = cljs.core.get.call(null, map__10558__$1, new cljs.core.Keyword(null, "reloads", "reloads", 610698522));
  var env = cljs.core.get.call(null, map__10558__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  cljs.compiler.emitln.call(null, "goog.provide('", cljs.compiler.munge.call(null, name), "');");
  if (cljs.core._EQ_.call(null, name, new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null))) {
  } else {
    cljs.compiler.emitln.call(null, "goog.require('cljs.core');");
  }
  cljs.compiler.load_libs.call(null, requires, null, (new cljs.core.Keyword(null, "require", "require", -468001333)).cljs$core$IFn$_invoke$arity$1(reloads));
  return cljs.compiler.load_libs.call(null, uses, requires, (new cljs.core.Keyword(null, "use", "use", -1846382424)).cljs$core$IFn$_invoke$arity$1(reloads));
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "deftype*", "deftype*", -677871637), function(p__10560) {
  var map__10561 = p__10560;
  var map__10561__$1 = (!(map__10561 == null) ? map__10561.cljs$lang$protocol_mask$partition0$ & 64 || map__10561.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10561) : map__10561;
  var t = cljs.core.get.call(null, map__10561__$1, new cljs.core.Keyword(null, "t", "t", -1397832519));
  var fields = cljs.core.get.call(null, map__10561__$1, new cljs.core.Keyword(null, "fields", "fields", -1932066230));
  var pmasks = cljs.core.get.call(null, map__10561__$1, new cljs.core.Keyword(null, "pmasks", "pmasks", -871416698));
  var body = cljs.core.get.call(null, map__10561__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var fields__$1 = cljs.core.map.call(null, cljs.compiler.munge, fields);
  cljs.compiler.emitln.call(null, "");
  cljs.compiler.emitln.call(null, "/**");
  cljs.compiler.emitln.call(null, "* @constructor");
  cljs.compiler.emitln.call(null, "*/");
  cljs.compiler.emitln.call(null, cljs.compiler.munge.call(null, t), " = (function (", cljs.compiler.comma_sep.call(null, fields__$1), "){");
  var seq__10563_10573 = cljs.core.seq.call(null, fields__$1);
  var chunk__10564_10574 = null;
  var count__10565_10575 = 0;
  var i__10566_10576 = 0;
  while (true) {
    if (i__10566_10576 < count__10565_10575) {
      var fld_10577 = cljs.core._nth.call(null, chunk__10564_10574, i__10566_10576);
      cljs.compiler.emitln.call(null, "this.", fld_10577, " = ", fld_10577, ";");
      var G__10578 = seq__10563_10573;
      var G__10579 = chunk__10564_10574;
      var G__10580 = count__10565_10575;
      var G__10581 = i__10566_10576 + 1;
      seq__10563_10573 = G__10578;
      chunk__10564_10574 = G__10579;
      count__10565_10575 = G__10580;
      i__10566_10576 = G__10581;
      continue;
    } else {
      var temp__4425__auto___10582 = cljs.core.seq.call(null, seq__10563_10573);
      if (temp__4425__auto___10582) {
        var seq__10563_10583__$1 = temp__4425__auto___10582;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10563_10583__$1)) {
          var c__4844__auto___10584 = cljs.core.chunk_first.call(null, seq__10563_10583__$1);
          var G__10585 = cljs.core.chunk_rest.call(null, seq__10563_10583__$1);
          var G__10586 = c__4844__auto___10584;
          var G__10587 = cljs.core.count.call(null, c__4844__auto___10584);
          var G__10588 = 0;
          seq__10563_10573 = G__10585;
          chunk__10564_10574 = G__10586;
          count__10565_10575 = G__10587;
          i__10566_10576 = G__10588;
          continue;
        } else {
          var fld_10589 = cljs.core.first.call(null, seq__10563_10583__$1);
          cljs.compiler.emitln.call(null, "this.", fld_10589, " = ", fld_10589, ";");
          var G__10590 = cljs.core.next.call(null, seq__10563_10583__$1);
          var G__10591 = null;
          var G__10592 = 0;
          var G__10593 = 0;
          seq__10563_10573 = G__10590;
          chunk__10564_10574 = G__10591;
          count__10565_10575 = G__10592;
          i__10566_10576 = G__10593;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__10567_10594 = cljs.core.seq.call(null, pmasks);
  var chunk__10568_10595 = null;
  var count__10569_10596 = 0;
  var i__10570_10597 = 0;
  while (true) {
    if (i__10570_10597 < count__10569_10596) {
      var vec__10571_10598 = cljs.core._nth.call(null, chunk__10568_10595, i__10570_10597);
      var pno_10599 = cljs.core.nth.call(null, vec__10571_10598, 0, null);
      var pmask_10600 = cljs.core.nth.call(null, vec__10571_10598, 1, null);
      cljs.compiler.emitln.call(null, "this.cljs$lang$protocol_mask$partition", pno_10599, "$ = ", pmask_10600, ";");
      var G__10601 = seq__10567_10594;
      var G__10602 = chunk__10568_10595;
      var G__10603 = count__10569_10596;
      var G__10604 = i__10570_10597 + 1;
      seq__10567_10594 = G__10601;
      chunk__10568_10595 = G__10602;
      count__10569_10596 = G__10603;
      i__10570_10597 = G__10604;
      continue;
    } else {
      var temp__4425__auto___10605 = cljs.core.seq.call(null, seq__10567_10594);
      if (temp__4425__auto___10605) {
        var seq__10567_10606__$1 = temp__4425__auto___10605;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10567_10606__$1)) {
          var c__4844__auto___10607 = cljs.core.chunk_first.call(null, seq__10567_10606__$1);
          var G__10608 = cljs.core.chunk_rest.call(null, seq__10567_10606__$1);
          var G__10609 = c__4844__auto___10607;
          var G__10610 = cljs.core.count.call(null, c__4844__auto___10607);
          var G__10611 = 0;
          seq__10567_10594 = G__10608;
          chunk__10568_10595 = G__10609;
          count__10569_10596 = G__10610;
          i__10570_10597 = G__10611;
          continue;
        } else {
          var vec__10572_10612 = cljs.core.first.call(null, seq__10567_10606__$1);
          var pno_10613 = cljs.core.nth.call(null, vec__10572_10612, 0, null);
          var pmask_10614 = cljs.core.nth.call(null, vec__10572_10612, 1, null);
          cljs.compiler.emitln.call(null, "this.cljs$lang$protocol_mask$partition", pno_10613, "$ = ", pmask_10614, ";");
          var G__10615 = cljs.core.next.call(null, seq__10567_10606__$1);
          var G__10616 = null;
          var G__10617 = 0;
          var G__10618 = 0;
          seq__10567_10594 = G__10615;
          chunk__10568_10595 = G__10616;
          count__10569_10596 = G__10617;
          i__10570_10597 = G__10618;
          continue;
        }
      } else {
      }
    }
    break;
  }
  cljs.compiler.emitln.call(null, "})");
  return cljs.compiler.emit.call(null, body);
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "defrecord*", "defrecord*", 718069562), function(p__10619) {
  var map__10620 = p__10619;
  var map__10620__$1 = (!(map__10620 == null) ? map__10620.cljs$lang$protocol_mask$partition0$ & 64 || map__10620.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10620) : map__10620;
  var t = cljs.core.get.call(null, map__10620__$1, new cljs.core.Keyword(null, "t", "t", -1397832519));
  var fields = cljs.core.get.call(null, map__10620__$1, new cljs.core.Keyword(null, "fields", "fields", -1932066230));
  var pmasks = cljs.core.get.call(null, map__10620__$1, new cljs.core.Keyword(null, "pmasks", "pmasks", -871416698));
  var body = cljs.core.get.call(null, map__10620__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var fields__$1 = cljs.core.concat.call(null, cljs.core.map.call(null, cljs.compiler.munge, fields), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "__meta", "__meta", -946752628, null), new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null));
  cljs.compiler.emitln.call(null, "");
  cljs.compiler.emitln.call(null, "/**");
  cljs.compiler.emitln.call(null, "* @constructor");
  var seq__10622_10636 = cljs.core.seq.call(null, fields__$1);
  var chunk__10623_10637 = null;
  var count__10624_10638 = 0;
  var i__10625_10639 = 0;
  while (true) {
    if (i__10625_10639 < count__10624_10638) {
      var fld_10640 = cljs.core._nth.call(null, chunk__10623_10637, i__10625_10639);
      cljs.compiler.emitln.call(null, "* @param {*} ", fld_10640);
      var G__10641 = seq__10622_10636;
      var G__10642 = chunk__10623_10637;
      var G__10643 = count__10624_10638;
      var G__10644 = i__10625_10639 + 1;
      seq__10622_10636 = G__10641;
      chunk__10623_10637 = G__10642;
      count__10624_10638 = G__10643;
      i__10625_10639 = G__10644;
      continue;
    } else {
      var temp__4425__auto___10645 = cljs.core.seq.call(null, seq__10622_10636);
      if (temp__4425__auto___10645) {
        var seq__10622_10646__$1 = temp__4425__auto___10645;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10622_10646__$1)) {
          var c__4844__auto___10647 = cljs.core.chunk_first.call(null, seq__10622_10646__$1);
          var G__10648 = cljs.core.chunk_rest.call(null, seq__10622_10646__$1);
          var G__10649 = c__4844__auto___10647;
          var G__10650 = cljs.core.count.call(null, c__4844__auto___10647);
          var G__10651 = 0;
          seq__10622_10636 = G__10648;
          chunk__10623_10637 = G__10649;
          count__10624_10638 = G__10650;
          i__10625_10639 = G__10651;
          continue;
        } else {
          var fld_10652 = cljs.core.first.call(null, seq__10622_10646__$1);
          cljs.compiler.emitln.call(null, "* @param {*} ", fld_10652);
          var G__10653 = cljs.core.next.call(null, seq__10622_10646__$1);
          var G__10654 = null;
          var G__10655 = 0;
          var G__10656 = 0;
          seq__10622_10636 = G__10653;
          chunk__10623_10637 = G__10654;
          count__10624_10638 = G__10655;
          i__10625_10639 = G__10656;
          continue;
        }
      } else {
      }
    }
    break;
  }
  cljs.compiler.emitln.call(null, "* @param {*=} __meta ");
  cljs.compiler.emitln.call(null, "* @param {*=} __extmap");
  cljs.compiler.emitln.call(null, "* @param {number|null} __hash");
  cljs.compiler.emitln.call(null, "*/");
  cljs.compiler.emitln.call(null, cljs.compiler.munge.call(null, t), " = (function (", cljs.compiler.comma_sep.call(null, fields__$1), "){");
  var seq__10626_10657 = cljs.core.seq.call(null, fields__$1);
  var chunk__10627_10658 = null;
  var count__10628_10659 = 0;
  var i__10629_10660 = 0;
  while (true) {
    if (i__10629_10660 < count__10628_10659) {
      var fld_10661 = cljs.core._nth.call(null, chunk__10627_10658, i__10629_10660);
      cljs.compiler.emitln.call(null, "this.", fld_10661, " = ", fld_10661, ";");
      var G__10662 = seq__10626_10657;
      var G__10663 = chunk__10627_10658;
      var G__10664 = count__10628_10659;
      var G__10665 = i__10629_10660 + 1;
      seq__10626_10657 = G__10662;
      chunk__10627_10658 = G__10663;
      count__10628_10659 = G__10664;
      i__10629_10660 = G__10665;
      continue;
    } else {
      var temp__4425__auto___10666 = cljs.core.seq.call(null, seq__10626_10657);
      if (temp__4425__auto___10666) {
        var seq__10626_10667__$1 = temp__4425__auto___10666;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10626_10667__$1)) {
          var c__4844__auto___10668 = cljs.core.chunk_first.call(null, seq__10626_10667__$1);
          var G__10669 = cljs.core.chunk_rest.call(null, seq__10626_10667__$1);
          var G__10670 = c__4844__auto___10668;
          var G__10671 = cljs.core.count.call(null, c__4844__auto___10668);
          var G__10672 = 0;
          seq__10626_10657 = G__10669;
          chunk__10627_10658 = G__10670;
          count__10628_10659 = G__10671;
          i__10629_10660 = G__10672;
          continue;
        } else {
          var fld_10673 = cljs.core.first.call(null, seq__10626_10667__$1);
          cljs.compiler.emitln.call(null, "this.", fld_10673, " = ", fld_10673, ";");
          var G__10674 = cljs.core.next.call(null, seq__10626_10667__$1);
          var G__10675 = null;
          var G__10676 = 0;
          var G__10677 = 0;
          seq__10626_10657 = G__10674;
          chunk__10627_10658 = G__10675;
          count__10628_10659 = G__10676;
          i__10629_10660 = G__10677;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__10630_10678 = cljs.core.seq.call(null, pmasks);
  var chunk__10631_10679 = null;
  var count__10632_10680 = 0;
  var i__10633_10681 = 0;
  while (true) {
    if (i__10633_10681 < count__10632_10680) {
      var vec__10634_10682 = cljs.core._nth.call(null, chunk__10631_10679, i__10633_10681);
      var pno_10683 = cljs.core.nth.call(null, vec__10634_10682, 0, null);
      var pmask_10684 = cljs.core.nth.call(null, vec__10634_10682, 1, null);
      cljs.compiler.emitln.call(null, "this.cljs$lang$protocol_mask$partition", pno_10683, "$ = ", pmask_10684, ";");
      var G__10685 = seq__10630_10678;
      var G__10686 = chunk__10631_10679;
      var G__10687 = count__10632_10680;
      var G__10688 = i__10633_10681 + 1;
      seq__10630_10678 = G__10685;
      chunk__10631_10679 = G__10686;
      count__10632_10680 = G__10687;
      i__10633_10681 = G__10688;
      continue;
    } else {
      var temp__4425__auto___10689 = cljs.core.seq.call(null, seq__10630_10678);
      if (temp__4425__auto___10689) {
        var seq__10630_10690__$1 = temp__4425__auto___10689;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10630_10690__$1)) {
          var c__4844__auto___10691 = cljs.core.chunk_first.call(null, seq__10630_10690__$1);
          var G__10692 = cljs.core.chunk_rest.call(null, seq__10630_10690__$1);
          var G__10693 = c__4844__auto___10691;
          var G__10694 = cljs.core.count.call(null, c__4844__auto___10691);
          var G__10695 = 0;
          seq__10630_10678 = G__10692;
          chunk__10631_10679 = G__10693;
          count__10632_10680 = G__10694;
          i__10633_10681 = G__10695;
          continue;
        } else {
          var vec__10635_10696 = cljs.core.first.call(null, seq__10630_10690__$1);
          var pno_10697 = cljs.core.nth.call(null, vec__10635_10696, 0, null);
          var pmask_10698 = cljs.core.nth.call(null, vec__10635_10696, 1, null);
          cljs.compiler.emitln.call(null, "this.cljs$lang$protocol_mask$partition", pno_10697, "$ = ", pmask_10698, ";");
          var G__10699 = cljs.core.next.call(null, seq__10630_10690__$1);
          var G__10700 = null;
          var G__10701 = 0;
          var G__10702 = 0;
          seq__10630_10678 = G__10699;
          chunk__10631_10679 = G__10700;
          count__10632_10680 = G__10701;
          i__10633_10681 = G__10702;
          continue;
        }
      } else {
      }
    }
    break;
  }
  cljs.compiler.emitln.call(null, "})");
  return cljs.compiler.emit.call(null, body);
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "dot", "dot", 1442709401), function(p__10703) {
  var map__10704 = p__10703;
  var map__10704__$1 = (!(map__10704 == null) ? map__10704.cljs$lang$protocol_mask$partition0$ & 64 || map__10704.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10704) : map__10704;
  var target = cljs.core.get.call(null, map__10704__$1, new cljs.core.Keyword(null, "target", "target", 253001721));
  var field = cljs.core.get.call(null, map__10704__$1, new cljs.core.Keyword(null, "field", "field", -1302436500));
  var method = cljs.core.get.call(null, map__10704__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var args = cljs.core.get.call(null, map__10704__$1, new cljs.core.Keyword(null, "args", "args", 1315556576));
  var env = cljs.core.get.call(null, map__10704__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  if (cljs.core.truth_(field)) {
    cljs.compiler.emits.call(null, target, ".", cljs.compiler.munge.call(null, field, cljs.core.PersistentHashSet.EMPTY));
  } else {
    cljs.compiler.emits.call(null, target, ".", cljs.compiler.munge.call(null, method, cljs.core.PersistentHashSet.EMPTY), "(", cljs.compiler.comma_sep.call(null, args), ")");
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.core._add_method.call(null, cljs.compiler.emit_STAR_, new cljs.core.Keyword(null, "js", "js", 1768080579), function(p__10706) {
  var map__10707 = p__10706;
  var map__10707__$1 = (!(map__10707 == null) ? map__10707.cljs$lang$protocol_mask$partition0$ & 64 || map__10707.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10707) : map__10707;
  var env = cljs.core.get.call(null, map__10707__$1, new cljs.core.Keyword(null, "env", "env", -1815813235));
  var code = cljs.core.get.call(null, map__10707__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var segs = cljs.core.get.call(null, map__10707__$1, new cljs.core.Keyword(null, "segs", "segs", -1940299576));
  var args = cljs.core.get.call(null, map__10707__$1, new cljs.core.Keyword(null, "args", "args", 1315556576));
  var env__6088__auto__ = env;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "return", "return", -1891502105), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    cljs.compiler.emits.call(null, "return ");
  } else {
  }
  if (cljs.core.truth_(code)) {
    cljs.compiler.emits.call(null, code);
  } else {
    cljs.compiler.emits.call(null, cljs.core.interleave.call(null, cljs.core.concat.call(null, segs, cljs.core.repeat.call(null, null)), cljs.core.concat.call(null, args, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [null], null))));
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env__6088__auto__))) {
    return null;
  } else {
    return cljs.compiler.emitln.call(null, ";");
  }
});
cljs.compiler.build_affecting_options = function cljs$compiler$build_affecting_options(opts) {
  return cljs.core.select_keys.call(null, opts, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "static-fns", "static-fns", -501950748), new cljs.core.Keyword(null, "optimize-constants", "optimize-constants", 232704518), new cljs.core.Keyword(null, "elide-asserts", "elide-asserts", 537063272), new cljs.core.Keyword(null, "target", "target", 253001721)], null));
};
cljs.compiler.emit_constants_table = function cljs$compiler$emit_constants_table(table) {
  var seq__10717 = cljs.core.seq.call(null, table);
  var chunk__10718 = null;
  var count__10719 = 0;
  var i__10720 = 0;
  while (true) {
    if (i__10720 < count__10719) {
      var vec__10721 = cljs.core._nth.call(null, chunk__10718, i__10720);
      var keyword = cljs.core.nth.call(null, vec__10721, 0, null);
      var value = cljs.core.nth.call(null, vec__10721, 1, null);
      var ns_10723 = cljs.core.namespace.call(null, keyword);
      var name_10724 = cljs.core.name.call(null, keyword);
      cljs.compiler.emits.call(null, "cljs.core.", value, " = ");
      cljs.compiler.emits_keyword.call(null, keyword);
      cljs.compiler.emits.call(null, ";\n");
      var G__10725 = seq__10717;
      var G__10726 = chunk__10718;
      var G__10727 = count__10719;
      var G__10728 = i__10720 + 1;
      seq__10717 = G__10725;
      chunk__10718 = G__10726;
      count__10719 = G__10727;
      i__10720 = G__10728;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__10717);
      if (temp__4425__auto__) {
        var seq__10717__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10717__$1)) {
          var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__10717__$1);
          var G__10729 = cljs.core.chunk_rest.call(null, seq__10717__$1);
          var G__10730 = c__4844__auto__;
          var G__10731 = cljs.core.count.call(null, c__4844__auto__);
          var G__10732 = 0;
          seq__10717 = G__10729;
          chunk__10718 = G__10730;
          count__10719 = G__10731;
          i__10720 = G__10732;
          continue;
        } else {
          var vec__10722 = cljs.core.first.call(null, seq__10717__$1);
          var keyword = cljs.core.nth.call(null, vec__10722, 0, null);
          var value = cljs.core.nth.call(null, vec__10722, 1, null);
          var ns_10733 = cljs.core.namespace.call(null, keyword);
          var name_10734 = cljs.core.name.call(null, keyword);
          cljs.compiler.emits.call(null, "cljs.core.", value, " = ");
          cljs.compiler.emits_keyword.call(null, keyword);
          cljs.compiler.emits.call(null, ";\n");
          var G__10735 = cljs.core.next.call(null, seq__10717__$1);
          var G__10736 = null;
          var G__10737 = 0;
          var G__10738 = 0;
          seq__10717 = G__10735;
          chunk__10718 = G__10736;
          count__10719 = G__10737;
          i__10720 = G__10738;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function clojure$walk$walk(inner, outer, form) {
  if (cljs.core.list_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.apply.call(null, cljs.core.list, cljs.core.map.call(null, inner, form)));
  } else {
    if (!(form == null) ? form.cljs$lang$protocol_mask$partition0$ & 2048 || form.cljs$core$IMapEntry$ ? true : !form.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, form) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, form)) {
      return outer.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, inner, form)));
    } else {
      if (cljs.core.seq_QMARK_.call(null, form)) {
        return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
      } else {
        if (!(form == null) ? form.cljs$lang$protocol_mask$partition0$ & 67108864 || form.cljs$core$IRecord$ ? true : !form.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, form) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, form)) {
          return outer.call(null, cljs.core.reduce.call(null, function(r, x) {
            return cljs.core.conj.call(null, r, inner.call(null, x));
          }, form, form));
        } else {
          if (cljs.core.coll_QMARK_.call(null, form)) {
            return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
          } else {
            return outer.call(null, form);
          }
        }
      }
    }
  }
};
clojure.walk.postwalk = function clojure$walk$postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure$walk$postwalk, f), f, form);
};
clojure.walk.prewalk = function clojure$walk$prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure$walk$prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function clojure$walk$keywordize_keys(m) {
  var f = function(p__9301) {
    var vec__9302 = p__9301;
    var k = cljs.core.nth.call(null, vec__9302, 0, null);
    var v = cljs.core.nth.call(null, vec__9302, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function clojure$walk$stringify_keys(m) {
  var f = function(p__9305) {
    var vec__9306 = p__9305;
    var k = cljs.core.nth.call(null, vec__9306, 0, null);
    var v = cljs.core.nth.call(null, vec__9306, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function clojure$walk$prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function clojure$walk$postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("cljs.core$macros");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.set");
goog.require("cljs.compiler");
goog.require("cljs.env");
goog.require("cljs.core");
goog.require("cljs.analyzer");
cljs.core$macros.__GT_ = function cljs$core$macros$__GT_() {
  var args__5106__auto__ = [];
  var len__5099__auto___8125 = arguments.length;
  var i__5100__auto___8126 = 0;
  while (true) {
    if (i__5100__auto___8126 < len__5099__auto___8125) {
      args__5106__auto__.push(arguments[i__5100__auto___8126]);
      var G__8127 = i__5100__auto___8126 + 1;
      i__5100__auto___8126 = G__8127;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.__GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.__GT_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, forms) {
  var x__$1 = x;
  var forms__$1 = forms;
  while (true) {
    if (cljs.core.truth_(forms__$1)) {
      var form = cljs.core.first.call(null, forms__$1);
      var threaded = cljs.core.seq_QMARK_.call(null, form) ? cljs.core.with_meta.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.first.call(null, form)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x__$1), cljs.core.next.call(null, form)))), cljs.core.meta.call(null, form)) : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x__$1), form);
      var G__8128 = threaded;
      var G__8129 = cljs.core.next.call(null, forms__$1);
      x__$1 = G__8128;
      forms__$1 = G__8129;
      continue;
    } else {
      return x__$1;
    }
    break;
  }
};
cljs.core$macros.__GT_.cljs$lang$maxFixedArity = 3;
cljs.core$macros.__GT_.cljs$lang$applyTo = function(seq8121) {
  var G__8122 = cljs.core.first.call(null, seq8121);
  var seq8121__$1 = cljs.core.next.call(null, seq8121);
  var G__8123 = cljs.core.first.call(null, seq8121__$1);
  var seq8121__$2 = cljs.core.next.call(null, seq8121__$1);
  var G__8124 = cljs.core.first.call(null, seq8121__$2);
  var seq8121__$3 = cljs.core.next.call(null, seq8121__$2);
  return cljs.core$macros.__GT_.cljs$core$IFn$_invoke$arity$variadic(G__8122, G__8123, G__8124, seq8121__$3);
};
cljs.core$macros.__GT_.cljs$lang$macro = true;
cljs.core$macros.__GT__GT_ = function cljs$core$macros$__GT__GT_() {
  var args__5106__auto__ = [];
  var len__5099__auto___8134 = arguments.length;
  var i__5100__auto___8135 = 0;
  while (true) {
    if (i__5100__auto___8135 < len__5099__auto___8134) {
      args__5106__auto__.push(arguments[i__5100__auto___8135]);
      var G__8136 = i__5100__auto___8135 + 1;
      i__5100__auto___8135 = G__8136;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.__GT__GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.__GT__GT_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, forms) {
  var x__$1 = x;
  var forms__$1 = forms;
  while (true) {
    if (cljs.core.truth_(forms__$1)) {
      var form = cljs.core.first.call(null, forms__$1);
      var threaded = cljs.core.seq_QMARK_.call(null, form) ? cljs.core.with_meta.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.first.call(null, form)), cljs.core.next.call(null, form), cljs.core._conj.call(null, cljs.core.List.EMPTY, x__$1)))), cljs.core.meta.call(null, form)) : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x__$1), form);
      var G__8137 = threaded;
      var G__8138 = cljs.core.next.call(null, forms__$1);
      x__$1 = G__8137;
      forms__$1 = G__8138;
      continue;
    } else {
      return x__$1;
    }
    break;
  }
};
cljs.core$macros.__GT__GT_.cljs$lang$maxFixedArity = 3;
cljs.core$macros.__GT__GT_.cljs$lang$applyTo = function(seq8130) {
  var G__8131 = cljs.core.first.call(null, seq8130);
  var seq8130__$1 = cljs.core.next.call(null, seq8130);
  var G__8132 = cljs.core.first.call(null, seq8130__$1);
  var seq8130__$2 = cljs.core.next.call(null, seq8130__$1);
  var G__8133 = cljs.core.first.call(null, seq8130__$2);
  var seq8130__$3 = cljs.core.next.call(null, seq8130__$2);
  return cljs.core$macros.__GT__GT_.cljs$core$IFn$_invoke$arity$variadic(G__8131, G__8132, G__8133, seq8130__$3);
};
cljs.core$macros.__GT__GT_.cljs$lang$macro = true;
cljs.core$macros._DOT__DOT_ = function cljs$core$macros$_DOT__DOT_() {
  var args8139 = [];
  var len__5099__auto___8147 = arguments.length;
  var i__5100__auto___8148 = 0;
  while (true) {
    if (i__5100__auto___8148 < len__5099__auto___8147) {
      args8139.push(arguments[i__5100__auto___8148]);
      var G__8149 = i__5100__auto___8148 + 1;
      i__5100__auto___8148 = G__8149;
      continue;
    } else {
    }
    break;
  }
  var G__8146 = args8139.length;
  switch(G__8146) {
    case 4:
      return cljs.core$macros._DOT__DOT_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8139.slice(4), 0);
      return cljs.core$macros._DOT__DOT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros._DOT__DOT_.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, form) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, form))));
};
cljs.core$macros._DOT__DOT_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, form, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "..", "..", -300507420, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, form))))), more)));
};
cljs.core$macros._DOT__DOT_.cljs$lang$applyTo = function(seq8140) {
  var G__8141 = cljs.core.first.call(null, seq8140);
  var seq8140__$1 = cljs.core.next.call(null, seq8140);
  var G__8142 = cljs.core.first.call(null, seq8140__$1);
  var seq8140__$2 = cljs.core.next.call(null, seq8140__$1);
  var G__8143 = cljs.core.first.call(null, seq8140__$2);
  var seq8140__$3 = cljs.core.next.call(null, seq8140__$2);
  var G__8144 = cljs.core.first.call(null, seq8140__$3);
  var seq8140__$4 = cljs.core.next.call(null, seq8140__$3);
  return cljs.core$macros._DOT__DOT_.cljs$core$IFn$_invoke$arity$variadic(G__8141, G__8142, G__8143, G__8144, seq8140__$4);
};
cljs.core$macros._DOT__DOT_.cljs$lang$maxFixedArity = 4;
cljs.core$macros._DOT__DOT_.cljs$lang$macro = true;
cljs.core$macros.comment = function cljs$core$macros$comment() {
  var args__5106__auto__ = [];
  var len__5099__auto___8154 = arguments.length;
  var i__5100__auto___8155 = 0;
  while (true) {
    if (i__5100__auto___8155 < len__5099__auto___8154) {
      args__5106__auto__.push(arguments[i__5100__auto___8155]);
      var G__8156 = i__5100__auto___8155 + 1;
      i__5100__auto___8155 = G__8156;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.comment.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.comment.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, body) {
  return null;
};
cljs.core$macros.comment.cljs$lang$maxFixedArity = 2;
cljs.core$macros.comment.cljs$lang$applyTo = function(seq8151) {
  var G__8152 = cljs.core.first.call(null, seq8151);
  var seq8151__$1 = cljs.core.next.call(null, seq8151);
  var G__8153 = cljs.core.first.call(null, seq8151__$1);
  var seq8151__$2 = cljs.core.next.call(null, seq8151__$1);
  return cljs.core$macros.comment.cljs$core$IFn$_invoke$arity$variadic(G__8152, G__8153, seq8151__$2);
};
cljs.core$macros.comment.cljs$lang$macro = true;
cljs.core$macros.cond = function cljs$core$macros$cond() {
  var args__5106__auto__ = [];
  var len__5099__auto___8160 = arguments.length;
  var i__5100__auto___8161 = 0;
  while (true) {
    if (i__5100__auto___8161 < len__5099__auto___8160) {
      args__5106__auto__.push(arguments[i__5100__auto___8161]);
      var G__8162 = i__5100__auto___8161 + 1;
      i__5100__auto___8161 = G__8162;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.cond.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.cond.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, clauses) {
  if (cljs.core.truth_(clauses)) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol("cljs.core", "cond", "cljs.core/cond", 2005388338, null), cljs.core.next.call(null, cljs.core.next.call(null, clauses)))), cljs.core.next.call(null, clauses) ? cljs.core.second.call(null, clauses) : function() {
      throw new Error("cond requires an even number of forms");
    }()), cljs.core.first.call(null, clauses)), new cljs.core.Symbol(null, "if", "if", 1181717262, null));
  } else {
    return null;
  }
};
cljs.core$macros.cond.cljs$lang$maxFixedArity = 2;
cljs.core$macros.cond.cljs$lang$applyTo = function(seq8157) {
  var G__8158 = cljs.core.first.call(null, seq8157);
  var seq8157__$1 = cljs.core.next.call(null, seq8157);
  var G__8159 = cljs.core.first.call(null, seq8157__$1);
  var seq8157__$2 = cljs.core.next.call(null, seq8157__$1);
  return cljs.core$macros.cond.cljs$core$IFn$_invoke$arity$variadic(G__8158, G__8159, seq8157__$2);
};
cljs.core$macros.cond.cljs$lang$macro = true;
cljs.core$macros.declare = function cljs$core$macros$declare() {
  var args__5106__auto__ = [];
  var len__5099__auto___8167 = arguments.length;
  var i__5100__auto___8168 = 0;
  while (true) {
    if (i__5100__auto___8168 < len__5099__auto___8167) {
      args__5106__auto__.push(arguments[i__5100__auto___8168]);
      var G__8169 = i__5100__auto___8168 + 1;
      i__5100__auto___8168 = G__8169;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.declare.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.declare.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, names) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core.map.call(null, function(p1__8163_SHARP_) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vary_meta.call(null, p1__8163_SHARP_, cljs.core.assoc, new cljs.core.Keyword(null, "declared", "declared", 92336021), true)), new cljs.core.Symbol(null, "def", "def", 597100991, null));
  }, names))));
};
cljs.core$macros.declare.cljs$lang$maxFixedArity = 2;
cljs.core$macros.declare.cljs$lang$applyTo = function(seq8164) {
  var G__8165 = cljs.core.first.call(null, seq8164);
  var seq8164__$1 = cljs.core.next.call(null, seq8164);
  var G__8166 = cljs.core.first.call(null, seq8164__$1);
  var seq8164__$2 = cljs.core.next.call(null, seq8164__$1);
  return cljs.core$macros.declare.cljs$core$IFn$_invoke$arity$variadic(G__8165, G__8166, seq8164__$2);
};
cljs.core$macros.declare.cljs$lang$macro = true;
cljs.core$macros.doto = function cljs$core$macros$doto() {
  var args__5106__auto__ = [];
  var len__5099__auto___8174 = arguments.length;
  var i__5100__auto___8175 = 0;
  while (true) {
    if (i__5100__auto___8175 < len__5099__auto___8174) {
      args__5106__auto__.push(arguments[i__5100__auto___8175]);
      var G__8176 = i__5100__auto___8175 + 1;
      i__5100__auto___8175 = G__8176;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.doto.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.doto.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, forms) {
  var gx = cljs.core.gensym.call(null);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, gx), cljs.core._conj.call(null, cljs.core.List.EMPTY, x)))))), 
  cljs.core.map.call(null, function(gx) {
    return function(f) {
      if (cljs.core.seq_QMARK_.call(null, f)) {
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.first.call(null, f)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gx), cljs.core.next.call(null, f))));
      } else {
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, f), cljs.core._conj.call(null, cljs.core.List.EMPTY, gx))));
      }
    };
  }(gx), forms), cljs.core._conj.call(null, cljs.core.List.EMPTY, gx))));
};
cljs.core$macros.doto.cljs$lang$maxFixedArity = 3;
cljs.core$macros.doto.cljs$lang$applyTo = function(seq8170) {
  var G__8171 = cljs.core.first.call(null, seq8170);
  var seq8170__$1 = cljs.core.next.call(null, seq8170);
  var G__8172 = cljs.core.first.call(null, seq8170__$1);
  var seq8170__$2 = cljs.core.next.call(null, seq8170__$1);
  var G__8173 = cljs.core.first.call(null, seq8170__$2);
  var seq8170__$3 = cljs.core.next.call(null, seq8170__$2);
  return cljs.core$macros.doto.cljs$core$IFn$_invoke$arity$variadic(G__8171, G__8172, G__8173, seq8170__$3);
};
cljs.core$macros.doto.cljs$lang$macro = true;
cljs.core$macros.parse_impls = function cljs$core$macros$parse_impls(specs) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var s = specs;
  while (true) {
    if (cljs.core.seq.call(null, s)) {
      var G__8177 = cljs.core.assoc.call(null, ret, cljs.core.first.call(null, s), cljs.core.take_while.call(null, cljs.core.seq_QMARK_, cljs.core.next.call(null, s)));
      var G__8178 = cljs.core.drop_while.call(null, cljs.core.seq_QMARK_, cljs.core.next.call(null, s));
      ret = G__8177;
      s = G__8178;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core$macros.emit_extend_protocol = function cljs$core$macros$emit_extend_protocol(p, specs) {
  var impls = cljs.core$macros.parse_impls.call(null, specs);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core.map.call(null, function(impls) {
    return function(p__8181) {
      var vec__8182 = p__8181;
      var t = cljs.core.nth.call(null, vec__8182, 0, null);
      var fs = cljs.core.nth.call(null, vec__8182, 1, null);
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "extend-type", "cljs.core$macros/extend-type", 1713295201, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t), cljs.core._conj.call(null, cljs.core.List.EMPTY, p), fs)));
    };
  }(impls), impls))));
};
cljs.core$macros.extend_protocol = function cljs$core$macros$extend_protocol() {
  var args__5106__auto__ = [];
  var len__5099__auto___8187 = arguments.length;
  var i__5100__auto___8188 = 0;
  while (true) {
    if (i__5100__auto___8188 < len__5099__auto___8187) {
      args__5106__auto__.push(arguments[i__5100__auto___8188]);
      var G__8189 = i__5100__auto___8188 + 1;
      i__5100__auto___8188 = G__8189;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.extend_protocol.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.extend_protocol.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, p, specs) {
  return cljs.core$macros.emit_extend_protocol.call(null, p, specs);
};
cljs.core$macros.extend_protocol.cljs$lang$maxFixedArity = 3;
cljs.core$macros.extend_protocol.cljs$lang$applyTo = function(seq8183) {
  var G__8184 = cljs.core.first.call(null, seq8183);
  var seq8183__$1 = cljs.core.next.call(null, seq8183);
  var G__8185 = cljs.core.first.call(null, seq8183__$1);
  var seq8183__$2 = cljs.core.next.call(null, seq8183__$1);
  var G__8186 = cljs.core.first.call(null, seq8183__$2);
  var seq8183__$3 = cljs.core.next.call(null, seq8183__$2);
  return cljs.core$macros.extend_protocol.cljs$core$IFn$_invoke$arity$variadic(G__8184, G__8185, G__8186, seq8183__$3);
};
cljs.core$macros.extend_protocol.cljs$lang$macro = true;
cljs.core$macros.maybe_destructured = function cljs$core$macros$maybe_destructured(params, body) {
  if (cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, params)) {
    return cljs.core.cons.call(null, params, body);
  } else {
    var params__$1 = params;
    var new_params = cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.meta.call(null, params__$1));
    var lets = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (cljs.core.truth_(params__$1)) {
        if (cljs.core.first.call(null, params__$1) instanceof cljs.core.Symbol) {
          var G__8190 = cljs.core.next.call(null, params__$1);
          var G__8191 = cljs.core.conj.call(null, new_params, cljs.core.first.call(null, params__$1));
          var G__8192 = lets;
          params__$1 = G__8190;
          new_params = G__8191;
          lets = G__8192;
          continue;
        } else {
          var gparam = cljs.core.gensym.call(null, "p__");
          var G__8193 = cljs.core.next.call(null, params__$1);
          var G__8194 = cljs.core.conj.call(null, new_params, gparam);
          var G__8195 = cljs.core.conj.call(null, cljs.core.conj.call(null, lets, cljs.core.first.call(null, params__$1)), gparam);
          params__$1 = G__8193;
          new_params = G__8194;
          lets = G__8195;
          continue;
        }
      } else {
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new_params), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, lets), body)))))));
      }
      break;
    }
  }
};
cljs.core$macros.fn = function cljs$core$macros$fn() {
  var args__5106__auto__ = [];
  var len__5099__auto___8200 = arguments.length;
  var i__5100__auto___8201 = 0;
  while (true) {
    if (i__5100__auto___8201 < len__5099__auto___8200) {
      args__5106__auto__.push(arguments[i__5100__auto___8201]);
      var G__8202 = i__5100__auto___8201 + 1;
      i__5100__auto___8201 = G__8202;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.fn.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, sigs) {
  var name = cljs.core.first.call(null, sigs) instanceof cljs.core.Symbol ? cljs.core.first.call(null, sigs) : null;
  var sigs__$1 = cljs.core.truth_(name) ? cljs.core.next.call(null, sigs) : sigs;
  var sigs__$2 = cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, sigs__$1)) ? cljs.core._conj.call(null, cljs.core.List.EMPTY, sigs__$1) : cljs.core.seq_QMARK_.call(null, cljs.core.first.call(null, sigs__$1)) ? sigs__$1 : function() {
    throw new Error(cljs.core.seq.call(null, sigs__$1) ? [cljs.core.str("Parameter declaration "), cljs.core.str(cljs.core.first.call(null, sigs__$1)), cljs.core.str(" should be a vector")].join("") : [cljs.core.str("Parameter declaration missing")].join(""));
  }();
  var psig = function(name, sigs__$1, sigs__$2) {
    return function(sig) {
      if (!cljs.core.seq_QMARK_.call(null, sig)) {
        throw new Error([cljs.core.str("Invalid signature "), cljs.core.str(sig), cljs.core.str(" should be a list")].join(""));
      } else {
      }
      var vec__8199 = sig;
      var params = cljs.core.nth.call(null, vec__8199, 0, null);
      var body = cljs.core.nthnext.call(null, vec__8199, 1);
      var _ = !cljs.core.vector_QMARK_.call(null, params) ? function() {
        throw new Error(cljs.core.seq_QMARK_.call(null, cljs.core.first.call(null, sigs__$2)) ? [cljs.core.str("Parameter declaration "), cljs.core.str(params), cljs.core.str(" should be a vector")].join("") : [cljs.core.str("Invalid signature "), cljs.core.str(sig), cljs.core.str(" should be a list")].join(""));
      }() : null;
      var conds = cljs.core.next.call(null, body) && cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, body)) ? cljs.core.first.call(null, body) : null;
      var body__$1 = cljs.core.truth_(conds) ? cljs.core.next.call(null, body) : body;
      var conds__$1 = function() {
        var or__4060__auto__ = conds;
        if (cljs.core.truth_(or__4060__auto__)) {
          return or__4060__auto__;
        } else {
          return cljs.core.meta.call(null, params);
        }
      }();
      var pre = (new cljs.core.Keyword(null, "pre", "pre", 2118456869)).cljs$core$IFn$_invoke$arity$1(conds__$1);
      var post = (new cljs.core.Keyword(null, "post", "post", 269697687)).cljs$core$IFn$_invoke$arity$1(conds__$1);
      var body__$2 = cljs.core.truth_(post) ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, 
      cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "%", "%", -950237169, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 1 < cljs.core.count.call(null, body__$1) ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), body__$1))) : cljs.core.first.call(null, body__$1))))))), 
      cljs.core.map.call(null, function(vec__8199, params, body, _, conds, body__$1, conds__$1, pre, post, name, sigs__$1, sigs__$2) {
        return function(c) {
          return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "assert", "cljs.core$macros/assert", 1333198789, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, c))));
        };
      }(vec__8199, params, body, _, conds, body__$1, conds__$1, pre, post, name, sigs__$1, sigs__$2), post), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "%", "%", -950237169, null))))))))) : body__$1;
      var body__$3 = cljs.core.truth_(pre) ? cljs.core.concat.call(null, cljs.core.map.call(null, function(vec__8199, params, body, _, conds, body__$1, conds__$1, pre, post, body__$2, name, sigs__$1, sigs__$2) {
        return function(c) {
          return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "assert", "cljs.core$macros/assert", 1333198789, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, c))));
        };
      }(vec__8199, params, body, _, conds, body__$1, conds__$1, pre, post, body__$2, name, sigs__$1, sigs__$2), pre), body__$2) : body__$2;
      return cljs.core$macros.maybe_destructured.call(null, params, body__$3);
    };
  }(name, sigs__$1, sigs__$2);
  var new_sigs = cljs.core.map.call(null, psig, sigs__$2);
  return cljs.core.with_meta.call(null, cljs.core.truth_(name) ? cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), name, new_sigs) : cljs.core.cons.call(null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), new_sigs), cljs.core.meta.call(null, _AMPERSAND_form));
};
cljs.core$macros.fn.cljs$lang$maxFixedArity = 2;
cljs.core$macros.fn.cljs$lang$applyTo = function(seq8196) {
  var G__8197 = cljs.core.first.call(null, seq8196);
  var seq8196__$1 = cljs.core.next.call(null, seq8196);
  var G__8198 = cljs.core.first.call(null, seq8196__$1);
  var seq8196__$2 = cljs.core.next.call(null, seq8196__$1);
  return cljs.core$macros.fn.cljs$core$IFn$_invoke$arity$variadic(G__8197, G__8198, seq8196__$2);
};
cljs.core$macros.fn.cljs$lang$macro = true;
cljs.core$macros.defn_ = function cljs$core$macros$defn_() {
  var args__5106__auto__ = [];
  var len__5099__auto___8207 = arguments.length;
  var i__5100__auto___8208 = 0;
  while (true) {
    if (i__5100__auto___8208 < len__5099__auto___8207) {
      args__5106__auto__.push(arguments[i__5100__auto___8208]);
      var G__8209 = i__5100__auto___8208 + 1;
      i__5100__auto___8208 = G__8209;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.defn_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.defn_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, name, decls) {
  return cljs.core.list_STAR_.call(null, new cljs.core.Symbol("cljs.core$macros", "defn", "cljs.core$macros/defn", -728332354, null), cljs.core.with_meta.call(null, name, cljs.core.assoc.call(null, cljs.core.meta.call(null, name), new cljs.core.Keyword(null, "private", "private", -558947994), true)), decls);
};
cljs.core$macros.defn_.cljs$lang$maxFixedArity = 3;
cljs.core$macros.defn_.cljs$lang$applyTo = function(seq8203) {
  var G__8204 = cljs.core.first.call(null, seq8203);
  var seq8203__$1 = cljs.core.next.call(null, seq8203);
  var G__8205 = cljs.core.first.call(null, seq8203__$1);
  var seq8203__$2 = cljs.core.next.call(null, seq8203__$1);
  var G__8206 = cljs.core.first.call(null, seq8203__$2);
  var seq8203__$3 = cljs.core.next.call(null, seq8203__$2);
  return cljs.core$macros.defn_.cljs$core$IFn$_invoke$arity$variadic(G__8204, G__8205, G__8206, seq8203__$3);
};
cljs.core$macros.defn_.cljs$lang$macro = true;
cljs.core$macros.if_let = function cljs$core$macros$if_let() {
  var args8211 = [];
  var len__5099__auto___8220 = arguments.length;
  var i__5100__auto___8221 = 0;
  while (true) {
    if (i__5100__auto___8221 < len__5099__auto___8220) {
      args8211.push(arguments[i__5100__auto___8221]);
      var G__8222 = i__5100__auto___8221 + 1;
      i__5100__auto___8221 = G__8222;
      continue;
    } else {
    }
    break;
  }
  var G__8219 = args8211.length;
  switch(G__8219) {
    case 4:
      return cljs.core$macros.if_let.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8211.slice(5), 0);
      return cljs.core$macros.if_let.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5118__auto__);
  }
};
cljs.core$macros.if_let.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, bindings, then) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "if-let", "cljs.core$macros/if-let", 1291543946, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, bindings), cljs.core._conj.call(null, cljs.core.List.EMPTY, then), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))));
};
cljs.core$macros.if_let.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, then, else$, oldform) {
  var form = bindings.call(null, 0);
  var tst = bindings.call(null, 1);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "temp__8210__auto__", "temp__8210__auto__", 
  -673130999, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, tst)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "temp__8210__auto__", "temp__8210__auto__", -673130999, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, form), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "temp__8210__auto__", "temp__8210__auto__", -673130999, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, then))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, else$))))))));
};
cljs.core$macros.if_let.cljs$lang$applyTo = function(seq8212) {
  var G__8213 = cljs.core.first.call(null, seq8212);
  var seq8212__$1 = cljs.core.next.call(null, seq8212);
  var G__8214 = cljs.core.first.call(null, seq8212__$1);
  var seq8212__$2 = cljs.core.next.call(null, seq8212__$1);
  var G__8215 = cljs.core.first.call(null, seq8212__$2);
  var seq8212__$3 = cljs.core.next.call(null, seq8212__$2);
  var G__8216 = cljs.core.first.call(null, seq8212__$3);
  var seq8212__$4 = cljs.core.next.call(null, seq8212__$3);
  var G__8217 = cljs.core.first.call(null, seq8212__$4);
  var seq8212__$5 = cljs.core.next.call(null, seq8212__$4);
  return cljs.core$macros.if_let.cljs$core$IFn$_invoke$arity$variadic(G__8213, G__8214, G__8215, G__8216, G__8217, seq8212__$5);
};
cljs.core$macros.if_let.cljs$lang$maxFixedArity = 5;
cljs.core$macros.if_let.cljs$lang$macro = true;
cljs.core$macros.if_not = function cljs$core$macros$if_not() {
  var args8224 = [];
  var len__5099__auto___8227 = arguments.length;
  var i__5100__auto___8228 = 0;
  while (true) {
    if (i__5100__auto___8228 < len__5099__auto___8227) {
      args8224.push(arguments[i__5100__auto___8228]);
      var G__8229 = i__5100__auto___8228 + 1;
      i__5100__auto___8228 = G__8229;
      continue;
    } else {
    }
    break;
  }
  var G__8226 = args8224.length;
  switch(G__8226) {
    case 4:
      return cljs.core$macros.if_not.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core$macros.if_not.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8224.length)].join(""));;
  }
};
cljs.core$macros.if_not.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, test, then) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "if-not", "cljs.core$macros/if-not", -1825285737, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, test), cljs.core._conj.call(null, cljs.core.List.EMPTY, then), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))));
};
cljs.core$macros.if_not.cljs$core$IFn$_invoke$arity$5 = function(_AMPERSAND_form, _AMPERSAND_env, test, then, else$) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not", "cljs.core/not", 100665144, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  test))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, then), cljs.core._conj.call(null, cljs.core.List.EMPTY, else$))));
};
cljs.core$macros.if_not.cljs$lang$maxFixedArity = 5;
cljs.core$macros.if_not.cljs$lang$macro = true;
cljs.core$macros.letfn = function cljs$core$macros$letfn() {
  var args__5106__auto__ = [];
  var len__5099__auto___8236 = arguments.length;
  var i__5100__auto___8237 = 0;
  while (true) {
    if (i__5100__auto___8237 < len__5099__auto___8236) {
      args__5106__auto__.push(arguments[i__5100__auto___8237]);
      var G__8238 = i__5100__auto___8237 + 1;
      i__5100__auto___8237 = G__8238;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.letfn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.letfn.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, fnspecs, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.interleave.call(null, cljs.core.map.call(null, cljs.core.first, fnspecs), cljs.core.map.call(null, function(p1__8231_SHARP_) {
    return cljs.core.cons.call(null, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null), p1__8231_SHARP_);
  }, fnspecs)))), body)));
};
cljs.core$macros.letfn.cljs$lang$maxFixedArity = 3;
cljs.core$macros.letfn.cljs$lang$applyTo = function(seq8232) {
  var G__8233 = cljs.core.first.call(null, seq8232);
  var seq8232__$1 = cljs.core.next.call(null, seq8232);
  var G__8234 = cljs.core.first.call(null, seq8232__$1);
  var seq8232__$2 = cljs.core.next.call(null, seq8232__$1);
  var G__8235 = cljs.core.first.call(null, seq8232__$2);
  var seq8232__$3 = cljs.core.next.call(null, seq8232__$2);
  return cljs.core$macros.letfn.cljs$core$IFn$_invoke$arity$variadic(G__8233, G__8234, G__8235, seq8232__$3);
};
cljs.core$macros.letfn.cljs$lang$macro = true;
cljs.core$macros.memfn = function cljs$core$macros$memfn() {
  var args__5106__auto__ = [];
  var len__5099__auto___8243 = arguments.length;
  var i__5100__auto___8244 = 0;
  while (true) {
    if (i__5100__auto___8244 < len__5099__auto___8243) {
      args__5106__auto__.push(arguments[i__5100__auto___8244]);
      var G__8245 = i__5100__auto___8244 + 1;
      i__5100__auto___8244 = G__8245;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.memfn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.memfn.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, name, args) {
  var t = cljs.core.with_meta.call(null, cljs.core.gensym.call(null, "target"), cljs.core.meta.call(null, name));
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, t), args))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, name), args)))))))))));
};
cljs.core$macros.memfn.cljs$lang$maxFixedArity = 3;
cljs.core$macros.memfn.cljs$lang$applyTo = function(seq8239) {
  var G__8240 = cljs.core.first.call(null, seq8239);
  var seq8239__$1 = cljs.core.next.call(null, seq8239);
  var G__8241 = cljs.core.first.call(null, seq8239__$1);
  var seq8239__$2 = cljs.core.next.call(null, seq8239__$1);
  var G__8242 = cljs.core.first.call(null, seq8239__$2);
  var seq8239__$3 = cljs.core.next.call(null, seq8239__$2);
  return cljs.core$macros.memfn.cljs$core$IFn$_invoke$arity$variadic(G__8240, G__8241, G__8242, seq8239__$3);
};
cljs.core$macros.memfn.cljs$lang$macro = true;
cljs.core$macros.when = function cljs$core$macros$when() {
  var args__5106__auto__ = [];
  var len__5099__auto___8250 = arguments.length;
  var i__5100__auto___8251 = 0;
  while (true) {
    if (i__5100__auto___8251 < len__5099__auto___8250) {
      args__5106__auto__.push(arguments[i__5100__auto___8251]);
      var G__8252 = i__5100__auto___8251 + 1;
      i__5100__auto___8251 = G__8252;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.when.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.when.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, test, body) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), body)), test), new cljs.core.Symbol(null, "if", "if", 1181717262, null));
};
cljs.core$macros.when.cljs$lang$maxFixedArity = 3;
cljs.core$macros.when.cljs$lang$applyTo = function(seq8246) {
  var G__8247 = cljs.core.first.call(null, seq8246);
  var seq8246__$1 = cljs.core.next.call(null, seq8246);
  var G__8248 = cljs.core.first.call(null, seq8246__$1);
  var seq8246__$2 = cljs.core.next.call(null, seq8246__$1);
  var G__8249 = cljs.core.first.call(null, seq8246__$2);
  var seq8246__$3 = cljs.core.next.call(null, seq8246__$2);
  return cljs.core$macros.when.cljs$core$IFn$_invoke$arity$variadic(G__8247, G__8248, G__8249, seq8246__$3);
};
cljs.core$macros.when.cljs$lang$macro = true;
cljs.core$macros.when_first = function cljs$core$macros$when_first() {
  var args__5106__auto__ = [];
  var len__5099__auto___8259 = arguments.length;
  var i__5100__auto___8260 = 0;
  while (true) {
    if (i__5100__auto___8260 < len__5099__auto___8259) {
      args__5106__auto__.push(arguments[i__5100__auto___8260]);
      var G__8261 = i__5100__auto___8260 + 1;
      i__5100__auto___8260 = G__8261;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.when_first.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.when_first.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, body) {
  var vec__8258 = bindings;
  var x = cljs.core.nth.call(null, vec__8258, 0, null);
  var xs = cljs.core.nth.call(null, vec__8258, 1, null);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when-let", "cljs.core$macros/when-let", -2004472648, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "xs__8253__auto__", "xs__8253__auto__", 
  1789553867, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "seq", "cljs.core/seq", -1649497689, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, xs)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol("cljs.core", "first", "cljs.core/first", -752535972, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "xs__8253__auto__", "xs__8253__auto__", 1789553867, null))))))))))), body)))))));
};
cljs.core$macros.when_first.cljs$lang$maxFixedArity = 3;
cljs.core$macros.when_first.cljs$lang$applyTo = function(seq8254) {
  var G__8255 = cljs.core.first.call(null, seq8254);
  var seq8254__$1 = cljs.core.next.call(null, seq8254);
  var G__8256 = cljs.core.first.call(null, seq8254__$1);
  var seq8254__$2 = cljs.core.next.call(null, seq8254__$1);
  var G__8257 = cljs.core.first.call(null, seq8254__$2);
  var seq8254__$3 = cljs.core.next.call(null, seq8254__$2);
  return cljs.core$macros.when_first.cljs$core$IFn$_invoke$arity$variadic(G__8255, G__8256, G__8257, seq8254__$3);
};
cljs.core$macros.when_first.cljs$lang$macro = true;
cljs.core$macros.when_let = function cljs$core$macros$when_let() {
  var args__5106__auto__ = [];
  var len__5099__auto___8267 = arguments.length;
  var i__5100__auto___8268 = 0;
  while (true) {
    if (i__5100__auto___8268 < len__5099__auto___8267) {
      args__5106__auto__.push(arguments[i__5100__auto___8268]);
      var G__8269 = i__5100__auto___8268 + 1;
      i__5100__auto___8268 = G__8269;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.when_let.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.when_let.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, body) {
  var form = bindings.call(null, 0);
  var tst = bindings.call(null, 1);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "temp__8262__auto__", "temp__8262__auto__", 
  -1364219367, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, tst)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when", "cljs.core$macros/when", 328457725, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "temp__8262__auto__", "temp__8262__auto__", -1364219367, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, form), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "temp__8262__auto__", "temp__8262__auto__", -1364219367, null))))))), body)))))))))));
};
cljs.core$macros.when_let.cljs$lang$maxFixedArity = 3;
cljs.core$macros.when_let.cljs$lang$applyTo = function(seq8263) {
  var G__8264 = cljs.core.first.call(null, seq8263);
  var seq8263__$1 = cljs.core.next.call(null, seq8263);
  var G__8265 = cljs.core.first.call(null, seq8263__$1);
  var seq8263__$2 = cljs.core.next.call(null, seq8263__$1);
  var G__8266 = cljs.core.first.call(null, seq8263__$2);
  var seq8263__$3 = cljs.core.next.call(null, seq8263__$2);
  return cljs.core$macros.when_let.cljs$core$IFn$_invoke$arity$variadic(G__8264, G__8265, G__8266, seq8263__$3);
};
cljs.core$macros.when_let.cljs$lang$macro = true;
cljs.core$macros.when_not = function cljs$core$macros$when_not() {
  var args__5106__auto__ = [];
  var len__5099__auto___8274 = arguments.length;
  var i__5100__auto___8275 = 0;
  while (true) {
    if (i__5100__auto___8275 < len__5099__auto___8274) {
      args__5106__auto__.push(arguments[i__5100__auto___8275]);
      var G__8276 = i__5100__auto___8275 + 1;
      i__5100__auto___8275 = G__8276;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.when_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.when_not.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, test, body) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), body)), null), test), new cljs.core.Symbol(null, "if", "if", 1181717262, null));
};
cljs.core$macros.when_not.cljs$lang$maxFixedArity = 3;
cljs.core$macros.when_not.cljs$lang$applyTo = function(seq8270) {
  var G__8271 = cljs.core.first.call(null, seq8270);
  var seq8270__$1 = cljs.core.next.call(null, seq8270);
  var G__8272 = cljs.core.first.call(null, seq8270__$1);
  var seq8270__$2 = cljs.core.next.call(null, seq8270__$1);
  var G__8273 = cljs.core.first.call(null, seq8270__$2);
  var seq8270__$3 = cljs.core.next.call(null, seq8270__$2);
  return cljs.core$macros.when_not.cljs$core$IFn$_invoke$arity$variadic(G__8271, G__8272, G__8273, seq8270__$3);
};
cljs.core$macros.when_not.cljs$lang$macro = true;
cljs.core$macros.while$ = function cljs$core$macros$while() {
  var args__5106__auto__ = [];
  var len__5099__auto___8281 = arguments.length;
  var i__5100__auto___8282 = 0;
  while (true) {
    if (i__5100__auto___8282 < len__5099__auto___8281) {
      args__5106__auto__.push(arguments[i__5100__auto___8282]);
      var G__8283 = i__5100__auto___8282 + 1;
      i__5100__auto___8282 = G__8283;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.while$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.while$.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, test, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "loop", "cljs.core$macros/loop", 1731108390, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when", "cljs.core$macros/when", 328457725, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, test), body, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)))))))))))));
};
cljs.core$macros.while$.cljs$lang$maxFixedArity = 3;
cljs.core$macros.while$.cljs$lang$applyTo = function(seq8277) {
  var G__8278 = cljs.core.first.call(null, seq8277);
  var seq8277__$1 = cljs.core.next.call(null, seq8277);
  var G__8279 = cljs.core.first.call(null, seq8277__$1);
  var seq8277__$2 = cljs.core.next.call(null, seq8277__$1);
  var G__8280 = cljs.core.first.call(null, seq8277__$2);
  var seq8277__$3 = cljs.core.next.call(null, seq8277__$2);
  return cljs.core$macros.while$.cljs$core$IFn$_invoke$arity$variadic(G__8278, G__8279, G__8280, seq8277__$3);
};
cljs.core$macros.while$.cljs$lang$macro = true;
cljs.core$macros.cond__GT_ = function cljs$core$macros$cond__GT_() {
  var args__5106__auto__ = [];
  var len__5099__auto___8290 = arguments.length;
  var i__5100__auto___8291 = 0;
  while (true) {
    if (i__5100__auto___8291 < len__5099__auto___8290) {
      args__5106__auto__.push(arguments[i__5100__auto___8291]);
      var G__8292 = i__5100__auto___8291 + 1;
      i__5100__auto___8291 = G__8292;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.cond__GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.cond__GT_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, expr, clauses) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, clauses))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "clauses", "clauses", -1199594528, null)))))].join(""));
  }
  var g = cljs.core.gensym.call(null);
  var pstep = function(g) {
    return function(p__8288) {
      var vec__8289 = p__8288;
      var test = cljs.core.nth.call(null, vec__8289, 0, null);
      var step = cljs.core.nth.call(null, vec__8289, 1, null);
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, test), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "->", "cljs.core$macros/->", 
      -1519455206, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, g), cljs.core._conj.call(null, cljs.core.List.EMPTY, step))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, g))));
    };
  }(g);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, g), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr), cljs.core.interleave.call(null, 
  cljs.core.repeat.call(null, g), cljs.core.map.call(null, pstep, cljs.core.partition.call(null, 2, clauses)))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, g))));
};
cljs.core$macros.cond__GT_.cljs$lang$maxFixedArity = 3;
cljs.core$macros.cond__GT_.cljs$lang$applyTo = function(seq8284) {
  var G__8285 = cljs.core.first.call(null, seq8284);
  var seq8284__$1 = cljs.core.next.call(null, seq8284);
  var G__8286 = cljs.core.first.call(null, seq8284__$1);
  var seq8284__$2 = cljs.core.next.call(null, seq8284__$1);
  var G__8287 = cljs.core.first.call(null, seq8284__$2);
  var seq8284__$3 = cljs.core.next.call(null, seq8284__$2);
  return cljs.core$macros.cond__GT_.cljs$core$IFn$_invoke$arity$variadic(G__8285, G__8286, G__8287, seq8284__$3);
};
cljs.core$macros.cond__GT_.cljs$lang$macro = true;
cljs.core$macros.cond__GT__GT_ = function cljs$core$macros$cond__GT__GT_() {
  var args__5106__auto__ = [];
  var len__5099__auto___8299 = arguments.length;
  var i__5100__auto___8300 = 0;
  while (true) {
    if (i__5100__auto___8300 < len__5099__auto___8299) {
      args__5106__auto__.push(arguments[i__5100__auto___8300]);
      var G__8301 = i__5100__auto___8300 + 1;
      i__5100__auto___8300 = G__8301;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.cond__GT__GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.cond__GT__GT_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, expr, clauses) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, clauses))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "clauses", "clauses", -1199594528, null)))))].join(""));
  }
  var g = cljs.core.gensym.call(null);
  var pstep = function(g) {
    return function(p__8297) {
      var vec__8298 = p__8297;
      var test = cljs.core.nth.call(null, vec__8298, 0, null);
      var step = cljs.core.nth.call(null, vec__8298, 1, null);
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, test), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "->>", "cljs.core$macros/->>", 
      -1353108561, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, g), cljs.core._conj.call(null, cljs.core.List.EMPTY, step))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, g))));
    };
  }(g);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, g), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr), cljs.core.interleave.call(null, 
  cljs.core.repeat.call(null, g), cljs.core.map.call(null, pstep, cljs.core.partition.call(null, 2, clauses)))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, g))));
};
cljs.core$macros.cond__GT__GT_.cljs$lang$maxFixedArity = 3;
cljs.core$macros.cond__GT__GT_.cljs$lang$applyTo = function(seq8293) {
  var G__8294 = cljs.core.first.call(null, seq8293);
  var seq8293__$1 = cljs.core.next.call(null, seq8293);
  var G__8295 = cljs.core.first.call(null, seq8293__$1);
  var seq8293__$2 = cljs.core.next.call(null, seq8293__$1);
  var G__8296 = cljs.core.first.call(null, seq8293__$2);
  var seq8293__$3 = cljs.core.next.call(null, seq8293__$2);
  return cljs.core$macros.cond__GT__GT_.cljs$core$IFn$_invoke$arity$variadic(G__8294, G__8295, G__8296, seq8293__$3);
};
cljs.core$macros.cond__GT__GT_.cljs$lang$macro = true;
cljs.core$macros.as__GT_ = function cljs$core$macros$as__GT_() {
  var args__5106__auto__ = [];
  var len__5099__auto___8307 = arguments.length;
  var i__5100__auto___8308 = 0;
  while (true) {
    if (i__5100__auto___8308 < len__5099__auto___8307) {
      args__5106__auto__.push(arguments[i__5100__auto___8308]);
      var G__8309 = i__5100__auto___8308 + 1;
      i__5100__auto___8308 = G__8309;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 4 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(4), 0) : null;
  return cljs.core$macros.as__GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5107__auto__);
};
cljs.core$macros.as__GT_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, expr, name, forms) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, name), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr), 
  cljs.core.interleave.call(null, cljs.core.repeat.call(null, name), forms)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, name))));
};
cljs.core$macros.as__GT_.cljs$lang$maxFixedArity = 4;
cljs.core$macros.as__GT_.cljs$lang$applyTo = function(seq8302) {
  var G__8303 = cljs.core.first.call(null, seq8302);
  var seq8302__$1 = cljs.core.next.call(null, seq8302);
  var G__8304 = cljs.core.first.call(null, seq8302__$1);
  var seq8302__$2 = cljs.core.next.call(null, seq8302__$1);
  var G__8305 = cljs.core.first.call(null, seq8302__$2);
  var seq8302__$3 = cljs.core.next.call(null, seq8302__$2);
  var G__8306 = cljs.core.first.call(null, seq8302__$3);
  var seq8302__$4 = cljs.core.next.call(null, seq8302__$3);
  return cljs.core$macros.as__GT_.cljs$core$IFn$_invoke$arity$variadic(G__8303, G__8304, G__8305, G__8306, seq8302__$4);
};
cljs.core$macros.as__GT_.cljs$lang$macro = true;
cljs.core$macros.some__GT_ = function cljs$core$macros$some__GT_() {
  var args__5106__auto__ = [];
  var len__5099__auto___8314 = arguments.length;
  var i__5100__auto___8315 = 0;
  while (true) {
    if (i__5100__auto___8315 < len__5099__auto___8314) {
      args__5106__auto__.push(arguments[i__5100__auto___8315]);
      var G__8316 = i__5100__auto___8315 + 1;
      i__5100__auto___8315 = G__8316;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.some__GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.some__GT_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, expr, forms) {
  var g = cljs.core.gensym.call(null);
  var pstep = function(g) {
    return function(step) {
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
      g))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "->", "cljs.core$macros/->", -1519455206, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, g), cljs.core._conj.call(null, cljs.core.List.EMPTY, step))))))));
    };
  }(g);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, g), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr), cljs.core.interleave.call(null, 
  cljs.core.repeat.call(null, g), cljs.core.map.call(null, pstep, forms))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, g))));
};
cljs.core$macros.some__GT_.cljs$lang$maxFixedArity = 3;
cljs.core$macros.some__GT_.cljs$lang$applyTo = function(seq8310) {
  var G__8311 = cljs.core.first.call(null, seq8310);
  var seq8310__$1 = cljs.core.next.call(null, seq8310);
  var G__8312 = cljs.core.first.call(null, seq8310__$1);
  var seq8310__$2 = cljs.core.next.call(null, seq8310__$1);
  var G__8313 = cljs.core.first.call(null, seq8310__$2);
  var seq8310__$3 = cljs.core.next.call(null, seq8310__$2);
  return cljs.core$macros.some__GT_.cljs$core$IFn$_invoke$arity$variadic(G__8311, G__8312, G__8313, seq8310__$3);
};
cljs.core$macros.some__GT_.cljs$lang$macro = true;
cljs.core$macros.some__GT__GT_ = function cljs$core$macros$some__GT__GT_() {
  var args__5106__auto__ = [];
  var len__5099__auto___8321 = arguments.length;
  var i__5100__auto___8322 = 0;
  while (true) {
    if (i__5100__auto___8322 < len__5099__auto___8321) {
      args__5106__auto__.push(arguments[i__5100__auto___8322]);
      var G__8323 = i__5100__auto___8322 + 1;
      i__5100__auto___8322 = G__8323;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.some__GT__GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.some__GT__GT_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, expr, forms) {
  var g = cljs.core.gensym.call(null);
  var pstep = function(g) {
    return function(step) {
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
      g))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "->>", "cljs.core$macros/->>", -1353108561, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, g), cljs.core._conj.call(null, cljs.core.List.EMPTY, step))))))));
    };
  }(g);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, g), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr), cljs.core.interleave.call(null, 
  cljs.core.repeat.call(null, g), cljs.core.map.call(null, pstep, forms))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, g))));
};
cljs.core$macros.some__GT__GT_.cljs$lang$maxFixedArity = 3;
cljs.core$macros.some__GT__GT_.cljs$lang$applyTo = function(seq8317) {
  var G__8318 = cljs.core.first.call(null, seq8317);
  var seq8317__$1 = cljs.core.next.call(null, seq8317);
  var G__8319 = cljs.core.first.call(null, seq8317__$1);
  var seq8317__$2 = cljs.core.next.call(null, seq8317__$1);
  var G__8320 = cljs.core.first.call(null, seq8317__$2);
  var seq8317__$3 = cljs.core.next.call(null, seq8317__$2);
  return cljs.core$macros.some__GT__GT_.cljs$core$IFn$_invoke$arity$variadic(G__8318, G__8319, G__8320, seq8317__$3);
};
cljs.core$macros.some__GT__GT_.cljs$lang$macro = true;
cljs.core$macros.if_some = function cljs$core$macros$if_some() {
  var args8325 = [];
  var len__5099__auto___8334 = arguments.length;
  var i__5100__auto___8335 = 0;
  while (true) {
    if (i__5100__auto___8335 < len__5099__auto___8334) {
      args8325.push(arguments[i__5100__auto___8335]);
      var G__8336 = i__5100__auto___8335 + 1;
      i__5100__auto___8335 = G__8336;
      continue;
    } else {
    }
    break;
  }
  var G__8333 = args8325.length;
  switch(G__8333) {
    case 4:
      return cljs.core$macros.if_some.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8325.slice(5), 0);
      return cljs.core$macros.if_some.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5118__auto__);
  }
};
cljs.core$macros.if_some.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, bindings, then) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "if-some", "cljs.core$macros/if-some", 1405341529, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, bindings), cljs.core._conj.call(null, cljs.core.List.EMPTY, then), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))));
};
cljs.core$macros.if_some.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, then, else$, oldform) {
  var form = bindings.call(null, 0);
  var tst = bindings.call(null, 1);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "temp__8324__auto__", "temp__8324__auto__", 
  -163466206, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, tst)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "temp__8324__auto__", "temp__8324__auto__", -163466206, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, else$), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
  "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, form), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "temp__8324__auto__", "temp__8324__auto__", -163466206, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, then))))))))))));
};
cljs.core$macros.if_some.cljs$lang$applyTo = function(seq8326) {
  var G__8327 = cljs.core.first.call(null, seq8326);
  var seq8326__$1 = cljs.core.next.call(null, seq8326);
  var G__8328 = cljs.core.first.call(null, seq8326__$1);
  var seq8326__$2 = cljs.core.next.call(null, seq8326__$1);
  var G__8329 = cljs.core.first.call(null, seq8326__$2);
  var seq8326__$3 = cljs.core.next.call(null, seq8326__$2);
  var G__8330 = cljs.core.first.call(null, seq8326__$3);
  var seq8326__$4 = cljs.core.next.call(null, seq8326__$3);
  var G__8331 = cljs.core.first.call(null, seq8326__$4);
  var seq8326__$5 = cljs.core.next.call(null, seq8326__$4);
  return cljs.core$macros.if_some.cljs$core$IFn$_invoke$arity$variadic(G__8327, G__8328, G__8329, G__8330, G__8331, seq8326__$5);
};
cljs.core$macros.if_some.cljs$lang$maxFixedArity = 5;
cljs.core$macros.if_some.cljs$lang$macro = true;
cljs.core$macros.when_some = function cljs$core$macros$when_some() {
  var args__5106__auto__ = [];
  var len__5099__auto___8343 = arguments.length;
  var i__5100__auto___8344 = 0;
  while (true) {
    if (i__5100__auto___8344 < len__5099__auto___8343) {
      args__5106__auto__.push(arguments[i__5100__auto___8344]);
      var G__8345 = i__5100__auto___8344 + 1;
      i__5100__auto___8344 = G__8345;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.when_some.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.when_some.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, body) {
  var form = bindings.call(null, 0);
  var tst = bindings.call(null, 1);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "temp__8338__auto__", "temp__8338__auto__", 
  -1636804597, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, tst)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "temp__8338__auto__", "temp__8338__auto__", -1636804597, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
  "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, form), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "temp__8338__auto__", "temp__8338__auto__", -1636804597, null))))))), body)))))))))));
};
cljs.core$macros.when_some.cljs$lang$maxFixedArity = 3;
cljs.core$macros.when_some.cljs$lang$applyTo = function(seq8339) {
  var G__8340 = cljs.core.first.call(null, seq8339);
  var seq8339__$1 = cljs.core.next.call(null, seq8339);
  var G__8341 = cljs.core.first.call(null, seq8339__$1);
  var seq8339__$2 = cljs.core.next.call(null, seq8339__$1);
  var G__8342 = cljs.core.first.call(null, seq8339__$2);
  var seq8339__$3 = cljs.core.next.call(null, seq8339__$2);
  return cljs.core$macros.when_some.cljs$core$IFn$_invoke$arity$variadic(G__8340, G__8341, G__8342, seq8339__$3);
};
cljs.core$macros.when_some.cljs$lang$macro = true;
cljs.core$macros.assert_valid_fdecl = function cljs$core$macros$assert_valid_fdecl(fdecl) {
  if (cljs.core.empty_QMARK_.call(null, fdecl)) {
    throw new Error("Parameter declaration missing");
  } else {
  }
  var argdecls = cljs.core.map.call(null, function(p1__8346_SHARP_) {
    if (cljs.core.seq_QMARK_.call(null, p1__8346_SHARP_)) {
      return cljs.core.first.call(null, p1__8346_SHARP_);
    } else {
      throw new Error(cljs.core.seq_QMARK_.call(null, cljs.core.first.call(null, fdecl)) ? [cljs.core.str('Invalid signature "'), cljs.core.str(p1__8346_SHARP_), cljs.core.str('" should be a list')].join("") : [cljs.core.str('Parameter declaration "'), cljs.core.str(p1__8346_SHARP_), cljs.core.str('" should be a vector')].join(""));
    }
  }, fdecl);
  var bad_args = cljs.core.seq.call(null, cljs.core.remove.call(null, function(argdecls) {
    return function(p1__8347_SHARP_) {
      return cljs.core.vector_QMARK_.call(null, p1__8347_SHARP_);
    };
  }(argdecls), argdecls));
  if (bad_args) {
    throw new Error([cljs.core.str('Parameter declaration "'), cljs.core.str(cljs.core.first.call(null, bad_args)), cljs.core.str('" should be a vector')].join(""));
  } else {
    return null;
  }
};
cljs.core$macros.sigs = function cljs$core$macros$sigs(fdecl) {
  cljs.core$macros.assert_valid_fdecl.call(null, fdecl);
  var asig = function(fdecl__$1) {
    var arglist = cljs.core.first.call(null, fdecl__$1);
    var arglist__$1 = cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "&form", "&form", 1482799337, null), cljs.core.first.call(null, arglist)) ? cljs.core.subvec.call(null, arglist, 2, cljs.core.count.call(null, arglist)) : arglist;
    var body = cljs.core.next.call(null, fdecl__$1);
    if (cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, body))) {
      if (cljs.core.next.call(null, body)) {
        return cljs.core.with_meta.call(null, arglist__$1, cljs.core.conj.call(null, cljs.core.truth_(cljs.core.meta.call(null, arglist__$1)) ? cljs.core.meta.call(null, arglist__$1) : cljs.core.PersistentArrayMap.EMPTY, cljs.core.first.call(null, body)));
      } else {
        return arglist__$1;
      }
    } else {
      return arglist__$1;
    }
  };
  if (cljs.core.seq_QMARK_.call(null, cljs.core.first.call(null, fdecl))) {
    var ret = cljs.core.PersistentVector.EMPTY;
    var fdecls = fdecl;
    while (true) {
      if (cljs.core.truth_(fdecls)) {
        var G__8348 = cljs.core.conj.call(null, ret, asig.call(null, cljs.core.first.call(null, fdecls)));
        var G__8349 = cljs.core.next.call(null, fdecls);
        ret = G__8348;
        fdecls = G__8349;
        continue;
      } else {
        return cljs.core.seq.call(null, ret);
      }
      break;
    }
  } else {
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, asig.call(null, fdecl));
  }
};
cljs.core$macros.defonce = function cljs$core$macros$defonce(_AMPERSAND_form, _AMPERSAND_env, x, init) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when-not", "cljs.core$macros/when-not", -764302244, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "exists?", "cljs.core$macros/exists?", 
  -1828590389, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "def", "def", 597100991, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, init))))))));
};
cljs.core$macros.defonce.cljs$lang$macro = true;
cljs.core$macros.assert_args = function cljs$core$macros$assert_args() {
  var args__5106__auto__ = [];
  var len__5099__auto___8354 = arguments.length;
  var i__5100__auto___8355 = 0;
  while (true) {
    if (i__5100__auto___8355 < len__5099__auto___8354) {
      args__5106__auto__.push(arguments[i__5100__auto___8355]);
      var G__8356 = i__5100__auto___8355 + 1;
      i__5100__auto___8355 = G__8356;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.assert_args.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.assert_args.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, fnname, pairs) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when-not", "cljs.core$macros/when-not", -764302244, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.first.call(null, pairs)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "throw", "throw", 595905694, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", 
  "Error.", "js/Error.", 750655924, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, [cljs.core.str(fnname), cljs.core.str(" requires "), cljs.core.str(cljs.core.second.call(null, pairs))].join("")))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, function() {
    var more = cljs.core.nnext.call(null, pairs);
    if (cljs.core.truth_(more)) {
      return cljs.core.list_STAR_.call(null, new cljs.core.Symbol("cljs.core$macros", "assert-args", "cljs.core$macros/assert-args", -1297839583, null), fnname, more);
    } else {
      return null;
    }
  }()))));
};
cljs.core$macros.assert_args.cljs$lang$maxFixedArity = 3;
cljs.core$macros.assert_args.cljs$lang$applyTo = function(seq8350) {
  var G__8351 = cljs.core.first.call(null, seq8350);
  var seq8350__$1 = cljs.core.next.call(null, seq8350);
  var G__8352 = cljs.core.first.call(null, seq8350__$1);
  var seq8350__$2 = cljs.core.next.call(null, seq8350__$1);
  var G__8353 = cljs.core.first.call(null, seq8350__$2);
  var seq8350__$3 = cljs.core.next.call(null, seq8350__$2);
  return cljs.core$macros.assert_args.cljs$core$IFn$_invoke$arity$variadic(G__8351, G__8352, G__8353, seq8350__$3);
};
cljs.core$macros.assert_args.cljs$lang$macro = true;
cljs.core$macros.destructure = function cljs$core$macros$destructure(bindings) {
  var bents = cljs.core.partition.call(null, 2, bindings);
  var pb = function(bents) {
    return function cljs$core$macros$destructure_$_pb(bvec, b, v) {
      var pvec = function(bents) {
        return function(bvec__$1, b__$1, val) {
          var gvec = cljs.core.gensym.call(null, "vec__");
          var ret = cljs.core.conj.call(null, cljs.core.conj.call(null, bvec__$1, gvec), val);
          var n = 0;
          var bs = b__$1;
          var seen_rest_QMARK_ = false;
          while (true) {
            if (cljs.core.seq.call(null, bs)) {
              var firstb = cljs.core.first.call(null, bs);
              if (cljs.core._EQ_.call(null, firstb, new cljs.core.Symbol(null, "&", "&", -2144855648, null))) {
                var G__8362 = cljs$core$macros$destructure_$_pb.call(null, ret, cljs.core.second.call(null, bs), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, n), gvec), new cljs.core.Symbol("cljs.core", "nthnext", "cljs.core/nthnext", -1690777327, null)));
                var G__8363 = n;
                var G__8364 = cljs.core.nnext.call(null, bs);
                var G__8365 = true;
                ret = G__8362;
                n = G__8363;
                bs = G__8364;
                seen_rest_QMARK_ = G__8365;
                continue;
              } else {
                if (cljs.core._EQ_.call(null, firstb, new cljs.core.Keyword(null, "as", "as", 1148689641))) {
                  return cljs$core$macros$destructure_$_pb.call(null, ret, cljs.core.second.call(null, bs), gvec);
                } else {
                  if (seen_rest_QMARK_) {
                    throw new Error("Unsupported binding form, only :as can follow & parameter");
                  } else {
                    var G__8366 = cljs$core$macros$destructure_$_pb.call(null, ret, firstb, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, null), n), gvec), new cljs.core.Symbol("cljs.core", "nth", "cljs.core/nth", 1961052085, null)));
                    var G__8367 = n + 1;
                    var G__8368 = cljs.core.next.call(null, bs);
                    var G__8369 = seen_rest_QMARK_;
                    ret = G__8366;
                    n = G__8367;
                    bs = G__8368;
                    seen_rest_QMARK_ = G__8369;
                    continue;
                  }
                }
              }
            } else {
              return ret;
            }
            break;
          }
        };
      }(bents);
      var pmap = function(pvec, bents) {
        return function(bvec__$1, b__$1, v__$1) {
          var gmap = cljs.core.gensym.call(null, "map__");
          var defaults = (new cljs.core.Keyword(null, "or", "or", 235744169)).cljs$core$IFn$_invoke$arity$1(b__$1);
          var ret = function(gmap, defaults, pvec, bents) {
            return function(ret) {
              if (cljs.core.truth_((new cljs.core.Keyword(null, "as", "as", 1148689641)).cljs$core$IFn$_invoke$arity$1(b__$1))) {
                return cljs.core.conj.call(null, ret, (new cljs.core.Keyword(null, "as", "as", 1148689641)).cljs$core$IFn$_invoke$arity$1(b__$1), gmap);
              } else {
                return ret;
              }
            };
          }(gmap, defaults, pvec, bents).call(null, cljs.core.conj.call(null, cljs.core.conj.call(null, cljs.core.conj.call(null, cljs.core.conj.call(null, bvec__$1, gmap), v__$1), gmap), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
          cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "implements?", "cljs.core$macros/implements?", -94762250, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "ISeq", "cljs.core/ISeq", 230133392, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gmap))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
          cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "apply", "cljs.core/apply", 1757277831, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "hash-map", "cljs.core/hash-map", 303385767, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gmap))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, gmap))))));
          var bes = cljs.core.reduce.call(null, function(ret, gmap, defaults, pvec, bents) {
            return function(bes, entry) {
              return cljs.core.reduce.call(null, function(ret, gmap, defaults, pvec, bents) {
                return function(p1__8357_SHARP_, p2__8358_SHARP_) {
                  return cljs.core.assoc.call(null, p1__8357_SHARP_, p2__8358_SHARP_, cljs.core.val.call(null, entry).call(null, p2__8358_SHARP_));
                };
              }(ret, gmap, defaults, pvec, bents), cljs.core.dissoc.call(null, bes, cljs.core.key.call(null, entry)), cljs.core.key.call(null, entry).call(null, bes));
            };
          }(ret, gmap, defaults, pvec, bents), cljs.core.dissoc.call(null, b__$1, new cljs.core.Keyword(null, "as", "as", 1148689641), new cljs.core.Keyword(null, "or", "or", 235744169)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "keys", "keys", 1068423698), function(ret, gmap, defaults, pvec, bents) {
            return function(p1__8359_SHARP_) {
              if (p1__8359_SHARP_ instanceof cljs.core.Keyword) {
                return p1__8359_SHARP_;
              } else {
                return cljs.core.keyword.call(null, [cljs.core.str(p1__8359_SHARP_)].join(""));
              }
            };
          }(ret, gmap, defaults, pvec, bents), new cljs.core.Keyword(null, "strs", "strs", 1175537277), cljs.core.str, new cljs.core.Keyword(null, "syms", "syms", -1575891762), function(ret, gmap, defaults, pvec, bents) {
            return function(p1__8360_SHARP_) {
              return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, p1__8360_SHARP_), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
            };
          }(ret, gmap, defaults, pvec, bents)], null));
          while (true) {
            if (cljs.core.seq.call(null, bes)) {
              var bb = cljs.core.key.call(null, cljs.core.first.call(null, bes));
              var bk = cljs.core.val.call(null, cljs.core.first.call(null, bes));
              var has_default = cljs.core.contains_QMARK_.call(null, defaults, bb);
              var G__8370 = cljs$core$macros$destructure_$_pb.call(null, ret, bb, has_default ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, defaults.call(null, bb)), bk), gmap), new cljs.core.Symbol("cljs.core", "get", "cljs.core/get", -296075407, null)) : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, bk), gmap), new cljs.core.Symbol("cljs.core", "get", "cljs.core/get", 
              -296075407, null)));
              var G__8371 = cljs.core.next.call(null, bes);
              ret = G__8370;
              bes = G__8371;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
      }(pvec, bents);
      if (b instanceof cljs.core.Symbol) {
        return cljs.core.conj.call(null, cljs.core.conj.call(null, bvec, cljs.core.truth_(cljs.core.namespace.call(null, b)) ? cljs.core.symbol.call(null, cljs.core.name.call(null, b)) : b), v);
      } else {
        if (b instanceof cljs.core.Keyword) {
          return cljs.core.conj.call(null, cljs.core.conj.call(null, bvec, cljs.core.symbol.call(null, cljs.core.name.call(null, b))), v);
        } else {
          if (cljs.core.vector_QMARK_.call(null, b)) {
            return pvec.call(null, bvec, b, v);
          } else {
            if (cljs.core.map_QMARK_.call(null, b)) {
              return pmap.call(null, bvec, b, v);
            } else {
              throw new Error([cljs.core.str("Unsupported binding form: "), cljs.core.str(b)].join(""));
            }
          }
        }
      }
    };
  }(bents);
  var process_entry = function(bents, pb) {
    return function(bvec, b) {
      return pb.call(null, bvec, cljs.core.first.call(null, b), cljs.core.second.call(null, b));
    };
  }(bents, pb);
  if (cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, cljs.core.map.call(null, cljs.core.first, bents))) {
    return bindings;
  } else {
    var temp__4423__auto__ = cljs.core.seq.call(null, cljs.core.filter.call(null, function(bents, pb, process_entry) {
      return function(p1__8361_SHARP_) {
        return cljs.core.first.call(null, p1__8361_SHARP_) instanceof cljs.core.Keyword;
      };
    }(bents, pb, process_entry), bents));
    if (temp__4423__auto__) {
      var kwbs = temp__4423__auto__;
      throw new Error([cljs.core.str("Unsupported binding key: "), cljs.core.str(cljs.core.ffirst.call(null, kwbs))].join(""));
    } else {
      return cljs.core.reduce.call(null, process_entry, cljs.core.PersistentVector.EMPTY, bents);
    }
  }
};
cljs.core$macros.let$ = function cljs$core$macros$let() {
  var args__5106__auto__ = [];
  var len__5099__auto___8376 = arguments.length;
  var i__5100__auto___8377 = 0;
  while (true) {
    if (i__5100__auto___8377 < len__5099__auto___8376) {
      args__5106__auto__.push(arguments[i__5100__auto___8377]);
      var G__8378 = i__5100__auto___8377 + 1;
      i__5100__auto___8377 = G__8378;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.let$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.let$.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, body) {
  cljs.core$macros.assert_args.call(null, cljs.core.vector_QMARK_.call(null, bindings), "a vector for its binding", cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, bindings)), "an even number of forms in binding vector");
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.destructure.call(null, bindings)), body)));
};
cljs.core$macros.let$.cljs$lang$maxFixedArity = 3;
cljs.core$macros.let$.cljs$lang$applyTo = function(seq8372) {
  var G__8373 = cljs.core.first.call(null, seq8372);
  var seq8372__$1 = cljs.core.next.call(null, seq8372);
  var G__8374 = cljs.core.first.call(null, seq8372__$1);
  var seq8372__$2 = cljs.core.next.call(null, seq8372__$1);
  var G__8375 = cljs.core.first.call(null, seq8372__$2);
  var seq8372__$3 = cljs.core.next.call(null, seq8372__$2);
  return cljs.core$macros.let$.cljs$core$IFn$_invoke$arity$variadic(G__8373, G__8374, G__8375, seq8372__$3);
};
cljs.core$macros.let$.cljs$lang$macro = true;
cljs.core$macros.loop = function cljs$core$macros$loop() {
  var args__5106__auto__ = [];
  var len__5099__auto___8385 = arguments.length;
  var i__5100__auto___8386 = 0;
  while (true) {
    if (i__5100__auto___8386 < len__5099__auto___8385) {
      args__5106__auto__.push(arguments[i__5100__auto___8386]);
      var G__8387 = i__5100__auto___8386 + 1;
      i__5100__auto___8386 = G__8387;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.loop.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.loop.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, body) {
  cljs.core$macros.assert_args.call(null, cljs.core.vector_QMARK_.call(null, bindings), "a vector for its binding", cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, bindings)), "an even number of forms in binding vector");
  var db = cljs.core$macros.destructure.call(null, bindings);
  if (cljs.core._EQ_.call(null, db, bindings)) {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, bindings), body)));
  } else {
    var vs = cljs.core.take_nth.call(null, 2, cljs.core.drop.call(null, 1, bindings));
    var bs = cljs.core.take_nth.call(null, 2, bindings);
    var gs = cljs.core.map.call(null, function(vs, bs, db) {
      return function(b) {
        if (b instanceof cljs.core.Symbol) {
          return b;
        } else {
          return cljs.core.gensym.call(null);
        }
      };
    }(vs, bs, db), bs);
    var bfs = cljs.core.reduce.call(null, function(vs, bs, gs, db) {
      return function(ret, p__8383) {
        var vec__8384 = p__8383;
        var b = cljs.core.nth.call(null, vec__8384, 0, null);
        var v = cljs.core.nth.call(null, vec__8384, 1, null);
        var g = cljs.core.nth.call(null, vec__8384, 2, null);
        if (b instanceof cljs.core.Symbol) {
          return cljs.core.conj.call(null, ret, g, v);
        } else {
          return cljs.core.conj.call(null, ret, g, v, b, g);
        }
      };
    }(vs, bs, gs, db), cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, cljs.core.vector, bs, vs, gs));
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, bfs), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "loop*", 
    "loop*", 615029416, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.interleave.call(null, gs, gs))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.interleave.call(null, 
    bs, gs))), body)))))))))));
  }
};
cljs.core$macros.loop.cljs$lang$maxFixedArity = 3;
cljs.core$macros.loop.cljs$lang$applyTo = function(seq8379) {
  var G__8380 = cljs.core.first.call(null, seq8379);
  var seq8379__$1 = cljs.core.next.call(null, seq8379);
  var G__8381 = cljs.core.first.call(null, seq8379__$1);
  var seq8379__$2 = cljs.core.next.call(null, seq8379__$1);
  var G__8382 = cljs.core.first.call(null, seq8379__$2);
  var seq8379__$3 = cljs.core.next.call(null, seq8379__$2);
  return cljs.core$macros.loop.cljs$core$IFn$_invoke$arity$variadic(G__8380, G__8381, G__8382, seq8379__$3);
};
cljs.core$macros.loop.cljs$lang$macro = true;
cljs.core$macros.fast_path_protocols = cljs.core.zipmap.call(null, cljs.core.map.call(null, function(p1__8388_SHARP_) {
  return cljs.core.symbol.call(null, "cljs.core", [cljs.core.str(p1__8388_SHARP_)].join(""));
}, cljs.core.PersistentVector.fromArray([new cljs.core.Symbol(null, "IFn", "IFn", -244881638, null), new cljs.core.Symbol(null, "ICounted", "ICounted", -1705786327, null), new cljs.core.Symbol(null, "IEmptyableCollection", "IEmptyableCollection", 1477271438, null), new cljs.core.Symbol(null, "ICollection", "ICollection", -686709190, null), new cljs.core.Symbol(null, "IIndexed", "IIndexed", -574812826, null), new cljs.core.Symbol(null, "ASeq", "ASeq", 266390234, null), new cljs.core.Symbol(null, "ISeq", 
"ISeq", 1517365813, null), new cljs.core.Symbol(null, "INext", "INext", 562211849, null), new cljs.core.Symbol(null, "ILookup", "ILookup", 784647298, null), new cljs.core.Symbol(null, "IAssociative", "IAssociative", -1306431882, null), new cljs.core.Symbol(null, "IMap", "IMap", 992876629, null), new cljs.core.Symbol(null, "IMapEntry", "IMapEntry", -943754199, null), new cljs.core.Symbol(null, "ISet", "ISet", -1398072657, null), new cljs.core.Symbol(null, "IStack", "IStack", 1136769449, null), new cljs.core.Symbol(null, 
"IVector", "IVector", -1120721434, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "IDerefWithTimeout", "IDerefWithTimeout", 2140974319, null), new cljs.core.Symbol(null, "IMeta", "IMeta", 1095313672, null), new cljs.core.Symbol(null, "IWithMeta", "IWithMeta", -509493158, null), new cljs.core.Symbol(null, "IReduce", "IReduce", -440384974, null), new cljs.core.Symbol(null, "IKVReduce", "IKVReduce", -870856862, null), new cljs.core.Symbol(null, "IEquiv", 
"IEquiv", -1912850869, null), new cljs.core.Symbol(null, "IHash", "IHash", -1495374645, null), new cljs.core.Symbol(null, "ISeqable", "ISeqable", 1349682102, null), new cljs.core.Symbol(null, "ISequential", "ISequential", -1626174217, null), new cljs.core.Symbol(null, "IList", "IList", 1682281311, null), new cljs.core.Symbol(null, "IRecord", "IRecord", -903221169, null), new cljs.core.Symbol(null, "IReversible", "IReversible", -723048599, null), new cljs.core.Symbol(null, "ISorted", "ISorted", -253627362, 
null), new cljs.core.Symbol(null, "IPrintWithWriter", "IPrintWithWriter", -1205316154, null), new cljs.core.Symbol(null, "IWriter", "IWriter", -1681087107, null), new cljs.core.Symbol(null, "IPrintWithWriter", "IPrintWithWriter", -1205316154, null), new cljs.core.Symbol(null, "IPending", "IPending", 1229113039, null), new cljs.core.Symbol(null, "IWatchable", "IWatchable", -1929659016, null), new cljs.core.Symbol(null, "IEditableCollection", "IEditableCollection", -906687187, null), new cljs.core.Symbol(null, 
"ITransientCollection", "ITransientCollection", 252832402, null), new cljs.core.Symbol(null, "ITransientAssociative", "ITransientAssociative", -1612754624, null), new cljs.core.Symbol(null, "ITransientMap", "ITransientMap", 298423651, null), new cljs.core.Symbol(null, "ITransientVector", "ITransientVector", 1978793164, null), new cljs.core.Symbol(null, "ITransientSet", "ITransientSet", -575559912, null), new cljs.core.Symbol(null, "IMultiFn", "IMultiFn", -1848282794, null), new cljs.core.Symbol(null, 
"IChunkedSeq", "IChunkedSeq", -1299765705, null), new cljs.core.Symbol(null, "IChunkedNext", "IChunkedNext", 1193289532, null), new cljs.core.Symbol(null, "IComparable", "IComparable", 1834481627, null), new cljs.core.Symbol(null, "INamed", "INamed", 357992946, null), new cljs.core.Symbol(null, "ICloneable", "ICloneable", 1882653160, null), new cljs.core.Symbol(null, "IAtom", "IAtom", -1411134312, null), new cljs.core.Symbol(null, "IReset", "IReset", -1893729426, null), new cljs.core.Symbol(null, 
"ISwap", "ISwap", 484378193, null)], true)), cljs.core.iterate.call(null, function(p__8389) {
  var vec__8390 = p__8389;
  var p = cljs.core.nth.call(null, vec__8390, 0, null);
  var b = cljs.core.nth.call(null, vec__8390, 1, null);
  if (2147483648 === b) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p + 1, 1], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p, b << 1], null);
  }
}, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1], null)));
cljs.core$macros.fast_path_protocol_partitions_count = function() {
  var c = cljs.core.count.call(null, cljs.core$macros.fast_path_protocols);
  var m = cljs.core.mod.call(null, c, 32);
  if (m === 0) {
    return cljs.core.quot.call(null, c, 32);
  } else {
    return cljs.core.quot.call(null, c, 32) + 1;
  }
}();
cljs.core$macros.str = function cljs$core$macros$str() {
  var args__5106__auto__ = [];
  var len__5099__auto___8394 = arguments.length;
  var i__5100__auto___8395 = 0;
  while (true) {
    if (i__5100__auto___8395 < len__5099__auto___8394) {
      args__5106__auto__.push(arguments[i__5100__auto___8395]);
      var G__8396 = i__5100__auto___8395 + 1;
      i__5100__auto___8395 = G__8396;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.str.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, xs) {
  var strs = cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, ",", cljs.core.repeat.call(null, cljs.core.count.call(null, xs), "cljs.core.str(~{})")));
  return cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), [cljs.core.str("["), cljs.core.str(strs), cljs.core.str("].join('')")].join(""), xs);
};
cljs.core$macros.str.cljs$lang$maxFixedArity = 2;
cljs.core$macros.str.cljs$lang$applyTo = function(seq8391) {
  var G__8392 = cljs.core.first.call(null, seq8391);
  var seq8391__$1 = cljs.core.next.call(null, seq8391);
  var G__8393 = cljs.core.first.call(null, seq8391__$1);
  var seq8391__$2 = cljs.core.next.call(null, seq8391__$1);
  return cljs.core$macros.str.cljs$core$IFn$_invoke$arity$variadic(G__8392, G__8393, seq8391__$2);
};
cljs.core$macros.str.cljs$lang$macro = true;
cljs.core$macros.bool_expr = function cljs$core$macros$bool_expr(e) {
  return cljs.core.vary_meta.call(null, e, cljs.core.assoc, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null));
};
cljs.core$macros.simple_test_expr_QMARK_ = function cljs$core$macros$simple_test_expr_QMARK_(env, ast) {
  var and__4048__auto__ = (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "js", "js", 1768080579), null, new cljs.core.Keyword(null, "constant", "constant", -379609303), null, new cljs.core.Keyword(null, "var", "var", -769682797), null, new cljs.core.Keyword(null, "invoke", "invoke", 1145927159), null, new cljs.core.Keyword(null, "dot", "dot", 1442709401), null], null), null)).call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(ast));
  if (cljs.core.truth_(and__4048__auto__)) {
    return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "seq", "seq", -177272256, null), null, new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), null], null), null)).call(null, cljs.analyzer.infer_tag.call(null, env, ast));
  } else {
    return and__4048__auto__;
  }
};
cljs.core$macros.and = function cljs$core$macros$and() {
  var args8400 = [];
  var len__5099__auto___8407 = arguments.length;
  var i__5100__auto___8408 = 0;
  while (true) {
    if (i__5100__auto___8408 < len__5099__auto___8407) {
      args8400.push(arguments[i__5100__auto___8408]);
      var G__8409 = i__5100__auto___8408 + 1;
      i__5100__auto___8408 = G__8409;
      continue;
    } else {
    }
    break;
  }
  var G__8406 = args8400.length;
  switch(G__8406) {
    case 2:
      return cljs.core$macros.and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core$macros.and.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8400.slice(3), 0);
      return cljs.core$macros.and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5118__auto__);
  }
};
cljs.core$macros.and.cljs$core$IFn$_invoke$arity$2 = function(_AMPERSAND_form, _AMPERSAND_env) {
  return true;
};
cljs.core$macros.and.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.and.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, next) {
  var forms = cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null), next);
  if (cljs.core.every_QMARK_.call(null, function(forms) {
    return function(p1__8397_SHARP_) {
      return cljs.core$macros.simple_test_expr_QMARK_.call(null, _AMPERSAND_env, p1__8397_SHARP_);
    };
  }(forms), cljs.core.map.call(null, function(forms) {
    return function(p1__8398_SHARP_) {
      return cljs.analyzer.analyze.call(null, _AMPERSAND_env, p1__8398_SHARP_);
    };
  }(forms), forms))) {
    var and_str = cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " && ", cljs.core.repeat.call(null, cljs.core.count.call(null, forms), "(~{})")));
    return cljs.core$macros.bool_expr.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, and_str), forms))));
  } else {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "and__8399__auto__", "and__8399__auto__", 
    -2136366459, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "and__8399__auto__", "and__8399__auto__", -2136366459, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "and", "cljs.core$macros/and", 48320334, null)), next)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "and__8399__auto__", "and__8399__auto__", -2136366459, null)))))))));
  }
};
cljs.core$macros.and.cljs$lang$applyTo = function(seq8401) {
  var G__8402 = cljs.core.first.call(null, seq8401);
  var seq8401__$1 = cljs.core.next.call(null, seq8401);
  var G__8403 = cljs.core.first.call(null, seq8401__$1);
  var seq8401__$2 = cljs.core.next.call(null, seq8401__$1);
  var G__8404 = cljs.core.first.call(null, seq8401__$2);
  var seq8401__$3 = cljs.core.next.call(null, seq8401__$2);
  return cljs.core$macros.and.cljs$core$IFn$_invoke$arity$variadic(G__8402, G__8403, G__8404, seq8401__$3);
};
cljs.core$macros.and.cljs$lang$maxFixedArity = 3;
cljs.core$macros.and.cljs$lang$macro = true;
cljs.core$macros.or = function cljs$core$macros$or() {
  var args8414 = [];
  var len__5099__auto___8421 = arguments.length;
  var i__5100__auto___8422 = 0;
  while (true) {
    if (i__5100__auto___8422 < len__5099__auto___8421) {
      args8414.push(arguments[i__5100__auto___8422]);
      var G__8423 = i__5100__auto___8422 + 1;
      i__5100__auto___8422 = G__8423;
      continue;
    } else {
    }
    break;
  }
  var G__8420 = args8414.length;
  switch(G__8420) {
    case 2:
      return cljs.core$macros.or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core$macros.or.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8414.slice(3), 0);
      return cljs.core$macros.or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5118__auto__);
  }
};
cljs.core$macros.or.cljs$core$IFn$_invoke$arity$2 = function(_AMPERSAND_form, _AMPERSAND_env) {
  return null;
};
cljs.core$macros.or.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.or.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, next) {
  var forms = cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null), next);
  if (cljs.core.every_QMARK_.call(null, function(forms) {
    return function(p1__8411_SHARP_) {
      return cljs.core$macros.simple_test_expr_QMARK_.call(null, _AMPERSAND_env, p1__8411_SHARP_);
    };
  }(forms), cljs.core.map.call(null, function(forms) {
    return function(p1__8412_SHARP_) {
      return cljs.analyzer.analyze.call(null, _AMPERSAND_env, p1__8412_SHARP_);
    };
  }(forms), forms))) {
    var or_str = cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " || ", cljs.core.repeat.call(null, cljs.core.count.call(null, forms), "(~{})")));
    return cljs.core$macros.bool_expr.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, or_str), forms))));
  } else {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "or__8413__auto__", "or__8413__auto__", 
    1575314362, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "or__8413__auto__", "or__8413__auto__", 1575314362, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    new cljs.core.Symbol(null, "or__8413__auto__", "or__8413__auto__", 1575314362, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "or", "cljs.core$macros/or", 1346243648, null)), next)))))))))));
  }
};
cljs.core$macros.or.cljs$lang$applyTo = function(seq8415) {
  var G__8416 = cljs.core.first.call(null, seq8415);
  var seq8415__$1 = cljs.core.next.call(null, seq8415);
  var G__8417 = cljs.core.first.call(null, seq8415__$1);
  var seq8415__$2 = cljs.core.next.call(null, seq8415__$1);
  var G__8418 = cljs.core.first.call(null, seq8415__$2);
  var seq8415__$3 = cljs.core.next.call(null, seq8415__$2);
  return cljs.core$macros.or.cljs$core$IFn$_invoke$arity$variadic(G__8416, G__8417, G__8418, seq8415__$3);
};
cljs.core$macros.or.cljs$lang$maxFixedArity = 3;
cljs.core$macros.or.cljs$lang$macro = true;
cljs.core$macros.nil_QMARK_ = function cljs$core$macros$nil_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "coercive-=", "cljs.core$macros/coercive-=", -1655776086, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))));
};
cljs.core$macros.nil_QMARK_.cljs$lang$macro = true;
cljs.core$macros.coercive_not = function cljs$core$macros$coercive_not(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), "(!~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.coercive_not.cljs$lang$macro = true;
cljs.core$macros.coercive_not_EQ_ = function cljs$core$macros$coercive_not_EQ_(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} != ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.coercive_not_EQ_.cljs$lang$macro = true;
cljs.core$macros.coercive__EQ_ = function cljs$core$macros$coercive__EQ_(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} == ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.coercive__EQ_.cljs$lang$macro = true;
cljs.core$macros.coercive_boolean = function cljs$core$macros$coercive_boolean(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.with_meta.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), "~{}"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null));
};
cljs.core$macros.coercive_boolean.cljs$lang$macro = true;
cljs.core$macros.truth_ = function cljs$core$macros$truth_(_AMPERSAND_form, _AMPERSAND_env, x) {
  if (x instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("x is substituted twice"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("core", "symbol?", "core/symbol?", 1819594398, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
  }
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), x), "(~{} != null && ~{} !== false)"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.truth_.cljs$lang$macro = true;
cljs.core$macros.js_arguments = function cljs$core$macros$js_arguments(_AMPERSAND_form, _AMPERSAND_env) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, "arguments"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.js_arguments.cljs$lang$macro = true;
cljs.core$macros.js_delete = function cljs$core$macros$js_delete(_AMPERSAND_form, _AMPERSAND_env, obj, key) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, key), obj), "delete ~{}[~{}]"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.js_delete.cljs$lang$macro = true;
cljs.core$macros.js_in = function cljs$core$macros$js_in(_AMPERSAND_form, _AMPERSAND_env, key, obj) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, obj), key), "~{} in ~{}"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.js_in.cljs$lang$macro = true;
cljs.core$macros.js_debugger = function cljs$core$macros$js_debugger(_AMPERSAND_form, _AMPERSAND_env) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, "debugger;"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.js_debugger.cljs$lang$macro = true;
cljs.core$macros.true_QMARK_ = function cljs$core$macros$true_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), "~{} === true"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.true_QMARK_.cljs$lang$macro = true;
cljs.core$macros.false_QMARK_ = function cljs$core$macros$false_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), "~{} === false"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.false_QMARK_.cljs$lang$macro = true;
cljs.core$macros.string_QMARK_ = function cljs$core$macros$string_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), "typeof ~{} === 'string'"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.string_QMARK_.cljs$lang$macro = true;
cljs.core$macros.exists_QMARK_ = function cljs$core$macros$exists_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vary_meta.call(null, x, cljs.core.assoc, new cljs.core.Keyword("cljs.analyzer", "no-resolve", "cljs.analyzer/no-resolve", -1872351017), true)), "typeof ~{} !== 'undefined'"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.exists_QMARK_.cljs$lang$macro = true;
cljs.core$macros.undefined_QMARK_ = function cljs$core$macros$undefined_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), "(void 0 === ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.undefined_QMARK_.cljs$lang$macro = true;
cljs.core$macros.identical_QMARK_ = function cljs$core$macros$identical_QMARK_(_AMPERSAND_form, _AMPERSAND_env, a, b) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, b), a), "(~{} === ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.identical_QMARK_.cljs$lang$macro = true;
cljs.core$macros.instance_QMARK_ = function cljs$core$macros$instance_QMARK_(_AMPERSAND_form, _AMPERSAND_env, t, o) {
  return cljs.core$macros.bool_expr.call(null, cljs.core.symbol_QMARK_.call(null, t) ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, t), o), "(~{} instanceof ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)) : cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", 
  -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "t__8425__auto__", "t__8425__auto__", -1188409747, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "o__8426__auto__", "o__8426__auto__", 1214189967, null)), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, o)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "(~{} instanceof ~{})"), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "o__8426__auto__", "o__8426__auto__", 1214189967, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "t__8425__auto__", "t__8425__auto__", -1188409747, null))))))))));
};
cljs.core$macros.instance_QMARK_.cljs$lang$macro = true;
cljs.core$macros.number_QMARK_ = function cljs$core$macros$number_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), "typeof ~{} === 'number'"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.number_QMARK_.cljs$lang$macro = true;
cljs.core$macros.symbol_QMARK_ = function cljs$core$macros$symbol_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core$macros.bool_expr.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "instance?", "cljs.core$macros/instance?", 1829750179, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "Symbol", "cljs.core/Symbol", 292989338, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x)))));
};
cljs.core$macros.symbol_QMARK_.cljs$lang$macro = true;
cljs.core$macros.keyword_QMARK_ = function cljs$core$macros$keyword_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core$macros.bool_expr.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "instance?", "cljs.core$macros/instance?", 1829750179, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "Keyword", "cljs.core/Keyword", -451434488, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x)))));
};
cljs.core$macros.keyword_QMARK_.cljs$lang$macro = true;
cljs.core$macros.aget = function cljs$core$macros$aget() {
  var args8427 = [];
  var len__5099__auto___8435 = arguments.length;
  var i__5100__auto___8436 = 0;
  while (true) {
    if (i__5100__auto___8436 < len__5099__auto___8435) {
      args8427.push(arguments[i__5100__auto___8436]);
      var G__8437 = i__5100__auto___8436 + 1;
      i__5100__auto___8436 = G__8437;
      continue;
    } else {
    }
    break;
  }
  var G__8434 = args8427.length;
  switch(G__8434) {
    case 4:
      return cljs.core$macros.aget.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8427.slice(4), 0);
      return cljs.core$macros.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros.aget.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, a, i) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, i), a), "(~{}[~{}])"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.aget.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, a, i, idxs) {
  var astr = cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, cljs.core.count.call(null, idxs), "[~{}]"));
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, [cljs.core.str("(~{}[~{}]"), cljs.core.str(astr), cljs.core.str(")")].join("")), cljs.core._conj.call(null, cljs.core.List.EMPTY, a), cljs.core._conj.call(null, cljs.core.List.EMPTY, i), idxs)));
};
cljs.core$macros.aget.cljs$lang$applyTo = function(seq8428) {
  var G__8429 = cljs.core.first.call(null, seq8428);
  var seq8428__$1 = cljs.core.next.call(null, seq8428);
  var G__8430 = cljs.core.first.call(null, seq8428__$1);
  var seq8428__$2 = cljs.core.next.call(null, seq8428__$1);
  var G__8431 = cljs.core.first.call(null, seq8428__$2);
  var seq8428__$3 = cljs.core.next.call(null, seq8428__$2);
  var G__8432 = cljs.core.first.call(null, seq8428__$3);
  var seq8428__$4 = cljs.core.next.call(null, seq8428__$3);
  return cljs.core$macros.aget.cljs$core$IFn$_invoke$arity$variadic(G__8429, G__8430, G__8431, G__8432, seq8428__$4);
};
cljs.core$macros.aget.cljs$lang$maxFixedArity = 4;
cljs.core$macros.aget.cljs$lang$macro = true;
cljs.core$macros.aset = function cljs$core$macros$aset() {
  var args8439 = [];
  var len__5099__auto___8448 = arguments.length;
  var i__5100__auto___8449 = 0;
  while (true) {
    if (i__5100__auto___8449 < len__5099__auto___8448) {
      args8439.push(arguments[i__5100__auto___8449]);
      var G__8450 = i__5100__auto___8449 + 1;
      i__5100__auto___8449 = G__8450;
      continue;
    } else {
    }
    break;
  }
  var G__8447 = args8439.length;
  switch(G__8447) {
    case 5:
      return cljs.core$macros.aset.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8439.slice(5), 0);
      return cljs.core$macros.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5118__auto__);
  }
};
cljs.core$macros.aset.cljs$core$IFn$_invoke$arity$5 = function(_AMPERSAND_form, _AMPERSAND_env, a, i, v) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, v), i), a), "(~{}[~{}] = ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.aset.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, a, idx, idx2, idxv) {
  var n = cljs.core.count.call(null, idxv) - 1;
  var astr = cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, n, "[~{}]"));
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, [cljs.core.str("(~{}[~{}][~{}]"), cljs.core.str(astr), cljs.core.str(" = ~{})")].join("")), cljs.core._conj.call(null, cljs.core.List.EMPTY, a), cljs.core._conj.call(null, cljs.core.List.EMPTY, idx), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  idx2), idxv)));
};
cljs.core$macros.aset.cljs$lang$applyTo = function(seq8440) {
  var G__8441 = cljs.core.first.call(null, seq8440);
  var seq8440__$1 = cljs.core.next.call(null, seq8440);
  var G__8442 = cljs.core.first.call(null, seq8440__$1);
  var seq8440__$2 = cljs.core.next.call(null, seq8440__$1);
  var G__8443 = cljs.core.first.call(null, seq8440__$2);
  var seq8440__$3 = cljs.core.next.call(null, seq8440__$2);
  var G__8444 = cljs.core.first.call(null, seq8440__$3);
  var seq8440__$4 = cljs.core.next.call(null, seq8440__$3);
  var G__8445 = cljs.core.first.call(null, seq8440__$4);
  var seq8440__$5 = cljs.core.next.call(null, seq8440__$4);
  return cljs.core$macros.aset.cljs$core$IFn$_invoke$arity$variadic(G__8441, G__8442, G__8443, G__8444, G__8445, seq8440__$5);
};
cljs.core$macros.aset.cljs$lang$maxFixedArity = 5;
cljs.core$macros.aset.cljs$lang$macro = true;
cljs.core$macros._PLUS_ = function cljs$core$macros$_PLUS_() {
  var args8452 = [];
  var len__5099__auto___8460 = arguments.length;
  var i__5100__auto___8461 = 0;
  while (true) {
    if (i__5100__auto___8461 < len__5099__auto___8460) {
      args8452.push(arguments[i__5100__auto___8461]);
      var G__8462 = i__5100__auto___8461 + 1;
      i__5100__auto___8461 = G__8462;
      continue;
    } else {
    }
    break;
  }
  var G__8459 = args8452.length;
  switch(G__8459) {
    case 2:
      return cljs.core$macros._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core$macros._PLUS_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros._PLUS_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8452.slice(4), 0);
      return cljs.core$macros._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(_AMPERSAND_form, _AMPERSAND_env) {
  return 0;
};
cljs.core$macros._PLUS_.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros._PLUS_.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} + ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "+", "cljs.core/+", -342754435, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "+", "cljs.core/+", -342754435, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros._PLUS_.cljs$lang$applyTo = function(seq8453) {
  var G__8454 = cljs.core.first.call(null, seq8453);
  var seq8453__$1 = cljs.core.next.call(null, seq8453);
  var G__8455 = cljs.core.first.call(null, seq8453__$1);
  var seq8453__$2 = cljs.core.next.call(null, seq8453__$1);
  var G__8456 = cljs.core.first.call(null, seq8453__$2);
  var seq8453__$3 = cljs.core.next.call(null, seq8453__$2);
  var G__8457 = cljs.core.first.call(null, seq8453__$3);
  var seq8453__$4 = cljs.core.next.call(null, seq8453__$3);
  return cljs.core$macros._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__8454, G__8455, G__8456, G__8457, seq8453__$4);
};
cljs.core$macros._PLUS_.cljs$lang$maxFixedArity = 4;
cljs.core$macros._PLUS_.cljs$lang$macro = true;
cljs.core$macros.byte$ = function cljs$core$macros$byte(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.byte$.cljs$lang$macro = true;
cljs.core$macros.short$ = function cljs$core$macros$short(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.short$.cljs$lang$macro = true;
cljs.core$macros.float$ = function cljs$core$macros$float(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.float$.cljs$lang$macro = true;
cljs.core$macros.double$ = function cljs$core$macros$double(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.double$.cljs$lang$macro = true;
cljs.core$macros.unchecked_byte = function cljs$core$macros$unchecked_byte(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.unchecked_byte.cljs$lang$macro = true;
cljs.core$macros.unchecked_char = function cljs$core$macros$unchecked_char(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.unchecked_char.cljs$lang$macro = true;
cljs.core$macros.unchecked_short = function cljs$core$macros$unchecked_short(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.unchecked_short.cljs$lang$macro = true;
cljs.core$macros.unchecked_float = function cljs$core$macros$unchecked_float(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.unchecked_float.cljs$lang$macro = true;
cljs.core$macros.unchecked_double = function cljs$core$macros$unchecked_double(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.unchecked_double.cljs$lang$macro = true;
cljs.core$macros.unchecked_add = function cljs$core$macros$unchecked_add() {
  var args__5106__auto__ = [];
  var len__5099__auto___8467 = arguments.length;
  var i__5100__auto___8468 = 0;
  while (true) {
    if (i__5100__auto___8468 < len__5099__auto___8467) {
      args__5106__auto__.push(arguments[i__5100__auto___8468]);
      var G__8469 = i__5100__auto___8468 + 1;
      i__5100__auto___8468 = G__8469;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, xs) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "+", "cljs.core$macros/+", -18260342, null)), xs)));
};
cljs.core$macros.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core$macros.unchecked_add.cljs$lang$applyTo = function(seq8464) {
  var G__8465 = cljs.core.first.call(null, seq8464);
  var seq8464__$1 = cljs.core.next.call(null, seq8464);
  var G__8466 = cljs.core.first.call(null, seq8464__$1);
  var seq8464__$2 = cljs.core.next.call(null, seq8464__$1);
  return cljs.core$macros.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__8465, G__8466, seq8464__$2);
};
cljs.core$macros.unchecked_add.cljs$lang$macro = true;
cljs.core$macros.unchecked_add_int = function cljs$core$macros$unchecked_add_int() {
  var args__5106__auto__ = [];
  var len__5099__auto___8473 = arguments.length;
  var i__5100__auto___8474 = 0;
  while (true) {
    if (i__5100__auto___8474 < len__5099__auto___8473) {
      args__5106__auto__.push(arguments[i__5100__auto___8474]);
      var G__8475 = i__5100__auto___8474 + 1;
      i__5100__auto___8474 = G__8475;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, xs) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "+", "cljs.core$macros/+", -18260342, null)), xs)));
};
cljs.core$macros.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core$macros.unchecked_add_int.cljs$lang$applyTo = function(seq8470) {
  var G__8471 = cljs.core.first.call(null, seq8470);
  var seq8470__$1 = cljs.core.next.call(null, seq8470);
  var G__8472 = cljs.core.first.call(null, seq8470__$1);
  var seq8470__$2 = cljs.core.next.call(null, seq8470__$1);
  return cljs.core$macros.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__8471, G__8472, seq8470__$2);
};
cljs.core$macros.unchecked_add_int.cljs$lang$macro = true;
cljs.core$macros.unchecked_dec = function cljs$core$macros$unchecked_dec(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "dec", "cljs.core/dec", -443230268, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))));
};
cljs.core$macros.unchecked_dec.cljs$lang$macro = true;
cljs.core$macros.unchecked_dec_int = function cljs$core$macros$unchecked_dec_int(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "dec", "cljs.core/dec", -443230268, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))));
};
cljs.core$macros.unchecked_dec_int.cljs$lang$macro = true;
cljs.core$macros.unchecked_divide_int = function cljs$core$macros$unchecked_divide_int() {
  var args__5106__auto__ = [];
  var len__5099__auto___8479 = arguments.length;
  var i__5100__auto___8480 = 0;
  while (true) {
    if (i__5100__auto___8480 < len__5099__auto___8479) {
      args__5106__auto__.push(arguments[i__5100__auto___8480]);
      var G__8481 = i__5100__auto___8480 + 1;
      i__5100__auto___8480 = G__8481;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, xs) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "/", "cljs.core//", -696756880, null)), xs)));
};
cljs.core$macros.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core$macros.unchecked_divide_int.cljs$lang$applyTo = function(seq8476) {
  var G__8477 = cljs.core.first.call(null, seq8476);
  var seq8476__$1 = cljs.core.next.call(null, seq8476);
  var G__8478 = cljs.core.first.call(null, seq8476__$1);
  var seq8476__$2 = cljs.core.next.call(null, seq8476__$1);
  return cljs.core$macros.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__8477, G__8478, seq8476__$2);
};
cljs.core$macros.unchecked_divide_int.cljs$lang$macro = true;
cljs.core$macros.unchecked_inc = function cljs$core$macros$unchecked_inc(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "inc", "cljs.core/inc", -879172610, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))));
};
cljs.core$macros.unchecked_inc.cljs$lang$macro = true;
cljs.core$macros.unchecked_inc_int = function cljs$core$macros$unchecked_inc_int(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "inc", "cljs.core/inc", -879172610, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))));
};
cljs.core$macros.unchecked_inc_int.cljs$lang$macro = true;
cljs.core$macros.unchecked_multiply = function cljs$core$macros$unchecked_multiply() {
  var args__5106__auto__ = [];
  var len__5099__auto___8485 = arguments.length;
  var i__5100__auto___8486 = 0;
  while (true) {
    if (i__5100__auto___8486 < len__5099__auto___8485) {
      args__5106__auto__.push(arguments[i__5100__auto___8486]);
      var G__8487 = i__5100__auto___8486 + 1;
      i__5100__auto___8486 = G__8487;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, xs) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "*", "cljs.core/*", -857794892, null)), xs)));
};
cljs.core$macros.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core$macros.unchecked_multiply.cljs$lang$applyTo = function(seq8482) {
  var G__8483 = cljs.core.first.call(null, seq8482);
  var seq8482__$1 = cljs.core.next.call(null, seq8482);
  var G__8484 = cljs.core.first.call(null, seq8482__$1);
  var seq8482__$2 = cljs.core.next.call(null, seq8482__$1);
  return cljs.core$macros.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__8483, G__8484, seq8482__$2);
};
cljs.core$macros.unchecked_multiply.cljs$lang$macro = true;
cljs.core$macros.unchecked_multiply_int = function cljs$core$macros$unchecked_multiply_int() {
  var args__5106__auto__ = [];
  var len__5099__auto___8491 = arguments.length;
  var i__5100__auto___8492 = 0;
  while (true) {
    if (i__5100__auto___8492 < len__5099__auto___8491) {
      args__5106__auto__.push(arguments[i__5100__auto___8492]);
      var G__8493 = i__5100__auto___8492 + 1;
      i__5100__auto___8492 = G__8493;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, xs) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "*", "cljs.core/*", -857794892, null)), xs)));
};
cljs.core$macros.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core$macros.unchecked_multiply_int.cljs$lang$applyTo = function(seq8488) {
  var G__8489 = cljs.core.first.call(null, seq8488);
  var seq8488__$1 = cljs.core.next.call(null, seq8488);
  var G__8490 = cljs.core.first.call(null, seq8488__$1);
  var seq8488__$2 = cljs.core.next.call(null, seq8488__$1);
  return cljs.core$macros.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__8489, G__8490, seq8488__$2);
};
cljs.core$macros.unchecked_multiply_int.cljs$lang$macro = true;
cljs.core$macros.unchecked_negate = function cljs$core$macros$unchecked_negate(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-", "cljs.core/-", 187040141, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))));
};
cljs.core$macros.unchecked_negate.cljs$lang$macro = true;
cljs.core$macros.unchecked_negate_int = function cljs$core$macros$unchecked_negate_int(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-", "cljs.core/-", 187040141, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))));
};
cljs.core$macros.unchecked_negate_int.cljs$lang$macro = true;
cljs.core$macros.unchecked_remainder_int = function cljs$core$macros$unchecked_remainder_int(_AMPERSAND_form, _AMPERSAND_env, x, n) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "mod", "cljs.core/mod", 1925370196, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, n))));
};
cljs.core$macros.unchecked_remainder_int.cljs$lang$macro = true;
cljs.core$macros.unchecked_subtract = function cljs$core$macros$unchecked_subtract() {
  var args__5106__auto__ = [];
  var len__5099__auto___8497 = arguments.length;
  var i__5100__auto___8498 = 0;
  while (true) {
    if (i__5100__auto___8498 < len__5099__auto___8497) {
      args__5106__auto__.push(arguments[i__5100__auto___8498]);
      var G__8499 = i__5100__auto___8498 + 1;
      i__5100__auto___8498 = G__8499;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, xs) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-", "cljs.core/-", 187040141, null)), xs)));
};
cljs.core$macros.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core$macros.unchecked_subtract.cljs$lang$applyTo = function(seq8494) {
  var G__8495 = cljs.core.first.call(null, seq8494);
  var seq8494__$1 = cljs.core.next.call(null, seq8494);
  var G__8496 = cljs.core.first.call(null, seq8494__$1);
  var seq8494__$2 = cljs.core.next.call(null, seq8494__$1);
  return cljs.core$macros.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__8495, G__8496, seq8494__$2);
};
cljs.core$macros.unchecked_subtract.cljs$lang$macro = true;
cljs.core$macros.unchecked_subtract_int = function cljs$core$macros$unchecked_subtract_int() {
  var args__5106__auto__ = [];
  var len__5099__auto___8503 = arguments.length;
  var i__5100__auto___8504 = 0;
  while (true) {
    if (i__5100__auto___8504 < len__5099__auto___8503) {
      args__5106__auto__.push(arguments[i__5100__auto___8504]);
      var G__8505 = i__5100__auto___8504 + 1;
      i__5100__auto___8504 = G__8505;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, xs) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-", "cljs.core/-", 187040141, null)), xs)));
};
cljs.core$macros.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core$macros.unchecked_subtract_int.cljs$lang$applyTo = function(seq8500) {
  var G__8501 = cljs.core.first.call(null, seq8500);
  var seq8500__$1 = cljs.core.next.call(null, seq8500);
  var G__8502 = cljs.core.first.call(null, seq8500__$1);
  var seq8500__$2 = cljs.core.next.call(null, seq8500__$1);
  return cljs.core$macros.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__8501, G__8502, seq8500__$2);
};
cljs.core$macros.unchecked_subtract_int.cljs$lang$macro = true;
cljs.core$macros._ = function cljs$core$macros$_() {
  var args8506 = [];
  var len__5099__auto___8514 = arguments.length;
  var i__5100__auto___8515 = 0;
  while (true) {
    if (i__5100__auto___8515 < len__5099__auto___8514) {
      args8506.push(arguments[i__5100__auto___8515]);
      var G__8516 = i__5100__auto___8515 + 1;
      i__5100__auto___8515 = G__8516;
      continue;
    } else {
    }
    break;
  }
  var G__8513 = args8506.length;
  switch(G__8513) {
    case 3:
      return cljs.core$macros._.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros._.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8506.slice(4), 0);
      return cljs.core$macros._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros._.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), "(- ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros._.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} - ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros._.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-", "cljs.core/-", 187040141, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-", "cljs.core/-", 187040141, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros._.cljs$lang$applyTo = function(seq8507) {
  var G__8508 = cljs.core.first.call(null, seq8507);
  var seq8507__$1 = cljs.core.next.call(null, seq8507);
  var G__8509 = cljs.core.first.call(null, seq8507__$1);
  var seq8507__$2 = cljs.core.next.call(null, seq8507__$1);
  var G__8510 = cljs.core.first.call(null, seq8507__$2);
  var seq8507__$3 = cljs.core.next.call(null, seq8507__$2);
  var G__8511 = cljs.core.first.call(null, seq8507__$3);
  var seq8507__$4 = cljs.core.next.call(null, seq8507__$3);
  return cljs.core$macros._.cljs$core$IFn$_invoke$arity$variadic(G__8508, G__8509, G__8510, G__8511, seq8507__$4);
};
cljs.core$macros._.cljs$lang$maxFixedArity = 4;
cljs.core$macros._.cljs$lang$macro = true;
cljs.core$macros._STAR_ = function cljs$core$macros$_STAR_() {
  var args8518 = [];
  var len__5099__auto___8526 = arguments.length;
  var i__5100__auto___8527 = 0;
  while (true) {
    if (i__5100__auto___8527 < len__5099__auto___8526) {
      args8518.push(arguments[i__5100__auto___8527]);
      var G__8528 = i__5100__auto___8527 + 1;
      i__5100__auto___8527 = G__8528;
      continue;
    } else {
    }
    break;
  }
  var G__8525 = args8518.length;
  switch(G__8525) {
    case 2:
      return cljs.core$macros._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core$macros._STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros._STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8518.slice(4), 0);
      return cljs.core$macros._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros._STAR_.cljs$core$IFn$_invoke$arity$2 = function(_AMPERSAND_form, _AMPERSAND_env) {
  return 1;
};
cljs.core$macros._STAR_.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros._STAR_.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} * ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "*", "cljs.core/*", -857794892, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "*", "cljs.core/*", -857794892, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros._STAR_.cljs$lang$applyTo = function(seq8519) {
  var G__8520 = cljs.core.first.call(null, seq8519);
  var seq8519__$1 = cljs.core.next.call(null, seq8519);
  var G__8521 = cljs.core.first.call(null, seq8519__$1);
  var seq8519__$2 = cljs.core.next.call(null, seq8519__$1);
  var G__8522 = cljs.core.first.call(null, seq8519__$2);
  var seq8519__$3 = cljs.core.next.call(null, seq8519__$2);
  var G__8523 = cljs.core.first.call(null, seq8519__$3);
  var seq8519__$4 = cljs.core.next.call(null, seq8519__$3);
  return cljs.core$macros._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__8520, G__8521, G__8522, G__8523, seq8519__$4);
};
cljs.core$macros._STAR_.cljs$lang$maxFixedArity = 4;
cljs.core$macros._STAR_.cljs$lang$macro = true;
cljs.core$macros._SLASH_ = function cljs$core$macros$_SLASH_() {
  var args8530 = [];
  var len__5099__auto___8538 = arguments.length;
  var i__5100__auto___8539 = 0;
  while (true) {
    if (i__5100__auto___8539 < len__5099__auto___8538) {
      args8530.push(arguments[i__5100__auto___8539]);
      var G__8540 = i__5100__auto___8539 + 1;
      i__5100__auto___8539 = G__8540;
      continue;
    } else {
    }
    break;
  }
  var G__8537 = args8530.length;
  switch(G__8537) {
    case 3:
      return cljs.core$macros._SLASH_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros._SLASH_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8530.slice(4), 0);
      return cljs.core$macros._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros._SLASH_.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "/", "cljs.core//", -696756880, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 1), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))));
};
cljs.core$macros._SLASH_.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} / ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "/", "cljs.core//", -696756880, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "/", "cljs.core//", -696756880, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros._SLASH_.cljs$lang$applyTo = function(seq8531) {
  var G__8532 = cljs.core.first.call(null, seq8531);
  var seq8531__$1 = cljs.core.next.call(null, seq8531);
  var G__8533 = cljs.core.first.call(null, seq8531__$1);
  var seq8531__$2 = cljs.core.next.call(null, seq8531__$1);
  var G__8534 = cljs.core.first.call(null, seq8531__$2);
  var seq8531__$3 = cljs.core.next.call(null, seq8531__$2);
  var G__8535 = cljs.core.first.call(null, seq8531__$3);
  var seq8531__$4 = cljs.core.next.call(null, seq8531__$3);
  return cljs.core$macros._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__8532, G__8533, G__8534, G__8535, seq8531__$4);
};
cljs.core$macros._SLASH_.cljs$lang$maxFixedArity = 4;
cljs.core$macros._SLASH_.cljs$lang$macro = true;
cljs.core$macros.divide = function cljs$core$macros$divide() {
  var args8542 = [];
  var len__5099__auto___8550 = arguments.length;
  var i__5100__auto___8551 = 0;
  while (true) {
    if (i__5100__auto___8551 < len__5099__auto___8550) {
      args8542.push(arguments[i__5100__auto___8551]);
      var G__8552 = i__5100__auto___8551 + 1;
      i__5100__auto___8551 = G__8552;
      continue;
    } else {
    }
    break;
  }
  var G__8549 = args8542.length;
  switch(G__8549) {
    case 3:
      return cljs.core$macros.divide.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros.divide.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8542.slice(4), 0);
      return cljs.core$macros.divide.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros.divide.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "/", "cljs.core$macros//", -893374331, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 1), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))));
};
cljs.core$macros.divide.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} / ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.divide.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "/", "cljs.core$macros//", -893374331, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "/", "cljs.core$macros//", -893374331, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros.divide.cljs$lang$applyTo = function(seq8543) {
  var G__8544 = cljs.core.first.call(null, seq8543);
  var seq8543__$1 = cljs.core.next.call(null, seq8543);
  var G__8545 = cljs.core.first.call(null, seq8543__$1);
  var seq8543__$2 = cljs.core.next.call(null, seq8543__$1);
  var G__8546 = cljs.core.first.call(null, seq8543__$2);
  var seq8543__$3 = cljs.core.next.call(null, seq8543__$2);
  var G__8547 = cljs.core.first.call(null, seq8543__$3);
  var seq8543__$4 = cljs.core.next.call(null, seq8543__$3);
  return cljs.core$macros.divide.cljs$core$IFn$_invoke$arity$variadic(G__8544, G__8545, G__8546, G__8547, seq8543__$4);
};
cljs.core$macros.divide.cljs$lang$maxFixedArity = 4;
cljs.core$macros.divide.cljs$lang$macro = true;
cljs.core$macros._LT_ = function cljs$core$macros$_LT_() {
  var args8554 = [];
  var len__5099__auto___8562 = arguments.length;
  var i__5100__auto___8563 = 0;
  while (true) {
    if (i__5100__auto___8563 < len__5099__auto___8562) {
      args8554.push(arguments[i__5100__auto___8563]);
      var G__8564 = i__5100__auto___8563 + 1;
      i__5100__auto___8563 = G__8564;
      continue;
    } else {
    }
    break;
  }
  var G__8561 = args8554.length;
  switch(G__8561) {
    case 3:
      return cljs.core$macros._LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros._LT_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8554.slice(4), 0);
      return cljs.core$macros._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros._LT_.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return true;
};
cljs.core$macros._LT_.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} < ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros._LT_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "and", "cljs.core$macros/and", 48320334, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "<", "cljs.core/<", 1677496129, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "<", "cljs.core/<", 1677496129, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, y), more)))))));
};
cljs.core$macros._LT_.cljs$lang$applyTo = function(seq8555) {
  var G__8556 = cljs.core.first.call(null, seq8555);
  var seq8555__$1 = cljs.core.next.call(null, seq8555);
  var G__8557 = cljs.core.first.call(null, seq8555__$1);
  var seq8555__$2 = cljs.core.next.call(null, seq8555__$1);
  var G__8558 = cljs.core.first.call(null, seq8555__$2);
  var seq8555__$3 = cljs.core.next.call(null, seq8555__$2);
  var G__8559 = cljs.core.first.call(null, seq8555__$3);
  var seq8555__$4 = cljs.core.next.call(null, seq8555__$3);
  return cljs.core$macros._LT_.cljs$core$IFn$_invoke$arity$variadic(G__8556, G__8557, G__8558, G__8559, seq8555__$4);
};
cljs.core$macros._LT_.cljs$lang$maxFixedArity = 4;
cljs.core$macros._LT_.cljs$lang$macro = true;
cljs.core$macros._LT__EQ_ = function cljs$core$macros$_LT__EQ_() {
  var args8566 = [];
  var len__5099__auto___8574 = arguments.length;
  var i__5100__auto___8575 = 0;
  while (true) {
    if (i__5100__auto___8575 < len__5099__auto___8574) {
      args8566.push(arguments[i__5100__auto___8575]);
      var G__8576 = i__5100__auto___8575 + 1;
      i__5100__auto___8575 = G__8576;
      continue;
    } else {
    }
    break;
  }
  var G__8573 = args8566.length;
  switch(G__8573) {
    case 3:
      return cljs.core$macros._LT__EQ_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros._LT__EQ_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8566.slice(4), 0);
      return cljs.core$macros._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros._LT__EQ_.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return true;
};
cljs.core$macros._LT__EQ_.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} <= ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "and", "cljs.core$macros/and", 48320334, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "<=", "cljs.core/<=", 1677001748, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "<=", "cljs.core/<=", 1677001748, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, y), more)))))));
};
cljs.core$macros._LT__EQ_.cljs$lang$applyTo = function(seq8567) {
  var G__8568 = cljs.core.first.call(null, seq8567);
  var seq8567__$1 = cljs.core.next.call(null, seq8567);
  var G__8569 = cljs.core.first.call(null, seq8567__$1);
  var seq8567__$2 = cljs.core.next.call(null, seq8567__$1);
  var G__8570 = cljs.core.first.call(null, seq8567__$2);
  var seq8567__$3 = cljs.core.next.call(null, seq8567__$2);
  var G__8571 = cljs.core.first.call(null, seq8567__$3);
  var seq8567__$4 = cljs.core.next.call(null, seq8567__$3);
  return cljs.core$macros._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8568, G__8569, G__8570, G__8571, seq8567__$4);
};
cljs.core$macros._LT__EQ_.cljs$lang$maxFixedArity = 4;
cljs.core$macros._LT__EQ_.cljs$lang$macro = true;
cljs.core$macros._GT_ = function cljs$core$macros$_GT_() {
  var args8578 = [];
  var len__5099__auto___8586 = arguments.length;
  var i__5100__auto___8587 = 0;
  while (true) {
    if (i__5100__auto___8587 < len__5099__auto___8586) {
      args8578.push(arguments[i__5100__auto___8587]);
      var G__8588 = i__5100__auto___8587 + 1;
      i__5100__auto___8587 = G__8588;
      continue;
    } else {
    }
    break;
  }
  var G__8585 = args8578.length;
  switch(G__8585) {
    case 3:
      return cljs.core$macros._GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros._GT_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8578.slice(4), 0);
      return cljs.core$macros._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros._GT_.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return true;
};
cljs.core$macros._GT_.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} > ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros._GT_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "and", "cljs.core$macros/and", 48320334, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", ">", "cljs.core/>", 2020535938, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", ">", "cljs.core/>", 2020535938, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, y), more)))))));
};
cljs.core$macros._GT_.cljs$lang$applyTo = function(seq8579) {
  var G__8580 = cljs.core.first.call(null, seq8579);
  var seq8579__$1 = cljs.core.next.call(null, seq8579);
  var G__8581 = cljs.core.first.call(null, seq8579__$1);
  var seq8579__$2 = cljs.core.next.call(null, seq8579__$1);
  var G__8582 = cljs.core.first.call(null, seq8579__$2);
  var seq8579__$3 = cljs.core.next.call(null, seq8579__$2);
  var G__8583 = cljs.core.first.call(null, seq8579__$3);
  var seq8579__$4 = cljs.core.next.call(null, seq8579__$3);
  return cljs.core$macros._GT_.cljs$core$IFn$_invoke$arity$variadic(G__8580, G__8581, G__8582, G__8583, seq8579__$4);
};
cljs.core$macros._GT_.cljs$lang$maxFixedArity = 4;
cljs.core$macros._GT_.cljs$lang$macro = true;
cljs.core$macros._GT__EQ_ = function cljs$core$macros$_GT__EQ_() {
  var args8590 = [];
  var len__5099__auto___8598 = arguments.length;
  var i__5100__auto___8599 = 0;
  while (true) {
    if (i__5100__auto___8599 < len__5099__auto___8598) {
      args8590.push(arguments[i__5100__auto___8599]);
      var G__8600 = i__5100__auto___8599 + 1;
      i__5100__auto___8599 = G__8600;
      continue;
    } else {
    }
    break;
  }
  var G__8597 = args8590.length;
  switch(G__8597) {
    case 3:
      return cljs.core$macros._GT__EQ_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros._GT__EQ_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8590.slice(4), 0);
      return cljs.core$macros._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros._GT__EQ_.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return true;
};
cljs.core$macros._GT__EQ_.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} >= ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "and", "cljs.core$macros/and", 48320334, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", ">=", "cljs.core/>=", 350096541, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", ">=", "cljs.core/>=", 350096541, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, y), more)))))));
};
cljs.core$macros._GT__EQ_.cljs$lang$applyTo = function(seq8591) {
  var G__8592 = cljs.core.first.call(null, seq8591);
  var seq8591__$1 = cljs.core.next.call(null, seq8591);
  var G__8593 = cljs.core.first.call(null, seq8591__$1);
  var seq8591__$2 = cljs.core.next.call(null, seq8591__$1);
  var G__8594 = cljs.core.first.call(null, seq8591__$2);
  var seq8591__$3 = cljs.core.next.call(null, seq8591__$2);
  var G__8595 = cljs.core.first.call(null, seq8591__$3);
  var seq8591__$4 = cljs.core.next.call(null, seq8591__$3);
  return cljs.core$macros._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8592, G__8593, G__8594, G__8595, seq8591__$4);
};
cljs.core$macros._GT__EQ_.cljs$lang$maxFixedArity = 4;
cljs.core$macros._GT__EQ_.cljs$lang$macro = true;
cljs.core$macros._EQ__EQ_ = function cljs$core$macros$_EQ__EQ_() {
  var args8602 = [];
  var len__5099__auto___8610 = arguments.length;
  var i__5100__auto___8611 = 0;
  while (true) {
    if (i__5100__auto___8611 < len__5099__auto___8610) {
      args8602.push(arguments[i__5100__auto___8611]);
      var G__8612 = i__5100__auto___8611 + 1;
      i__5100__auto___8611 = G__8612;
      continue;
    } else {
    }
    break;
  }
  var G__8609 = args8602.length;
  switch(G__8609) {
    case 3:
      return cljs.core$macros._EQ__EQ_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros._EQ__EQ_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8602.slice(4), 0);
      return cljs.core$macros._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros._EQ__EQ_.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return true;
};
cljs.core$macros._EQ__EQ_.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} === ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "and", "cljs.core$macros/and", 48320334, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "==", "cljs.core/==", -632471488, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "==", "cljs.core/==", -632471488, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, y), more)))))));
};
cljs.core$macros._EQ__EQ_.cljs$lang$applyTo = function(seq8603) {
  var G__8604 = cljs.core.first.call(null, seq8603);
  var seq8603__$1 = cljs.core.next.call(null, seq8603);
  var G__8605 = cljs.core.first.call(null, seq8603__$1);
  var seq8603__$2 = cljs.core.next.call(null, seq8603__$1);
  var G__8606 = cljs.core.first.call(null, seq8603__$2);
  var seq8603__$3 = cljs.core.next.call(null, seq8603__$2);
  var G__8607 = cljs.core.first.call(null, seq8603__$3);
  var seq8603__$4 = cljs.core.next.call(null, seq8603__$3);
  return cljs.core$macros._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8604, G__8605, G__8606, G__8607, seq8603__$4);
};
cljs.core$macros._EQ__EQ_.cljs$lang$maxFixedArity = 4;
cljs.core$macros._EQ__EQ_.cljs$lang$macro = true;
cljs.core$macros.dec = function cljs$core$macros$dec(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "-", "cljs.core$macros/-", 13526976, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, 1))));
};
cljs.core$macros.dec.cljs$lang$macro = true;
cljs.core$macros.inc = function cljs$core$macros$inc(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "+", "cljs.core$macros/+", -18260342, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, 1))));
};
cljs.core$macros.inc.cljs$lang$macro = true;
cljs.core$macros.zero_QMARK_ = function cljs$core$macros$zero_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "==", "cljs.core$macros/==", -818551413, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0))));
};
cljs.core$macros.zero_QMARK_.cljs$lang$macro = true;
cljs.core$macros.pos_QMARK_ = function cljs$core$macros$pos_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", ">", "cljs.core$macros/>", 1703297853, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0))));
};
cljs.core$macros.pos_QMARK_.cljs$lang$macro = true;
cljs.core$macros.neg_QMARK_ = function cljs$core$macros$neg_QMARK_(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "<", "cljs.core$macros/<", 371512596, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0))));
};
cljs.core$macros.neg_QMARK_.cljs$lang$macro = true;
cljs.core$macros.max = function cljs$core$macros$max() {
  var args8616 = [];
  var len__5099__auto___8624 = arguments.length;
  var i__5100__auto___8625 = 0;
  while (true) {
    if (i__5100__auto___8625 < len__5099__auto___8624) {
      args8616.push(arguments[i__5100__auto___8625]);
      var G__8626 = i__5100__auto___8625 + 1;
      i__5100__auto___8625 = G__8626;
      continue;
    } else {
    }
    break;
  }
  var G__8623 = args8616.length;
  switch(G__8623) {
    case 3:
      return cljs.core$macros.max.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros.max.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8616.slice(4), 0);
      return cljs.core$macros.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros.max.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.max.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__8614__auto__", "x__8614__auto__", 
  -1226003333, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "y__8615__auto__", "y__8615__auto__", -1558627704, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, y)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "js*", "js*", -1134233646, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "((~{} > ~{}) ? ~{} : ~{})"), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__8614__auto__", "x__8614__auto__", -1226003333, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "y__8615__auto__", "y__8615__auto__", -1558627704, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__8614__auto__", "x__8614__auto__", -1226003333, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, "y__8615__auto__", "y__8615__auto__", -1558627704, null)))))))));
};
cljs.core$macros.max.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "max", "cljs.core/max", 1303529718, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "max", "cljs.core/max", 1303529718, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros.max.cljs$lang$applyTo = function(seq8617) {
  var G__8618 = cljs.core.first.call(null, seq8617);
  var seq8617__$1 = cljs.core.next.call(null, seq8617);
  var G__8619 = cljs.core.first.call(null, seq8617__$1);
  var seq8617__$2 = cljs.core.next.call(null, seq8617__$1);
  var G__8620 = cljs.core.first.call(null, seq8617__$2);
  var seq8617__$3 = cljs.core.next.call(null, seq8617__$2);
  var G__8621 = cljs.core.first.call(null, seq8617__$3);
  var seq8617__$4 = cljs.core.next.call(null, seq8617__$3);
  return cljs.core$macros.max.cljs$core$IFn$_invoke$arity$variadic(G__8618, G__8619, G__8620, G__8621, seq8617__$4);
};
cljs.core$macros.max.cljs$lang$maxFixedArity = 4;
cljs.core$macros.max.cljs$lang$macro = true;
cljs.core$macros.min = function cljs$core$macros$min() {
  var args8630 = [];
  var len__5099__auto___8638 = arguments.length;
  var i__5100__auto___8639 = 0;
  while (true) {
    if (i__5100__auto___8639 < len__5099__auto___8638) {
      args8630.push(arguments[i__5100__auto___8639]);
      var G__8640 = i__5100__auto___8639 + 1;
      i__5100__auto___8639 = G__8640;
      continue;
    } else {
    }
    break;
  }
  var G__8637 = args8630.length;
  switch(G__8637) {
    case 3:
      return cljs.core$macros.min.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros.min.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8630.slice(4), 0);
      return cljs.core$macros.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros.min.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  return x;
};
cljs.core$macros.min.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__8628__auto__", "x__8628__auto__", 
  -1601513891, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "y__8629__auto__", "y__8629__auto__", -1385040357, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, y)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "js*", "js*", -1134233646, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "((~{} < ~{}) ? ~{} : ~{})"), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__8628__auto__", "x__8628__auto__", -1601513891, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "y__8629__auto__", "y__8629__auto__", -1385040357, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__8628__auto__", "x__8628__auto__", -1601513891, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, "y__8629__auto__", "y__8629__auto__", -1385040357, null)))))))));
};
cljs.core$macros.min.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "min", "cljs.core/min", 1166879476, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "min", "cljs.core/min", 1166879476, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros.min.cljs$lang$applyTo = function(seq8631) {
  var G__8632 = cljs.core.first.call(null, seq8631);
  var seq8631__$1 = cljs.core.next.call(null, seq8631);
  var G__8633 = cljs.core.first.call(null, seq8631__$1);
  var seq8631__$2 = cljs.core.next.call(null, seq8631__$1);
  var G__8634 = cljs.core.first.call(null, seq8631__$2);
  var seq8631__$3 = cljs.core.next.call(null, seq8631__$2);
  var G__8635 = cljs.core.first.call(null, seq8631__$3);
  var seq8631__$4 = cljs.core.next.call(null, seq8631__$3);
  return cljs.core$macros.min.cljs$core$IFn$_invoke$arity$variadic(G__8632, G__8633, G__8634, G__8635, seq8631__$4);
};
cljs.core$macros.min.cljs$lang$maxFixedArity = 4;
cljs.core$macros.min.cljs$lang$macro = true;
cljs.core$macros.js_mod = function cljs$core$macros$js_mod(_AMPERSAND_form, _AMPERSAND_env, num, div) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, div), num), "(~{} % ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.js_mod.cljs$lang$macro = true;
cljs.core$macros.bit_not = function cljs$core$macros$bit_not(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), "(~ ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_not.cljs$lang$macro = true;
cljs.core$macros.bit_and = function cljs$core$macros$bit_and() {
  var args8642 = [];
  var len__5099__auto___8650 = arguments.length;
  var i__5100__auto___8651 = 0;
  while (true) {
    if (i__5100__auto___8651 < len__5099__auto___8650) {
      args8642.push(arguments[i__5100__auto___8651]);
      var G__8652 = i__5100__auto___8651 + 1;
      i__5100__auto___8651 = G__8652;
      continue;
    } else {
    }
    break;
  }
  var G__8649 = args8642.length;
  switch(G__8649) {
    case 4:
      return cljs.core$macros.bit_and.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8642.slice(4), 0);
      return cljs.core$macros.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros.bit_and.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} & ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "bit-and", "cljs.core/bit-and", -617818210, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "bit-and", "cljs.core/bit-and", -617818210, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros.bit_and.cljs$lang$applyTo = function(seq8643) {
  var G__8644 = cljs.core.first.call(null, seq8643);
  var seq8643__$1 = cljs.core.next.call(null, seq8643);
  var G__8645 = cljs.core.first.call(null, seq8643__$1);
  var seq8643__$2 = cljs.core.next.call(null, seq8643__$1);
  var G__8646 = cljs.core.first.call(null, seq8643__$2);
  var seq8643__$3 = cljs.core.next.call(null, seq8643__$2);
  var G__8647 = cljs.core.first.call(null, seq8643__$3);
  var seq8643__$4 = cljs.core.next.call(null, seq8643__$3);
  return cljs.core$macros.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__8644, G__8645, G__8646, G__8647, seq8643__$4);
};
cljs.core$macros.bit_and.cljs$lang$maxFixedArity = 4;
cljs.core$macros.bit_and.cljs$lang$macro = true;
cljs.core$macros.unsafe_bit_and = function cljs$core$macros$unsafe_bit_and() {
  var args8654 = [];
  var len__5099__auto___8662 = arguments.length;
  var i__5100__auto___8663 = 0;
  while (true) {
    if (i__5100__auto___8663 < len__5099__auto___8662) {
      args8654.push(arguments[i__5100__auto___8663]);
      var G__8664 = i__5100__auto___8663 + 1;
      i__5100__auto___8663 = G__8664;
      continue;
    } else {
    }
    break;
  }
  var G__8661 = args8654.length;
  switch(G__8661) {
    case 4:
      return cljs.core$macros.unsafe_bit_and.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8654.slice(4), 0);
      return cljs.core$macros.unsafe_bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros.unsafe_bit_and.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} & ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.unsafe_bit_and.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "unsafe-bit-and", "cljs.core$macros/unsafe-bit-and", 1803731600, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "unsafe-bit-and", "cljs.core$macros/unsafe-bit-and", 
  1803731600, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros.unsafe_bit_and.cljs$lang$applyTo = function(seq8655) {
  var G__8656 = cljs.core.first.call(null, seq8655);
  var seq8655__$1 = cljs.core.next.call(null, seq8655);
  var G__8657 = cljs.core.first.call(null, seq8655__$1);
  var seq8655__$2 = cljs.core.next.call(null, seq8655__$1);
  var G__8658 = cljs.core.first.call(null, seq8655__$2);
  var seq8655__$3 = cljs.core.next.call(null, seq8655__$2);
  var G__8659 = cljs.core.first.call(null, seq8655__$3);
  var seq8655__$4 = cljs.core.next.call(null, seq8655__$3);
  return cljs.core$macros.unsafe_bit_and.cljs$core$IFn$_invoke$arity$variadic(G__8656, G__8657, G__8658, G__8659, seq8655__$4);
};
cljs.core$macros.unsafe_bit_and.cljs$lang$maxFixedArity = 4;
cljs.core$macros.unsafe_bit_and.cljs$lang$macro = true;
cljs.core$macros.bit_or = function cljs$core$macros$bit_or() {
  var args8666 = [];
  var len__5099__auto___8674 = arguments.length;
  var i__5100__auto___8675 = 0;
  while (true) {
    if (i__5100__auto___8675 < len__5099__auto___8674) {
      args8666.push(arguments[i__5100__auto___8675]);
      var G__8676 = i__5100__auto___8675 + 1;
      i__5100__auto___8675 = G__8676;
      continue;
    } else {
    }
    break;
  }
  var G__8673 = args8666.length;
  switch(G__8673) {
    case 4:
      return cljs.core$macros.bit_or.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8666.slice(4), 0);
      return cljs.core$macros.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros.bit_or.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} | ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "bit-or", "cljs.core/bit-or", 1134521392, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "bit-or", "cljs.core/bit-or", 1134521392, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros.bit_or.cljs$lang$applyTo = function(seq8667) {
  var G__8668 = cljs.core.first.call(null, seq8667);
  var seq8667__$1 = cljs.core.next.call(null, seq8667);
  var G__8669 = cljs.core.first.call(null, seq8667__$1);
  var seq8667__$2 = cljs.core.next.call(null, seq8667__$1);
  var G__8670 = cljs.core.first.call(null, seq8667__$2);
  var seq8667__$3 = cljs.core.next.call(null, seq8667__$2);
  var G__8671 = cljs.core.first.call(null, seq8667__$3);
  var seq8667__$4 = cljs.core.next.call(null, seq8667__$3);
  return cljs.core$macros.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__8668, G__8669, G__8670, G__8671, seq8667__$4);
};
cljs.core$macros.bit_or.cljs$lang$maxFixedArity = 4;
cljs.core$macros.bit_or.cljs$lang$macro = true;
cljs.core$macros.int$ = function cljs$core$macros$int(_AMPERSAND_form, _AMPERSAND_env, x) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "bit-or", "cljs.core$macros/bit-or", 1463236165, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0))));
};
cljs.core$macros.int$.cljs$lang$macro = true;
cljs.core$macros.bit_xor = function cljs$core$macros$bit_xor() {
  var args8678 = [];
  var len__5099__auto___8686 = arguments.length;
  var i__5100__auto___8687 = 0;
  while (true) {
    if (i__5100__auto___8687 < len__5099__auto___8686) {
      args8678.push(arguments[i__5100__auto___8687]);
      var G__8688 = i__5100__auto___8687 + 1;
      i__5100__auto___8687 = G__8688;
      continue;
    } else {
    }
    break;
  }
  var G__8685 = args8678.length;
  switch(G__8685) {
    case 4:
      return cljs.core$macros.bit_xor.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8678.slice(4), 0);
      return cljs.core$macros.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros.bit_xor.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} ^ ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "bit-xor", "cljs.core/bit-xor", 1480189292, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "bit-xor", "cljs.core/bit-xor", 1480189292, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros.bit_xor.cljs$lang$applyTo = function(seq8679) {
  var G__8680 = cljs.core.first.call(null, seq8679);
  var seq8679__$1 = cljs.core.next.call(null, seq8679);
  var G__8681 = cljs.core.first.call(null, seq8679__$1);
  var seq8679__$2 = cljs.core.next.call(null, seq8679__$1);
  var G__8682 = cljs.core.first.call(null, seq8679__$2);
  var seq8679__$3 = cljs.core.next.call(null, seq8679__$2);
  var G__8683 = cljs.core.first.call(null, seq8679__$3);
  var seq8679__$4 = cljs.core.next.call(null, seq8679__$3);
  return cljs.core$macros.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__8680, G__8681, G__8682, G__8683, seq8679__$4);
};
cljs.core$macros.bit_xor.cljs$lang$maxFixedArity = 4;
cljs.core$macros.bit_xor.cljs$lang$macro = true;
cljs.core$macros.bit_and_not = function cljs$core$macros$bit_and_not() {
  var args8690 = [];
  var len__5099__auto___8698 = arguments.length;
  var i__5100__auto___8699 = 0;
  while (true) {
    if (i__5100__auto___8699 < len__5099__auto___8698) {
      args8690.push(arguments[i__5100__auto___8699]);
      var G__8700 = i__5100__auto___8699 + 1;
      i__5100__auto___8699 = G__8700;
      continue;
    } else {
    }
    break;
  }
  var G__8697 = args8690.length;
  switch(G__8697) {
    case 4:
      return cljs.core$macros.bit_and_not.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args8690.slice(4), 0);
      return cljs.core$macros.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5118__auto__);
  }
};
cljs.core$macros.bit_and_not.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, y) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, y), x), "(~{} & ~~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, y, more) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "bit-and-not", "cljs.core/bit-and-not", -929778682, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "bit-and-not", "cljs.core/bit-and-not", -929778682, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, y))))), more)));
};
cljs.core$macros.bit_and_not.cljs$lang$applyTo = function(seq8691) {
  var G__8692 = cljs.core.first.call(null, seq8691);
  var seq8691__$1 = cljs.core.next.call(null, seq8691);
  var G__8693 = cljs.core.first.call(null, seq8691__$1);
  var seq8691__$2 = cljs.core.next.call(null, seq8691__$1);
  var G__8694 = cljs.core.first.call(null, seq8691__$2);
  var seq8691__$3 = cljs.core.next.call(null, seq8691__$2);
  var G__8695 = cljs.core.first.call(null, seq8691__$3);
  var seq8691__$4 = cljs.core.next.call(null, seq8691__$3);
  return cljs.core$macros.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__8692, G__8693, G__8694, G__8695, seq8691__$4);
};
cljs.core$macros.bit_and_not.cljs$lang$maxFixedArity = 4;
cljs.core$macros.bit_and_not.cljs$lang$macro = true;
cljs.core$macros.bit_clear = function cljs$core$macros$bit_clear(_AMPERSAND_form, _AMPERSAND_env, x, n) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, n), x), "(~{} & ~(1 << ~{}))"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_clear.cljs$lang$macro = true;
cljs.core$macros.bit_flip = function cljs$core$macros$bit_flip(_AMPERSAND_form, _AMPERSAND_env, x, n) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, n), x), "(~{} ^ (1 << ~{}))"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_flip.cljs$lang$macro = true;
cljs.core$macros.bit_test = function cljs$core$macros$bit_test(_AMPERSAND_form, _AMPERSAND_env, x, n) {
  return cljs.core$macros.bool_expr.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, n), x), "((~{} & (1 << ~{})) != 0)"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)));
};
cljs.core$macros.bit_test.cljs$lang$macro = true;
cljs.core$macros.bit_shift_left = function cljs$core$macros$bit_shift_left(_AMPERSAND_form, _AMPERSAND_env, x, n) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, n), x), "(~{} << ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_shift_left.cljs$lang$macro = true;
cljs.core$macros.bit_shift_right = function cljs$core$macros$bit_shift_right(_AMPERSAND_form, _AMPERSAND_env, x, n) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, n), x), "(~{} >> ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_shift_right.cljs$lang$macro = true;
cljs.core$macros.bit_shift_right_zero_fill = function cljs$core$macros$bit_shift_right_zero_fill(_AMPERSAND_form, _AMPERSAND_env, x, n) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, n), x), "(~{} >>> ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_shift_right_zero_fill.cljs$lang$macro = true;
cljs.core$macros.unsigned_bit_shift_right = function cljs$core$macros$unsigned_bit_shift_right(_AMPERSAND_form, _AMPERSAND_env, x, n) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, n), x), "(~{} >>> ~{})"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.unsigned_bit_shift_right.cljs$lang$macro = true;
cljs.core$macros.bit_set = function cljs$core$macros$bit_set(_AMPERSAND_form, _AMPERSAND_env, x, n) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, n), x), "(~{} | (1 << ~{}))"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.bit_set.cljs$lang$macro = true;
cljs.core$macros.mask = function cljs$core$macros$mask(_AMPERSAND_form, _AMPERSAND_env, hash, shift) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, shift), hash), "((~{} >>> ~{}) & 0x01f)"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.mask.cljs$lang$macro = true;
cljs.core$macros.bitpos = function cljs$core$macros$bitpos(_AMPERSAND_form, _AMPERSAND_env, hash, shift) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "mask", "cljs.core$macros/mask", 1575319768, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, hash), cljs.core._conj.call(null, cljs.core.List.EMPTY, shift))))), "(1 << ~{})"), new cljs.core.Symbol(null, "js*", 
  "js*", -1134233646, null));
};
cljs.core$macros.bitpos.cljs$lang$macro = true;
cljs.core$macros.caching_hash = function cljs$core$macros$caching_hash(_AMPERSAND_form, _AMPERSAND_env, coll, hash_fn, hash_key) {
  if (cljs.core.symbol_QMARK_.call(null, hash_key)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("hash-key is substituted twice"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("clojure.core", "symbol?", "clojure.core/symbol?", 1587987784, null), new cljs.core.Symbol(null, "hash-key", "hash-key", 1649875379, null))))].join(""));
  }
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "h__8702__auto__", "h__8702__auto__", 
  2050601332, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, hash_key)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "if-not", "cljs.core$macros/if-not", -1825285737, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "nil?", "cljs.core$macros/nil?", 83624258, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "h__8702__auto__", "h__8702__auto__", 2050601332, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "h__8702__auto__", "h__8702__auto__", 2050601332, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "h__8702__auto__", "h__8702__auto__", 2050601332, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, hash_fn), cljs.core._conj.call(null, cljs.core.List.EMPTY, coll)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, hash_key), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, "h__8702__auto__", "h__8702__auto__", 2050601332, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "h__8702__auto__", "h__8702__auto__", 2050601332, null)))))))))))));
};
cljs.core$macros.caching_hash.cljs$lang$macro = true;
cljs.core$macros.do_curried = function cljs$core$macros$do_curried(name, doc, meta, args, body) {
  var cargs = cljs.core.vec.call(null, cljs.core.butlast.call(null, args));
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "defn", "cljs.core$macros/defn", -728332354, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, name), cljs.core._conj.call(null, cljs.core.List.EMPTY, doc), cljs.core._conj.call(null, cljs.core.List.EMPTY, meta), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cargs), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__8703__auto__", "x__8703__auto__", -503405398, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, name), cargs, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__8703__auto__", "x__8703__auto__", -503405398, null)))))))))))))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, args), body)))))));
};
cljs.core$macros.defcurried = function cljs$core$macros$defcurried() {
  var args__5106__auto__ = [];
  var len__5099__auto___8711 = arguments.length;
  var i__5100__auto___8712 = 0;
  while (true) {
    if (i__5100__auto___8712 < len__5099__auto___8711) {
      args__5106__auto__.push(arguments[i__5100__auto___8712]);
      var G__8713 = i__5100__auto___8712 + 1;
      i__5100__auto___8712 = G__8713;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 6 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(6), 0) : null;
  return cljs.core$macros.defcurried.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5107__auto__);
};
cljs.core$macros.defcurried.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, name, doc, meta, args, body) {
  return cljs.core$macros.do_curried.call(null, name, doc, meta, args, body);
};
cljs.core$macros.defcurried.cljs$lang$maxFixedArity = 6;
cljs.core$macros.defcurried.cljs$lang$applyTo = function(seq8704) {
  var G__8705 = cljs.core.first.call(null, seq8704);
  var seq8704__$1 = cljs.core.next.call(null, seq8704);
  var G__8706 = cljs.core.first.call(null, seq8704__$1);
  var seq8704__$2 = cljs.core.next.call(null, seq8704__$1);
  var G__8707 = cljs.core.first.call(null, seq8704__$2);
  var seq8704__$3 = cljs.core.next.call(null, seq8704__$2);
  var G__8708 = cljs.core.first.call(null, seq8704__$3);
  var seq8704__$4 = cljs.core.next.call(null, seq8704__$3);
  var G__8709 = cljs.core.first.call(null, seq8704__$4);
  var seq8704__$5 = cljs.core.next.call(null, seq8704__$4);
  var G__8710 = cljs.core.first.call(null, seq8704__$5);
  var seq8704__$6 = cljs.core.next.call(null, seq8704__$5);
  return cljs.core$macros.defcurried.cljs$core$IFn$_invoke$arity$variadic(G__8705, G__8706, G__8707, G__8708, G__8709, G__8710, seq8704__$6);
};
cljs.core$macros.defcurried.cljs$lang$macro = true;
cljs.core$macros.do_rfn = function cljs$core$macros$do_rfn(f1, k, fkv) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, f1))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, clojure.walk.postwalk.call(null, function(p1__8714_SHARP_) {
    if (cljs.core.sequential_QMARK_.call(null, p1__8714_SHARP_)) {
      return (cljs.core.vector_QMARK_.call(null, p1__8714_SHARP_) ? cljs.core.vec : cljs.core.identity).call(null, cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([k], true), p1__8714_SHARP_));
    } else {
      return p1__8714_SHARP_;
    }
  }, fkv)), cljs.core._conj.call(null, cljs.core.List.EMPTY, fkv))));
};
cljs.core$macros.rfn = function cljs$core$macros$rfn(_AMPERSAND_form, _AMPERSAND_env, p__8715, fkv) {
  var vec__8717 = p__8715;
  var f1 = cljs.core.nth.call(null, vec__8717, 0, null);
  var k = cljs.core.nth.call(null, vec__8717, 1, null);
  return cljs.core$macros.do_rfn.call(null, f1, k, fkv);
};
cljs.core$macros.rfn.cljs$lang$macro = true;
cljs.core$macros.protocol_prefix = function cljs$core$macros$protocol_prefix(psym) {
  return [cljs.core.str([cljs.core.str(psym)].join("").replace(".", "$").replace("/", "$")), cljs.core.str("$")].join("");
};
cljs.core$macros.base_type = new cljs.core.PersistentArrayMap(null, 8, [null, "null", new cljs.core.Symbol(null, "object", "object", -1179821820, null), "object", new cljs.core.Symbol(null, "string", "string", -349010059, null), "string", new cljs.core.Symbol(null, "number", "number", -1084057331, null), "number", new cljs.core.Symbol(null, "array", "array", -440182315, null), "array", new cljs.core.Symbol(null, "function", "function", -486723946, null), "function", new cljs.core.Symbol(null, "boolean", 
"boolean", -278886877, null), "boolean", new cljs.core.Symbol(null, "default", "default", -347290801, null), "_"], null);
cljs.core$macros.js_base_type = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Symbol("js", "Boolean", "js/Boolean", 1661145260, null), "boolean", new cljs.core.Symbol("js", "String", "js/String", -2070054036, null), "string", new cljs.core.Symbol("js", "Array", "js/Array", -423508366, null), "array", new cljs.core.Symbol("js", "Object", "js/Object", 61215323, null), "object", new cljs.core.Symbol("js", "Number", "js/Number", -508133572, null), "number", new cljs.core.Symbol("js", "Function", 
"js/Function", -749892063, null), "function"], null);
cljs.core$macros.reify = function cljs$core$macros$reify() {
  var args__5106__auto__ = [];
  var len__5099__auto___8721 = arguments.length;
  var i__5100__auto___8722 = 0;
  while (true) {
    if (i__5100__auto___8722 < len__5099__auto___8721) {
      args__5106__auto__.push(arguments[i__5100__auto___8722]);
      var G__8723 = i__5100__auto___8722 + 1;
      i__5100__auto___8722 = G__8723;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.reify.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.reify.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, impls) {
  var t = cljs.core.with_meta.call(null, cljs.core.gensym.call(null, "t"), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "anonymous", "anonymous", 447897231), true], null));
  var meta_sym = cljs.core.gensym.call(null, "meta");
  var this_sym = cljs.core.gensym.call(null, "_");
  var locals = cljs.core.keys.call(null, (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_env));
  var ns = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_env));
  var munge = cljs.compiler.munge;
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when-not", "cljs.core$macros/when-not", -764302244, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "exists?", "cljs.core$macros/exists?", -1828590389, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.symbol.call(null, [cljs.core.str(ns)].join(""), [cljs.core.str(t)].join(""))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "deftype", "cljs.core$macros/deftype", 1799045688, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, locals, cljs.core._conj.call(null, cljs.core.List.EMPTY, meta_sym)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol("cljs.core", "IWithMeta", "cljs.core/IWithMeta", -1981666051, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-with-meta", "-with-meta", -1610713823, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, this_sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, meta_sym)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t), locals, cljs.core._conj.call(null, cljs.core.List.EMPTY, meta_sym))))))))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "IMeta", "cljs.core/IMeta", -1459057517, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-meta", "-meta", 494863156, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, this_sym)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, meta_sym))))), impls)))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t), locals, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.analyzer.elide_reader_meta.call(null, 
  cljs.core.meta.call(null, _AMPERSAND_form))))))))));
};
cljs.core$macros.reify.cljs$lang$maxFixedArity = 2;
cljs.core$macros.reify.cljs$lang$applyTo = function(seq8718) {
  var G__8719 = cljs.core.first.call(null, seq8718);
  var seq8718__$1 = cljs.core.next.call(null, seq8718);
  var G__8720 = cljs.core.first.call(null, seq8718__$1);
  var seq8718__$2 = cljs.core.next.call(null, seq8718__$1);
  return cljs.core$macros.reify.cljs$core$IFn$_invoke$arity$variadic(G__8719, G__8720, seq8718__$2);
};
cljs.core$macros.reify.cljs$lang$macro = true;
cljs.core$macros.specify_BANG_ = function cljs$core$macros$specify_BANG_() {
  var args__5106__auto__ = [];
  var len__5099__auto___8728 = arguments.length;
  var i__5100__auto___8729 = 0;
  while (true) {
    if (i__5100__auto___8729 < len__5099__auto___8728) {
      args__5106__auto__.push(arguments[i__5100__auto___8729]);
      var G__8730 = i__5100__auto___8729 + 1;
      i__5100__auto___8729 = G__8730;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.specify_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.specify_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, expr, impls) {
  var x = cljs.core.with_meta.call(null, cljs.core.gensym.call(null, "x"), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "extend", "extend", 1836484006), new cljs.core.Keyword(null, "instance", "instance", -2121349050)], null));
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr)))))), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "extend-type", "cljs.core$macros/extend-type", 1713295201, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), impls)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))));
};
cljs.core$macros.specify_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core$macros.specify_BANG_.cljs$lang$applyTo = function(seq8724) {
  var G__8725 = cljs.core.first.call(null, seq8724);
  var seq8724__$1 = cljs.core.next.call(null, seq8724);
  var G__8726 = cljs.core.first.call(null, seq8724__$1);
  var seq8724__$2 = cljs.core.next.call(null, seq8724__$1);
  var G__8727 = cljs.core.first.call(null, seq8724__$2);
  var seq8724__$3 = cljs.core.next.call(null, seq8724__$2);
  return cljs.core$macros.specify_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8725, G__8726, G__8727, seq8724__$3);
};
cljs.core$macros.specify_BANG_.cljs$lang$macro = true;
cljs.core$macros.specify = function cljs$core$macros$specify() {
  var args__5106__auto__ = [];
  var len__5099__auto___8735 = arguments.length;
  var i__5100__auto___8736 = 0;
  while (true) {
    if (i__5100__auto___8736 < len__5099__auto___8735) {
      args__5106__auto__.push(arguments[i__5100__auto___8736]);
      var G__8737 = i__5100__auto___8736 + 1;
      i__5100__auto___8736 = G__8737;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.specify.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.specify.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, expr, impls) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "specify!", "cljs.core/specify!", -585401629, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "clone", "cljs.core/clone", 1417120092, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, expr))))), impls)));
};
cljs.core$macros.specify.cljs$lang$maxFixedArity = 3;
cljs.core$macros.specify.cljs$lang$applyTo = function(seq8731) {
  var G__8732 = cljs.core.first.call(null, seq8731);
  var seq8731__$1 = cljs.core.next.call(null, seq8731);
  var G__8733 = cljs.core.first.call(null, seq8731__$1);
  var seq8731__$2 = cljs.core.next.call(null, seq8731__$1);
  var G__8734 = cljs.core.first.call(null, seq8731__$2);
  var seq8731__$3 = cljs.core.next.call(null, seq8731__$2);
  return cljs.core$macros.specify.cljs$core$IFn$_invoke$arity$variadic(G__8732, G__8733, G__8734, seq8731__$3);
};
cljs.core$macros.specify.cljs$lang$macro = true;
cljs.core$macros.js_this = function cljs$core$macros$js_this(_AMPERSAND_form, _AMPERSAND_env) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, "this"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.js_this.cljs$lang$macro = true;
cljs.core$macros.this_as = function cljs$core$macros$this_as() {
  var args__5106__auto__ = [];
  var len__5099__auto___8742 = arguments.length;
  var i__5100__auto___8743 = 0;
  while (true) {
    if (i__5100__auto___8743 < len__5099__auto___8742) {
      args__5106__auto__.push(arguments[i__5100__auto___8743]);
      var G__8744 = i__5100__auto___8743 + 1;
      i__5100__auto___8743 = G__8744;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.this_as.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.this_as.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, name, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, name), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "js-this", "cljs.core$macros/js-this", 353597180, null))))))))))), body)));
};
cljs.core$macros.this_as.cljs$lang$maxFixedArity = 3;
cljs.core$macros.this_as.cljs$lang$applyTo = function(seq8738) {
  var G__8739 = cljs.core.first.call(null, seq8738);
  var seq8738__$1 = cljs.core.next.call(null, seq8738);
  var G__8740 = cljs.core.first.call(null, seq8738__$1);
  var seq8738__$2 = cljs.core.next.call(null, seq8738__$1);
  var G__8741 = cljs.core.first.call(null, seq8738__$2);
  var seq8738__$3 = cljs.core.next.call(null, seq8738__$2);
  return cljs.core$macros.this_as.cljs$core$IFn$_invoke$arity$variadic(G__8739, G__8740, G__8741, seq8738__$3);
};
cljs.core$macros.this_as.cljs$lang$macro = true;
cljs.core$macros.to_property = function cljs$core$macros$to_property(sym) {
  return cljs.core.symbol.call(null, [cljs.core.str("-"), cljs.core.str(sym)].join(""));
};
cljs.core$macros.warn_and_update_protocol = function cljs$core$macros$warn_and_update_protocol(p, type, env) {
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "Object", "Object", 61210754, null), p)) {
    return null;
  } else {
    var temp__4423__auto__ = cljs.analyzer.resolve_existing_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), p);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var var$ = temp__4423__auto__;
      if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol-symbol", "protocol-symbol", 1279552198)).cljs$core$IFn$_invoke$arity$1(var$))) {
      } else {
        cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "invalid-protocol-symbol", "invalid-protocol-symbol", 86246948), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), p], null));
      }
      if (cljs.core.truth_(function() {
        var and__4048__auto__ = (new cljs.core.Keyword(null, "protocol-deprecated", "protocol-deprecated", 103233497)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_warnings_STAR_);
        if (cljs.core.truth_(and__4048__auto__)) {
          var and__4048__auto____$1 = (new cljs.core.Keyword(null, "deprecated", "deprecated", 1498275348)).cljs$core$IFn$_invoke$arity$1(var$);
          if (cljs.core.truth_(and__4048__auto____$1)) {
            return cljs.core.not.call(null, (new cljs.core.Keyword(null, "deprecation-nowarn", "deprecation-nowarn", -1762828044)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p)));
          } else {
            return and__4048__auto____$1;
          }
        } else {
          return and__4048__auto__;
        }
      }())) {
        cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "protocol-deprecated", "protocol-deprecated", 103233497), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), p], null));
      } else {
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol-symbol", "protocol-symbol", 1279552198)).cljs$core$IFn$_invoke$arity$1(var$))) {
        return cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927)], null), function(var$, temp__4423__auto__) {
          return function(ns) {
            return cljs.core.update_in.call(null, ns, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(var$), new cljs.core.Keyword(null, "defs", "defs", 1398449717), cljs.core.symbol.call(null, cljs.core.name.call(null, p)), new cljs.core.Keyword(null, "impls", "impls", -1314014853)], null), cljs.core.conj, type);
          };
        }(var$, temp__4423__auto__));
      } else {
        return null;
      }
    } else {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "undeclared", "undeclared", 1446667347)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_warnings_STAR_))) {
        return cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "undeclared-protocol-symbol", "undeclared-protocol-symbol", 462882867), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), p], null));
      } else {
        return null;
      }
    }
  }
};
cljs.core$macros.resolve_var = function cljs$core$macros$resolve_var(env, sym) {
  var ret = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), sym));
  if (cljs.core.truth_(ret)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Can't resolve: "), cljs.core.str(sym)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "ret", "ret", 1172308713, null)))].join(""));
  }
  return ret;
};
cljs.core$macros.__GT_impl_map = function cljs$core$macros$__GT_impl_map(impls) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var s = impls;
  while (true) {
    if (cljs.core.seq.call(null, s)) {
      var G__8745 = cljs.core.assoc.call(null, ret, cljs.core.first.call(null, s), cljs.core.take_while.call(null, cljs.core.seq_QMARK_, cljs.core.next.call(null, s)));
      var G__8746 = cljs.core.drop_while.call(null, cljs.core.seq_QMARK_, cljs.core.next.call(null, s));
      ret = G__8745;
      s = G__8746;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core$macros.base_assign_impls = function cljs$core$macros$base_assign_impls(env, resolve, tsym, type, p__8747) {
  var vec__8751 = p__8747;
  var p = cljs.core.nth.call(null, vec__8751, 0, null);
  var sigs = cljs.core.nth.call(null, vec__8751, 1, null);
  cljs.core$macros.warn_and_update_protocol.call(null, p, tsym, env);
  var psym = resolve.call(null, p);
  var pfn_prefix = cljs.core.subs.call(null, [cljs.core.str(psym)].join(""), 0, cljs.core.inc.call(null, [cljs.core.str(psym)].join("").indexOf("/")));
  return cljs.core.cons.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aset", "cljs.core$macros/aset", -693176374, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, psym), cljs.core._conj.call(null, cljs.core.List.EMPTY, type), cljs.core._conj.call(null, cljs.core.List.EMPTY, true)))), cljs.core.map.call(null, function(psym, pfn_prefix, vec__8751, p, sigs) {
    return function(p__8752) {
      var vec__8753 = p__8752;
      var f = cljs.core.nth.call(null, vec__8753, 0, null);
      var meths = cljs.core.nthnext.call(null, vec__8753, 1);
      var form = vec__8753;
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aset", "cljs.core$macros/aset", -693176374, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.symbol.call(null, [cljs.core.str(pfn_prefix), cljs.core.str(f)].join(""))), cljs.core._conj.call(null, cljs.core.List.EMPTY, type), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, 
      cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), meths))), cljs.core.meta.call(null, form))))));
    };
  }(psym, pfn_prefix, vec__8751, p, sigs), sigs));
};
if (typeof cljs.core$macros.extend_prefix !== "undefined") {
} else {
  cljs.core$macros.extend_prefix = function() {
    var method_table__4954__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__4955__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__4956__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__4957__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__4958__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.core$macros", "extend-prefix"), function(method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__, hierarchy__4958__auto__) {
      return function(tsym, sym) {
        return (new cljs.core.Keyword(null, "extend", "extend", 1836484006)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tsym));
      };
    }(method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__, hierarchy__4958__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4958__auto__, method_table__4954__auto__, prefer_table__4955__auto__, method_cache__4956__auto__, cached_hierarchy__4957__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.core$macros.extend_prefix, new cljs.core.Keyword(null, "instance", "instance", -2121349050), function(tsym, sym) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "..", "..", -300507420, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, tsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.to_property.call(null, sym)))));
});
cljs.core._add_method.call(null, cljs.core$macros.extend_prefix, new cljs.core.Keyword(null, "default", "default", -1987822328), function(tsym, sym) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "..", "..", -300507420, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, tsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-prototype", "-prototype", -450831903, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.to_property.call(null, sym)))));
});
cljs.core$macros.adapt_obj_params = function cljs$core$macros$adapt_obj_params(type, p__8754) {
  var vec__8757 = p__8754;
  var vec__8758 = cljs.core.nth.call(null, vec__8757, 0, null);
  var this$ = cljs.core.nth.call(null, vec__8758, 0, null);
  var args = cljs.core.nthnext.call(null, vec__8758, 1);
  var sig = vec__8758;
  var body = cljs.core.nthnext.call(null, vec__8757, 1);
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "this-as", "this-as", -848995740, null), cljs.core.vary_meta.call(null, this$, cljs.core.assoc, new cljs.core.Keyword(null, "tag", "tag", -1290361223), type), body)), cljs.core.vec.call(null, args));
};
cljs.core$macros.adapt_ifn_params = function cljs$core$macros$adapt_ifn_params(type, p__8759) {
  var vec__8762 = p__8759;
  var vec__8763 = cljs.core.nth.call(null, vec__8762, 0, null);
  var this$ = cljs.core.nth.call(null, vec__8763, 0, null);
  var args = cljs.core.nthnext.call(null, vec__8763, 1);
  var sig = vec__8763;
  var body = cljs.core.nthnext.call(null, vec__8762, 1);
  var self_sym = cljs.core.with_meta.call(null, new cljs.core.Symbol(null, "self__", "self__", -153190816, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), type], null));
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.cons.call(null, self_sym, args))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "this-as", "cljs.core$macros/this-as", -799075148, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, self_sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  this$), cljs.core._conj.call(null, cljs.core.List.EMPTY, self_sym)))))), body)))))))))));
};
cljs.core$macros.adapt_ifn_invoke_params = function cljs$core$macros$adapt_ifn_invoke_params(type, p__8764) {
  var vec__8767 = p__8764;
  var vec__8768 = cljs.core.nth.call(null, vec__8767, 0, null);
  var this$ = cljs.core.nth.call(null, vec__8768, 0, null);
  var args = cljs.core.nthnext.call(null, vec__8768, 1);
  var sig = vec__8768;
  var body = cljs.core.nthnext.call(null, vec__8767, 1);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, args)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "this-as", "cljs.core$macros/this-as", -799075148, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.vary_meta.call(null, this$, cljs.core.assoc, new cljs.core.Keyword(null, "tag", "tag", -1290361223), type)), body)))))));
};
cljs.core$macros.adapt_proto_params = function cljs$core$macros$adapt_proto_params(type, p__8769) {
  var vec__8772 = p__8769;
  var vec__8773 = cljs.core.nth.call(null, vec__8772, 0, null);
  var this$ = cljs.core.nth.call(null, vec__8773, 0, null);
  var args = cljs.core.nthnext.call(null, vec__8773, 1);
  var sig = vec__8773;
  var body = cljs.core.nthnext.call(null, vec__8772, 1);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.cons.call(null, cljs.core.vary_meta.call(null, this$, cljs.core.assoc, new cljs.core.Keyword(null, "tag", "tag", -1290361223), type), args))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
  "this-as", "cljs.core$macros/this-as", -799075148, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, this$), body)))))));
};
cljs.core$macros.add_obj_methods = function cljs$core$macros$add_obj_methods(type, type_sym, sigs) {
  return cljs.core.map.call(null, function(p__8778) {
    var vec__8779 = p__8778;
    var f = cljs.core.nth.call(null, vec__8779, 0, null);
    var meths = cljs.core.nthnext.call(null, vec__8779, 1);
    var form = vec__8779;
    var vec__8780 = cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, meths)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.rest.call(null, form)], null)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f, meths], null);
    var f__$1 = cljs.core.nth.call(null, vec__8780, 0, null);
    var meths__$1 = cljs.core.nth.call(null, vec__8780, 1, null);
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.extend_prefix.call(null, type_sym, f__$1)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core.map.call(null, function(vec__8780, f__$1, meths__$1, vec__8779, f, meths, form) {
      return function(p1__8774_SHARP_) {
        return cljs.core$macros.adapt_obj_params.call(null, type, p1__8774_SHARP_);
      };
    }(vec__8780, f__$1, meths__$1, vec__8779, f, meths, form), meths__$1)))), cljs.core.meta.call(null, form))))));
  }, sigs);
};
cljs.core$macros.ifn_invoke_methods = function cljs$core$macros$ifn_invoke_methods(type, type_sym, p__8782) {
  var vec__8784 = p__8782;
  var f = cljs.core.nth.call(null, vec__8784, 0, null);
  var meths = cljs.core.nthnext.call(null, vec__8784, 1);
  var form = vec__8784;
  return cljs.core.map.call(null, function(vec__8784, f, meths, form) {
    return function(meth) {
      var arity = cljs.core.count.call(null, cljs.core.first.call(null, meth));
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.extend_prefix.call(null, type_sym, cljs.core.symbol.call(null, [cljs.core.str("cljs$core$IFn$_invoke$arity$"), cljs.core.str(arity)].join("")))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, cljs.core.sequence.call(null, 
      cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, meth)))), cljs.core.meta.call(null, form))))));
    };
  }(vec__8784, f, meths, form), cljs.core.map.call(null, function(vec__8784, f, meths, form) {
    return function(p1__8781_SHARP_) {
      return cljs.core$macros.adapt_ifn_invoke_params.call(null, type, p1__8781_SHARP_);
    };
  }(vec__8784, f, meths, form), meths));
};
cljs.core$macros.add_ifn_methods = function cljs$core$macros$add_ifn_methods(type, type_sym, p__8786) {
  var vec__8788 = p__8786;
  var f = cljs.core.nth.call(null, vec__8788, 0, null);
  var meths = cljs.core.nthnext.call(null, vec__8788, 1);
  var form = vec__8788;
  var meths__$1 = cljs.core.map.call(null, function(vec__8788, f, meths, form) {
    return function(p1__8785_SHARP_) {
      return cljs.core$macros.adapt_ifn_params.call(null, type, p1__8785_SHARP_);
    };
  }(vec__8788, f, meths, form), meths);
  var this_sym = cljs.core.with_meta.call(null, new cljs.core.Symbol(null, "self__", "self__", -153190816, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), type], null));
  var argsym = cljs.core.gensym.call(null, "args");
  return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.extend_prefix.call(null, type_sym, new cljs.core.Symbol(null, "call", "call", 1120531661, null))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.with_meta.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), meths__$1))), cljs.core.meta.call(null, form)))))), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 
  250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.extend_prefix.call(null, type_sym, new cljs.core.Symbol(null, "apply", "apply", -1334050276, null))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this_sym, argsym], null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "this-as", "cljs.core$macros/this-as", -799075148, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, this_sym), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".apply", ".apply", -1176201338, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-call", ".-call", 1760541695, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  this_sym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, this_sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".concat", ".concat", 1180408684, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol("cljs.core", "array", "cljs.core/array", 486685886, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, this_sym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "aclone", "cljs.core/aclone", -758078968, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, argsym)))))))))))))))))))), cljs.core.meta.call(null, 
  form))))))], null), cljs.core$macros.ifn_invoke_methods.call(null, type, type_sym, form));
};
cljs.core$macros.add_proto_methods_STAR_ = function cljs$core$macros$add_proto_methods_STAR_(pprefix, type, type_sym, p__8789) {
  var vec__8793 = p__8789;
  var f = cljs.core.nth.call(null, vec__8793, 0, null);
  var meths = cljs.core.nthnext.call(null, vec__8793, 1);
  var form = vec__8793;
  var pf = [cljs.core.str(pprefix), cljs.core.str(f)].join("");
  if (cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, meths))) {
    var meth = meths;
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.extend_prefix.call(null, type_sym, [cljs.core.str(pf), cljs.core.str("$arity$"), cljs.core.str(cljs.core.count.call(null, cljs.core.first.call(null, 
    meth)))].join(""))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core$macros.adapt_proto_params.call(null, type, meth)))), cljs.core.meta.call(null, form))))))], null);
  } else {
    return cljs.core.map.call(null, function(pf, vec__8793, f, meths, form) {
      return function(p__8794) {
        var vec__8795 = p__8794;
        var sig = cljs.core.nth.call(null, vec__8795, 0, null);
        var body = cljs.core.nthnext.call(null, vec__8795, 1);
        var meth = vec__8795;
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.extend_prefix.call(null, type_sym, [cljs.core.str(pf), cljs.core.str("$arity$"), cljs.core.str(cljs.core.count.call(null, sig))].join(""))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, cljs.core.sequence.call(null, 
        cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.adapt_proto_params.call(null, type, meth))))), cljs.core.meta.call(null, form))))));
      };
    }(pf, vec__8793, f, meths, form), meths);
  }
};
cljs.core$macros.proto_assign_impls = function cljs$core$macros$proto_assign_impls(env, resolve, type_sym, type, p__8796) {
  var vec__8798 = p__8796;
  var p = cljs.core.nth.call(null, vec__8798, 0, null);
  var sigs = cljs.core.nth.call(null, vec__8798, 1, null);
  cljs.core$macros.warn_and_update_protocol.call(null, p, type, env);
  var psym = resolve.call(null, p);
  var pprefix = cljs.core$macros.protocol_prefix.call(null, psym);
  var skip_flag = cljs.core.set.call(null, (new cljs.core.Keyword(null, "skip-protocol-flag", "skip-protocol-flag", -1426798630)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, type_sym)));
  if (cljs.core._EQ_.call(null, p, new cljs.core.Symbol(null, "Object", "Object", 61210754, null))) {
    return cljs.core$macros.add_obj_methods.call(null, type, type_sym, sigs);
  } else {
    return cljs.core.concat.call(null, cljs.core.truth_(skip_flag.call(null, psym)) ? null : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.extend_prefix.call(null, type_sym, pprefix)), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, true))))], null), cljs.core.mapcat.call(null, function(psym, pprefix, skip_flag, vec__8798, p, sigs) {
      return function(sig) {
        if (cljs.core._EQ_.call(null, psym, new cljs.core.Symbol("cljs.core", "IFn", "cljs.core/IFn", -920223129, null))) {
          return cljs.core$macros.add_ifn_methods.call(null, type, type_sym, sig);
        } else {
          return cljs.core$macros.add_proto_methods_STAR_.call(null, pprefix, type, type_sym, sig);
        }
      };
    }(psym, pprefix, skip_flag, vec__8798, p, sigs), sigs));
  }
};
cljs.core$macros.validate_impl_sigs = function cljs$core$macros$validate_impl_sigs(env, p, method) {
  if (cljs.core._EQ_.call(null, p, new cljs.core.Symbol(null, "Object", "Object", 61210754, null))) {
    return null;
  } else {
    var var$ = cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), p);
    var minfo = (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "protocol-info", "protocol-info", 1471745843)).cljs$core$IFn$_invoke$arity$1(var$));
    var vec__8800 = cljs.core.vector_QMARK_.call(null, cljs.core.second.call(null, method)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, method), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.second.call(null, method)], null)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, method), cljs.core.map.call(null, cljs.core.first, 
    cljs.core.rest.call(null, method))], null);
    var fname = cljs.core.nth.call(null, vec__8800, 0, null);
    var sigs = cljs.core.nth.call(null, vec__8800, 1, null);
    var decmeths = cljs.core.get.call(null, minfo, fname, new cljs.core.Keyword("cljs.core$macros", "not-found", "cljs.core$macros/not-found", -1226326556));
    if (cljs.core._EQ_.call(null, decmeths, new cljs.core.Keyword("cljs.core$macros", "not-found", "cljs.core$macros/not-found", -1226326556))) {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "protocol-invalid-method", "protocol-invalid-method", 522647516), env, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), p, new cljs.core.Keyword(null, "fname", "fname", 1500291491), fname, new cljs.core.Keyword(null, "no-such-method", "no-such-method", 1087422840), true], null));
    } else {
    }
    var sigs__$1 = sigs;
    var seen = cljs.core.PersistentHashSet.EMPTY;
    while (true) {
      if (cljs.core.seq.call(null, sigs__$1)) {
        var sig = cljs.core.first.call(null, sigs__$1);
        var c = cljs.core.count.call(null, sig);
        if (cljs.core.contains_QMARK_.call(null, seen, c)) {
          cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "protocol-duped-method", "protocol-duped-method", 15128166), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), p, new cljs.core.Keyword(null, "fname", "fname", 1500291491), fname], null));
        } else {
        }
        if (cljs.core.not_EQ_.call(null, decmeths, new cljs.core.Keyword("cljs.core$macros", "not-found", "cljs.core$macros/not-found", -1226326556)) && cljs.core.not.call(null, cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([c], true), cljs.core.map.call(null, cljs.core.count, decmeths)))) {
          cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "protocol-invalid-method", "protocol-invalid-method", 522647516), env, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), p, new cljs.core.Keyword(null, "fname", "fname", 1500291491), fname, new cljs.core.Keyword(null, "invalid-arity", "invalid-arity", 1335461949), c], null));
        } else {
        }
        var G__8801 = cljs.core.next.call(null, sigs__$1);
        var G__8802 = cljs.core.conj.call(null, seen, c);
        sigs__$1 = G__8801;
        seen = G__8802;
        continue;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core$macros.validate_impls = function cljs$core$macros$validate_impls(env, impls) {
  var protos = cljs.core.PersistentHashSet.EMPTY;
  var impls__$1 = impls;
  while (true) {
    if (cljs.core.seq.call(null, impls__$1)) {
      var proto = cljs.core.first.call(null, impls__$1);
      var methods$ = cljs.core.take_while.call(null, cljs.core.seq_QMARK_, cljs.core.next.call(null, impls__$1));
      var impls__$2 = cljs.core.drop_while.call(null, cljs.core.seq_QMARK_, cljs.core.next.call(null, impls__$1));
      if (cljs.core.contains_QMARK_.call(null, protos, proto)) {
        cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "protocol-multiple-impls", "protocol-multiple-impls", 794179260), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), proto], null));
      } else {
      }
      var seen_8805 = cljs.core.PersistentHashSet.EMPTY;
      var methods_8806__$1 = methods$;
      while (true) {
        if (cljs.core.seq.call(null, methods_8806__$1)) {
          var vec__8804_8807 = cljs.core.first.call(null, methods_8806__$1);
          var fname_8808 = cljs.core.nth.call(null, vec__8804_8807, 0, null);
          var method_8809 = vec__8804_8807;
          if (cljs.core.contains_QMARK_.call(null, seen_8805, fname_8808)) {
            cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "extend-type-invalid-method-shape", "extend-type-invalid-method-shape", 1424103549), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), proto, new cljs.core.Keyword(null, "method", "method", 55703592), fname_8808], null));
          } else {
          }
          cljs.core$macros.validate_impl_sigs.call(null, env, proto, method_8809);
          var G__8810 = cljs.core.conj.call(null, seen_8805, fname_8808);
          var G__8811 = cljs.core.next.call(null, methods_8806__$1);
          seen_8805 = G__8810;
          methods_8806__$1 = G__8811;
          continue;
        } else {
        }
        break;
      }
      var G__8812 = cljs.core.conj.call(null, protos, proto);
      var G__8813 = impls__$2;
      protos = G__8812;
      impls__$1 = G__8813;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core$macros.extend_type = function cljs$core$macros$extend_type() {
  var args__5106__auto__ = [];
  var len__5099__auto___8820 = arguments.length;
  var i__5100__auto___8821 = 0;
  while (true) {
    if (i__5100__auto___8821 < len__5099__auto___8820) {
      args__5106__auto__.push(arguments[i__5100__auto___8821]);
      var G__8822 = i__5100__auto___8821 + 1;
      i__5100__auto___8821 = G__8822;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.extend_type.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.extend_type.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, type_sym, impls) {
  var env = _AMPERSAND_env;
  var _ = cljs.core$macros.validate_impls.call(null, env, impls);
  var resolve = cljs.core.partial.call(null, cljs.core$macros.resolve_var, env);
  var impl_map = cljs.core$macros.__GT_impl_map.call(null, impls);
  var vec__8819 = function() {
    var temp__4423__auto__ = cljs.core$macros.base_type.call(null, type_sym);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var type = temp__4423__auto__;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [type, cljs.core$macros.base_assign_impls], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [resolve.call(null, type_sym), cljs.core$macros.proto_assign_impls], null);
    }
  }();
  var type = cljs.core.nth.call(null, vec__8819, 0, null);
  var assign_impls = cljs.core.nth.call(null, vec__8819, 1, null);
  if (cljs.core.truth_(function() {
    var and__4048__auto__ = (new cljs.core.Keyword(null, "extending-base-js-type", "extending-base-js-type", 432787264)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_warnings_STAR_);
    if (cljs.core.truth_(and__4048__auto__)) {
      return cljs.core$macros.js_base_type.call(null, type_sym);
    } else {
      return and__4048__auto__;
    }
  }())) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "extending-base-js-type", "extending-base-js-type", 432787264), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "current-symbol", "current-symbol", -932381075), type_sym, new cljs.core.Keyword(null, "suggested-symbol", "suggested-symbol", -1329631875), cljs.core$macros.js_base_type.call(null, type_sym)], null));
  } else {
  }
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core.mapcat.call(null, function(env, _, resolve, impl_map, vec__8819, type, assign_impls) {
    return function(p1__8814_SHARP_) {
      return assign_impls.call(null, env, resolve, type_sym, type, p1__8814_SHARP_);
    };
  }(env, _, resolve, impl_map, vec__8819, type, assign_impls), impl_map))));
};
cljs.core$macros.extend_type.cljs$lang$maxFixedArity = 3;
cljs.core$macros.extend_type.cljs$lang$applyTo = function(seq8815) {
  var G__8816 = cljs.core.first.call(null, seq8815);
  var seq8815__$1 = cljs.core.next.call(null, seq8815);
  var G__8817 = cljs.core.first.call(null, seq8815__$1);
  var seq8815__$2 = cljs.core.next.call(null, seq8815__$1);
  var G__8818 = cljs.core.first.call(null, seq8815__$2);
  var seq8815__$3 = cljs.core.next.call(null, seq8815__$2);
  return cljs.core$macros.extend_type.cljs$core$IFn$_invoke$arity$variadic(G__8816, G__8817, G__8818, seq8815__$3);
};
cljs.core$macros.extend_type.cljs$lang$macro = true;
cljs.core$macros.prepare_protocol_masks = function cljs$core$macros$prepare_protocol_masks(env, impls) {
  var resolve = cljs.core.partial.call(null, cljs.core$macros.resolve_var, env);
  var impl_map = cljs.core$macros.__GT_impl_map.call(null, impls);
  var fpp_pbs = cljs.core.seq.call(null, cljs.core.keep.call(null, cljs.core$macros.fast_path_protocols, cljs.core.map.call(null, resolve, cljs.core.keys.call(null, impl_map))));
  if (fpp_pbs) {
    var fpps = cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.filter.call(null, cljs.core.partial.call(null, cljs.core.contains_QMARK_, cljs.core$macros.fast_path_protocols), cljs.core.map.call(null, resolve, cljs.core.keys.call(null, impl_map))));
    var parts = function() {
      var parts = cljs.core.group_by.call(null, cljs.core.first, fpp_pbs);
      var parts__$1 = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, cljs.core.juxt.call(null, cljs.core.key, cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.core.map, cljs.core.peek), cljs.core.val)), parts));
      var parts__$2 = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, cljs.core.juxt.call(null, cljs.core.key, cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.core.reduce, cljs.core.bit_or), cljs.core.val)), parts__$1));
      return parts__$2;
    }();
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [fpps, cljs.core.reduce.call(null, function(fpps, parts, resolve, impl_map, fpp_pbs) {
      return function(ps, p) {
        return cljs.core.update_in.call(null, ps, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p], null), cljs.core.fnil.call(null, cljs.core.identity, 0));
      };
    }(fpps, parts, resolve, impl_map, fpp_pbs), parts, cljs.core.range.call(null, cljs.core$macros.fast_path_protocol_partitions_count))], null);
  } else {
    return null;
  }
};
cljs.core$macros.annotate_specs = function cljs$core$macros$annotate_specs(annots, v, p__8824) {
  var vec__8826 = p__8824;
  var f = cljs.core.nth.call(null, vec__8826, 0, null);
  var sigs = cljs.core.nth.call(null, vec__8826, 1, null);
  return cljs.core.conj.call(null, v, cljs.core.vary_meta.call(null, cljs.core.cons.call(null, f, cljs.core.map.call(null, function(vec__8826, f, sigs) {
    return function(p1__8823_SHARP_) {
      return cljs.core.cons.call(null, cljs.core.second.call(null, p1__8823_SHARP_), cljs.core.nnext.call(null, p1__8823_SHARP_));
    };
  }(vec__8826, f, sigs), sigs)), cljs.core.merge, annots));
};
cljs.core$macros.dt__GT_et = function cljs$core$macros$dt__GT_et() {
  var args8827 = [];
  var len__5099__auto___8830 = arguments.length;
  var i__5100__auto___8831 = 0;
  while (true) {
    if (i__5100__auto___8831 < len__5099__auto___8830) {
      args8827.push(arguments[i__5100__auto___8831]);
      var G__8832 = i__5100__auto___8831 + 1;
      i__5100__auto___8831 = G__8832;
      continue;
    } else {
    }
    break;
  }
  var G__8829 = args8827.length;
  switch(G__8829) {
    case 3:
      return cljs.core$macros.dt__GT_et.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros.dt__GT_et.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8827.length)].join(""));;
  }
};
cljs.core$macros.dt__GT_et.cljs$core$IFn$_invoke$arity$3 = function(type, specs, fields) {
  return cljs.core$macros.dt__GT_et.call(null, type, specs, fields, false);
};
cljs.core$macros.dt__GT_et.cljs$core$IFn$_invoke$arity$4 = function(type, specs, fields, inline) {
  var annots = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("cljs.analyzer", "type", "cljs.analyzer/type", 478749742), type, new cljs.core.Keyword("cljs.analyzer", "protocol-impl", "cljs.analyzer/protocol-impl", -1523935409), true, new cljs.core.Keyword("cljs.analyzer", "protocol-inline", "cljs.analyzer/protocol-inline", -1611519026), inline], null);
  var ret = cljs.core.PersistentVector.EMPTY;
  var specs__$1 = specs;
  while (true) {
    if (cljs.core.seq.call(null, specs__$1)) {
      var p = cljs.core.first.call(null, specs__$1);
      var ret__$1 = cljs.core.into.call(null, cljs.core.conj.call(null, ret, p), cljs.core.reduce.call(null, cljs.core.partial.call(null, cljs.core$macros.annotate_specs, annots), cljs.core.PersistentVector.EMPTY, cljs.core.group_by.call(null, cljs.core.first, cljs.core.take_while.call(null, cljs.core.seq_QMARK_, cljs.core.next.call(null, specs__$1)))));
      var specs__$2 = cljs.core.drop_while.call(null, cljs.core.seq_QMARK_, cljs.core.next.call(null, specs__$1));
      var G__8834 = ret__$1;
      var G__8835 = specs__$2;
      ret = G__8834;
      specs__$1 = G__8835;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core$macros.dt__GT_et.cljs$lang$maxFixedArity = 4;
cljs.core$macros.collect_protocols = function cljs$core$macros$collect_protocols(impls, env) {
  return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.map.call(null, function(p1__8836_SHARP_) {
    return (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), p1__8836_SHARP_));
  }, cljs.core.filter.call(null, cljs.core.symbol_QMARK_, impls)));
};
cljs.core$macros.build_positional_factory = function cljs$core$macros$build_positional_factory(rsym, rname, fields) {
  var fn_name = cljs.core.with_meta.call(null, cljs.core.symbol.call(null, [cljs.core.str(new cljs.core.Symbol(null, "->", "->", -2139605430, null)), cljs.core.str(rsym)].join("")), cljs.core.assoc.call(null, cljs.core.meta.call(null, rsym), new cljs.core.Keyword(null, "factory", "factory", 63933746), new cljs.core.Keyword(null, "positional", "positional", -203580463)));
  var field_values = cljs.core.truth_((new cljs.core.Keyword(null, "internal-ctor", "internal-ctor", 937392560)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, rsym))) ? cljs.core.conj.call(null, fields, null, null, null) : fields;
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "defn", "cljs.core$macros/defn", -728332354, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, fn_name), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, fields))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, rname), field_values)))))));
};
cljs.core$macros.validate_fields = function cljs$core$macros$validate_fields(case$, name, fields) {
  if (cljs.core.vector_QMARK_.call(null, fields)) {
    return null;
  } else {
    throw new Error([cljs.core.str(case$), cljs.core.str(" "), cljs.core.str(name), cljs.core.str(", no fields vector given.")].join(""));
  }
};
cljs.core$macros.deftype = function cljs$core$macros$deftype() {
  var args__5106__auto__ = [];
  var len__5099__auto___8846 = arguments.length;
  var i__5100__auto___8847 = 0;
  while (true) {
    if (i__5100__auto___8847 < len__5099__auto___8846) {
      args__5106__auto__.push(arguments[i__5100__auto___8847]);
      var G__8848 = i__5100__auto___8847 + 1;
      i__5100__auto___8847 = G__8848;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 4 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(4), 0) : null;
  return cljs.core$macros.deftype.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5107__auto__);
};
cljs.core$macros.deftype.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, t, fields, impls) {
  cljs.core$macros.validate_fields.call(null, "deftype", t, fields);
  var env = _AMPERSAND_env;
  var r = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), t));
  var vec__8845 = cljs.core$macros.prepare_protocol_masks.call(null, env, impls);
  var fpps = cljs.core.nth.call(null, vec__8845, 0, null);
  var pmasks = cljs.core.nth.call(null, vec__8845, 1, null);
  var protocols = cljs.core$macros.collect_protocols.call(null, impls, env);
  var t__$1 = cljs.core.vary_meta.call(null, t, cljs.core.assoc, new cljs.core.Keyword(null, "protocols", "protocols", -5615896), protocols, new cljs.core.Keyword(null, "skip-protocol-flag", "skip-protocol-flag", -1426798630), fpps);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t__$1), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, fields), cljs.core._conj.call(null, cljs.core.List.EMPTY, pmasks), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.seq.call(null, impls) ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "extend-type", "cljs.core$macros/extend-type", 1713295201, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t__$1), cljs.core$macros.dt__GT_et.call(null, 
  t__$1, impls, fields)))) : null))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-getBasis", 
  ".-getBasis", -1306451468, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t__$1))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, fields))))))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-cljs$lang$type", ".-cljs$lang$type", -1029307724, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t__$1))))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, true))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-cljs$lang$ctorStr", 
  ".-cljs$lang$ctorStr", -1820706991, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t__$1))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, [cljs.core.str(r)].join("")))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-cljs$lang$ctorPrWriter", ".-cljs$lang$ctorPrWriter", 255834464, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t__$1))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", 
  -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8837__auto__", "this__8837__auto__", 1074721620, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "writer__8838__auto__", "writer__8838__auto__", 1351201250, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "opt__8839__auto__", "opt__8839__auto__", -1060679058, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-write", "cljs.core/-write", 527220517, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "writer__8838__auto__", "writer__8838__auto__", 1351201250, null)), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, [cljs.core.str(r)].join("")))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.build_positional_factory.call(null, t__$1, r, fields)), cljs.core._conj.call(null, cljs.core.List.EMPTY, t__$1))));
};
cljs.core$macros.deftype.cljs$lang$maxFixedArity = 4;
cljs.core$macros.deftype.cljs$lang$applyTo = function(seq8840) {
  var G__8841 = cljs.core.first.call(null, seq8840);
  var seq8840__$1 = cljs.core.next.call(null, seq8840);
  var G__8842 = cljs.core.first.call(null, seq8840__$1);
  var seq8840__$2 = cljs.core.next.call(null, seq8840__$1);
  var G__8843 = cljs.core.first.call(null, seq8840__$2);
  var seq8840__$3 = cljs.core.next.call(null, seq8840__$2);
  var G__8844 = cljs.core.first.call(null, seq8840__$3);
  var seq8840__$4 = cljs.core.next.call(null, seq8840__$3);
  return cljs.core$macros.deftype.cljs$core$IFn$_invoke$arity$variadic(G__8841, G__8842, G__8843, G__8844, seq8840__$4);
};
cljs.core$macros.deftype.cljs$lang$macro = true;
cljs.core$macros.emit_defrecord = function cljs$core$macros$emit_defrecord(env, tagname, rname, fields, impls) {
  var hinted_fields = fields;
  var fields__$1 = cljs.core.vec.call(null, cljs.core.map.call(null, function(hinted_fields) {
    return function(p1__8849_SHARP_) {
      return cljs.core.with_meta.call(null, p1__8849_SHARP_, null);
    };
  }(hinted_fields), fields));
  var base_fields = fields__$1;
  var pr_open = [cljs.core.str("#"), cljs.core.str(cljs.core.namespace.call(null, rname)), cljs.core.str("."), cljs.core.str(cljs.core.name.call(null, rname)), cljs.core.str("{")].join("");
  var fields__$2 = cljs.core.conj.call(null, fields__$1, new cljs.core.Symbol(null, "__meta", "__meta", -946752628, null), new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null), cljs.core.with_meta.call(null, new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)));
  var gs = cljs.core.gensym.call(null);
  var ksym = cljs.core.gensym.call(null, "k");
  var impls__$1 = cljs.core.concat.call(null, impls, new cljs.core.PersistentVector(null, 26, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "IRecord", "IRecord", -903221169, null), new cljs.core.Symbol(null, "ICloneable", "ICloneable", 1882653160, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-clone", "-clone", 227130084, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8850__auto__", "this__8850__auto__", 862209804, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, tagname), fields__$2))))))), new cljs.core.Symbol(null, "IHash", "IHash", -1495374645, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-hash", "-hash", -630070274, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8851__auto__", "this__8851__auto__", -2115127397, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "caching-hash", "cljs.core$macros/caching-hash", -1892393069, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "this__8851__auto__", "this__8851__auto__", -2115127397, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "hash-imap", "hash-imap", -1047446478, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null))))))))), new cljs.core.Symbol(null, "IEquiv", "IEquiv", -1912850869, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "-equiv", "-equiv", 320124272, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8852__auto__", "this__8852__auto__", -1560242467, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "other__8853__auto__", "other__8853__auto__", -978130707, null))))))), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "and", "cljs.core$macros/and", 48320334, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "other__8853__auto__", "other__8853__auto__", -978130707, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "identical?", "cljs.core$macros/identical?", 815580547, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-constructor", ".-constructor", 279801701, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8852__auto__", "this__8852__auto__", -1560242467, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, ".-constructor", ".-constructor", 279801701, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "other__8853__auto__", "other__8853__auto__", -978130707, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "equiv-map", "cljs.core/equiv-map", -1185609892, null)), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8852__auto__", "this__8852__auto__", -1560242467, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "other__8853__auto__", "other__8853__auto__", -978130707, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, true), cljs.core._conj.call(null, cljs.core.List.EMPTY, false)))))))), new cljs.core.Symbol(null, "IMeta", "IMeta", 1095313672, null), cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-meta", "-meta", 494863156, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8854__auto__", "this__8854__auto__", -1500023136, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "__meta", "__meta", -946752628, null))))), new cljs.core.Symbol(null, "IWithMeta", "IWithMeta", -509493158, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-with-meta", "-with-meta", -1610713823, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8855__auto__", "this__8855__auto__", 1384441608, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gs)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, tagname), 
  cljs.core.replace.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "__meta", "__meta", -946752628, null), gs], null), fields__$2)))))))), new cljs.core.Symbol(null, "ILookup", "ILookup", 784647298, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-lookup", "-lookup", -1438393944, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8856__auto__", "this__8856__auto__", -577376927, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "k__8857__auto__", "k__8857__auto__", -1513475006, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-lookup", "cljs.core/-lookup", -1845674443, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8856__auto__", "this__8856__auto__", -577376927, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "k__8857__auto__", "k__8857__auto__", -1513475006, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, null)))))))), cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-lookup", "-lookup", -1438393944, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8858__auto__", "this__8858__auto__", 1064199437, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, ksym), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "else__8859__auto__", "else__8859__auto__", -697125525, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "case", "cljs.core$macros/case", -2131866965, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, ksym), cljs.core.mapcat.call(null, 
  function(gs, ksym, hinted_fields, fields__$1, base_fields, pr_open, fields__$2) {
    return function(f) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, f), f], null);
    };
  }(gs, ksym, hinted_fields, fields__$1, base_fields, pr_open, fields__$2), base_fields), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "get", "cljs.core/get", -296075407, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  ksym), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "else__8859__auto__", "else__8859__auto__", -697125525, null))))))))))))), new cljs.core.Symbol(null, "ICounted", "ICounted", -1705786327, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-count", "-count", 416049189, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8860__auto__", "this__8860__auto__", -184485256, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "+", "cljs.core$macros/+", -18260342, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.count.call(null, base_fields)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "count", "cljs.core/count", -921270233, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null))))))))))))), new cljs.core.Symbol(null, "ICollection", 
  "ICollection", -686709190, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-conj", "-conj", 1373798691, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8861__auto__", "this__8861__auto__", 
  -637354644, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "entry__8862__auto__", "entry__8862__auto__", 307746676, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "vector?", "cljs.core/vector?", -1550392028, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "entry__8862__auto__", "entry__8862__auto__", 307746676, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
  "-assoc", "cljs.core/-assoc", -814539323, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8861__auto__", "this__8861__auto__", -637354644, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-nth", "cljs.core/-nth", 504234802, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "entry__8862__auto__", "entry__8862__auto__", 307746676, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-nth", "cljs.core/-nth", 504234802, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "entry__8862__auto__", 
  "entry__8862__auto__", 307746676, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 1))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "reduce", "cljs.core/reduce", 2025430439, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-conj", "cljs.core/-conj", 2040622670, null)), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8861__auto__", "this__8861__auto__", -637354644, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "entry__8862__auto__", "entry__8862__auto__", 307746676, null))))))))))))), new cljs.core.Symbol(null, "IAssociative", "IAssociative", -1306431882, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "-assoc", "-assoc", -416089758, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8863__auto__", "this__8863__auto__", 2027435900, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "k__8864__auto__", "k__8864__auto__", 914495846, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, gs)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "condp", "cljs.core$macros/condp", 431619047, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "keyword-identical?", "cljs.core/keyword-identical?", 1598491177, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "k__8864__auto__", "k__8864__auto__", 914495846, null)), cljs.core.mapcat.call(null, function(gs, ksym, hinted_fields, fields__$1, base_fields, pr_open, fields__$2) {
    return function(fld) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, fld), cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "new", "new", -444906321, null), tagname, cljs.core.replace.call(null, new cljs.core.PersistentArrayMap.fromArray([fld, gs, new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), null], true, false), fields__$2))], null);
    };
  }(gs, ksym, hinted_fields, fields__$1, base_fields, pr_open, fields__$2), base_fields), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, tagname), cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, 
  "__hash", "__hash", -1328796629, null), null, new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null), null], null), null), fields__$2), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "assoc", "cljs.core/assoc", 322326297, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "__extmap", 
  "__extmap", -1435580931, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "k__8864__auto__", "k__8864__auto__", 914495846, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gs))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null)))))))))))), new cljs.core.Symbol(null, "IMap", "IMap", 992876629, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "-dissoc", "-dissoc", 1638079447, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8865__auto__", "this__8865__auto__", -654545206, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "k__8866__auto__", "k__8866__auto__", 1524138859, null))))))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "contains?", "cljs.core/contains?", -976526835, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.apply.call(null, cljs.core.hash_set, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.keyword, base_fields)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "k__8866__auto__", "k__8866__auto__", 1524138859, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "dissoc", "cljs.core/dissoc", -432349815, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "with-meta", "cljs.core/with-meta", 749126446, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "into", "cljs.core/into", 1879938733, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8865__auto__", "this__8865__auto__", -654545206, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "__meta", "__meta", -946752628, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "k__8866__auto__", "k__8866__auto__", 1524138859, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  tagname), cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), null, new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null), null], null), null), fields__$2), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
  "not-empty", "cljs.core/not-empty", 540057011, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "dissoc", "cljs.core/dissoc", -432349815, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "k__8866__auto__", "k__8866__auto__", 1524138859, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null)))))))))))), new cljs.core.Symbol(null, "ISeqable", "ISeqable", 1349682102, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-seq", "-seq", 1019896831, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8868__auto__", "this__8868__auto__", -504438167, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "seq", "cljs.core/seq", -1649497689, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "concat", "cljs.core/concat", -1133584918, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.map.call(null, function(gs, ksym, hinted_fields, fields__$1, base_fields, pr_open, fields__$2) {
    return function(p1__8867_SHARP_) {
      return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, p1__8867_SHARP_), cljs.core.keyword.call(null, p1__8867_SHARP_)), new cljs.core.Symbol("cljs.core", "vector", "cljs.core/vector", 720641726, null));
    };
  }(gs, ksym, hinted_fields, fields__$1, base_fields, pr_open, fields__$2), base_fields)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null))))))))))))), new cljs.core.Symbol(null, "IPrintWithWriter", "IPrintWithWriter", -1205316154, null), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-pr-writer", "-pr-writer", 
  -445354136, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8870__auto__", "this__8870__auto__", 2146554854, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "writer__8871__auto__", "writer__8871__auto__", 235770319, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "opts__8872__auto__", "opts__8872__auto__", -830666070, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "pr-pair__8873__auto__", "pr-pair__8873__auto__", 2059908490, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "keyval__8874__auto__", "keyval__8874__auto__", -494841158, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "pr-sequential-writer", "cljs.core/pr-sequential-writer", -1101677821, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, "writer__8871__auto__", "writer__8871__auto__", 235770319, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "pr-writer", "cljs.core/pr-writer", 133956070, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, ""), cljs.core._conj.call(null, cljs.core.List.EMPTY, " "), cljs.core._conj.call(null, cljs.core.List.EMPTY, ""), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "opts__8872__auto__", 
  "opts__8872__auto__", -830666070, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "keyval__8874__auto__", "keyval__8874__auto__", -494841158, null))))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "pr-sequential-writer", "cljs.core/pr-sequential-writer", -1101677821, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, "writer__8871__auto__", "writer__8871__auto__", 235770319, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "pr-pair__8873__auto__", "pr-pair__8873__auto__", 2059908490, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, pr_open), cljs.core._conj.call(null, cljs.core.List.EMPTY, ", "), cljs.core._conj.call(null, cljs.core.List.EMPTY, "}"), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "opts__8872__auto__", "opts__8872__auto__", -830666070, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "concat", "cljs.core/concat", -1133584918, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.map.call(null, 
  function(gs, ksym, hinted_fields, fields__$1, base_fields, pr_open, fields__$2) {
    return function(p1__8869_SHARP_) {
      return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, p1__8869_SHARP_), cljs.core.keyword.call(null, p1__8869_SHARP_)), new cljs.core.Symbol("cljs.core", "vector", "cljs.core/vector", 720641726, null));
    };
  }(gs, ksym, hinted_fields, fields__$1, base_fields, pr_open, fields__$2), base_fields)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null)))))))))))))))))], null));
  var vec__8876 = cljs.core$macros.prepare_protocol_masks.call(null, env, impls__$1);
  var fpps = cljs.core.nth.call(null, vec__8876, 0, null);
  var pmasks = cljs.core.nth.call(null, vec__8876, 1, null);
  var protocols = cljs.core$macros.collect_protocols.call(null, impls__$1, env);
  var tagname__$1 = cljs.core.vary_meta.call(null, tagname, cljs.core.assoc, new cljs.core.Keyword(null, "protocols", "protocols", -5615896), protocols, new cljs.core.Keyword(null, "skip-protocol-flag", "skip-protocol-flag", -1426798630), fpps);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  tagname__$1), cljs.core._conj.call(null, cljs.core.List.EMPTY, hinted_fields), cljs.core._conj.call(null, cljs.core.List.EMPTY, pmasks), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "extend-type", "cljs.core$macros/extend-type", 1713295201, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, tagname__$1), cljs.core$macros.dt__GT_et.call(null, 
  tagname__$1, impls__$1, fields__$2, true))))))))))));
};
cljs.core$macros.build_map_factory = function cljs$core$macros$build_map_factory(rsym, rname, fields) {
  var fn_name = cljs.core.with_meta.call(null, cljs.core.symbol.call(null, [cljs.core.str(new cljs.core.Symbol(null, "map->", "map->", -999714600, null)), cljs.core.str(rsym)].join("")), cljs.core.assoc.call(null, cljs.core.meta.call(null, rsym), new cljs.core.Keyword(null, "factory", "factory", 63933746), new cljs.core.Keyword(null, "map", "map", 1371690461)));
  var ms = cljs.core.gensym.call(null);
  var ks = cljs.core.map.call(null, cljs.core.keyword, fields);
  var getters = cljs.core.map.call(null, function(fn_name, ms, ks) {
    return function(k) {
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, k), cljs.core._conj.call(null, cljs.core.List.EMPTY, ms))));
    };
  }(fn_name, ms, ks), ks);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "defn", "cljs.core$macros/defn", -728332354, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, fn_name), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, ms)))))), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, rname), getters, cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "dissoc", "cljs.core/dissoc", -432349815, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, ms), ks)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))))))));
};
cljs.core$macros.defrecord = function cljs$core$macros$defrecord() {
  var args__5106__auto__ = [];
  var len__5099__auto___8884 = arguments.length;
  var i__5100__auto___8885 = 0;
  while (true) {
    if (i__5100__auto___8885 < len__5099__auto___8884) {
      args__5106__auto__.push(arguments[i__5100__auto___8885]);
      var G__8886 = i__5100__auto___8885 + 1;
      i__5100__auto___8885 = G__8886;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 4 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(4), 0) : null;
  return cljs.core$macros.defrecord.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5107__auto__);
};
cljs.core$macros.defrecord.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, rsym, fields, impls) {
  cljs.core$macros.validate_fields.call(null, "defrecord", rsym, fields);
  var rsym__$1 = cljs.core.vary_meta.call(null, rsym, cljs.core.assoc, new cljs.core.Keyword(null, "internal-ctor", "internal-ctor", 937392560), true);
  var r = cljs.core.vary_meta.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, _AMPERSAND_env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), rsym__$1)), cljs.core.assoc, new cljs.core.Keyword(null, "internal-ctor", "internal-ctor", 937392560), true);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.emit_defrecord.call(null, _AMPERSAND_env, 
  rsym__$1, r, fields, impls)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-getBasis", ".-getBasis", 
  -1306451468, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, r))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, fields))))))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-cljs$lang$type", ".-cljs$lang$type", -1029307724, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, r))))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, true))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-cljs$lang$ctorPrSeq", 
  ".-cljs$lang$ctorPrSeq", 41132414, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, r))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8877__auto__", "this__8877__auto__", -19597846, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("core", "list", "core/list", -1892309799, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, [cljs.core.str(r)].join("")))))))))))))), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-cljs$lang$ctorPrWriter", ".-cljs$lang$ctorPrWriter", 
  255834464, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, r))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__8877__auto__", "this__8877__auto__", -19597846, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "writer__8878__auto__", "writer__8878__auto__", -19923192, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
  "-write", "cljs.core/-write", 527220517, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "writer__8878__auto__", "writer__8878__auto__", -19923192, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, [cljs.core.str(r)].join("")))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.build_positional_factory.call(null, rsym__$1, r, fields)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.build_map_factory.call(null, 
  rsym__$1, r, fields)), cljs.core._conj.call(null, cljs.core.List.EMPTY, r))));
};
cljs.core$macros.defrecord.cljs$lang$maxFixedArity = 4;
cljs.core$macros.defrecord.cljs$lang$applyTo = function(seq8879) {
  var G__8880 = cljs.core.first.call(null, seq8879);
  var seq8879__$1 = cljs.core.next.call(null, seq8879);
  var G__8881 = cljs.core.first.call(null, seq8879__$1);
  var seq8879__$2 = cljs.core.next.call(null, seq8879__$1);
  var G__8882 = cljs.core.first.call(null, seq8879__$2);
  var seq8879__$3 = cljs.core.next.call(null, seq8879__$2);
  var G__8883 = cljs.core.first.call(null, seq8879__$3);
  var seq8879__$4 = cljs.core.next.call(null, seq8879__$3);
  return cljs.core$macros.defrecord.cljs$core$IFn$_invoke$arity$variadic(G__8880, G__8881, G__8882, G__8883, seq8879__$4);
};
cljs.core$macros.defrecord.cljs$lang$macro = true;
cljs.core$macros.defprotocol = function cljs$core$macros$defprotocol() {
  var args__5106__auto__ = [];
  var len__5099__auto___8904 = arguments.length;
  var i__5100__auto___8905 = 0;
  while (true) {
    if (i__5100__auto___8905 < len__5099__auto___8904) {
      args__5106__auto__.push(arguments[i__5100__auto___8905]);
      var G__8906 = i__5100__auto___8905 + 1;
      i__5100__auto___8905 = G__8906;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.defprotocol.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.defprotocol.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, psym, doc_PLUS_methods) {
  var p = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, _AMPERSAND_env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), psym));
  var vec__8893 = typeof cljs.core.first.call(null, doc_PLUS_methods) === "string" ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, doc_PLUS_methods), cljs.core.next.call(null, doc_PLUS_methods)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, doc_PLUS_methods], null);
  var doc = cljs.core.nth.call(null, vec__8893, 0, null);
  var methods$ = cljs.core.nth.call(null, vec__8893, 1, null);
  var psym__$1 = cljs.core.vary_meta.call(null, psym, cljs.core.assoc, new cljs.core.Keyword(null, "doc", "doc", 1913296891), doc, new cljs.core.Keyword(null, "protocol-symbol", "protocol-symbol", 1279552198), true);
  var ns_name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_env));
  var fqn = function(p, vec__8893, doc, methods$, psym__$1, ns_name) {
    return function(n) {
      return cljs.core.symbol.call(null, [cljs.core.str(ns_name), cljs.core.str("."), cljs.core.str(n)].join(""));
    };
  }(p, vec__8893, doc, methods$, psym__$1, ns_name);
  var prefix = cljs.core$macros.protocol_prefix.call(null, p);
  var _ = function() {
    var seq__8894 = cljs.core.seq.call(null, methods$);
    var chunk__8895 = null;
    var count__8896 = 0;
    var i__8897 = 0;
    while (true) {
      if (i__8897 < count__8896) {
        var vec__8898 = cljs.core._nth.call(null, chunk__8895, i__8897);
        var mname = cljs.core.nth.call(null, vec__8898, 0, null);
        var arities = cljs.core.nthnext.call(null, vec__8898, 1);
        if (cljs.core.truth_(cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [0, null], null), null), cljs.core.map.call(null, cljs.core.count, cljs.core.filter.call(null, cljs.core.vector_QMARK_, arities))))) {
          throw new Error([cljs.core.str("Invalid protocol, "), cljs.core.str(psym__$1), cljs.core.str(" defines method "), cljs.core.str(mname), cljs.core.str(" with arity 0")].join(""));
        } else {
        }
        var G__8907 = seq__8894;
        var G__8908 = chunk__8895;
        var G__8909 = count__8896;
        var G__8910 = i__8897 + 1;
        seq__8894 = G__8907;
        chunk__8895 = G__8908;
        count__8896 = G__8909;
        i__8897 = G__8910;
        continue;
      } else {
        var temp__4425__auto__ = cljs.core.seq.call(null, seq__8894);
        if (temp__4425__auto__) {
          var seq__8894__$1 = temp__4425__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8894__$1)) {
            var c__4844__auto__ = cljs.core.chunk_first.call(null, seq__8894__$1);
            var G__8911 = cljs.core.chunk_rest.call(null, seq__8894__$1);
            var G__8912 = c__4844__auto__;
            var G__8913 = cljs.core.count.call(null, c__4844__auto__);
            var G__8914 = 0;
            seq__8894 = G__8911;
            chunk__8895 = G__8912;
            count__8896 = G__8913;
            i__8897 = G__8914;
            continue;
          } else {
            var vec__8899 = cljs.core.first.call(null, seq__8894__$1);
            var mname = cljs.core.nth.call(null, vec__8899, 0, null);
            var arities = cljs.core.nthnext.call(null, vec__8899, 1);
            if (cljs.core.truth_(cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [0, null], null), null), cljs.core.map.call(null, cljs.core.count, cljs.core.filter.call(null, cljs.core.vector_QMARK_, arities))))) {
              throw new Error([cljs.core.str("Invalid protocol, "), cljs.core.str(psym__$1), cljs.core.str(" defines method "), cljs.core.str(mname), cljs.core.str(" with arity 0")].join(""));
            } else {
            }
            var G__8915 = cljs.core.next.call(null, seq__8894__$1);
            var G__8916 = null;
            var G__8917 = 0;
            var G__8918 = 0;
            seq__8894 = G__8915;
            chunk__8895 = G__8916;
            count__8896 = G__8917;
            i__8897 = G__8918;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }();
  var expand_sig = function(p, vec__8893, doc, methods$, psym__$1, ns_name, fqn, prefix, _) {
    return function(fname, slot, sig) {
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, sig), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
      cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "and", "cljs.core$macros/and", 48320334, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not", "cljs.core/not", 100665144, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
      cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "nil?", "cljs.core$macros/nil?", 83624258, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.first.call(null, sig)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not", "cljs.core/not", 
      100665144, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "nil?", "cljs.core$macros/nil?", 83624258, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
      ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.first.call(null, sig)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.symbol.call(null, [cljs.core.str("-"), cljs.core.str(slot)].join(""))))))))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), 
      cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.first.call(null, sig)), cljs.core._conj.call(null, cljs.core.List.EMPTY, slot), sig)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, 
      cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__8887__auto__", "x__8887__auto__", 1900634487, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
      cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "nil?", "cljs.core$macros/nil?", 83624258, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.first.call(null, sig)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.first.call(null, sig)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
      new cljs.core.Symbol(null, "m__8888__auto__", "m__8888__auto__", -753565963, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aget", "cljs.core$macros/aget", 1976136178, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, fqn.call(null, fname)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
      cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("goog", "typeOf", "goog/typeOf", 539097255, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__8887__auto__", "x__8887__auto__", 1900634487, null))))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
      new cljs.core.Symbol("cljs.core$macros", "if-not", "cljs.core$macros/if-not", -1825285737, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "nil?", "cljs.core$macros/nil?", 83624258, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "m__8888__auto__", "m__8888__auto__", -753565963, 
      null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "m__8888__auto__", "m__8888__auto__", -753565963, null)), sig)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
      "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "m__8888__auto__", "m__8888__auto__", -753565963, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
      cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aget", "cljs.core$macros/aget", 1976136178, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, fqn.call(null, fname)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "_")))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "if-not", "cljs.core$macros/if-not", 
      -1825285737, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "nil?", "cljs.core$macros/nil?", 83624258, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "m__8888__auto__", "m__8888__auto__", -753565963, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
      cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "m__8888__auto__", "m__8888__auto__", -753565963, null)), sig)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "throw", "throw", 595905694, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
      cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "missing-protocol", "cljs.core/missing-protocol", 531539732, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, [cljs.core.str(psym__$1), cljs.core.str("."), cljs.core.str(fname)].join("")), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.first.call(null, sig)))))))))))))))))))))))))))))))));
    };
  }(p, vec__8893, doc, methods$, psym__$1, ns_name, fqn, prefix, _);
  var psym__$2 = cljs.core.vary_meta.call(null, psym__$1, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "protocol-info", "protocol-info", 1471745843), new cljs.core.Keyword(null, "methods", "methods", 453930866)], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p, vec__8893, doc, methods$, psym__$1, ns_name, fqn, prefix, _, expand_sig) {
    return function(p__8900) {
      var vec__8901 = p__8900;
      var fname = cljs.core.nth.call(null, vec__8901, 0, null);
      var sigs = cljs.core.nthnext.call(null, vec__8901, 1);
      var doc__$1 = function() {
        var doc__$1 = cljs.core.last.call(null, sigs);
        var doc__$2 = typeof doc__$1 === "string" ? doc__$1 : null;
        return doc__$2;
      }();
      var sigs__$1 = cljs.core.take_while.call(null, cljs.core.vector_QMARK_, sigs);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.vary_meta.call(null, fname, cljs.core.assoc, new cljs.core.Keyword(null, "doc", "doc", 1913296891), doc__$1), cljs.core.vec.call(null, sigs__$1)], null);
    };
  }(p, vec__8893, doc, methods$, psym__$1, ns_name, fqn, prefix, _, expand_sig), methods$)));
  var method = function(p, vec__8893, doc, methods$, psym__$1, ns_name, fqn, prefix, _, expand_sig, psym__$2) {
    return function(p__8902) {
      var vec__8903 = p__8902;
      var fname = cljs.core.nth.call(null, vec__8903, 0, null);
      var sigs = cljs.core.nthnext.call(null, vec__8903, 1);
      var doc__$1 = function() {
        var doc__$1 = cljs.core.last.call(null, sigs);
        var doc__$2 = typeof doc__$1 === "string" ? doc__$1 : null;
        return doc__$2;
      }();
      var sigs__$1 = cljs.core.take_while.call(null, cljs.core.vector_QMARK_, sigs);
      var slot = cljs.core.symbol.call(null, [cljs.core.str(prefix), cljs.core.str(cljs.core.name.call(null, fname))].join(""));
      var fname__$1 = cljs.core.vary_meta.call(null, fname, cljs.core.assoc, new cljs.core.Keyword(null, "protocol", "protocol", 652470118), p, new cljs.core.Keyword(null, "doc", "doc", 1913296891), doc__$1);
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "defn", "cljs.core$macros/defn", -728332354, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, fname__$1), cljs.core.map.call(null, function(doc__$1, sigs__$1, slot, fname__$1, vec__8903, fname, sigs, p, vec__8893, doc, methods$, psym__$1, ns_name, fqn, prefix, _, expand_sig, psym__$2) {
        return function(sig) {
          return expand_sig.call(null, fname__$1, cljs.core.symbol.call(null, [cljs.core.str(slot), cljs.core.str("$arity$"), cljs.core.str(cljs.core.count.call(null, sig))].join("")), sig);
        };
      }(doc__$1, sigs__$1, slot, fname__$1, vec__8903, fname, sigs, p, vec__8893, doc, methods$, psym__$1, ns_name, fqn, prefix, _, expand_sig, psym__$2), sigs__$1))));
    };
  }(p, vec__8893, doc, methods$, psym__$1, ns_name, fqn, prefix, _, expand_sig, psym__$2);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "*unchecked-if*", "*unchecked-if*", 1542408350, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, true))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "def", "def", 597100991, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, psym__$2), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "js-obj", "cljs.core/js-obj", 1009370607, null)))))))))), cljs.core.map.call(null, method, methods$), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "*unchecked-if*", "*unchecked-if*", 1542408350, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, false))))))));
};
cljs.core$macros.defprotocol.cljs$lang$maxFixedArity = 3;
cljs.core$macros.defprotocol.cljs$lang$applyTo = function(seq8889) {
  var G__8890 = cljs.core.first.call(null, seq8889);
  var seq8889__$1 = cljs.core.next.call(null, seq8889);
  var G__8891 = cljs.core.first.call(null, seq8889__$1);
  var seq8889__$2 = cljs.core.next.call(null, seq8889__$1);
  var G__8892 = cljs.core.first.call(null, seq8889__$2);
  var seq8889__$3 = cljs.core.next.call(null, seq8889__$2);
  return cljs.core$macros.defprotocol.cljs$core$IFn$_invoke$arity$variadic(G__8890, G__8891, G__8892, seq8889__$3);
};
cljs.core$macros.defprotocol.cljs$lang$macro = true;
cljs.core$macros.implements_QMARK_ = function cljs$core$macros$implements_QMARK_(_AMPERSAND_form, _AMPERSAND_env, psym, x) {
  var p = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, _AMPERSAND_env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), psym));
  var prefix = cljs.core$macros.protocol_prefix.call(null, p);
  var xsym = cljs.core$macros.bool_expr.call(null, cljs.core.gensym.call(null));
  var vec__8920 = cljs.core$macros.fast_path_protocols.call(null, p);
  var part = cljs.core.nth.call(null, vec__8920, 0, null);
  var bit = cljs.core.nth.call(null, vec__8920, 1, null);
  var msym = cljs.core.symbol.call(null, [cljs.core.str("-cljs$lang$protocol_mask$partition"), cljs.core.str(part), cljs.core.str("$")].join(""));
  if (!(x instanceof cljs.core.Symbol)) {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, x)))))), 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
    "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "or", "cljs.core$macros/or", 1346243648, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.truth_(bit) ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    new cljs.core.Symbol("cljs.core$macros", "unsafe-bit-and", "cljs.core$macros/unsafe-bit-and", 1803731600, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, msym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    bit)))) : false), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.bool_expr.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.symbol.call(null, [cljs.core.str("-"), cljs.core.str(prefix)].join("")))))))))))), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, true), cljs.core._conj.call(null, cljs.core.List.EMPTY, false))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, false))))))));
  } else {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "if-not", "cljs.core$macros/if-not", -1825285737, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "nil?", "cljs.core$macros/nil?", 83624258, 
    null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
    "or", "cljs.core$macros/or", 1346243648, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.truth_(bit) ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "unsafe-bit-and", "cljs.core$macros/unsafe-bit-and", 1803731600, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, msym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, bit)))) : false), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.bool_expr.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.symbol.call(null, [cljs.core.str("-"), cljs.core.str(prefix)].join("")))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, true), cljs.core._conj.call(null, cljs.core.List.EMPTY, false))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, false))));
  }
};
cljs.core$macros.implements_QMARK_.cljs$lang$macro = true;
cljs.core$macros.satisfies_QMARK_ = function cljs$core$macros$satisfies_QMARK_(_AMPERSAND_form, _AMPERSAND_env, psym, x) {
  var p = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, _AMPERSAND_env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), psym));
  var prefix = cljs.core$macros.protocol_prefix.call(null, p);
  var xsym = cljs.core$macros.bool_expr.call(null, cljs.core.gensym.call(null));
  var vec__8922 = cljs.core$macros.fast_path_protocols.call(null, p);
  var part = cljs.core.nth.call(null, vec__8922, 0, null);
  var bit = cljs.core.nth.call(null, vec__8922, 1, null);
  var msym = cljs.core.symbol.call(null, [cljs.core.str("-cljs$lang$protocol_mask$partition"), cljs.core.str(part), cljs.core.str("$")].join(""));
  if (!(x instanceof cljs.core.Symbol)) {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, x)))))), 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "if-not", "cljs.core$macros/if-not", -1825285737, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
    "nil?", "cljs.core$macros/nil?", 83624258, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "or", "cljs.core$macros/or", 1346243648, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.truth_(bit) ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "unsafe-bit-and", "cljs.core$macros/unsafe-bit-and", 1803731600, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
    cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, msym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, bit)))) : false), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.bool_expr.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.symbol.call(null, [cljs.core.str("-"), cljs.core.str(prefix)].join("")))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, true), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "coercive-not", "cljs.core$macros/coercive-not", 115999987, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, msym))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "native-satisfies?", "cljs.core/native-satisfies?", 1482305036, 
    null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, psym), cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, false))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "native-satisfies?", "cljs.core/native-satisfies?", 1482305036, null)), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, psym), cljs.core._conj.call(null, cljs.core.List.EMPTY, xsym))))))))))));
  } else {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "if-not", "cljs.core$macros/if-not", -1825285737, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "nil?", "cljs.core$macros/nil?", 83624258, 
    null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
    "or", "cljs.core$macros/or", 1346243648, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.truth_(bit) ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "unsafe-bit-and", "cljs.core$macros/unsafe-bit-and", 1803731600, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, msym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, bit)))) : false), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.bool_expr.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.symbol.call(null, [cljs.core.str("-"), cljs.core.str(prefix)].join("")))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, true), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
    "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "coercive-not", "cljs.core$macros/coercive-not", 115999987, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, msym))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "native-satisfies?", "cljs.core/native-satisfies?", 1482305036, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    psym), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, false))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "native-satisfies?", "cljs.core/native-satisfies?", 1482305036, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, psym), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, x))))))));
  }
};
cljs.core$macros.satisfies_QMARK_.cljs$lang$macro = true;
cljs.core$macros.lazy_seq = function cljs$core$macros$lazy_seq() {
  var args__5106__auto__ = [];
  var len__5099__auto___8926 = arguments.length;
  var i__5100__auto___8927 = 0;
  while (true) {
    if (i__5100__auto___8927 < len__5099__auto___8926) {
      args__5106__auto__.push(arguments[i__5100__auto___8927]);
      var G__8928 = i__5100__auto___8927 + 1;
      i__5100__auto___8927 = G__8928;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.lazy_seq.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.lazy_seq.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "LazySeq", "cljs.core/LazySeq", 1986389673, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), body)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))));
};
cljs.core$macros.lazy_seq.cljs$lang$maxFixedArity = 2;
cljs.core$macros.lazy_seq.cljs$lang$applyTo = function(seq8923) {
  var G__8924 = cljs.core.first.call(null, seq8923);
  var seq8923__$1 = cljs.core.next.call(null, seq8923);
  var G__8925 = cljs.core.first.call(null, seq8923__$1);
  var seq8923__$2 = cljs.core.next.call(null, seq8923__$1);
  return cljs.core$macros.lazy_seq.cljs$core$IFn$_invoke$arity$variadic(G__8924, G__8925, seq8923__$2);
};
cljs.core$macros.lazy_seq.cljs$lang$macro = true;
cljs.core$macros.delay = function cljs$core$macros$delay() {
  var args__5106__auto__ = [];
  var len__5099__auto___8932 = arguments.length;
  var i__5100__auto___8933 = 0;
  while (true) {
    if (i__5100__auto___8933 < len__5099__auto___8932) {
      args__5106__auto__.push(arguments[i__5100__auto___8933]);
      var G__8934 = i__5100__auto___8933 + 1;
      i__5100__auto___8933 = G__8934;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.delay.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.delay.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "Delay", "cljs.core/Delay", -21574999, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), body)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))));
};
cljs.core$macros.delay.cljs$lang$maxFixedArity = 2;
cljs.core$macros.delay.cljs$lang$applyTo = function(seq8929) {
  var G__8930 = cljs.core.first.call(null, seq8929);
  var seq8929__$1 = cljs.core.next.call(null, seq8929);
  var G__8931 = cljs.core.first.call(null, seq8929__$1);
  var seq8929__$2 = cljs.core.next.call(null, seq8929__$1);
  return cljs.core$macros.delay.cljs$core$IFn$_invoke$arity$variadic(G__8930, G__8931, seq8929__$2);
};
cljs.core$macros.delay.cljs$lang$macro = true;
cljs.core$macros.with_redefs = function cljs$core$macros$with_redefs() {
  var args__5106__auto__ = [];
  var len__5099__auto___8941 = arguments.length;
  var i__5100__auto___8942 = 0;
  while (true) {
    if (i__5100__auto___8942 < len__5099__auto___8941) {
      args__5106__auto__.push(arguments[i__5100__auto___8942]);
      var G__8943 = i__5100__auto___8942 + 1;
      i__5100__auto___8942 = G__8943;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.with_redefs.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.with_redefs.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, body) {
  var names = cljs.core.take_nth.call(null, 2, bindings);
  var vals = cljs.core.take_nth.call(null, 2, cljs.core.drop.call(null, 1, bindings));
  var tempnames = cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.gensym, cljs.core.name), names);
  var binds = cljs.core.map.call(null, cljs.core.vector, names, vals);
  var resets = cljs.core.reverse.call(null, cljs.core.map.call(null, cljs.core.vector, names, tempnames));
  var bind_value = function(names, vals, tempnames, binds, resets) {
    return function(p__8939) {
      var vec__8940 = p__8939;
      var k = cljs.core.nth.call(null, vec__8940, 0, null);
      var v = cljs.core.nth.call(null, vec__8940, 1, null);
      return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, v), k), new cljs.core.Symbol(null, "set!", "set!", 250714521, null));
    };
  }(names, vals, tempnames, binds, resets);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.interleave.call(null, tempnames, names)))))), cljs.core.map.call(null, bind_value, binds), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "try", "try", -1273693247, null)), body, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "finally", "finally", -1065347064, null)), cljs.core.map.call(null, bind_value, 
  resets))))))))))));
};
cljs.core$macros.with_redefs.cljs$lang$maxFixedArity = 3;
cljs.core$macros.with_redefs.cljs$lang$applyTo = function(seq8935) {
  var G__8936 = cljs.core.first.call(null, seq8935);
  var seq8935__$1 = cljs.core.next.call(null, seq8935);
  var G__8937 = cljs.core.first.call(null, seq8935__$1);
  var seq8935__$2 = cljs.core.next.call(null, seq8935__$1);
  var G__8938 = cljs.core.first.call(null, seq8935__$2);
  var seq8935__$3 = cljs.core.next.call(null, seq8935__$2);
  return cljs.core$macros.with_redefs.cljs$core$IFn$_invoke$arity$variadic(G__8936, G__8937, G__8938, seq8935__$3);
};
cljs.core$macros.with_redefs.cljs$lang$macro = true;
cljs.core$macros.binding = function cljs$core$macros$binding() {
  var args__5106__auto__ = [];
  var len__5099__auto___8948 = arguments.length;
  var i__5100__auto___8949 = 0;
  while (true) {
    if (i__5100__auto___8949 < len__5099__auto___8948) {
      args__5106__auto__.push(arguments[i__5100__auto___8949]);
      var G__8950 = i__5100__auto___8949 + 1;
      i__5100__auto___8949 = G__8950;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.binding.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.binding.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, body) {
  var names = cljs.core.take_nth.call(null, 2, bindings);
  cljs.analyzer.confirm_bindings.call(null, _AMPERSAND_env, names);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "with-redefs", "cljs.core$macros/with-redefs", 1489217801, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, bindings), body)));
};
cljs.core$macros.binding.cljs$lang$maxFixedArity = 3;
cljs.core$macros.binding.cljs$lang$applyTo = function(seq8944) {
  var G__8945 = cljs.core.first.call(null, seq8944);
  var seq8944__$1 = cljs.core.next.call(null, seq8944);
  var G__8946 = cljs.core.first.call(null, seq8944__$1);
  var seq8944__$2 = cljs.core.next.call(null, seq8944__$1);
  var G__8947 = cljs.core.first.call(null, seq8944__$2);
  var seq8944__$3 = cljs.core.next.call(null, seq8944__$2);
  return cljs.core$macros.binding.cljs$core$IFn$_invoke$arity$variadic(G__8945, G__8946, G__8947, seq8944__$3);
};
cljs.core$macros.binding.cljs$lang$macro = true;
cljs.core$macros.condp = function cljs$core$macros$condp() {
  var args__5106__auto__ = [];
  var len__5099__auto___8961 = arguments.length;
  var i__5100__auto___8962 = 0;
  while (true) {
    if (i__5100__auto___8962 < len__5099__auto___8961) {
      args__5106__auto__.push(arguments[i__5100__auto___8962]);
      var G__8963 = i__5100__auto___8962 + 1;
      i__5100__auto___8962 = G__8963;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 4 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(4), 0) : null;
  return cljs.core$macros.condp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5107__auto__);
};
cljs.core$macros.condp.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, pred, expr, clauses) {
  var gpred = cljs.core.gensym.call(null, "pred__");
  var gexpr = cljs.core.gensym.call(null, "expr__");
  var emit = function(gpred, gexpr) {
    return function cljs$core$macros$emit(pred__$1, expr__$1, args) {
      var vec__8959 = cljs.core.split_at.call(null, cljs.core._EQ_.call(null, new cljs.core.Keyword(null, ">>", ">>", -277509267), cljs.core.second.call(null, args)) ? 3 : 2, args);
      var vec__8960 = cljs.core.nth.call(null, vec__8959, 0, null);
      var a = cljs.core.nth.call(null, vec__8960, 0, null);
      var b = cljs.core.nth.call(null, vec__8960, 1, null);
      var c = cljs.core.nth.call(null, vec__8960, 2, null);
      var clause = vec__8960;
      var more = cljs.core.nth.call(null, vec__8959, 1, null);
      var n = cljs.core.count.call(null, clause);
      if (cljs.core._EQ_.call(null, 0, n)) {
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "throw", "throw", 595905694, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "Error.", "js/Error.", 750655924, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
        cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("core", "str", "core/str", -1563921891, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "No matching clause: "), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr__$1))))))))))));
      } else {
        if (cljs.core._EQ_.call(null, 1, n)) {
          return a;
        } else {
          if (cljs.core._EQ_.call(null, 2, n)) {
            return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, pred__$1), cljs.core._conj.call(null, cljs.core.List.EMPTY, a), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
            expr__$1))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, b), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs$core$macros$emit.call(null, pred__$1, expr__$1, more)))));
          } else {
            return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "if-let", "cljs.core$macros/if-let", 1291543946, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "p__8951__auto__", 
            "p__8951__auto__", -451970242, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, pred__$1), cljs.core._conj.call(null, cljs.core.List.EMPTY, a), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr__$1)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
            cljs.core.List.EMPTY, c), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "p__8951__auto__", "p__8951__auto__", -451970242, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs$core$macros$emit.call(null, pred__$1, expr__$1, more)))));
          }
        }
      }
    };
  }(gpred, gexpr);
  var gres = cljs.core.gensym.call(null, "res__");
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, gpred), cljs.core._conj.call(null, cljs.core.List.EMPTY, pred), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, gexpr), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, emit.call(null, gpred, gexpr, clauses)))));
};
cljs.core$macros.condp.cljs$lang$maxFixedArity = 4;
cljs.core$macros.condp.cljs$lang$applyTo = function(seq8952) {
  var G__8953 = cljs.core.first.call(null, seq8952);
  var seq8952__$1 = cljs.core.next.call(null, seq8952);
  var G__8954 = cljs.core.first.call(null, seq8952__$1);
  var seq8952__$2 = cljs.core.next.call(null, seq8952__$1);
  var G__8955 = cljs.core.first.call(null, seq8952__$2);
  var seq8952__$3 = cljs.core.next.call(null, seq8952__$2);
  var G__8956 = cljs.core.first.call(null, seq8952__$3);
  var seq8952__$4 = cljs.core.next.call(null, seq8952__$3);
  return cljs.core$macros.condp.cljs$core$IFn$_invoke$arity$variadic(G__8953, G__8954, G__8955, G__8956, seq8952__$4);
};
cljs.core$macros.condp.cljs$lang$macro = true;
cljs.core$macros.assoc_test = function cljs$core$macros$assoc_test(m, test, expr, env) {
  if (cljs.core.contains_QMARK_.call(null, m, test)) {
    throw new Error([cljs.core.str("Duplicate case test constant '"), cljs.core.str(test), cljs.core.str("'"), cljs.core.str(cljs.core.truth_((new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env)) ? [cljs.core.str(" on line "), cljs.core.str((new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env)), cljs.core.str(" "), cljs.core.str(cljs.analyzer._STAR_cljs_file_STAR_)].join("") : null)].join(""));
  } else {
    return cljs.core.assoc.call(null, m, test, expr);
  }
};
cljs.core$macros.const_QMARK_ = function cljs$core$macros$const_QMARK_(env, x) {
  var m = function() {
    var and__4048__auto__ = cljs.core.list_QMARK_.call(null, x);
    if (and__4048__auto__) {
      return cljs.analyzer.resolve_var.call(null, env, cljs.core.last.call(null, x));
    } else {
      return and__4048__auto__;
    }
  }();
  if (cljs.core.truth_(m)) {
    return cljs.core.get.call(null, m, new cljs.core.Keyword(null, "const", "const", 1709929842));
  } else {
    return null;
  }
};
cljs.core$macros.case$ = function cljs$core$macros$case() {
  var args__5106__auto__ = [];
  var len__5099__auto___8976 = arguments.length;
  var i__5100__auto___8977 = 0;
  while (true) {
    if (i__5100__auto___8977 < len__5099__auto___8976) {
      args__5106__auto__.push(arguments[i__5100__auto___8977]);
      var G__8978 = i__5100__auto___8977 + 1;
      i__5100__auto___8977 = G__8978;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.case$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.case$.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, e, clauses) {
  var default$ = cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, clauses)) ? cljs.core.last.call(null, clauses) : cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "throw", "throw", 595905694, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol("js", "Error.", "js/Error.", 750655924, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("core", "str", "core/str", -1563921891, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "No matching clause: "), cljs.core._conj.call(null, cljs.core.List.EMPTY, e))))))))))));
  var env = _AMPERSAND_env;
  var pairs = cljs.core.reduce.call(null, function(default$, env) {
    return function(m, p__8972) {
      var vec__8973 = p__8972;
      var test = cljs.core.nth.call(null, vec__8973, 0, null);
      var expr = cljs.core.nth.call(null, vec__8973, 1, null);
      if (cljs.core.seq_QMARK_.call(null, test)) {
        return cljs.core.reduce.call(null, function(vec__8973, test, expr, default$, env) {
          return function(m__$1, test__$1) {
            var test__$2 = test__$1 instanceof cljs.core.Symbol ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, test__$1), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)) : test__$1;
            return cljs.core$macros.assoc_test.call(null, m__$1, test__$2, expr, env);
          };
        }(vec__8973, test, expr, default$, env), m, test);
      } else {
        if (test instanceof cljs.core.Symbol) {
          return cljs.core$macros.assoc_test.call(null, m, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, test), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), expr, env);
        } else {
          return cljs.core$macros.assoc_test.call(null, m, test, expr, env);
        }
      }
    };
  }(default$, env), cljs.core.PersistentArrayMap.EMPTY, cljs.core.partition.call(null, 2, clauses));
  var esym = cljs.core.gensym.call(null);
  var tests = cljs.core.keys.call(null, pairs);
  if (cljs.core.every_QMARK_.call(null, cljs.core.some_fn.call(null, cljs.core.number_QMARK_, cljs.core.string_QMARK_, cljs.core.char_QMARK_, function(default$, env, pairs, esym, tests) {
    return function(p1__8964_SHARP_) {
      return cljs.core$macros.const_QMARK_.call(null, env, p1__8964_SHARP_);
    };
  }(default$, env, pairs, esym, tests)), tests)) {
    var no_default = cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, clauses)) ? cljs.core.butlast.call(null, clauses) : clauses;
    var tests__$1 = cljs.core.mapv.call(null, function(no_default, default$, env, pairs, esym, tests) {
      return function(p1__8965_SHARP_) {
        if (cljs.core.seq_QMARK_.call(null, p1__8965_SHARP_)) {
          return cljs.core.vec.call(null, p1__8965_SHARP_);
        } else {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__8965_SHARP_], null);
        }
      };
    }(no_default, default$, env, pairs, esym, tests), cljs.core.take_nth.call(null, 2, no_default));
    var thens = cljs.core.vec.call(null, cljs.core.take_nth.call(null, 2, cljs.core.drop.call(null, 1, no_default)));
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, esym), cljs.core._conj.call(null, cljs.core.List.EMPTY, e)))))), 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "case*", "case*", -1938255072, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, esym), cljs.core._conj.call(null, cljs.core.List.EMPTY, tests__$1), cljs.core._conj.call(null, cljs.core.List.EMPTY, thens), cljs.core._conj.call(null, cljs.core.List.EMPTY, default$))))))));
  } else {
    if (cljs.core.every_QMARK_.call(null, cljs.core.keyword_QMARK_, tests)) {
      var tests__$1 = cljs.core.mapv.call(null, function(default$, env, pairs, esym, tests) {
        return function(p1__8967_SHARP_) {
          if (cljs.core.seq_QMARK_.call(null, p1__8967_SHARP_)) {
            return cljs.core.vec.call(null, p1__8967_SHARP_);
          } else {
            return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__8967_SHARP_], null);
          }
        };
      }(default$, env, pairs, esym, tests), cljs.core.vec.call(null, cljs.core.map.call(null, function(default$, env, pairs, esym, tests) {
        return function(p1__8966_SHARP_) {
          return [cljs.core.str(p1__8966_SHARP_)].join("").substring(1);
        };
      }(default$, env, pairs, esym, tests), tests)));
      var thens = cljs.core.vec.call(null, cljs.core.vals.call(null, pairs));
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, esym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
      cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "keyword?", "cljs.core$macros/keyword?", 1362730141, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, e))))), 
      cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-fqn", ".-fqn", 1246113027, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, e))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
      cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "case*", "case*", -1938255072, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, esym), cljs.core._conj.call(null, cljs.core.List.EMPTY, tests__$1), cljs.core._conj.call(null, cljs.core.List.EMPTY, thens), cljs.core._conj.call(null, cljs.core.List.EMPTY, default$))))))));
    } else {
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, esym), cljs.core._conj.call(null, cljs.core.List.EMPTY, e)))))), 
      cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "cond", "cljs.core$macros/cond", 1626318471, null)), cljs.core.mapcat.call(null, function(default$, env, pairs, esym, tests) {
        return function(p__8974) {
          var vec__8975 = p__8974;
          var m = cljs.core.nth.call(null, vec__8975, 0, null);
          var c = cljs.core.nth.call(null, vec__8975, 1, null);
          return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "=", "cljs.core/=", -1891498332, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, m), cljs.core._conj.call(null, cljs.core.List.EMPTY, esym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
          c))));
        };
      }(default$, env, pairs, esym, tests), pairs), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "else", "else", -1508377146)), cljs.core._conj.call(null, cljs.core.List.EMPTY, default$))))))));
    }
  }
};
cljs.core$macros.case$.cljs$lang$maxFixedArity = 3;
cljs.core$macros.case$.cljs$lang$applyTo = function(seq8968) {
  var G__8969 = cljs.core.first.call(null, seq8968);
  var seq8968__$1 = cljs.core.next.call(null, seq8968);
  var G__8970 = cljs.core.first.call(null, seq8968__$1);
  var seq8968__$2 = cljs.core.next.call(null, seq8968__$1);
  var G__8971 = cljs.core.first.call(null, seq8968__$2);
  var seq8968__$3 = cljs.core.next.call(null, seq8968__$2);
  return cljs.core$macros.case$.cljs$core$IFn$_invoke$arity$variadic(G__8969, G__8970, G__8971, seq8968__$3);
};
cljs.core$macros.case$.cljs$lang$macro = true;
cljs.core$macros.assert = function cljs$core$macros$assert() {
  var args8979 = [];
  var len__5099__auto___8982 = arguments.length;
  var i__5100__auto___8983 = 0;
  while (true) {
    if (i__5100__auto___8983 < len__5099__auto___8982) {
      args8979.push(arguments[i__5100__auto___8983]);
      var G__8984 = i__5100__auto___8983 + 1;
      i__5100__auto___8983 = G__8984;
      continue;
    } else {
    }
    break;
  }
  var G__8981 = args8979.length;
  switch(G__8981) {
    case 3:
      return cljs.core$macros.assert.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core$macros.assert.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8979.length)].join(""));;
  }
};
cljs.core$macros.assert.cljs$core$IFn$_invoke$arity$3 = function(_AMPERSAND_form, _AMPERSAND_env, x) {
  if (cljs.core.truth_(cljs.core._STAR_assert_STAR_)) {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when-not", "cljs.core$macros/when-not", -764302244, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
    "throw", "throw", 595905694, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "Error.", "js/Error.", 750655924, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
    "str", "cljs.core/str", -1971828991, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "Assert failed: "), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "pr-str", "cljs.core/pr-str", -552799478, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))))))))))))))))))))))));
  } else {
    return null;
  }
};
cljs.core$macros.assert.cljs$core$IFn$_invoke$arity$4 = function(_AMPERSAND_form, _AMPERSAND_env, x, message) {
  if (cljs.core.truth_(cljs.core._STAR_assert_STAR_)) {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when-not", "cljs.core$macros/when-not", -764302244, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
    "throw", "throw", 595905694, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "Error.", "js/Error.", 750655924, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
    "str", "cljs.core/str", -1971828991, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "Assert failed: "), cljs.core._conj.call(null, cljs.core.List.EMPTY, message), cljs.core._conj.call(null, cljs.core.List.EMPTY, "\n"), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "pr-str", "cljs.core/pr-str", -552799478, null)), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, x))))))))))))))))))))))));
  } else {
    return null;
  }
};
cljs.core$macros.assert.cljs$lang$maxFixedArity = 4;
cljs.core$macros.assert.cljs$lang$macro = true;
cljs.core$macros.for$ = function cljs$core$macros$for(_AMPERSAND_form, _AMPERSAND_env, seq_exprs, body_expr) {
  cljs.core$macros.assert_args.call(null, cljs$core$macros$for, cljs.core.vector_QMARK_.call(null, seq_exprs), "a vector for its binding", cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, seq_exprs)), "an even number of forms in binding vector");
  var to_groups = function(seq_exprs__$1) {
    return cljs.core.reduce.call(null, function(groups, p__9022) {
      var vec__9023 = p__9022;
      var k = cljs.core.nth.call(null, vec__9023, 0, null);
      var v = cljs.core.nth.call(null, vec__9023, 1, null);
      if (k instanceof cljs.core.Keyword) {
        return cljs.core.conj.call(null, cljs.core.pop.call(null, groups), cljs.core.conj.call(null, cljs.core.peek.call(null, groups), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null)));
      } else {
        return cljs.core.conj.call(null, groups, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
      }
    }, cljs.core.PersistentVector.EMPTY, cljs.core.partition.call(null, 2, seq_exprs__$1));
  };
  var err = function(to_groups) {
    return function() {
      var G__9053__delegate = function(msg) {
        throw cljs.core.ex_info.call(null, cljs.core.apply.call(null, cljs.core.str, msg), cljs.core.PersistentArrayMap.EMPTY);
      };
      var G__9053 = function(var_args) {
        var msg = null;
        if (arguments.length > 0) {
          var G__9054__i = 0, G__9054__a = new Array(arguments.length - 0);
          while (G__9054__i < G__9054__a.length) {
            G__9054__a[G__9054__i] = arguments[G__9054__i + 0];
            ++G__9054__i;
          }
          msg = new cljs.core.IndexedSeq(G__9054__a, 0);
        }
        return G__9053__delegate.call(this, msg);
      };
      G__9053.cljs$lang$maxFixedArity = 0;
      G__9053.cljs$lang$applyTo = function(arglist__9055) {
        var msg = cljs.core.seq(arglist__9055);
        return G__9053__delegate(msg);
      };
      G__9053.cljs$core$IFn$_invoke$arity$variadic = G__9053__delegate;
      return G__9053;
    }();
  }(to_groups);
  var emit_bind = function(to_groups, err) {
    return function cljs$core$macros$for_$_emit_bind(p__9024) {
      var vec__9039 = p__9024;
      var vec__9040 = cljs.core.nth.call(null, vec__9039, 0, null);
      var bind = cljs.core.nth.call(null, vec__9040, 0, null);
      var expr = cljs.core.nth.call(null, vec__9040, 1, null);
      var mod_pairs = cljs.core.nthnext.call(null, vec__9040, 2);
      var vec__9041 = cljs.core.nthnext.call(null, vec__9039, 1);
      var vec__9042 = cljs.core.nth.call(null, vec__9041, 0, null);
      var _ = cljs.core.nth.call(null, vec__9042, 0, null);
      var next_expr = cljs.core.nth.call(null, vec__9042, 1, null);
      var next_groups = vec__9041;
      var giter = cljs.core.gensym.call(null, "iter__");
      var gxs = cljs.core.gensym.call(null, "s__");
      var do_mod = function(giter, gxs, vec__9039, vec__9040, bind, expr, mod_pairs, vec__9041, vec__9042, _, next_expr, next_groups, to_groups, err) {
        return function cljs$core$macros$for_$_emit_bind_$_do_mod(p__9043) {
          var vec__9046 = p__9043;
          var vec__9047 = cljs.core.nth.call(null, vec__9046, 0, null);
          var k = cljs.core.nth.call(null, vec__9047, 0, null);
          var v = cljs.core.nth.call(null, vec__9047, 1, null);
          var pair = vec__9047;
          var etc = cljs.core.nthnext.call(null, vec__9046, 1);
          if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "let", "let", -1282412701))) {
            return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs$core$macros$for_$_emit_bind_$_do_mod.call(null, etc)))));
          } else {
            if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "while", "while", 963117786))) {
              return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when", "cljs.core$macros/when", 328457725, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs$core$macros$for_$_emit_bind_$_do_mod.call(null, etc)))));
            } else {
              if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "when", "when", -576417306))) {
                return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs$core$macros$for_$_emit_bind_$_do_mod.call(null, etc)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
                cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "rest", "cljs.core/rest", -285075455, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs))))))))))));
              } else {
                if (k instanceof cljs.core.Keyword) {
                  return err.call(null, "Invalid 'for' keyword ", k);
                } else {
                  if (cljs.core.truth_(next_groups)) {
                    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "iterys__8986__auto__", 
                    "iterys__8986__auto__", 1943326962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs$core$macros$for_$_emit_bind.call(null, next_groups)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "fs__8987__auto__", "fs__8987__auto__", -386435622, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
                    "seq", "cljs.core/seq", -1649497689, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "iterys__8986__auto__", "iterys__8986__auto__", 1943326962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, next_expr)))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
                    cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "fs__8987__auto__", "fs__8987__auto__", -386435622, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
                    "concat", "cljs.core/concat", -1133584918, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "fs__8987__auto__", "fs__8987__auto__", -386435622, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, giter), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
                    cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "rest", "cljs.core/rest", -285075455, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
                    cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "rest", "cljs.core/rest", -285075455, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs))))))))))))))));
                  } else {
                    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "cons", "cljs.core/cons", 96507417, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, body_expr), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, giter), cljs.core._conj.call(null, 
                    cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "rest", "cljs.core/rest", -285075455, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs))))))))))));
                  }
                }
              }
            }
          }
        };
      }(giter, gxs, vec__9039, vec__9040, bind, expr, mod_pairs, vec__9041, vec__9042, _, next_expr, next_groups, to_groups, err);
      if (cljs.core.truth_(next_groups)) {
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, giter), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs)))))), 
        cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "lazy-seq", "cljs.core$macros/lazy-seq", 806482650, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
        "loop", "cljs.core$macros/loop", 1731108390, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
        new cljs.core.Symbol("cljs.core$macros", "when-first", "cljs.core$macros/when-first", -840670160, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, bind), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, do_mod.call(null, mod_pairs)))))))))))))))));
      } else {
        var gi = cljs.core.gensym.call(null, "i__");
        var gb = cljs.core.gensym.call(null, "b__");
        var do_cmod = function(gi, gb, giter, gxs, do_mod, vec__9039, vec__9040, bind, expr, mod_pairs, vec__9041, vec__9042, _, next_expr, next_groups, to_groups, err) {
          return function cljs$core$macros$for_$_emit_bind_$_do_cmod(p__9048) {
            var vec__9051 = p__9048;
            var vec__9052 = cljs.core.nth.call(null, vec__9051, 0, null);
            var k = cljs.core.nth.call(null, vec__9052, 0, null);
            var v = cljs.core.nth.call(null, vec__9052, 1, null);
            var pair = vec__9052;
            var etc = cljs.core.nthnext.call(null, vec__9051, 1);
            if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "let", "let", -1282412701))) {
              return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs$core$macros$for_$_emit_bind_$_do_cmod.call(null, etc)))));
            } else {
              if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "while", "while", 963117786))) {
                return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when", "cljs.core$macros/when", 328457725, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs$core$macros$for_$_emit_bind_$_do_cmod.call(null, etc)))));
              } else {
                if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "when", "when", -576417306))) {
                  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs$core$macros$for_$_emit_bind_$_do_cmod.call(null, etc)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
                  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "unchecked-inc", "cljs.core$macros/unchecked-inc", -1615365330, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gi))))))))))));
                } else {
                  if (k instanceof cljs.core.Keyword) {
                    return err.call(null, "Invalid 'for' keyword ", k);
                  } else {
                    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "chunk-append", "cljs.core/chunk-append", -243671470, null)), cljs.core._conj.call(null, 
                    cljs.core.List.EMPTY, gb), cljs.core._conj.call(null, cljs.core.List.EMPTY, body_expr))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
                    cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "unchecked-inc", "cljs.core$macros/unchecked-inc", -1615365330, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gi))))))))))));
                  }
                }
              }
            }
          };
        }(gi, gb, giter, gxs, do_mod, vec__9039, vec__9040, bind, expr, mod_pairs, vec__9041, vec__9042, _, next_expr, next_groups, to_groups, err);
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, giter), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs)))))), 
        cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "lazy-seq", "cljs.core$macros/lazy-seq", 806482650, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
        "loop", "cljs.core$macros/loop", 1731108390, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
        new cljs.core.Symbol("cljs.core$macros", "when-let", "cljs.core$macros/when-let", -2004472648, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
        new cljs.core.Symbol("cljs.core", "seq", "cljs.core/seq", -1649497689, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
        cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "chunked-seq?", "cljs.core/chunked-seq?", -712922369, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, 
        cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "c__8988__auto__", "c__8988__auto__", -665115140, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
        "chunk-first", "cljs.core/chunk-first", -1157877305, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs)))), cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "file", "file", -1269645878)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "/home/joelm/scratch/cljs-bootstrap/.cljs_bootstrap/cljs/core.cljc"), cljs.core._conj.call(null, 
        cljs.core.List.EMPTY, new cljs.core.Keyword(null, "line", "line", 212345235)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 2162), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "column", "column", 2078222095)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 52), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 2162), cljs.core._conj.call(null, 
        cljs.core.List.EMPTY, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 82), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "tag", "tag", -1290361223)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not-native", "cljs.core/not-native", -1716909265, null)))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "size__8989__auto__", 
        "size__8989__auto__", 483374691, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "count", "cljs.core/count", -921270233, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "c__8988__auto__", "c__8988__auto__", -665115140, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, gb), 
        cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "chunk-buffer", "cljs.core/chunk-buffer", 14093626, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "size__8989__auto__", "size__8989__auto__", 483374691, null))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
        cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "coercive-boolean", "cljs.core$macros/coercive-boolean", -450758280, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
        cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "loop", "cljs.core$macros/loop", 1731108390, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, gi), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0)))))), 
        cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "<", "cljs.core$macros/<", 371512596, 
        null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gi), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "size__8989__auto__", "size__8989__auto__", 483374691, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, 
        cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, bind), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-nth", "cljs.core/-nth", 504234802, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
        new cljs.core.Symbol(null, "c__8988__auto__", "c__8988__auto__", -665115140, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gi)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, do_cmod.call(null, mod_pairs)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, true))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
        "chunk-cons", "cljs.core/chunk-cons", -250075688, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "chunk", "cljs.core/chunk", 847936424, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gb))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
        cljs.core._conj.call(null, cljs.core.List.EMPTY, giter), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "chunk-rest", "cljs.core/chunk-rest", -398161143, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
        cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "chunk-cons", "cljs.core/chunk-cons", -250075688, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "chunk", "cljs.core/chunk", 847936424, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gb))))), cljs.core._conj.call(null, 
        cljs.core.List.EMPTY, null))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
        cljs.core.List.EMPTY, bind), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "first", "cljs.core/first", -752535972, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, gxs)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, do_mod.call(null, mod_pairs)))))))))))))))))))))))));
      }
    };
  }(to_groups, err);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "iter__8990__auto__", "iter__8990__auto__", 
  2056438129, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, emit_bind.call(null, to_groups.call(null, seq_exprs)))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "iter__8990__auto__", "iter__8990__auto__", 2056438129, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.second.call(null, seq_exprs)))))))));
};
cljs.core$macros.for$.cljs$lang$macro = true;
cljs.core$macros.doseq = function cljs$core$macros$doseq() {
  var args__5106__auto__ = [];
  var len__5099__auto___9061 = arguments.length;
  var i__5100__auto___9062 = 0;
  while (true) {
    if (i__5100__auto___9062 < len__5099__auto___9061) {
      args__5106__auto__.push(arguments[i__5100__auto___9062]);
      var G__9063 = i__5100__auto___9062 + 1;
      i__5100__auto___9062 = G__9063;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.doseq.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.doseq.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, seq_exprs, body) {
  cljs.core$macros.assert_args.call(null, cljs.core$macros.doseq, cljs.core.vector_QMARK_.call(null, seq_exprs), "a vector for its binding", cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, seq_exprs)), "an even number of forms in binding vector");
  var err = function() {
    var G__9064__delegate = function(msg) {
      throw cljs.core.ex_info.call(null, cljs.core.apply.call(null, cljs.core.str, msg), cljs.core.PersistentArrayMap.EMPTY);
    };
    var G__9064 = function(var_args) {
      var msg = null;
      if (arguments.length > 0) {
        var G__9065__i = 0, G__9065__a = new Array(arguments.length - 0);
        while (G__9065__i < G__9065__a.length) {
          G__9065__a[G__9065__i] = arguments[G__9065__i + 0];
          ++G__9065__i;
        }
        msg = new cljs.core.IndexedSeq(G__9065__a, 0);
      }
      return G__9064__delegate.call(this, msg);
    };
    G__9064.cljs$lang$maxFixedArity = 0;
    G__9064.cljs$lang$applyTo = function(arglist__9066) {
      var msg = cljs.core.seq(arglist__9066);
      return G__9064__delegate(msg);
    };
    G__9064.cljs$core$IFn$_invoke$arity$variadic = G__9064__delegate;
    return G__9064;
  }();
  var step = function(err) {
    return function cljs$core$macros$step(recform, exprs) {
      if (cljs.core.not.call(null, exprs)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), body)))], null);
      } else {
        var k = cljs.core.first.call(null, exprs);
        var v = cljs.core.second.call(null, exprs);
        var seqsym = cljs.core.gensym.call(null, "seq__");
        var recform__$1 = k instanceof cljs.core.Keyword ? recform : cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "next", "cljs.core/next", 
        -1291438473, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, seqsym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0))));
        var steppair = cljs$core$macros$step.call(null, recform__$1, cljs.core.nnext.call(null, exprs));
        var needrec = steppair.call(null, 0);
        var subform = steppair.call(null, 1);
        if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "let", "let", -1282412701))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [needrec, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core._conj.call(null, cljs.core.List.EMPTY, subform))))], null);
        } else {
          if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "while", "while", 963117786))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when", "cljs.core$macros/when", 328457725, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core._conj.call(null, cljs.core.List.EMPTY, subform), cljs.core.truth_(needrec) ? new cljs.core.PersistentVector(null, 
            1, 5, cljs.core.PersistentVector.EMPTY_NODE, [recform__$1], null) : null)))], null);
          } else {
            if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "when", "when", -576417306))) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
              cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, subform), cljs.core.truth_(needrec) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [recform__$1], null) : null)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, recform__$1))))], null);
            } else {
              if (k instanceof cljs.core.Keyword) {
                return err.call(null, "Invalid 'doseq' keyword", k);
              } else {
                var chunksym = cljs.core.with_meta.call(null, cljs.core.gensym.call(null, "chunk__"), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null));
                var countsym = cljs.core.gensym.call(null, "count__");
                var isym = cljs.core.gensym.call(null, "i__");
                var recform_chunk = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, seqsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, chunksym), cljs.core._conj.call(null, cljs.core.List.EMPTY, countsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
                cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "unchecked-inc", "cljs.core$macros/unchecked-inc", -1615365330, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, isym))))))));
                var steppair_chunk = cljs$core$macros$step.call(null, recform_chunk, cljs.core.nnext.call(null, exprs));
                var subform_chunk = steppair_chunk.call(null, 1);
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "loop", "cljs.core$macros/loop", 1731108390, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
                cljs.core.List.EMPTY, seqsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "seq", "cljs.core/seq", -1649497689, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, v))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, chunksym), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, 
                cljs.core.List.EMPTY, countsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0), cljs.core._conj.call(null, cljs.core.List.EMPTY, isym), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
                cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "coercive-boolean", "cljs.core$macros/coercive-boolean", -450758280, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "<", "cljs.core$macros/<", 
                371512596, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, isym), cljs.core._conj.call(null, cljs.core.List.EMPTY, countsym))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, 
                cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, k), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-nth", "cljs.core/-nth", 504234802, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, chunksym), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
                isym)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, subform_chunk), cljs.core.truth_(needrec) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [recform_chunk], null) : null)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when-let", "cljs.core$macros/when-let", 
                -2004472648, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, seqsym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "seq", "cljs.core/seq", -1649497689, 
                null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, seqsym)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
                new cljs.core.Symbol("cljs.core", "chunked-seq?", "cljs.core/chunked-seq?", -712922369, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, seqsym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, 
                cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "c__9056__auto__", "c__9056__auto__", 1023374730, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "chunk-first", "cljs.core/chunk-first", -1157877305, 
                null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, seqsym)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
                new cljs.core.Symbol("cljs.core", "chunk-rest", "cljs.core/chunk-rest", -398161143, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, seqsym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "c__9056__auto__", "c__9056__auto__", 1023374730, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
                "count", "cljs.core/count", -921270233, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "c__9056__auto__", "c__9056__auto__", 1023374730, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", 
                -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, k), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "first", "cljs.core/first", -752535972, 
                null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, seqsym)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, subform), cljs.core.truth_(needrec) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [recform__$1], null) : null)))))))))))))))))))], null);
              }
            }
          }
        }
      }
    };
  }(err);
  return cljs.core.nth.call(null, step.call(null, null, cljs.core.seq.call(null, seq_exprs)), 1);
};
cljs.core$macros.doseq.cljs$lang$maxFixedArity = 3;
cljs.core$macros.doseq.cljs$lang$applyTo = function(seq9057) {
  var G__9058 = cljs.core.first.call(null, seq9057);
  var seq9057__$1 = cljs.core.next.call(null, seq9057);
  var G__9059 = cljs.core.first.call(null, seq9057__$1);
  var seq9057__$2 = cljs.core.next.call(null, seq9057__$1);
  var G__9060 = cljs.core.first.call(null, seq9057__$2);
  var seq9057__$3 = cljs.core.next.call(null, seq9057__$2);
  return cljs.core$macros.doseq.cljs$core$IFn$_invoke$arity$variadic(G__9058, G__9059, G__9060, seq9057__$3);
};
cljs.core$macros.doseq.cljs$lang$macro = true;
cljs.core$macros.array = function cljs$core$macros$array() {
  var args__5106__auto__ = [];
  var len__5099__auto___9070 = arguments.length;
  var i__5100__auto___9071 = 0;
  while (true) {
    if (i__5100__auto___9071 < len__5099__auto___9070) {
      args__5106__auto__.push(arguments[i__5100__auto___9071]);
      var G__9072 = i__5100__auto___9071 + 1;
      i__5100__auto___9071 = G__9072;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.array.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.array.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, rest) {
  var xs_str = cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, ",", cljs.core.take.call(null, cljs.core.count.call(null, rest), cljs.core.repeat.call(null, "~{}"))));
  return cljs.core.vary_meta.call(null, cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), [cljs.core.str("["), cljs.core.str(xs_str), cljs.core.str("]")].join(""), rest), cljs.core.assoc, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "array", "array", -440182315, null));
};
cljs.core$macros.array.cljs$lang$maxFixedArity = 2;
cljs.core$macros.array.cljs$lang$applyTo = function(seq9067) {
  var G__9068 = cljs.core.first.call(null, seq9067);
  var seq9067__$1 = cljs.core.next.call(null, seq9067);
  var G__9069 = cljs.core.first.call(null, seq9067__$1);
  var seq9067__$2 = cljs.core.next.call(null, seq9067__$1);
  return cljs.core$macros.array.cljs$core$IFn$_invoke$arity$variadic(G__9068, G__9069, seq9067__$2);
};
cljs.core$macros.array.cljs$lang$macro = true;
cljs.core$macros.make_array = function cljs$core$macros$make_array(_AMPERSAND_form, _AMPERSAND_env, size) {
  return cljs.core.vary_meta.call(null, typeof size === "number" ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "array", "cljs.core$macros/array", 49650437, null)), cljs.core.take.call(null, size, cljs.core.repeat.call(null, null))))) : cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", 
  "Array.", "js/Array.", 1235645307, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, size)))), cljs.core.assoc, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "array", "array", -440182315, null));
};
cljs.core$macros.make_array.cljs$lang$macro = true;
cljs.core$macros.list = function cljs$core$macros$list() {
  var args9073 = [];
  var len__5099__auto___9080 = arguments.length;
  var i__5100__auto___9081 = 0;
  while (true) {
    if (i__5100__auto___9081 < len__5099__auto___9080) {
      args9073.push(arguments[i__5100__auto___9081]);
      var G__9082 = i__5100__auto___9081 + 1;
      i__5100__auto___9081 = G__9082;
      continue;
    } else {
    }
    break;
  }
  var G__9079 = args9073.length;
  switch(G__9079) {
    case 2:
      return cljs.core$macros.list.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args9073.slice(3), 0);
      return cljs.core$macros.list.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5118__auto__);
  }
};
cljs.core$macros.list.cljs$core$IFn$_invoke$arity$2 = function(_AMPERSAND_form, _AMPERSAND_env) {
  return cljs.core.list(new cljs.core.Symbol(null, ".-EMPTY", ".-EMPTY", -471586691, null), new cljs.core.Symbol("cljs.core", "List", "cljs.core/List", 1708954352, null));
};
cljs.core$macros.list.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, x, xs) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-conj", "cljs.core/-conj", 2040622670, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "list", "cljs.core/list", -1331406371, null)), xs)))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, x))));
};
cljs.core$macros.list.cljs$lang$applyTo = function(seq9074) {
  var G__9075 = cljs.core.first.call(null, seq9074);
  var seq9074__$1 = cljs.core.next.call(null, seq9074);
  var G__9076 = cljs.core.first.call(null, seq9074__$1);
  var seq9074__$2 = cljs.core.next.call(null, seq9074__$1);
  var G__9077 = cljs.core.first.call(null, seq9074__$2);
  var seq9074__$3 = cljs.core.next.call(null, seq9074__$2);
  return cljs.core$macros.list.cljs$core$IFn$_invoke$arity$variadic(G__9075, G__9076, G__9077, seq9074__$3);
};
cljs.core$macros.list.cljs$lang$maxFixedArity = 3;
cljs.core$macros.list.cljs$lang$macro = true;
cljs.core$macros.vector = function cljs$core$macros$vector() {
  var args9084 = [];
  var len__5099__auto___9090 = arguments.length;
  var i__5100__auto___9091 = 0;
  while (true) {
    if (i__5100__auto___9091 < len__5099__auto___9090) {
      args9084.push(arguments[i__5100__auto___9091]);
      var G__9092 = i__5100__auto___9091 + 1;
      i__5100__auto___9091 = G__9092;
      continue;
    } else {
    }
    break;
  }
  var G__9089 = args9084.length;
  switch(G__9089) {
    case 2:
      return cljs.core$macros.vector.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args9084.slice(2), 0);
      return cljs.core$macros.vector.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5118__auto__);
  }
};
cljs.core$macros.vector.cljs$core$IFn$_invoke$arity$2 = function(_AMPERSAND_form, _AMPERSAND_env) {
  return cljs.core.list(new cljs.core.Symbol(null, ".-EMPTY", ".-EMPTY", -471586691, null), new cljs.core.Symbol("cljs.core", "PersistentVector", "cljs.core/PersistentVector", -1211028272, null));
};
cljs.core$macros.vector.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, xs) {
  var cnt = cljs.core.count.call(null, xs);
  if (cnt < 32) {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "PersistentVector.", "cljs.core/PersistentVector.", -1074647876, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, cnt), cljs.core._conj.call(null, cljs.core.List.EMPTY, 5), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
    cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-EMPTY-NODE", ".-EMPTY-NODE", -1333332641, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "PersistentVector", "cljs.core/PersistentVector", -1211028272, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
    "array", "cljs.core$macros/array", 49650437, null)), xs)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))));
  } else {
    return cljs.core.vary_meta.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".fromArray", ".fromArray", 1053499311, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "PersistentVector", "cljs.core/PersistentVector", -1211028272, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
    cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "array", "cljs.core$macros/array", 49650437, null)), xs)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, true)))), cljs.core.assoc, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "PersistentVector", "cljs.core/PersistentVector", -1211028272, null));
  }
};
cljs.core$macros.vector.cljs$lang$applyTo = function(seq9085) {
  var G__9086 = cljs.core.first.call(null, seq9085);
  var seq9085__$1 = cljs.core.next.call(null, seq9085);
  var G__9087 = cljs.core.first.call(null, seq9085__$1);
  var seq9085__$2 = cljs.core.next.call(null, seq9085__$1);
  return cljs.core$macros.vector.cljs$core$IFn$_invoke$arity$variadic(G__9086, G__9087, seq9085__$2);
};
cljs.core$macros.vector.cljs$lang$maxFixedArity = 2;
cljs.core$macros.vector.cljs$lang$macro = true;
cljs.core$macros.array_map = function cljs$core$macros$array_map() {
  var args9096 = [];
  var len__5099__auto___9102 = arguments.length;
  var i__5100__auto___9103 = 0;
  while (true) {
    if (i__5100__auto___9103 < len__5099__auto___9102) {
      args9096.push(arguments[i__5100__auto___9103]);
      var G__9104 = i__5100__auto___9103 + 1;
      i__5100__auto___9103 = G__9104;
      continue;
    } else {
    }
    break;
  }
  var G__9101 = args9096.length;
  switch(G__9101) {
    case 2:
      return cljs.core$macros.array_map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args9096.slice(2), 0);
      return cljs.core$macros.array_map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5118__auto__);
  }
};
cljs.core$macros.array_map.cljs$core$IFn$_invoke$arity$2 = function(_AMPERSAND_form, _AMPERSAND_env) {
  return cljs.core.list(new cljs.core.Symbol(null, ".-EMPTY", ".-EMPTY", -471586691, null), new cljs.core.Symbol("cljs.core", "PersistentArrayMap", "cljs.core/PersistentArrayMap", 1025194468, null));
};
cljs.core$macros.array_map.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, kvs) {
  var keys = cljs.core.map.call(null, cljs.core.first, cljs.core.partition.call(null, 2, kvs));
  if (cljs.core.every_QMARK_.call(null, function(keys) {
    return function(p1__9094_SHARP_) {
      return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(p1__9094_SHARP_), new cljs.core.Keyword(null, "constant", "constant", -379609303));
    };
  }(keys), cljs.core.map.call(null, function(keys) {
    return function(p1__9095_SHARP_) {
      return cljs.analyzer.analyze.call(null, _AMPERSAND_env, p1__9095_SHARP_);
    };
  }(keys), keys)) && cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, keys)), cljs.core.count.call(null, keys))) {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "PersistentArrayMap.", "cljs.core/PersistentArrayMap.", -471979341, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core._SLASH_.call(null, cljs.core.count.call(null, kvs), 2)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
    cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "array", "cljs.core$macros/array", 49650437, null)), kvs)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))));
  } else {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".fromArray", ".fromArray", 1053499311, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "PersistentArrayMap", "cljs.core/PersistentArrayMap", 1025194468, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "array", "cljs.core$macros/array", 49650437, null)), kvs)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, true), cljs.core._conj.call(null, cljs.core.List.EMPTY, false))));
  }
};
cljs.core$macros.array_map.cljs$lang$applyTo = function(seq9097) {
  var G__9098 = cljs.core.first.call(null, seq9097);
  var seq9097__$1 = cljs.core.next.call(null, seq9097);
  var G__9099 = cljs.core.first.call(null, seq9097__$1);
  var seq9097__$2 = cljs.core.next.call(null, seq9097__$1);
  return cljs.core$macros.array_map.cljs$core$IFn$_invoke$arity$variadic(G__9098, G__9099, seq9097__$2);
};
cljs.core$macros.array_map.cljs$lang$maxFixedArity = 2;
cljs.core$macros.array_map.cljs$lang$macro = true;
cljs.core$macros.hash_map = function cljs$core$macros$hash_map() {
  var args9106 = [];
  var len__5099__auto___9112 = arguments.length;
  var i__5100__auto___9113 = 0;
  while (true) {
    if (i__5100__auto___9113 < len__5099__auto___9112) {
      args9106.push(arguments[i__5100__auto___9113]);
      var G__9114 = i__5100__auto___9113 + 1;
      i__5100__auto___9113 = G__9114;
      continue;
    } else {
    }
    break;
  }
  var G__9111 = args9106.length;
  switch(G__9111) {
    case 2:
      return cljs.core$macros.hash_map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args9106.slice(2), 0);
      return cljs.core$macros.hash_map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5118__auto__);
  }
};
cljs.core$macros.hash_map.cljs$core$IFn$_invoke$arity$2 = function(_AMPERSAND_form, _AMPERSAND_env) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-EMPTY", ".-EMPTY", -471586691, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "PersistentHashMap", "cljs.core/PersistentHashMap", -454120575, null)))));
};
cljs.core$macros.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, kvs) {
  var pairs = cljs.core.partition.call(null, 2, kvs);
  var ks = cljs.core.map.call(null, cljs.core.first, pairs);
  var vs = cljs.core.map.call(null, cljs.core.second, pairs);
  return cljs.core.vary_meta.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".fromArrays", ".fromArrays", 1110244209, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "PersistentHashMap", "cljs.core/PersistentHashMap", -454120575, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "array", "cljs.core$macros/array", 49650437, null)), ks)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "array", "cljs.core$macros/array", 49650437, null)), vs))))))), cljs.core.assoc, new cljs.core.Keyword(null, 
  "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "PersistentHashMap", "cljs.core/PersistentHashMap", -454120575, null));
};
cljs.core$macros.hash_map.cljs$lang$applyTo = function(seq9107) {
  var G__9108 = cljs.core.first.call(null, seq9107);
  var seq9107__$1 = cljs.core.next.call(null, seq9107);
  var G__9109 = cljs.core.first.call(null, seq9107__$1);
  var seq9107__$2 = cljs.core.next.call(null, seq9107__$1);
  return cljs.core$macros.hash_map.cljs$core$IFn$_invoke$arity$variadic(G__9108, G__9109, seq9107__$2);
};
cljs.core$macros.hash_map.cljs$lang$maxFixedArity = 2;
cljs.core$macros.hash_map.cljs$lang$macro = true;
cljs.core$macros.hash_set = function cljs$core$macros$hash_set() {
  var args9118 = [];
  var len__5099__auto___9124 = arguments.length;
  var i__5100__auto___9125 = 0;
  while (true) {
    if (i__5100__auto___9125 < len__5099__auto___9124) {
      args9118.push(arguments[i__5100__auto___9125]);
      var G__9126 = i__5100__auto___9125 + 1;
      i__5100__auto___9125 = G__9126;
      continue;
    } else {
    }
    break;
  }
  var G__9123 = args9118.length;
  switch(G__9123) {
    case 2:
      return cljs.core$macros.hash_set.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5118__auto__ = new cljs.core.IndexedSeq(args9118.slice(2), 0);
      return cljs.core$macros.hash_set.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5118__auto__);
  }
};
cljs.core$macros.hash_set.cljs$core$IFn$_invoke$arity$2 = function(_AMPERSAND_form, _AMPERSAND_env) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-EMPTY", ".-EMPTY", -471586691, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "PersistentHashSet", "cljs.core/PersistentHashSet", -967232330, null)))));
};
cljs.core$macros.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, xs) {
  if (cljs.core.count.call(null, xs) <= 8 && cljs.core.every_QMARK_.call(null, function(p1__9116_SHARP_) {
    return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(p1__9116_SHARP_), new cljs.core.Keyword(null, "constant", "constant", -379609303));
  }, cljs.core.map.call(null, function(p1__9117_SHARP_) {
    return cljs.analyzer.analyze.call(null, _AMPERSAND_env, p1__9117_SHARP_);
  }, xs)) && cljs.core._EQ_.call(null, cljs.core.count.call(null, cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, xs)), cljs.core.count.call(null, xs))) {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "PersistentHashSet.", "cljs.core/PersistentHashSet.", 300313251, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
    "PersistentArrayMap.", "cljs.core/PersistentArrayMap.", -471979341, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, null), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.count.call(null, xs)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "array", "cljs.core$macros/array", 49650437, null)), cljs.core.interleave.call(null, 
    xs, cljs.core.repeat.call(null, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, null))));
  } else {
    return cljs.core.vary_meta.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".fromArray", ".fromArray", 1053499311, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "PersistentHashSet", "cljs.core/PersistentHashSet", -967232330, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
    cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "array", "cljs.core$macros/array", 49650437, null)), xs)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, true)))), cljs.core.assoc, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "PersistentHashSet", "cljs.core/PersistentHashSet", -967232330, null));
  }
};
cljs.core$macros.hash_set.cljs$lang$applyTo = function(seq9119) {
  var G__9120 = cljs.core.first.call(null, seq9119);
  var seq9119__$1 = cljs.core.next.call(null, seq9119);
  var G__9121 = cljs.core.first.call(null, seq9119__$1);
  var seq9119__$2 = cljs.core.next.call(null, seq9119__$1);
  return cljs.core$macros.hash_set.cljs$core$IFn$_invoke$arity$variadic(G__9120, G__9121, seq9119__$2);
};
cljs.core$macros.hash_set.cljs$lang$maxFixedArity = 2;
cljs.core$macros.hash_set.cljs$lang$macro = true;
cljs.core$macros.js_obj_STAR_ = function cljs$core$macros$js_obj_STAR_(kvs) {
  var kvs_str = cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, ",", cljs.core.take.call(null, cljs.core.count.call(null, kvs), cljs.core.repeat.call(null, "~{}:~{}"))));
  return cljs.core.vary_meta.call(null, cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), [cljs.core.str("{"), cljs.core.str(kvs_str), cljs.core.str("}")].join(""), cljs.core.apply.call(null, cljs.core.concat, kvs)), cljs.core.assoc, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "object", "object", -1179821820, null));
};
cljs.core$macros.js_obj = function cljs$core$macros$js_obj() {
  var args__5106__auto__ = [];
  var len__5099__auto___9137 = arguments.length;
  var i__5100__auto___9138 = 0;
  while (true) {
    if (i__5100__auto___9138 < len__5099__auto___9137) {
      args__5106__auto__.push(arguments[i__5100__auto___9138]);
      var G__9139 = i__5100__auto___9138 + 1;
      i__5100__auto___9138 = G__9139;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.js_obj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, rest) {
  var sym_or_str_QMARK_ = function(x) {
    return x instanceof cljs.core.Symbol || typeof x === "string";
  };
  var filter_on_keys = function(sym_or_str_QMARK_) {
    return function(f, coll) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, function(sym_or_str_QMARK_) {
        return function(p__9131) {
          var vec__9132 = p__9131;
          var k = cljs.core.nth.call(null, vec__9132, 0, null);
          var _ = cljs.core.nth.call(null, vec__9132, 1, null);
          return f.call(null, k);
        };
      }(sym_or_str_QMARK_), coll));
    };
  }(sym_or_str_QMARK_);
  var kvs = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, rest)));
  var sym_pairs = filter_on_keys.call(null, cljs.core.symbol_QMARK_, kvs);
  var expr__GT_local = cljs.core.zipmap.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, sym_or_str_QMARK_), cljs.core.keys.call(null, kvs)), cljs.core.repeatedly.call(null, cljs.core.gensym));
  var obj = cljs.core.gensym.call(null, "obj");
  if (cljs.core.empty_QMARK_.call(null, rest)) {
    return cljs.core$macros.js_obj_STAR_.call(null, cljs.core.List.EMPTY);
  } else {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.apply.call(null, cljs.core.concat, clojure.set.map_invert.call(null, expr__GT_local)), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, obj), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.js_obj_STAR_.call(null, filter_on_keys.call(null, cljs.core.string_QMARK_, kvs)))))))), cljs.core.map.call(null, function(sym_or_str_QMARK_, filter_on_keys, kvs, sym_pairs, expr__GT_local, obj) {
      return function(p__9133) {
        var vec__9134 = p__9133;
        var k = cljs.core.nth.call(null, vec__9134, 0, null);
        var v = cljs.core.nth.call(null, vec__9134, 1, null);
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aset", "cljs.core$macros/aset", -693176374, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, obj), cljs.core._conj.call(null, cljs.core.List.EMPTY, k), cljs.core._conj.call(null, cljs.core.List.EMPTY, v))));
      };
    }(sym_or_str_QMARK_, filter_on_keys, kvs, sym_pairs, expr__GT_local, obj), sym_pairs), cljs.core.map.call(null, function(sym_or_str_QMARK_, filter_on_keys, kvs, sym_pairs, expr__GT_local, obj) {
      return function(p__9135) {
        var vec__9136 = p__9135;
        var k = cljs.core.nth.call(null, vec__9136, 0, null);
        var v = cljs.core.nth.call(null, vec__9136, 1, null);
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aset", "cljs.core$macros/aset", -693176374, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, obj), cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.get.call(null, kvs, k)))));
      };
    }(sym_or_str_QMARK_, filter_on_keys, kvs, sym_pairs, expr__GT_local, obj), expr__GT_local), cljs.core._conj.call(null, cljs.core.List.EMPTY, obj))));
  }
};
cljs.core$macros.js_obj.cljs$lang$maxFixedArity = 2;
cljs.core$macros.js_obj.cljs$lang$applyTo = function(seq9128) {
  var G__9129 = cljs.core.first.call(null, seq9128);
  var seq9128__$1 = cljs.core.next.call(null, seq9128);
  var G__9130 = cljs.core.first.call(null, seq9128__$1);
  var seq9128__$2 = cljs.core.next.call(null, seq9128__$1);
  return cljs.core$macros.js_obj.cljs$core$IFn$_invoke$arity$variadic(G__9129, G__9130, seq9128__$2);
};
cljs.core$macros.js_obj.cljs$lang$macro = true;
cljs.core$macros.alength = function cljs$core$macros$alength(_AMPERSAND_form, _AMPERSAND_env, a) {
  return cljs.core.vary_meta.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, a), "~{}.length"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null)), cljs.core.assoc, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "number", "number", -1084057331, null));
};
cljs.core$macros.alength.cljs$lang$macro = true;
cljs.core$macros.amap = function cljs$core$macros$amap(_AMPERSAND_form, _AMPERSAND_env, a, idx, ret, expr) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "a__9140__auto__", "a__9140__auto__", 
  -1566307090, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, a), cljs.core._conj.call(null, cljs.core.List.EMPTY, ret), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "aclone", "cljs.core/aclone", -758078968, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "a__9140__auto__", "a__9140__auto__", 
  -1566307090, null))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "loop", "cljs.core$macros/loop", 1731108390, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  idx), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
  "<", "cljs.core$macros/<", 371512596, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, idx), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "alength", "cljs.core$macros/alength", -683052937, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "a__9140__auto__", "a__9140__auto__", -1566307090, 
  null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aset", "cljs.core$macros/aset", 
  -693176374, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, ret), cljs.core._conj.call(null, cljs.core.List.EMPTY, idx), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "inc", "cljs.core$macros/inc", 876629257, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, idx))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, ret))))))))))));
};
cljs.core$macros.amap.cljs$lang$macro = true;
cljs.core$macros.areduce = function cljs$core$macros$areduce(_AMPERSAND_form, _AMPERSAND_env, a, idx, ret, init, expr) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "a__9141__auto__", "a__9141__auto__", 
  2128560488, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, a)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "loop", "cljs.core$macros/loop", 1731108390, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, idx), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0), cljs.core._conj.call(null, cljs.core.List.EMPTY, ret), cljs.core._conj.call(null, cljs.core.List.EMPTY, init)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "<", "cljs.core$macros/<", 371512596, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, idx), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "alength", 
  "cljs.core$macros/alength", -683052937, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "a__9141__auto__", "a__9141__auto__", 2128560488, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "inc", "cljs.core$macros/inc", 876629257, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, idx))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, ret))))))))))));
};
cljs.core$macros.areduce.cljs$lang$macro = true;
cljs.core$macros.dotimes = function cljs$core$macros$dotimes() {
  var args__5106__auto__ = [];
  var len__5099__auto___9147 = arguments.length;
  var i__5100__auto___9148 = 0;
  while (true) {
    if (i__5100__auto___9148 < len__5099__auto___9147) {
      args__5106__auto__.push(arguments[i__5100__auto___9148]);
      var G__9149 = i__5100__auto___9148 + 1;
      i__5100__auto___9148 = G__9149;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.dotimes.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.dotimes.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, body) {
  var i = cljs.core.first.call(null, bindings);
  var n = cljs.core.second.call(null, bindings);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "n__9142__auto__", "n__9142__auto__", 
  -1516549806, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, n)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "loop", "cljs.core$macros/loop", 1731108390, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, i), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when", "cljs.core$macros/when", 328457725, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "<", "cljs.core$macros/<", 371512596, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, i), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "n__9142__auto__", "n__9142__auto__", -1516549806, null)))))), body, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "inc", "cljs.core$macros/inc", 876629257, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, i))))))))))))))))))));
};
cljs.core$macros.dotimes.cljs$lang$maxFixedArity = 3;
cljs.core$macros.dotimes.cljs$lang$applyTo = function(seq9143) {
  var G__9144 = cljs.core.first.call(null, seq9143);
  var seq9143__$1 = cljs.core.next.call(null, seq9143);
  var G__9145 = cljs.core.first.call(null, seq9143__$1);
  var seq9143__$2 = cljs.core.next.call(null, seq9143__$1);
  var G__9146 = cljs.core.first.call(null, seq9143__$2);
  var seq9143__$3 = cljs.core.next.call(null, seq9143__$2);
  return cljs.core$macros.dotimes.cljs$core$IFn$_invoke$arity$variadic(G__9144, G__9145, G__9146, seq9143__$3);
};
cljs.core$macros.dotimes.cljs$lang$macro = true;
cljs.core$macros.check_valid_options = function cljs$core$macros$check_valid_options() {
  var args__5106__auto__ = [];
  var len__5099__auto___9153 = arguments.length;
  var i__5100__auto___9154 = 0;
  while (true) {
    if (i__5100__auto___9154 < len__5099__auto___9153) {
      args__5106__auto__.push(arguments[i__5100__auto___9154]);
      var G__9155 = i__5100__auto___9154 + 1;
      i__5100__auto___9154 = G__9155;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 1 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(1), 0) : null;
  return cljs.core$macros.check_valid_options.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5107__auto__);
};
cljs.core$macros.check_valid_options.cljs$core$IFn$_invoke$arity$variadic = function(options, valid_keys) {
  if (cljs.core.seq.call(null, cljs.core.apply.call(null, cljs.core.disj, cljs.core.apply.call(null, cljs.core.hash_set, cljs.core.keys.call(null, options)), valid_keys))) {
    throw cljs.core.apply.call(null, cljs.core.str, "Only these options are valid: ", cljs.core.first.call(null, valid_keys), cljs.core.map.call(null, function(p1__9150_SHARP_) {
      return [cljs.core.str(", "), cljs.core.str(p1__9150_SHARP_)].join("");
    }, cljs.core.rest.call(null, valid_keys)));
  } else {
    return null;
  }
};
cljs.core$macros.check_valid_options.cljs$lang$maxFixedArity = 1;
cljs.core$macros.check_valid_options.cljs$lang$applyTo = function(seq9151) {
  var G__9152 = cljs.core.first.call(null, seq9151);
  var seq9151__$1 = cljs.core.next.call(null, seq9151);
  return cljs.core$macros.check_valid_options.cljs$core$IFn$_invoke$arity$variadic(G__9152, seq9151__$1);
};
cljs.core$macros.defmulti = function cljs$core$macros$defmulti() {
  var args__5106__auto__ = [];
  var len__5099__auto___9165 = arguments.length;
  var i__5100__auto___9166 = 0;
  while (true) {
    if (i__5100__auto___9166 < len__5099__auto___9165) {
      args__5106__auto__.push(arguments[i__5100__auto___9166]);
      var G__9167 = i__5100__auto___9166 + 1;
      i__5100__auto___9166 = G__9167;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.defmulti.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.defmulti.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, mm_name, options) {
  var docstring = typeof cljs.core.first.call(null, options) === "string" ? cljs.core.first.call(null, options) : null;
  var options__$1 = typeof cljs.core.first.call(null, options) === "string" ? cljs.core.next.call(null, options) : options;
  var m = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, options__$1)) ? cljs.core.first.call(null, options__$1) : cljs.core.PersistentArrayMap.EMPTY;
  var options__$2 = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, options__$1)) ? cljs.core.next.call(null, options__$1) : options__$1;
  var dispatch_fn = cljs.core.first.call(null, options__$2);
  var options__$3 = cljs.core.next.call(null, options__$2);
  var m__$1 = cljs.core.truth_(docstring) ? cljs.core.assoc.call(null, m, new cljs.core.Keyword(null, "doc", "doc", 1913296891), docstring) : m;
  var m__$2 = cljs.core.truth_(cljs.core.meta.call(null, mm_name)) ? cljs.core.conj.call(null, cljs.core.meta.call(null, mm_name), m__$1) : m__$1;
  var mm_ns = [cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_env)))].join("");
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, options__$3), 1)) {
    throw new Error("The syntax for defmulti has changed. Example: (defmulti name dispatch-fn :default dispatch-value)");
  } else {
  }
  var options__$4 = cljs.core.apply.call(null, cljs.core.hash_map, options__$3);
  var default$ = cljs.core.get.call(null, options__$4, new cljs.core.Keyword(null, "default", "default", -1987822328), new cljs.core.Keyword(null, "default", "default", -1987822328));
  cljs.core$macros.check_valid_options.call(null, options__$4, new cljs.core.Keyword(null, "default", "default", -1987822328), new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341));
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "defonce", "cljs.core$macros/defonce", -1096231613, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, mm_name, m__$2)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "method-table__9156__auto__", "method-table__9156__auto__", 1766286810, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "atom", "cljs.core/atom", 1943839529, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "prefer-table__9157__auto__", "prefer-table__9157__auto__", 1191319002, null)), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "atom", "cljs.core/atom", 1943839529, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "method-cache__9158__auto__", "method-cache__9158__auto__", -999560328, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "atom", "cljs.core/atom", 1943839529, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "cached-hierarchy__9159__auto__", "cached-hierarchy__9159__auto__", 1944383449, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "atom", "cljs.core/atom", 1943839529, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "hierarchy__9160__auto__", "hierarchy__9160__auto__", 241759030, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
  "get", "cljs.core/get", -296075407, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, options__$4), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "get-global-hierarchy", "cljs.core/get-global-hierarchy", 48052871, 
  null))))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "MultiFn.", "cljs.core/MultiFn.", 1073941573, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
  "symbol", "cljs.core/symbol", 195265748, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, mm_ns), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.name.call(null, mm_name)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, dispatch_fn), cljs.core._conj.call(null, cljs.core.List.EMPTY, default$), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "hierarchy__9160__auto__", "hierarchy__9160__auto__", 241759030, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "method-table__9156__auto__", "method-table__9156__auto__", 1766286810, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "prefer-table__9157__auto__", "prefer-table__9157__auto__", 1191319002, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "method-cache__9158__auto__", "method-cache__9158__auto__", -999560328, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "cached-hierarchy__9159__auto__", 
  "cached-hierarchy__9159__auto__", 1944383449, null)))))))))))));
};
cljs.core$macros.defmulti.cljs$lang$maxFixedArity = 3;
cljs.core$macros.defmulti.cljs$lang$applyTo = function(seq9161) {
  var G__9162 = cljs.core.first.call(null, seq9161);
  var seq9161__$1 = cljs.core.next.call(null, seq9161);
  var G__9163 = cljs.core.first.call(null, seq9161__$1);
  var seq9161__$2 = cljs.core.next.call(null, seq9161__$1);
  var G__9164 = cljs.core.first.call(null, seq9161__$2);
  var seq9161__$3 = cljs.core.next.call(null, seq9161__$2);
  return cljs.core$macros.defmulti.cljs$core$IFn$_invoke$arity$variadic(G__9162, G__9163, G__9164, seq9161__$3);
};
cljs.core$macros.defmulti.cljs$lang$macro = true;
cljs.core$macros.defmethod = function cljs$core$macros$defmethod() {
  var args__5106__auto__ = [];
  var len__5099__auto___9173 = arguments.length;
  var i__5100__auto___9174 = 0;
  while (true) {
    if (i__5100__auto___9174 < len__5099__auto___9173) {
      args__5106__auto__.push(arguments[i__5100__auto___9174]);
      var G__9175 = i__5100__auto___9174 + 1;
      i__5100__auto___9174 = G__9175;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 4 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(4), 0) : null;
  return cljs.core$macros.defmethod.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5107__auto__);
};
cljs.core$macros.defmethod.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, multifn, dispatch_val, fn_tail) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-add-method", "cljs.core/-add-method", 571092113, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, multifn, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "MultiFn", "cljs.core/MultiFn", 1487419554, null)], 
  null))), cljs.core._conj.call(null, cljs.core.List.EMPTY, dispatch_val), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), fn_tail)))))));
};
cljs.core$macros.defmethod.cljs$lang$maxFixedArity = 4;
cljs.core$macros.defmethod.cljs$lang$applyTo = function(seq9168) {
  var G__9169 = cljs.core.first.call(null, seq9168);
  var seq9168__$1 = cljs.core.next.call(null, seq9168);
  var G__9170 = cljs.core.first.call(null, seq9168__$1);
  var seq9168__$2 = cljs.core.next.call(null, seq9168__$1);
  var G__9171 = cljs.core.first.call(null, seq9168__$2);
  var seq9168__$3 = cljs.core.next.call(null, seq9168__$2);
  var G__9172 = cljs.core.first.call(null, seq9168__$3);
  var seq9168__$4 = cljs.core.next.call(null, seq9168__$3);
  return cljs.core$macros.defmethod.cljs$core$IFn$_invoke$arity$variadic(G__9169, G__9170, G__9171, G__9172, seq9168__$4);
};
cljs.core$macros.defmethod.cljs$lang$macro = true;
cljs.core$macros.time = function cljs$core$macros$time(_AMPERSAND_form, _AMPERSAND_env, expr) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "start__9176__auto__", "start__9176__auto__", 
  -591215309, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".getTime", ".getTime", -1048557777, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "Date.", "js/Date.", 
  384205255, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ret__9177__auto__", "ret__9177__auto__", -131698905, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "prn", "cljs.core/prn", 1725204552, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("core", "str", "core/str", -1563921891, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "Elapsed time: "), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
  "-", "cljs.core$macros/-", 13526976, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".getTime", ".getTime", -1048557777, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", 
  "Date.", "js/Date.", 384205255, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "start__9176__auto__", "start__9176__auto__", -591215309, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, " msecs"))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ret__9177__auto__", "ret__9177__auto__", -131698905, null)))));
};
cljs.core$macros.time.cljs$lang$macro = true;
cljs.core$macros.simple_benchmark = function cljs$core$macros$simple_benchmark() {
  var args__5106__auto__ = [];
  var len__5099__auto___9192 = arguments.length;
  var i__5100__auto___9193 = 0;
  while (true) {
    if (i__5100__auto___9193 < len__5099__auto___9192) {
      args__5106__auto__.push(arguments[i__5100__auto___9193]);
      var G__9194 = i__5100__auto___9193 + 1;
      i__5100__auto___9193 = G__9194;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 5 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(5), 0) : null;
  return cljs.core$macros.simple_benchmark.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5107__auto__);
};
cljs.core$macros.simple_benchmark.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, bindings, expr, iterations, p__9189) {
  var map__9190 = p__9189;
  var map__9190__$1 = (!(map__9190 == null) ? map__9190.cljs$lang$protocol_mask$partition0$ & 64 || map__9190.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9190) : map__9190;
  var print_fn = cljs.core.get.call(null, map__9190__$1, new cljs.core.Keyword(null, "print-fn", "print-fn", -1720960489), new cljs.core.Symbol(null, "println", "println", -733595439, null));
  var bs_str = cljs.core.pr_str.call(null, bindings);
  var expr_str = cljs.core.pr_str.call(null, expr);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, bindings), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
  "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "start__9178__auto__", "start__9178__auto__", -1592310011, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".getTime", ".getTime", -1048557777, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "Date.", "js/Date.", 384205255, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ret__9179__auto__", "ret__9179__auto__", 2144346178, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "dotimes", "cljs.core$macros/dotimes", -1407597661, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "___9180__auto__", 
  "___9180__auto__", 1278018774, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, iterations)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "end__9181__auto__", "end__9181__auto__", -1753949963, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  ".getTime", ".getTime", -1048557777, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "Date.", "js/Date.", 384205255, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "elapsed__9182__auto__", "elapsed__9182__auto__", -882631093, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "-", "cljs.core$macros/-", 13526976, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "end__9181__auto__", "end__9181__auto__", -1753949963, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "start__9178__auto__", "start__9178__auto__", -1592310011, null))))))))))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, print_fn), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "str", "cljs.core$macros/str", -2019499702, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, bs_str), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, ", "), cljs.core._conj.call(null, cljs.core.List.EMPTY, expr_str), cljs.core._conj.call(null, cljs.core.List.EMPTY, ", "), cljs.core._conj.call(null, cljs.core.List.EMPTY, iterations), cljs.core._conj.call(null, cljs.core.List.EMPTY, " runs, "), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "elapsed__9182__auto__", "elapsed__9182__auto__", -882631093, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, " msecs"))))))))))))))));
};
cljs.core$macros.simple_benchmark.cljs$lang$maxFixedArity = 5;
cljs.core$macros.simple_benchmark.cljs$lang$applyTo = function(seq9183) {
  var G__9184 = cljs.core.first.call(null, seq9183);
  var seq9183__$1 = cljs.core.next.call(null, seq9183);
  var G__9185 = cljs.core.first.call(null, seq9183__$1);
  var seq9183__$2 = cljs.core.next.call(null, seq9183__$1);
  var G__9186 = cljs.core.first.call(null, seq9183__$2);
  var seq9183__$3 = cljs.core.next.call(null, seq9183__$2);
  var G__9187 = cljs.core.first.call(null, seq9183__$3);
  var seq9183__$4 = cljs.core.next.call(null, seq9183__$3);
  var G__9188 = cljs.core.first.call(null, seq9183__$4);
  var seq9183__$5 = cljs.core.next.call(null, seq9183__$4);
  return cljs.core$macros.simple_benchmark.cljs$core$IFn$_invoke$arity$variadic(G__9184, G__9185, G__9186, G__9187, G__9188, seq9183__$5);
};
cljs.core$macros.simple_benchmark.cljs$lang$macro = true;
cljs.core$macros.cs = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.gensym, cljs.core.str, cljs.core.char$), cljs.core.range.call(null, 97, 118)));
cljs.core$macros.gen_apply_to_helper = function cljs$core$macros$gen_apply_to_helper() {
  var args9195 = [];
  var len__5099__auto___9198 = arguments.length;
  var i__5100__auto___9199 = 0;
  while (true) {
    if (i__5100__auto___9199 < len__5099__auto___9198) {
      args9195.push(arguments[i__5100__auto___9199]);
      var G__9200 = i__5100__auto___9199 + 1;
      i__5100__auto___9199 = G__9200;
      continue;
    } else {
    }
    break;
  }
  var G__9197 = args9195.length;
  switch(G__9197) {
    case 0:
      return cljs.core$macros.gen_apply_to_helper.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core$macros.gen_apply_to_helper.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9195.length)].join(""));;
  }
};
cljs.core$macros.gen_apply_to_helper.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core$macros.gen_apply_to_helper.call(null, 1);
};
cljs.core$macros.gen_apply_to_helper.cljs$core$IFn$_invoke$arity$1 = function(n) {
  var prop = cljs.core.symbol.call(null, [cljs.core.str("-cljs$core$IFn$_invoke$arity$"), cljs.core.str(n)].join(""));
  var f = cljs.core.symbol.call(null, [cljs.core.str("cljs$core$IFn$_invoke$arity$"), cljs.core.str(n)].join(""));
  if (n <= 20) {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.cs.call(null, n - 1)), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-first", "cljs.core/-first", 545297391, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "args", "args", -1338879193, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "args", "args", -1338879193, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-rest", "cljs.core/-rest", -1829241664, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "args", "args", -1338879193, null))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "==", "cljs.core$macros/==", -818551413, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "argc", "argc", 187692008, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, n))))), 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, new cljs.core.Symbol(null, "f", "f", 43394975, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, prop))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "f", "f", 43394975, null)), cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, f), cljs.core.take.call(null, n, cljs.core$macros.cs))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "f", "f", 43394975, null)), cljs.core.take.call(null, n, cljs.core$macros.cs))))))))), 
    cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.gen_apply_to_helper.call(null, n + 1)))))))));
  } else {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "throw", "throw", 595905694, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "Error.", "js/Error.", 750655924, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
    "Only up to 20 arguments supported on functions"))))))));
  }
};
cljs.core$macros.gen_apply_to_helper.cljs$lang$maxFixedArity = 1;
cljs.core$macros.gen_apply_to = function cljs$core$macros$gen_apply_to(_AMPERSAND_form, _AMPERSAND_env) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "*unchecked-if*", "*unchecked-if*", 1542408350, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, true))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "defn", "cljs.core$macros/defn", -728332354, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "apply-to", "apply-to", -1858571928, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "f", "f", 43394975, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "argc", "argc", 187692008, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "args", "args", -1338879193, null))))))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "args", "args", -1338879193, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "seq", "cljs.core/seq", -1649497689, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "args", "args", -1338879193, null))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "if", "if", 1181717262, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "zero?", "cljs.core$macros/zero?", -65998367, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "argc", "argc", 187692008, null)))))), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "f", "f", 43394975, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.gen_apply_to_helper.call(null)))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "*unchecked-if*", "*unchecked-if*", 1542408350, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, false))))))));
};
cljs.core$macros.gen_apply_to.cljs$lang$macro = true;
cljs.core$macros.with_out_str = function cljs$core$macros$with_out_str() {
  var args__5106__auto__ = [];
  var len__5099__auto___9207 = arguments.length;
  var i__5100__auto___9208 = 0;
  while (true) {
    if (i__5100__auto___9208 < len__5099__auto___9207) {
      args__5106__auto__.push(arguments[i__5100__auto___9208]);
      var G__9209 = i__5100__auto___9208 + 1;
      i__5100__auto___9208 = G__9209;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.with_out_str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.with_out_str.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "sb__9202__auto__", "sb__9202__auto__", 
  -1798790344, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "string.StringBuffer.", "string.StringBuffer.", 1913246471, null))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
  "binding", "cljs.core$macros/binding", 1855847304, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "*print-newline*", "cljs.core/*print-newline*", 6231625, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, true), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
  "*print-fn*", "cljs.core/*print-fn*", 1342365176, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__9203__auto__", "x__9203__auto__", 1949023853, null))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".append", ".append", 1595439852, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "sb__9202__auto__", "sb__9202__auto__", -1798790344, null)), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "x__9203__auto__", "x__9203__auto__", 1949023853, null))))))))))))))), body)))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "str", "cljs.core/str", -1971828991, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "sb__9202__auto__", 
  "sb__9202__auto__", -1798790344, null)))))))));
};
cljs.core$macros.with_out_str.cljs$lang$maxFixedArity = 2;
cljs.core$macros.with_out_str.cljs$lang$applyTo = function(seq9204) {
  var G__9205 = cljs.core.first.call(null, seq9204);
  var seq9204__$1 = cljs.core.next.call(null, seq9204);
  var G__9206 = cljs.core.first.call(null, seq9204__$1);
  var seq9204__$2 = cljs.core.next.call(null, seq9204__$1);
  return cljs.core$macros.with_out_str.cljs$core$IFn$_invoke$arity$variadic(G__9205, G__9206, seq9204__$2);
};
cljs.core$macros.with_out_str.cljs$lang$macro = true;
cljs.core$macros.lazy_cat = function cljs$core$macros$lazy_cat() {
  var args__5106__auto__ = [];
  var len__5099__auto___9214 = arguments.length;
  var i__5100__auto___9215 = 0;
  while (true) {
    if (i__5100__auto___9215 < len__5099__auto___9214) {
      args__5106__auto__.push(arguments[i__5100__auto___9215]);
      var G__9216 = i__5100__auto___9215 + 1;
      i__5100__auto___9215 = G__9216;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 2 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(2), 0) : null;
  return cljs.core$macros.lazy_cat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5107__auto__);
};
cljs.core$macros.lazy_cat.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, colls) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "concat", "cljs.core/concat", -1133584918, null)), cljs.core.map.call(null, function(p1__9210_SHARP_) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, p1__9210_SHARP_), new cljs.core.Symbol("cljs.core$macros", "lazy-seq", "cljs.core$macros/lazy-seq", 806482650, null));
  }, colls))));
};
cljs.core$macros.lazy_cat.cljs$lang$maxFixedArity = 2;
cljs.core$macros.lazy_cat.cljs$lang$applyTo = function(seq9211) {
  var G__9212 = cljs.core.first.call(null, seq9211);
  var seq9211__$1 = cljs.core.next.call(null, seq9211);
  var G__9213 = cljs.core.first.call(null, seq9211__$1);
  var seq9211__$2 = cljs.core.next.call(null, seq9211__$1);
  return cljs.core$macros.lazy_cat.cljs$core$IFn$_invoke$arity$variadic(G__9212, G__9213, seq9211__$2);
};
cljs.core$macros.lazy_cat.cljs$lang$macro = true;
cljs.core$macros.js_str = function cljs$core$macros$js_str(_AMPERSAND_form, _AMPERSAND_env, s) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, s), "''+~{}"), new cljs.core.Symbol(null, "js*", "js*", -1134233646, null));
};
cljs.core$macros.js_str.cljs$lang$macro = true;
cljs.core$macros.es6_iterable = function cljs$core$macros$es6_iterable(_AMPERSAND_form, _AMPERSAND_env, ty) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aset", "cljs.core$macros/aset", -693176374, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-prototype", ".-prototype", -1562038608, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, ty))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "ITER_SYMBOL", "cljs.core/ITER_SYMBOL", -2091399233, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "this-as", "cljs.core$macros/this-as", -799075148, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__9217__auto__", "this__9217__auto__", -1790160655, 
  null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "es6-iterator", "cljs.core/es6-iterator", 856007913, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__9217__auto__", "this__9217__auto__", -1790160655, null)))))))))))))))));
};
cljs.core$macros.es6_iterable.cljs$lang$macro = true;
cljs.core$macros.ns_interns = function cljs$core$macros$ns_interns(_AMPERSAND_form, _AMPERSAND_env, p__9218) {
  var vec__9222 = p__9218;
  var quote = cljs.core.nth.call(null, vec__9222, 0, null);
  var ns = cljs.core.nth.call(null, vec__9222, 1, null);
  if (cljs.core._EQ_.call(null, quote, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)) && ns instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Argument to ns-interns must be a quoted symbol"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("core", "and", "core/and", 604631615, null), cljs.core.list(new cljs.core.Symbol(null, "=", "=", -1501502141, null), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), new cljs.core.Symbol(null, 
    "quote", "quote", 1377916282, null))), cljs.core.list(new cljs.core.Symbol("core", "symbol?", "core/symbol?", 1819594398, null), new cljs.core.Symbol(null, "ns", "ns", 2082130287, null)))))].join(""));
  }
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "into", "cljs.core/into", 1879938733, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.map.call(null, function(vec__9222, quote, ns) {
    return function(p__9223) {
      var vec__9224 = p__9223;
      var sym = cljs.core.nth.call(null, vec__9224, 0, null);
      var _ = cljs.core.nth.call(null, vec__9224, 1, null);
      return cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "symbol", "cljs.core/symbol", 195265748, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.name.call(null, sym)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
      cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "var", "var", 870848730, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.symbol.call(null, cljs.core.name.call(null, ns), cljs.core.name.call(null, sym)))))))))));
    };
  }(vec__9222, quote, ns), cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717)], null)))))))))));
};
cljs.core$macros.ns_interns.cljs$lang$macro = true;
cljs.core$macros.ns_unmap = function cljs$core$macros$ns_unmap(_AMPERSAND_form, _AMPERSAND_env, p__9225, p__9226) {
  var vec__9229 = p__9225;
  var quote0 = cljs.core.nth.call(null, vec__9229, 0, null);
  var ns = cljs.core.nth.call(null, vec__9229, 1, null);
  var vec__9230 = p__9226;
  var quote1 = cljs.core.nth.call(null, vec__9230, 0, null);
  var sym = cljs.core.nth.call(null, vec__9230, 1, null);
  if (cljs.core._EQ_.call(null, quote0, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)) && ns instanceof cljs.core.Symbol && cljs.core._EQ_.call(null, quote1, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)) && sym instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Arguments to ns-unmap must be quoted symbols"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("core", "and", "core/and", 604631615, null), cljs.core.list(new cljs.core.Symbol(null, "=", "=", -1501502141, null), new cljs.core.Symbol(null, "quote0", "quote0", 1319130280, null), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), new cljs.core.Symbol(null, 
    "quote", "quote", 1377916282, null))), cljs.core.list(new cljs.core.Symbol("core", "symbol?", "core/symbol?", 1819594398, null), new cljs.core.Symbol(null, "ns", "ns", 2082130287, null)), cljs.core.list(new cljs.core.Symbol(null, "=", "=", -1501502141, null), new cljs.core.Symbol(null, "quote1", "quote1", -2140587747, null), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null))), cljs.core.list(new cljs.core.Symbol("core", 
    "symbol?", "core/symbol?", 1819594398, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null)))))].join(""));
  }
  cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717)], null), cljs.core.dissoc, sym);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "js-delete", "cljs.core$macros/js-delete", 387769082, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.compiler.munge.call(null, ns)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.compiler.munge.call(null, [cljs.core.str(sym)].join(""))))));
};
cljs.core$macros.ns_unmap.cljs$lang$macro = true;
cljs.core$macros.vswap_BANG_ = function cljs$core$macros$vswap_BANG_() {
  var args__5106__auto__ = [];
  var len__5099__auto___9236 = arguments.length;
  var i__5100__auto___9237 = 0;
  while (true) {
    if (i__5100__auto___9237 < len__5099__auto___9236) {
      args__5106__auto__.push(arguments[i__5100__auto___9237]);
      var G__9238 = i__5100__auto___9237 + 1;
      i__5100__auto___9237 = G__9238;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 4 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(4), 0) : null;
  return cljs.core$macros.vswap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5107__auto__);
};
cljs.core$macros.vswap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, vol, f, args) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-vreset!", "cljs.core/-vreset!", -1186516972, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, vol), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, f), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-deref", "cljs.core/-deref", -1260480154, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, vol))))), args)))))));
};
cljs.core$macros.vswap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core$macros.vswap_BANG_.cljs$lang$applyTo = function(seq9231) {
  var G__9232 = cljs.core.first.call(null, seq9231);
  var seq9231__$1 = cljs.core.next.call(null, seq9231);
  var G__9233 = cljs.core.first.call(null, seq9231__$1);
  var seq9231__$2 = cljs.core.next.call(null, seq9231__$1);
  var G__9234 = cljs.core.first.call(null, seq9231__$2);
  var seq9231__$3 = cljs.core.next.call(null, seq9231__$2);
  var G__9235 = cljs.core.first.call(null, seq9231__$3);
  var seq9231__$4 = cljs.core.next.call(null, seq9231__$3);
  return cljs.core$macros.vswap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9232, G__9233, G__9234, G__9235, seq9231__$4);
};
cljs.core$macros.vswap_BANG_.cljs$lang$macro = true;
cljs.core$macros.load_file_STAR_ = function cljs$core$macros$load_file_STAR_(_AMPERSAND_form, _AMPERSAND_env, f) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "goog", "js/goog", -70605150, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "nodeGlobalRequire", "nodeGlobalRequire", 167018599, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, f))))))));
};
cljs.core$macros.load_file_STAR_.cljs$lang$macro = true;
cljs.core$macros.macroexpand_1 = function cljs$core$macros$macroexpand_1(_AMPERSAND_form, _AMPERSAND_env, quoted) {
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, quoted), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Argument to macroexpand-1 must be quoted"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("core", "=", "core/=", -1498278496, null), cljs.core.list(new cljs.core.Symbol("core", "first", "core/first", 982850208, null), new cljs.core.Symbol(null, "quoted", "quoted", -537090817, null)), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), new cljs.core.Symbol(null, 
    "quote", "quote", 1377916282, null)))))].join(""));
  }
  var form = cljs.core.second.call(null, quoted);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.analyzer.macroexpand_1.call(null, _AMPERSAND_env, form)))));
};
cljs.core$macros.macroexpand_1.cljs$lang$macro = true;
cljs.core$macros.macroexpand = function cljs$core$macros$macroexpand(_AMPERSAND_form, _AMPERSAND_env, quoted) {
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, quoted), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Argument to macroexpand must be quoted"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("core", "=", "core/=", -1498278496, null), cljs.core.list(new cljs.core.Symbol("core", "first", "core/first", 982850208, null), new cljs.core.Symbol(null, "quoted", "quoted", -537090817, null)), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), new cljs.core.Symbol(null, 
    "quote", "quote", 1377916282, null)))))].join(""));
  }
  var form = cljs.core.second.call(null, quoted);
  var env = _AMPERSAND_env;
  var form__$1 = form;
  var form_SINGLEQUOTE_ = cljs.analyzer.macroexpand_1.call(null, env, form__$1);
  while (true) {
    if (!(form__$1 === form_SINGLEQUOTE_)) {
      var G__9239 = form_SINGLEQUOTE_;
      var G__9240 = cljs.analyzer.macroexpand_1.call(null, env, form_SINGLEQUOTE_);
      form__$1 = G__9239;
      form_SINGLEQUOTE_ = G__9240;
      continue;
    } else {
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, form_SINGLEQUOTE_))));
    }
    break;
  }
};
cljs.core$macros.macroexpand.cljs$lang$macro = true;
cljs.core$macros.multi_arity_fn_QMARK_ = function cljs$core$macros$multi_arity_fn_QMARK_(fdecl) {
  return 1 < cljs.core.count.call(null, fdecl);
};
cljs.core$macros.variadic_fn_QMARK_ = function cljs$core$macros$variadic_fn_QMARK_(fdecl) {
  var and__4048__auto__ = cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, fdecl));
  if (and__4048__auto__) {
    return cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "&", "&", -2144855648, null), null], null), null), cljs.core.ffirst.call(null, fdecl));
  } else {
    return and__4048__auto__;
  }
};
cljs.core$macros.variadic_fn_STAR_ = function cljs$core$macros$variadic_fn_STAR_() {
  var args9241 = [];
  var len__5099__auto___9246 = arguments.length;
  var i__5100__auto___9247 = 0;
  while (true) {
    if (i__5100__auto___9247 < len__5099__auto___9246) {
      args9241.push(arguments[i__5100__auto___9247]);
      var G__9248 = i__5100__auto___9247 + 1;
      i__5100__auto___9247 = G__9248;
      continue;
    } else {
    }
    break;
  }
  var G__9243 = args9241.length;
  switch(G__9243) {
    case 2:
      return cljs.core$macros.variadic_fn_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core$macros.variadic_fn_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9241.length)].join(""));;
  }
};
cljs.core$macros.variadic_fn_STAR_.cljs$core$IFn$_invoke$arity$2 = function(sym, method) {
  return cljs.core$macros.variadic_fn_STAR_.call(null, sym, method, true);
};
cljs.core$macros.variadic_fn_STAR_.cljs$core$IFn$_invoke$arity$3 = function(sym, p__9244, solo) {
  var vec__9245 = p__9244;
  var arglist = cljs.core.nth.call(null, vec__9245, 0, null);
  var body = cljs.core.nthnext.call(null, vec__9245, 1);
  var method = vec__9245;
  var sig = cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "&", "&", -2144855648, null), null], null), null), arglist);
  var restarg = cljs.core.gensym.call(null, "seq");
  var get_delegate = function(sig, restarg, vec__9245, arglist, body, method) {
    return function cljs$core$macros$get_delegate() {
      return new cljs.core.Symbol(null, "cljs$core$IFn$_invoke$arity$variadic", "cljs$core$IFn$_invoke$arity$variadic", -378825034, null);
    };
  }(sig, restarg, vec__9245, arglist, body, method);
  var get_delegate_prop = function(sig, restarg, vec__9245, arglist, body, method) {
    return function cljs$core$macros$get_delegate_prop() {
      return cljs.core.symbol.call(null, [cljs.core.str("-"), cljs.core.str(get_delegate.call(null))].join(""));
    };
  }(sig, restarg, vec__9245, arglist, body, method);
  var param_bind = function(sig, restarg, vec__9245, arglist, body, method) {
    return function cljs$core$macros$param_bind(param) {
      return cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, param), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, new cljs.core.Symbol("cljs.core", "first", "cljs.core/first", -752535972, null), cljs.core.apply.call(null, cljs.core.array_map, 
      cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "file", "file", -1269645878)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "/home/joelm/scratch/cljs-bootstrap/.cljs_bootstrap/cljs/core.cljc"), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "line", "line", 212345235)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 2592), cljs.core._conj.call(null, 
      cljs.core.List.EMPTY, new cljs.core.Keyword(null, "column", "column", 2078222095)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 49), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 2592), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 54), cljs.core._conj.call(null, 
      cljs.core.List.EMPTY, new cljs.core.Keyword("cljs.analyzer", "no-resolve", "cljs.analyzer/no-resolve", -1872351017)), cljs.core._conj.call(null, cljs.core.List.EMPTY, true))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, restarg))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, restarg), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, 
      new cljs.core.Symbol("cljs.core", "next", "cljs.core/next", -1291438473, null), cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "file", "file", -1269645878)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "/home/joelm/scratch/cljs-bootstrap/.cljs_bootstrap/cljs/core.cljc"), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, 
      "line", "line", 212345235)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 2593), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "column", "column", 2078222095)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 51), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 2593), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, 
      "end-column", "end-column", 1425389514)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 55), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword("cljs.analyzer", "no-resolve", "cljs.analyzer/no-resolve", -1872351017)), cljs.core._conj.call(null, cljs.core.List.EMPTY, true))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, restarg)))))))));
    };
  }(sig, restarg, vec__9245, arglist, body, method);
  var apply_to = function(sig, restarg, vec__9245, arglist, body, method) {
    return function cljs$core$macros$apply_to() {
      if (1 < cljs.core.count.call(null, sig)) {
        var params = cljs.core.repeatedly.call(null, cljs.core.count.call(null, sig) - 1, cljs.core.gensym);
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
        cljs.core._conj.call(null, cljs.core.List.EMPTY, restarg)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
        cljs.core.mapcat.call(null, param_bind, params)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
        cljs.core.List.EMPTY, get_delegate.call(null)), params, cljs.core._conj.call(null, cljs.core.List.EMPTY, restarg))))))))))))))))))));
      } else {
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
        cljs.core._conj.call(null, cljs.core.List.EMPTY, restarg)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
        cljs.core.List.EMPTY, get_delegate.call(null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "seq", "cljs.core/seq", -1649497689, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, restarg))))))))))))))))))));
      }
    };
  }(sig, restarg, vec__9245, arglist, body, method);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, get_delegate_prop.call(null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
  "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, sig)), body)))))))))))), cljs.core.truth_(solo) ? cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "-cljs$lang$maxFixedArity", "-cljs$lang$maxFixedArity", -1481434279, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.count.call(null, sig) - 1))))))))) : null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-cljs$lang$applyTo", "-cljs$lang$applyTo", -225535181, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, apply_to.call(null)))))))));
};
cljs.core$macros.variadic_fn_STAR_.cljs$lang$maxFixedArity = 3;
cljs.core$macros.copy_arguments = function cljs$core$macros$copy_arguments(_AMPERSAND_form, _AMPERSAND_env, dest) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "len__9250__auto__", "len__9250__auto__", 
  -309287551, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "alength", "cljs.core$macros/alength", -683052937, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
  "js-arguments", "cljs.core$macros/js-arguments", 390128540, null))))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "loop", "cljs.core$macros/loop", 1731108390, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "i__9251__auto__", "i__9251__auto__", -1812560712, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when", "cljs.core$macros/when", 328457725, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "<", "cljs.core$macros/<", 371512596, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "i__9251__auto__", "i__9251__auto__", -1812560712, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "len__9250__auto__", "len__9250__auto__", -309287551, null)))))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".push", ".push", -1497267248, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, dest), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aget", 
  "cljs.core$macros/aget", 1976136178, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "js-arguments", "cljs.core$macros/js-arguments", 390128540, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "i__9251__auto__", "i__9251__auto__", -1812560712, null)))))))))), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "inc", "cljs.core$macros/inc", 876629257, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, "i__9251__auto__", "i__9251__auto__", -1812560712, null)))))))))))))))))))));
};
cljs.core$macros.copy_arguments.cljs$lang$macro = true;
cljs.core$macros.variadic_fn = function cljs$core$macros$variadic_fn(name, meta, p__9254) {
  var vec__9257 = p__9254;
  var vec__9258 = cljs.core.nth.call(null, vec__9257, 0, null);
  var arglist = cljs.core.nth.call(null, vec__9258, 0, null);
  var body = cljs.core.nthnext.call(null, vec__9258, 1);
  var method = vec__9258;
  var fdecl = vec__9257;
  var dest_args = function(vec__9257, vec__9258, arglist, body, method, fdecl) {
    return function cljs$core$macros$variadic_fn_$_dest_args(c) {
      return cljs.core.map.call(null, function(vec__9257, vec__9258, arglist, body, method, fdecl) {
        return function(n) {
          return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aget", "cljs.core$macros/aget", 1976136178, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "js-arguments", "cljs.core$macros/js-arguments", 
          390128540, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, n))));
        };
      }(vec__9257, vec__9258, arglist, body, method, fdecl), cljs.core.range.call(null, c));
    };
  }(vec__9257, vec__9258, arglist, body, method, fdecl);
  var rname = cljs.core.symbol.call(null, [cljs.core.str(cljs.analyzer._STAR_cljs_ns_STAR_)].join(""), [cljs.core.str(name)].join(""));
  var sig = cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "&", "&", -2144855648, null), null], null), null), arglist);
  var c_1 = cljs.core.count.call(null, sig) - 1;
  var meta__$1 = cljs.core.assoc.call(null, meta, new cljs.core.Keyword(null, "top-fn", "top-fn", -2056129173), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "variadic", "variadic", 882626057), true, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), c_1, new cljs.core.Keyword(null, "method-params", "method-params", -980792179), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [sig], null), new cljs.core.Keyword(null, 
  "arglists", "arglists", 1661989754), cljs.core._conj.call(null, cljs.core.List.EMPTY, arglist), new cljs.core.Keyword(null, "arglists-meta", "arglists-meta", 1944829838), cljs.core.doall.call(null, cljs.core.map.call(null, meta, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [arglist], null)))], null));
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "def", "def", 597100991, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, 
  name, meta__$1)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "args__9252__auto__", "args__9252__auto__", 
  376283135, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "array", "cljs.core$macros/array", 49650437, null))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", 
  "copy-arguments", "cljs.core$macros/copy-arguments", -1675962356, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "args__9252__auto__", "args__9252__auto__", 376283135, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "argseq__9253__auto__", "argseq__9253__auto__", 2047360668, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "when", 
  "cljs.core$macros/when", 328457725, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "<", "cljs.core$macros/<", 371512596, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, c_1), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "alength", "cljs.core$macros/alength", -683052937, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "args__9252__auto__", "args__9252__auto__", 376283135, null)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
  "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, new cljs.core.Symbol("cljs.core", "IndexedSeq", "cljs.core/IndexedSeq", -228688698, null), cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "file", "file", -1269645878)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "/home/joelm/scratch/cljs-bootstrap/.cljs_bootstrap/cljs/core.cljc"), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "line", "line", 212345235)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 2640), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "column", "column", 2078222095)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 55), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 2640), cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 75), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword("cljs.analyzer", "no-resolve", "cljs.analyzer/no-resolve", -1872351017)), cljs.core._conj.call(null, cljs.core.List.EMPTY, true))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".slice", ".slice", 1874048374, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "args__9252__auto__", "args__9252__auto__", 376283135, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, c_1))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0)))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, rname), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "cljs$core$IFn$_invoke$arity$variadic", "cljs$core$IFn$_invoke$arity$variadic", -378825034, null)), dest_args.call(null, c_1), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "argseq__9253__auto__", "argseq__9253__auto__", 2047360668, null)))))))))))))))))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.variadic_fn_STAR_.call(null, rname, method)))));
};
cljs.core$macros.multi_arity_fn = function cljs$core$macros$multi_arity_fn(name, meta, fdecl) {
  var dest_args = function cljs$core$macros$multi_arity_fn_$_dest_args(c) {
    return cljs.core.map.call(null, function(n) {
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "aget", "cljs.core$macros/aget", 1976136178, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "js-arguments", "cljs.core$macros/js-arguments", 
      390128540, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, n))));
    }, cljs.core.range.call(null, c));
  };
  var fixed_arity = function cljs$core$macros$multi_arity_fn_$_fixed_arity(rname, sig) {
    var c = cljs.core.count.call(null, sig);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [c, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, rname), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
    cljs.core.List.EMPTY, cljs.core.symbol.call(null, [cljs.core.str("cljs$core$IFn$_invoke$arity$"), cljs.core.str(c)].join(""))), dest_args.call(null, c))))))))], null);
  };
  var fn_method = function cljs$core$macros$multi_arity_fn_$_fn_method(p__9271) {
    var vec__9273 = p__9271;
    var sig = cljs.core.nth.call(null, vec__9273, 0, null);
    var body = cljs.core.nthnext.call(null, vec__9273, 1);
    var method = vec__9273;
    if (cljs.core.truth_(cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "&", "&", -2144855648, null), null], null), null), sig))) {
      return cljs.core$macros.variadic_fn_STAR_.call(null, name, method, false);
    } else {
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, name), 
      cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.symbol.call(null, [cljs.core.str("-cljs$core$IFn$_invoke$arity$"), cljs.core.str(cljs.core.count.call(null, sig))].join(""))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
      method))))))));
    }
  };
  var rname = cljs.core.symbol.call(null, [cljs.core.str(cljs.analyzer._STAR_cljs_ns_STAR_)].join(""), [cljs.core.str(name)].join(""));
  var arglists = cljs.core.map.call(null, cljs.core.first, fdecl);
  var varsig_QMARK_ = function(rname, arglists) {
    return function(p1__9259_SHARP_) {
      return cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "&", "&", -2144855648, null), null], null), null), p1__9259_SHARP_);
    };
  }(rname, arglists);
  var variadic = cljs.core.boolean$.call(null, cljs.core.some.call(null, varsig_QMARK_, arglists));
  var sigs = cljs.core.remove.call(null, varsig_QMARK_, arglists);
  var maxfa = cljs.core.apply.call(null, cljs.core.max, cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.count, sigs), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.count.call(null, cljs.core.first.call(null, cljs.core.filter.call(null, varsig_QMARK_, arglists))) - 2], null)));
  var meta__$1 = cljs.core.assoc.call(null, meta, new cljs.core.Keyword(null, "top-fn", "top-fn", -2056129173), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "variadic", "variadic", 882626057), variadic, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), maxfa, new cljs.core.Keyword(null, "method-params", "method-params", -980792179), sigs, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), arglists, new cljs.core.Keyword(null, "arglists-meta", 
  "arglists-meta", 1944829838), cljs.core.doall.call(null, cljs.core.map.call(null, meta, arglists))], null));
  var args_sym = cljs.core.gensym.call(null, "args");
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "def", "def", 597100991, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, 
  name, meta__$1)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, args_sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "array", "cljs.core$macros/array", 49650437, null))))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "copy-arguments", "cljs.core$macros/copy-arguments", -1675962356, null)), 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, args_sym))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "case", "cljs.core$macros/case", -2131866965, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, 
  cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "alength", "cljs.core$macros/alength", -683052937, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, args_sym))))), cljs.core.mapcat.call(null, function(rname, arglists, varsig_QMARK_, variadic, sigs, maxfa, meta__$1, args_sym) {
    return function(p1__9260_SHARP_) {
      return fixed_arity.call(null, rname, p1__9260_SHARP_);
    };
  }(rname, arglists, varsig_QMARK_, variadic, sigs, maxfa, meta__$1, args_sym), sigs), cljs.core._conj.call(null, cljs.core.List.EMPTY, variadic ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "let", "cljs.core$macros/let", -160286726, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, 
  cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "argseq__9261__auto__", "argseq__9261__auto__", 1445463561, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "new", "new", -444906321, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.with_meta.call(null, new cljs.core.Symbol("cljs.core", 
  "IndexedSeq", "cljs.core/IndexedSeq", -228688698, null), cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "file", "file", -1269645878)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "/home/joelm/scratch/cljs-bootstrap/.cljs_bootstrap/cljs/core.cljc"), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "line", 
  "line", 212345235)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 2697), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "column", "column", 2078222095)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 58), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 2697), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "end-column", 
  "end-column", 1425389514)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 78), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword("cljs.analyzer", "no-resolve", "cljs.analyzer/no-resolve", -1872351017)), cljs.core._conj.call(null, cljs.core.List.EMPTY, true))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".slice", 
  ".slice", 1874048374, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, args_sym), cljs.core._conj.call(null, cljs.core.List.EMPTY, maxfa))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, 0)))))))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  rname), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "cljs$core$IFn$_invoke$arity$variadic", "cljs$core$IFn$_invoke$arity$variadic", -378825034, null)), dest_args.call(null, maxfa), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "argseq__9261__auto__", "argseq__9261__auto__", 1445463561, null))))))))))))) : 
  cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "throw", "throw", 595905694, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "Error.", "js/Error.", 750655924, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, 
  cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "str", "cljs.core$macros/str", -2019499702, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "Invalid arity: "), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core$macros", "alength", "cljs.core$macros/alength", 
  -683052937, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, args_sym))))))))))))))))))))))))))))))))), cljs.core.map.call(null, fn_method, fdecl), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, 
  cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, name), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-cljs$lang$maxFixedArity", "-cljs$lang$maxFixedArity", -1481434279, null)))))), cljs.core._conj.call(null, cljs.core.List.EMPTY, maxfa))))))));
};
cljs.core$macros.defn = function() {
  var cljs$core$macros$defn__delegate = function(_AMPERSAND_form, _AMPERSAND_env, name, fdecl) {
    if (name instanceof cljs.core.Symbol) {
    } else {
      throw new Error("First argument to defn must be a symbol");
    }
    var m = typeof cljs.core.first.call(null, fdecl) === "string" ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "doc", "doc", 1913296891), cljs.core.first.call(null, fdecl)], null) : cljs.core.PersistentArrayMap.EMPTY;
    var fdecl__$1 = typeof cljs.core.first.call(null, fdecl) === "string" ? cljs.core.next.call(null, fdecl) : fdecl;
    var m__$1 = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, fdecl__$1)) ? cljs.core.conj.call(null, m, cljs.core.first.call(null, fdecl__$1)) : m;
    var fdecl__$2 = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, fdecl__$1)) ? cljs.core.next.call(null, fdecl__$1) : fdecl__$1;
    var fdecl__$3 = cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, fdecl__$2)) ? cljs.core._conj.call(null, cljs.core.List.EMPTY, fdecl__$2) : fdecl__$2;
    var m__$2 = cljs.core.map_QMARK_.call(null, cljs.core.last.call(null, fdecl__$3)) ? cljs.core.conj.call(null, m__$1, cljs.core.last.call(null, fdecl__$3)) : m__$1;
    var fdecl__$4 = cljs.core.map_QMARK_.call(null, cljs.core.last.call(null, fdecl__$3)) ? cljs.core.butlast.call(null, fdecl__$3) : fdecl__$3;
    var m__$3 = cljs.core.conj.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core$macros.sigs.call(null, fdecl__$4)), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null))], null), m__$2);
    var m__$4 = cljs.core.conj.call(null, cljs.core.truth_(cljs.core.meta.call(null, name)) ? cljs.core.meta.call(null, name) : cljs.core.PersistentArrayMap.EMPTY, m__$3);
    if (cljs.core.truth_(cljs.core$macros.multi_arity_fn_QMARK_.call(null, fdecl__$4))) {
      return cljs.core$macros.multi_arity_fn.call(null, name, m__$4, fdecl__$4);
    } else {
      if (cljs.core.truth_(cljs.core$macros.variadic_fn_QMARK_.call(null, fdecl__$4))) {
        return cljs.core$macros.variadic_fn.call(null, name, m__$4, fdecl__$4);
      } else {
        return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol("cljs.core$macros", "fn", "cljs.core$macros/fn", -187522821, null), fdecl__$4)), cljs.core.with_meta.call(null, name, m__$4)), new cljs.core.Symbol(null, "def", "def", 597100991, null));
      }
    }
  };
  var cljs$core$macros$defn = function(_AMPERSAND_form, _AMPERSAND_env, name, var_args) {
    var fdecl = null;
    if (arguments.length > 3) {
      var G__9274__i = 0, G__9274__a = new Array(arguments.length - 3);
      while (G__9274__i < G__9274__a.length) {
        G__9274__a[G__9274__i] = arguments[G__9274__i + 3];
        ++G__9274__i;
      }
      fdecl = new cljs.core.IndexedSeq(G__9274__a, 0);
    }
    return cljs$core$macros$defn__delegate.call(this, _AMPERSAND_form, _AMPERSAND_env, name, fdecl);
  };
  cljs$core$macros$defn.cljs$lang$maxFixedArity = 3;
  cljs$core$macros$defn.cljs$lang$applyTo = function(arglist__9275) {
    var _AMPERSAND_form = cljs.core.first(arglist__9275);
    arglist__9275 = cljs.core.next(arglist__9275);
    var _AMPERSAND_env = cljs.core.first(arglist__9275);
    arglist__9275 = cljs.core.next(arglist__9275);
    var name = cljs.core.first(arglist__9275);
    var fdecl = cljs.core.rest(arglist__9275);
    return cljs$core$macros$defn__delegate(_AMPERSAND_form, _AMPERSAND_env, name, fdecl);
  };
  cljs$core$macros$defn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$macros$defn__delegate;
  return cljs$core$macros$defn;
}();
cljs.core$macros.defn.cljs$lang$macro = true;
cljs.core$macros.defmacro = function cljs$core$macros$defmacro() {
  var args__5106__auto__ = [];
  var len__5099__auto___9280 = arguments.length;
  var i__5100__auto___9281 = 0;
  while (true) {
    if (i__5100__auto___9281 < len__5099__auto___9280) {
      args__5106__auto__.push(arguments[i__5100__auto___9281]);
      var G__9282 = i__5100__auto___9281 + 1;
      i__5100__auto___9281 = G__9282;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 3 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(3), 0) : null;
  return cljs.core$macros.defmacro.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5107__auto__);
};
cljs.core$macros.defmacro.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, name, args) {
  var prefix = function() {
    var p = cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vary_meta.call(null, name, cljs.core.assoc, new cljs.core.Keyword(null, "macro", "macro", -867863404), true));
    var args__$1 = args;
    while (true) {
      var f = cljs.core.first.call(null, args__$1);
      if (typeof f === "string") {
        var G__9283 = cljs.core.cons.call(null, f, p);
        var G__9284 = cljs.core.next.call(null, args__$1);
        p = G__9283;
        args__$1 = G__9284;
        continue;
      } else {
        if (cljs.core.map_QMARK_.call(null, f)) {
          var G__9285 = cljs.core.cons.call(null, f, p);
          var G__9286 = cljs.core.next.call(null, args__$1);
          p = G__9285;
          args__$1 = G__9286;
          continue;
        } else {
          return p;
        }
      }
      break;
    }
  }();
  var fdecl = function() {
    var fd = args;
    while (true) {
      if (typeof cljs.core.first.call(null, fd) === "string") {
        var G__9287 = cljs.core.next.call(null, fd);
        fd = G__9287;
        continue;
      } else {
        if (cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, fd))) {
          var G__9288 = cljs.core.next.call(null, fd);
          fd = G__9288;
          continue;
        } else {
          return fd;
        }
      }
      break;
    }
  }();
  var fdecl__$1 = cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, fdecl)) ? cljs.core._conj.call(null, cljs.core.List.EMPTY, fdecl) : fdecl;
  var add_implicit_args = function(prefix, fdecl, fdecl__$1) {
    return function(fd) {
      var args__$1 = cljs.core.first.call(null, fd);
      return cljs.core.cons.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Symbol(null, "&form", "&form", 1482799337, null), cljs.core.cons.call(null, new cljs.core.Symbol(null, "&env", "&env", -919163083, null), args__$1))), cljs.core.next.call(null, fd));
    };
  }(prefix, fdecl, fdecl__$1);
  var add_args = function(prefix, fdecl, fdecl__$1, add_implicit_args) {
    return function(acc, ds) {
      while (true) {
        if (ds == null) {
          return acc;
        } else {
          var d = cljs.core.first.call(null, ds);
          if (cljs.core.map_QMARK_.call(null, d)) {
            return cljs.core.conj.call(null, acc, d);
          } else {
            var G__9289 = cljs.core.conj.call(null, acc, add_implicit_args.call(null, d));
            var G__9290 = cljs.core.next.call(null, ds);
            acc = G__9289;
            ds = G__9290;
            continue;
          }
        }
        break;
      }
    };
  }(prefix, fdecl, fdecl__$1, add_implicit_args);
  var fdecl__$2 = cljs.core.seq.call(null, add_args.call(null, cljs.core.PersistentVector.EMPTY, fdecl__$1));
  var decl = function() {
    var p = prefix;
    var d = fdecl__$2;
    while (true) {
      if (cljs.core.truth_(p)) {
        var G__9291 = cljs.core.next.call(null, p);
        var G__9292 = cljs.core.cons.call(null, cljs.core.first.call(null, p), d);
        p = G__9291;
        d = G__9292;
        continue;
      } else {
        return d;
      }
      break;
    }
  }();
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, true), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, name), cljs.core._conj.call(null, cljs.core.List.EMPTY, 
  new cljs.core.Symbol(null, "-cljs$lang$macro", "-cljs$lang$macro", 443600924, null)))))), new cljs.core.Symbol(null, "set!", "set!", 250714521, null))), cljs.core.cons.call(null, new cljs.core.Symbol("cljs.core$macros", "defn", "cljs.core$macros/defn", -728332354, null), decl)), new cljs.core.Symbol(null, "do", "do", 1686842252, null));
};
cljs.core$macros.defmacro.cljs$lang$maxFixedArity = 3;
cljs.core$macros.defmacro.cljs$lang$applyTo = function(seq9276) {
  var G__9277 = cljs.core.first.call(null, seq9276);
  var seq9276__$1 = cljs.core.next.call(null, seq9276);
  var G__9278 = cljs.core.first.call(null, seq9276__$1);
  var seq9276__$2 = cljs.core.next.call(null, seq9276__$1);
  var G__9279 = cljs.core.first.call(null, seq9276__$2);
  var seq9276__$3 = cljs.core.next.call(null, seq9276__$2);
  return cljs.core$macros.defmacro.cljs$core$IFn$_invoke$arity$variadic(G__9277, G__9278, G__9279, seq9276__$3);
};
cljs.core$macros.defmacro.cljs$lang$macro = true;
goog.provide("cljs.js");
goog.require("cljs.core");
goog.require("cljs.compiler");
goog.require("cljs.tools.reader");
goog.require("cljs.tagged_literals");
goog.require("goog.crypt.base64");
goog.require("cljs.tools.reader.reader_types");
goog.require("cljs.env");
goog.require("cljs.analyzer");
goog.require("cljs.source_map");
goog.require("goog.string.StringBuffer");
goog.require("clojure.string");
goog.require("cljs.core$macros");
cljs.js.debug_prn = function cljs$js$debug_prn() {
  var args__5106__auto__ = [];
  var len__5099__auto___7837 = arguments.length;
  var i__5100__auto___7838 = 0;
  while (true) {
    if (i__5100__auto___7838 < len__5099__auto___7837) {
      args__5106__auto__.push(arguments[i__5100__auto___7838]);
      var G__7839 = i__5100__auto___7838 + 1;
      i__5100__auto___7838 = G__7839;
      continue;
    } else {
    }
    break;
  }
  var argseq__5107__auto__ = 0 < args__5106__auto__.length ? new cljs.core.IndexedSeq(args__5106__auto__.slice(0), 0) : null;
  return cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5107__auto__);
};
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  var _STAR_print_fn_STAR_7836 = cljs.core._STAR_print_fn_STAR_;
  cljs.core._STAR_print_fn_STAR_ = cljs.core._STAR_print_err_fn_STAR_;
  try {
    return cljs.core.apply.call(null, cljs.core.println, args);
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_7836;
  }
};
cljs.js.debug_prn.cljs$lang$maxFixedArity = 0;
cljs.js.debug_prn.cljs$lang$applyTo = function(seq7835) {
  return cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq7835));
};
cljs.js.ns__GT_relpath = function cljs$js$ns__GT_relpath(ns_sym) {
  return clojure.string.replace.call(null, cljs.analyzer.munge_path.call(null, ns_sym), ".", "/");
};
cljs.js.atom_QMARK_ = function cljs$js$atom_QMARK_(x) {
  return x instanceof cljs.core.Atom;
};
cljs.js.valid_name_QMARK_ = function cljs$js$valid_name_QMARK_(x) {
  return x == null || x instanceof cljs.core.Symbol || typeof x === "string";
};
cljs.js.valid_opts_QMARK_ = function cljs$js$valid_opts_QMARK_(x) {
  return x == null || cljs.core.map_QMARK_.call(null, x);
};
if (typeof cljs.js._STAR_load_fn_STAR_ !== "undefined") {
} else {
  cljs.js._STAR_load_fn_STAR_ = function cljs$js$_STAR_load_fn_STAR_(name, cb) {
    throw new Error("No *load-fn* set");
  };
}
if (typeof cljs.js._STAR_eval_fn_STAR_ !== "undefined") {
} else {
  cljs.js._STAR_eval_fn_STAR_ = function cljs$js$_STAR_eval_fn_STAR_(js_source) {
    throw new Error("No *eval-fn* set");
  };
}
cljs.js.js_eval = function cljs$js$js_eval(p__7840) {
  var map__7843 = p__7840;
  var map__7843__$1 = (!(map__7843 == null) ? map__7843.cljs$lang$protocol_mask$partition0$ & 64 || map__7843.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7843) : map__7843;
  var resource = map__7843__$1;
  var source = cljs.core.get.call(null, map__7843__$1, new cljs.core.Keyword(null, "source", "source", -433931539));
  return eval(source);
};
cljs.js.wrap_error = function cljs$js$wrap_error(ex) {
  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "error", "error", -978969032), ex], null);
};
cljs.js.empty_state = function cljs$js$empty_state() {
  var args7845 = [];
  var len__5099__auto___7849 = arguments.length;
  var i__5100__auto___7850 = 0;
  while (true) {
    if (i__5100__auto___7850 < len__5099__auto___7849) {
      args7845.push(arguments[i__5100__auto___7850]);
      var G__7851 = i__5100__auto___7850 + 1;
      i__5100__auto___7850 = G__7851;
      continue;
    } else {
    }
    break;
  }
  var G__7847 = args7845.length;
  switch(G__7847) {
    case 0:
      return cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.js.empty_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7845.length)].join(""));;
  }
};
cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.env.default_compiler_env.call(null);
};
cljs.js.empty_state.cljs$core$IFn$_invoke$arity$1 = function(init) {
  var G__7848 = cljs.js.empty_state.call(null);
  cljs.core.swap_BANG_.call(null, G__7848, init);
  return G__7848;
};
cljs.js.empty_state.cljs$lang$maxFixedArity = 1;
cljs.js.sm_data = function cljs$js$sm_data() {
  return cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "source-map", "source-map", 1706252311), cljs.core.sorted_map.call(null), new cljs.core.Keyword(null, "gen-col", "gen-col", 1901918303), 0, new cljs.core.Keyword(null, "gen-line", "gen-line", 589592125), 0], null));
};
cljs.js.append_source_map = function cljs$js$append_source_map(state, name, source, sb, sm_data, opts) {
  var t = (new Date).valueOf();
  var smn = cljs.core.truth_(name) ? cljs.core.munge.call(null, name) : [cljs.core.str("cljs-"), cljs.core.str(t)].join("");
  var src = [cljs.core.str(smn), cljs.core.str(".cljs")].join("");
  var file = [cljs.core.str(smn), cljs.core.str(".js")].join("");
  var json = cljs.source_map.encode.call(null, new cljs.core.PersistentArrayMap.fromArray([src, (new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(sm_data)], true, false), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "lines", "lines", -700165781), (new cljs.core.Keyword(null, "gen-line", "gen-line", 589592125)).cljs$core$IFn$_invoke$arity$1(sm_data) + 3, new cljs.core.Keyword(null, "file", "file", -1269645878), file, new cljs.core.Keyword(null, 
  "sources-content", "sources-content", 1729970239), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [source], null)], null));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "verbose", "verbose", 1694226060)).cljs$core$IFn$_invoke$arity$1(opts))) {
    cljs.js.debug_prn.call(null, json);
  } else {
  }
  cljs.core.swap_BANG_.call(null, state, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "source-maps", "source-maps", -552851697), name], null), (new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(sm_data));
  return sb.append([cljs.core.str("\n//# sourceURL="), cljs.core.str(file), cljs.core.str("\n//# sourceMappingURL=data:application/json;base64,"), cljs.core.str(goog.crypt.base64.encodeString(json, true))].join(""));
};
cljs.js._STAR_loaded_STAR_ = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
cljs.js.require = function cljs$js$require() {
  var args7853 = [];
  var len__5099__auto___7863 = arguments.length;
  var i__5100__auto___7864 = 0;
  while (true) {
    if (i__5100__auto___7864 < len__5099__auto___7863) {
      args7853.push(arguments[i__5100__auto___7864]);
      var G__7865 = i__5100__auto___7864 + 1;
      i__5100__auto___7864 = G__7865;
      continue;
    } else {
    }
    break;
  }
  var G__7855 = args7853.length;
  switch(G__7855) {
    case 2:
      return cljs.js.require.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.js.require.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.js.require.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.js.require.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7853.length)].join(""));;
  }
};
cljs.js.require.cljs$core$IFn$_invoke$arity$2 = function(name, cb) {
  return cljs.js.require.call(null, name, null, cb);
};
cljs.js.require.cljs$core$IFn$_invoke$arity$3 = function(name, opts, cb) {
  return cljs.js.require.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089), cljs.env.default_compiler_env.call(null), new cljs.core.Keyword(null, "*data-readers*", "*data-readers*", -371480469), cljs.tagged_literals._STAR_cljs_data_readers_STAR_, new cljs.core.Keyword(null, "*load-fn*", "*load-fn*", 2055642106), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "load", "load", -1318641184)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.js._STAR_load_fn_STAR_;
    }
  }(), new cljs.core.Keyword(null, "*eval-fn*", "*eval-fn*", -217221128), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "eval", "eval", -1103567905)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.js._STAR_eval_fn_STAR_;
    }
  }()], null), name, opts, cb);
};
cljs.js.require.cljs$core$IFn$_invoke$arity$4 = function(bound_vars, name, opts, cb) {
  return cljs.js.require.call(null, bound_vars, name, null, opts, cb);
};
cljs.js.require.cljs$core$IFn$_invoke$arity$5 = function(bound_vars, name, reload, opts, cb) {
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "reload", "reload", 863702807), reload)) {
    cljs.core.swap_BANG_.call(null, cljs.js._STAR_loaded_STAR_, cljs.core.disj, name);
  } else {
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200), reload)) {
    cljs.core.reset_BANG_.call(null, cljs.js._STAR_loaded_STAR_, cljs.core.PersistentHashSet.EMPTY);
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "verbose", "verbose", 1694226060)).cljs$core$IFn$_invoke$arity$1(opts))) {
    cljs.js.debug_prn.call(null, [cljs.core.str("Loading "), cljs.core.str(name), cljs.core.str(cljs.core.truth_((new cljs.core.Keyword(null, "macros-ns", "macros-ns", 1626844933)).cljs$core$IFn$_invoke$arity$1(opts)) ? " macros" : null), cljs.core.str(" namespace")].join(""));
  } else {
  }
  if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, cljs.js._STAR_loaded_STAR_), name)) {
    return null;
  } else {
    var env = (new cljs.core.Keyword(null, "*env*", "*env*", 1860548436)).cljs$core$IFn$_invoke$arity$1(bound_vars);
    try {
      return (new cljs.core.Keyword(null, "*load-fn*", "*load-fn*", 2055642106)).cljs$core$IFn$_invoke$arity$1(bound_vars).call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1843675177), name, new cljs.core.Keyword(null, "macros", "macros", 811339431), (new cljs.core.Keyword(null, "macros-ns", "macros-ns", 1626844933)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "path", "path", -188191168), cljs.js.ns__GT_relpath.call(null, name)], 
      null), function(env) {
        return function(resource) {
          if (cljs.core.map_QMARK_.call(null, resource) || resource == null) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("*load-fn* may only return a map or nil"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "resource", "resource", 1892430363, null)), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, 
            "resource", "resource", 1892430363, null)))))].join(""));
          }
          if (cljs.core.truth_(resource)) {
            var map__7857 = resource;
            var map__7857__$1 = (!(map__7857 == null) ? map__7857.cljs$lang$protocol_mask$partition0$ & 64 || map__7857.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7857) : map__7857;
            var lang = cljs.core.get.call(null, map__7857__$1, new cljs.core.Keyword(null, "lang", "lang", -1819677104));
            var source = cljs.core.get.call(null, map__7857__$1, new cljs.core.Keyword(null, "source", "source", -433931539));
            var pred__7859 = cljs.core._EQ_;
            var expr__7860 = lang;
            if (cljs.core.truth_(pred__7859.call(null, new cljs.core.Keyword(null, "clj", "clj", -660495428), expr__7860))) {
              return cljs.js.eval_str_STAR_.call(null, bound_vars, source, name, opts, function(pred__7859, expr__7860, map__7857, map__7857__$1, lang, source, env) {
                return function(res) {
                  if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res))) {
                    return cb.call(null, res);
                  } else {
                    return cb.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), true], null));
                  }
                };
              }(pred__7859, expr__7860, map__7857, map__7857__$1, lang, source, env));
            } else {
              if (cljs.core.truth_(pred__7859.call(null, new cljs.core.Keyword(null, "js", "js", 1768080579), expr__7860))) {
                var res = function() {
                  try {
                    return (new cljs.core.Keyword(null, "*eval-fn*", "*eval-fn*", -217221128)).cljs$core$IFn$_invoke$arity$1(bound_vars).call(null, resource);
                  } catch (e7862) {
                    var cause = e7862;
                    return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, env, [cljs.core.str("Could not require "), cljs.core.str(name)].join(""), cause));
                  }
                }();
                if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res))) {
                  return cb.call(null, res);
                } else {
                  return cb.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), true], null));
                }
              } else {
                return cb.call(null, cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, env, [cljs.core.str("Invalid :lang specified "), cljs.core.str(lang), cljs.core.str(", only :clj or :js allowed")].join(""))));
              }
            }
          } else {
            return cb.call(null, cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605), name, new cljs.core.Keyword(null, "js-provide", "js-provide", 1052912493), cljs.core.name.call(null, name)], null)))));
          }
        };
      }(env));
    } catch (e7856) {
      var cause = e7856;
      return cb.call(null, cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, env, [cljs.core.str("Could not require "), cljs.core.str(name)].join(""), cause)));
    }
  }
};
cljs.js.require.cljs$lang$maxFixedArity = 5;
cljs.js.load_deps = function cljs$js$load_deps() {
  var args7868 = [];
  var len__5099__auto___7872 = arguments.length;
  var i__5100__auto___7873 = 0;
  while (true) {
    if (i__5100__auto___7873 < len__5099__auto___7872) {
      args7868.push(arguments[i__5100__auto___7873]);
      var G__7874 = i__5100__auto___7873 + 1;
      i__5100__auto___7873 = G__7874;
      continue;
    } else {
    }
    break;
  }
  var G__7870 = args7868.length;
  switch(G__7870) {
    case 5:
      return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7868.length)].join(""));;
  }
};
cljs.js.load_deps.cljs$core$IFn$_invoke$arity$5 = function(bound_vars, ana_env, lib, deps, cb) {
  return cljs.js.analyze_deps.call(null, bound_vars, ana_env, lib, deps, null, cb);
};
cljs.js.load_deps.cljs$core$IFn$_invoke$arity$6 = function(bound_vars, ana_env, lib, deps, opts, cb) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "verbose", "verbose", 1694226060)).cljs$core$IFn$_invoke$arity$1(opts))) {
    cljs.js.debug_prn.call(null, "Loading dependencies for", lib);
  } else {
  }
  var compiler = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089)).cljs$core$IFn$_invoke$arity$1(bound_vars));
  var _STAR_cljs_dep_set_STAR_7871 = cljs.analyzer._STAR_cljs_dep_set_STAR_;
  cljs.analyzer._STAR_cljs_dep_set_STAR_ = cljs.core.vary_meta.call(null, cljs.core.conj.call(null, (new cljs.core.Keyword(null, "*cljs-dep-set*", "*cljs-dep-set*", -73964612)).cljs$core$IFn$_invoke$arity$1(bound_vars), lib), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "dep-path", "dep-path", 723826558)], null), cljs.core.conj, lib);
  try {
    if (cljs.core.every_QMARK_.call(null, function(_STAR_cljs_dep_set_STAR_7871, compiler) {
      return function(p1__7867_SHARP_) {
        return !cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "*cljs-dep-set*", "*cljs-dep-set*", -73964612)).cljs$core$IFn$_invoke$arity$1(bound_vars), p1__7867_SHARP_);
      };
    }(_STAR_cljs_dep_set_STAR_7871, compiler), deps)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Circular dependency detected "), cljs.core.str((new cljs.core.Keyword(null, "dep-path", "dep-path", 723826558)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "*cljs-dep-set*", "*cljs-dep-set*", -73964612)).cljs$core$IFn$_invoke$arity$1(bound_vars))))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", 
      "every?", 2083724064, null), cljs.core.list(new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "p1__7867#", "p1__7867#", 758778016, null)], null), cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), cljs.core.list(new cljs.core.Keyword(null, "*cljs-dep-set*", "*cljs-dep-set*", 
      -73964612), new cljs.core.Symbol(null, "bound-vars", "bound-vars", 1684649184, null)), new cljs.core.Symbol(null, "p1__7867#", "p1__7867#", 758778016, null)))), new cljs.core.Symbol(null, "deps", "deps", -771075450, null))))].join(""));
    }
    if (cljs.core.seq.call(null, deps)) {
      var dep = cljs.core.first.call(null, deps);
      return cljs.js.require.call(null, bound_vars, dep, opts, function(dep, _STAR_cljs_dep_set_STAR_7871, compiler) {
        return function(res) {
          if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res))) {
            return cljs.js.load_deps.call(null, bound_vars, ana_env, lib, cljs.core.next.call(null, deps), opts, cb);
          } else {
            return cb.call(null, res);
          }
        };
      }(dep, _STAR_cljs_dep_set_STAR_7871, compiler));
    } else {
      return cb.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), null], null));
    }
  } finally {
    cljs.analyzer._STAR_cljs_dep_set_STAR_ = _STAR_cljs_dep_set_STAR_7871;
  }
};
cljs.js.load_deps.cljs$lang$maxFixedArity = 6;
cljs.js.analyze_deps = function cljs$js$analyze_deps() {
  var args7877 = [];
  var len__5099__auto___7887 = arguments.length;
  var i__5100__auto___7888 = 0;
  while (true) {
    if (i__5100__auto___7888 < len__5099__auto___7887) {
      args7877.push(arguments[i__5100__auto___7888]);
      var G__7889 = i__5100__auto___7888 + 1;
      i__5100__auto___7888 = G__7889;
      continue;
    } else {
    }
    break;
  }
  var G__7879 = args7877.length;
  switch(G__7879) {
    case 5:
      return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7877.length)].join(""));;
  }
};
cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$5 = function(bound_vars, ana_env, lib, deps, cb) {
  return cljs.js.analyze_deps.call(null, bound_vars, ana_env, lib, deps, null, cb);
};
cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6 = function(bound_vars, ana_env, lib, deps, opts, cb) {
  var compiler = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089)).cljs$core$IFn$_invoke$arity$1(bound_vars));
  var _STAR_cljs_dep_set_STAR_7880 = cljs.analyzer._STAR_cljs_dep_set_STAR_;
  cljs.analyzer._STAR_cljs_dep_set_STAR_ = cljs.core.vary_meta.call(null, cljs.core.conj.call(null, (new cljs.core.Keyword(null, "*cljs-dep-set*", "*cljs-dep-set*", -73964612)).cljs$core$IFn$_invoke$arity$1(bound_vars), lib), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "dep-path", "dep-path", 723826558)], null), cljs.core.conj, lib);
  try {
    if (cljs.core.every_QMARK_.call(null, function(_STAR_cljs_dep_set_STAR_7880, compiler) {
      return function(p1__7876_SHARP_) {
        return !cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "*cljs-dep-set*", "*cljs-dep-set*", -73964612)).cljs$core$IFn$_invoke$arity$1(bound_vars), p1__7876_SHARP_);
      };
    }(_STAR_cljs_dep_set_STAR_7880, compiler), deps)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Circular dependency detected "), cljs.core.str((new cljs.core.Keyword(null, "dep-path", "dep-path", 723826558)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "*cljs-dep-set*", "*cljs-dep-set*", -73964612)).cljs$core$IFn$_invoke$arity$1(bound_vars))))].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", 
      "every?", 2083724064, null), cljs.core.list(new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "p1__7876#", "p1__7876#", 1099640225, null)], null), cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), cljs.core.list(new cljs.core.Keyword(null, "*cljs-dep-set*", "*cljs-dep-set*", 
      -73964612), new cljs.core.Symbol(null, "bound-vars", "bound-vars", 1684649184, null)), new cljs.core.Symbol(null, "p1__7876#", "p1__7876#", 1099640225, null)))), new cljs.core.Symbol(null, "deps", "deps", -771075450, null))))].join(""));
    }
    if (cljs.core.seq.call(null, deps)) {
      var dep = cljs.core.first.call(null, deps);
      try {
        return (new cljs.core.Keyword(null, "*load-fn*", "*load-fn*", 2055642106)).cljs$core$IFn$_invoke$arity$1(bound_vars).call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), dep, new cljs.core.Keyword(null, "path", "path", -188191168), cljs.js.ns__GT_relpath.call(null, dep)], null), function(dep, _STAR_cljs_dep_set_STAR_7880, compiler) {
          return function(resource) {
            if (cljs.core.map_QMARK_.call(null, resource) || resource == null) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("*load-fn* may only return a map or nil"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "resource", "resource", 1892430363, null)), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, 
              "resource", "resource", 1892430363, null)))))].join(""));
            }
            if (cljs.core.truth_(resource)) {
              var map__7882 = resource;
              var map__7882__$1 = (!(map__7882 == null) ? map__7882.cljs$lang$protocol_mask$partition0$ & 64 || map__7882.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7882) : map__7882;
              var name = cljs.core.get.call(null, map__7882__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
              var lang = cljs.core.get.call(null, map__7882__$1, new cljs.core.Keyword(null, "lang", "lang", -1819677104));
              var source = cljs.core.get.call(null, map__7882__$1, new cljs.core.Keyword(null, "source", "source", -433931539));
              var pred__7884 = cljs.core._EQ_;
              var expr__7885 = lang;
              if (cljs.core.truth_(pred__7884.call(null, new cljs.core.Keyword(null, "clj", "clj", -660495428), expr__7885))) {
                return cljs.js.analyze_STAR_.call(null, bound_vars, source, name, opts, function(pred__7884, expr__7885, map__7882, map__7882__$1, name, lang, source, dep, _STAR_cljs_dep_set_STAR_7880, compiler) {
                  return function(res) {
                    if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res))) {
                      return cljs.js.analyze_deps.call(null, bound_vars, ana_env, lib, cljs.core.next.call(null, deps), opts, cb);
                    } else {
                      return cb.call(null, res);
                    }
                  };
                }(pred__7884, expr__7885, map__7882, map__7882__$1, name, lang, source, dep, _STAR_cljs_dep_set_STAR_7880, compiler));
              } else {
                if (cljs.core.truth_(pred__7884.call(null, new cljs.core.Keyword(null, "js", "js", 1768080579), expr__7885))) {
                  return cljs.js.analyze_deps.call(null, bound_vars, ana_env, lib, cljs.core.next.call(null, deps), opts, cb);
                } else {
                  return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, ana_env, [cljs.core.str("Invalid :lang specified "), cljs.core.str(lang), cljs.core.str(", only :clj or :js allowed")].join("")));
                }
              }
            } else {
              return cb.call(null, cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, ana_env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605), dep, new cljs.core.Keyword(null, "js-provide", "js-provide", 1052912493), cljs.core.name.call(null, dep)], null)))));
            }
          };
        }(dep, _STAR_cljs_dep_set_STAR_7880, compiler));
      } catch (e7881) {
        var cause = e7881;
        return cb.call(null, cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, ana_env, [cljs.core.str("Could not analyze dep "), cljs.core.str(dep)].join(""), cause)));
      }
    } else {
      return cb.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), null], null));
    }
  } finally {
    cljs.analyzer._STAR_cljs_dep_set_STAR_ = _STAR_cljs_dep_set_STAR_7880;
  }
};
cljs.js.analyze_deps.cljs$lang$maxFixedArity = 6;
cljs.js.load_macros = function cljs$js$load_macros(bound_vars, k, macros, reload, reloads, opts, cb) {
  if (cljs.core.seq.call(null, macros)) {
    var nsym = cljs.core.first.call(null, cljs.core.vals.call(null, macros));
    var k__$1 = function() {
      var or__4060__auto__ = k.call(null, reload);
      if (cljs.core.truth_(or__4060__auto__)) {
        return or__4060__auto__;
      } else {
        var or__4060__auto____$1 = cljs.core.get_in.call(null, reloads, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, nsym], null));
        if (cljs.core.truth_(or__4060__auto____$1)) {
          return or__4060__auto____$1;
        } else {
          var and__4048__auto__ = cljs.core._EQ_.call(null, nsym, cljs.core.name);
          if (and__4048__auto__) {
            var and__4048__auto____$1 = (new cljs.core.Keyword(null, "*reload-macros*", "*reload-macros*", -820635806)).cljs$core$IFn$_invoke$arity$1(bound_vars);
            if (cljs.core.truth_(and__4048__auto____$1)) {
              return new cljs.core.Keyword(null, "reload", "reload", 863702807);
            } else {
              return and__4048__auto____$1;
            }
          } else {
            return and__4048__auto__;
          }
        }
      }
    }();
    return cljs.js.require.call(null, bound_vars, nsym, k__$1, cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "macros-ns", "macros-ns", 1626844933), true), function(nsym, k__$1) {
      return function(res) {
        if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res))) {
          return cljs$js$load_macros.call(null, bound_vars, k__$1, cljs.core.next.call(null, macros), reload, reloads, opts, cb);
        } else {
          return cb.call(null, res);
        }
      };
    }(nsym, k__$1));
  } else {
    return cb.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), null], null));
  }
};
cljs.js.ns_side_effects = function cljs$js$ns_side_effects() {
  var args7891 = [];
  var len__5099__auto___7907 = arguments.length;
  var i__5100__auto___7908 = 0;
  while (true) {
    if (i__5100__auto___7908 < len__5099__auto___7907) {
      args7891.push(arguments[i__5100__auto___7908]);
      var G__7909 = i__5100__auto___7908 + 1;
      i__5100__auto___7908 = G__7909;
      continue;
    } else {
    }
    break;
  }
  var G__7893 = args7891.length;
  switch(G__7893) {
    case 5:
      return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7891.length)].join(""));;
  }
};
cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5 = function(bound_vars, ana_env, ast, opts, cb) {
  return cljs.js.ns_side_effects.call(null, false, bound_vars, ana_env, ast, opts, cb);
};
cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6 = function(load, bound_vars, ana_env, p__7894, opts, cb) {
  var map__7895 = p__7894;
  var map__7895__$1 = (!(map__7895 == null) ? map__7895.cljs$lang$protocol_mask$partition0$ & 64 || map__7895.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7895) : map__7895;
  var ast = map__7895__$1;
  var op = cljs.core.get.call(null, map__7895__$1, new cljs.core.Keyword(null, "op", "op", -1882987955));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "verbose", "verbose", 1694226060)).cljs$core$IFn$_invoke$arity$1(opts))) {
    cljs.js.debug_prn.call(null, "Namespace side effects for", (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast));
  } else {
  }
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "ns", "ns", 441598760), op)) {
    var map__7897 = ast;
    var map__7897__$1 = (!(map__7897 == null) ? map__7897.cljs$lang$protocol_mask$partition0$ & 64 || map__7897.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7897) : map__7897;
    var deps = cljs.core.get.call(null, map__7897__$1, new cljs.core.Keyword(null, "deps", "deps", 1883360319));
    var uses = cljs.core.get.call(null, map__7897__$1, new cljs.core.Keyword(null, "uses", "uses", 232664692));
    var requires = cljs.core.get.call(null, map__7897__$1, new cljs.core.Keyword(null, "requires", "requires", -1201390927));
    var require_macros = cljs.core.get.call(null, map__7897__$1, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416));
    var use_macros = cljs.core.get.call(null, map__7897__$1, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393));
    var reload = cljs.core.get.call(null, map__7897__$1, new cljs.core.Keyword(null, "reload", "reload", 863702807));
    var reloads = cljs.core.get.call(null, map__7897__$1, new cljs.core.Keyword(null, "reloads", "reloads", 610698522));
    var env = (new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089)).cljs$core$IFn$_invoke$arity$1(bound_vars);
    var check_uses_and_load_macros = function(map__7897, map__7897__$1, deps, uses, requires, require_macros, use_macros, reload, reloads, env, map__7895, map__7895__$1, ast, op) {
      return function cljs$js$check_uses_and_load_macros(res) {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res))) {
          return cb.call(null, res);
        } else {
          var res__$1 = function() {
            try {
              if (cljs.core.truth_(function() {
                var and__4048__auto__ = (new cljs.core.Keyword(null, "*analyze-deps*", "*analyze-deps*", -29540427)).cljs$core$IFn$_invoke$arity$1(bound_vars);
                if (cljs.core.truth_(and__4048__auto__)) {
                  return cljs.core.seq.call(null, uses);
                } else {
                  return and__4048__auto__;
                }
              }())) {
                if (cljs.core.truth_((new cljs.core.Keyword(null, "verbose", "verbose", 1694226060)).cljs$core$IFn$_invoke$arity$1(opts))) {
                  cljs.js.debug_prn.call(null, "Checking uses");
                } else {
                }
                cljs.analyzer.check_uses.call(null, uses, env);
                return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), null], null);
              } else {
                return null;
              }
            } catch (e7905) {
              var cause = e7905;
              return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, ana_env, [cljs.core.str("Could not parse ns form "), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast))].join(""), cause));
            }
          }();
          if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res__$1))) {
            return cb.call(null, res__$1);
          } else {
            if (cljs.core.truth_((new cljs.core.Keyword(null, "*load-macros*", "*load-macros*", 640729006)).cljs$core$IFn$_invoke$arity$1(bound_vars))) {
              if (cljs.core.truth_((new cljs.core.Keyword(null, "verbose", "verbose", 1694226060)).cljs$core$IFn$_invoke$arity$1(opts))) {
                cljs.js.debug_prn.call(null, "Processing :use-macros for", (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast));
              } else {
              }
              return cljs.js.load_macros.call(null, bound_vars, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), use_macros, reload, reloads, opts, function(res__$1, map__7897, map__7897__$1, deps, uses, requires, require_macros, use_macros, reload, reloads, env, map__7895, map__7895__$1, ast, op) {
                return function(res__$2) {
                  if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res__$2))) {
                    return cb.call(null, res__$2);
                  } else {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "verbose", "verbose", 1694226060)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      cljs.js.debug_prn.call(null, "Processing :require-macros for", (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast));
                    } else {
                    }
                    return cljs.js.load_macros.call(null, bound_vars, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), require_macros, reloads, reloads, opts, function(res__$1, map__7897, map__7897__$1, deps, uses, requires, require_macros, use_macros, reload, reloads, env, map__7895, map__7895__$1, ast, op) {
                      return function(res__$3) {
                        if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res__$3))) {
                          return cb.call(null, res__$3);
                        } else {
                          var res__$4 = function() {
                            try {
                              if (cljs.core.seq.call(null, use_macros)) {
                                if (cljs.core.truth_((new cljs.core.Keyword(null, "verbose", "verbose", 1694226060)).cljs$core$IFn$_invoke$arity$1(opts))) {
                                  cljs.js.debug_prn.call(null, "Checking :use-macros for", (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast));
                                } else {
                                }
                                cljs.analyzer.check_use_macros.call(null, use_macros, env);
                              } else {
                              }
                              return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), null], null);
                            } catch (e7906) {
                              var cause = e7906;
                              return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, ana_env, [cljs.core.str("Could not parse ns form "), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast))].join(""), cause));
                            }
                          }();
                          if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res__$4))) {
                            return cb.call(null, res__$4);
                          } else {
                            return cb.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), ast], null));
                          }
                        }
                      };
                    }(res__$1, map__7897, map__7897__$1, deps, uses, requires, require_macros, use_macros, reload, reloads, env, map__7895, map__7895__$1, ast, op));
                  }
                };
              }(res__$1, map__7897, map__7897__$1, deps, uses, requires, require_macros, use_macros, reload, reloads, env, map__7895, map__7895__$1, ast, op));
            } else {
              return cb.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), ast], null));
            }
          }
        }
      };
    }(map__7897, map__7897__$1, deps, uses, requires, require_macros, use_macros, reload, reloads, env, map__7895, map__7895__$1, ast, op);
    if (cljs.core.truth_(function() {
      var and__4048__auto__ = load;
      if (cljs.core.truth_(and__4048__auto__)) {
        return cljs.core.seq.call(null, deps);
      } else {
        return and__4048__auto__;
      }
    }())) {
      return cljs.js.load_deps.call(null, bound_vars, ana_env, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast), deps, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "macros-ns", "macros-ns", 1626844933)), check_uses_and_load_macros);
    } else {
      if (cljs.core.truth_(function() {
        var and__4048__auto__ = cljs.core.not.call(null, load);
        if (and__4048__auto__) {
          var and__4048__auto____$1 = (new cljs.core.Keyword(null, "*analyze-deps*", "*analyze-deps*", -29540427)).cljs$core$IFn$_invoke$arity$1(bound_vars);
          if (cljs.core.truth_(and__4048__auto____$1)) {
            return cljs.core.seq.call(null, deps);
          } else {
            return and__4048__auto____$1;
          }
        } else {
          return and__4048__auto__;
        }
      }())) {
        return cljs.js.analyze_deps.call(null, bound_vars, ana_env, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast), deps, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "macros-ns", "macros-ns", 1626844933)), check_uses_and_load_macros);
      } else {
        return check_uses_and_load_macros.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), null], null));
      }
    }
  } else {
    return cb.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), ast], null));
  }
};
cljs.js.ns_side_effects.cljs$lang$maxFixedArity = 6;
cljs.js.analyze_STAR_ = function cljs$js$analyze_STAR_(bound_vars, source, name, opts, cb) {
  var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.call(null, source, 1, name);
  var eof = {};
  var aenv = cljs.analyzer.empty_env.call(null);
  var bound_vars__$1 = function() {
    var G__7932 = cljs.core.merge.call(null, bound_vars, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "*cljs-ns*", "*cljs-ns*", 565777432), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.Keyword(null, "*ns*", "*ns*", -900377709), cljs.core.create_ns.call(null, cljs.analyzer._STAR_cljs_ns_STAR_)], null));
    var G__7932__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__7932, new cljs.core.Keyword(null, "*sm-data*", "*sm-data*", 1341435219), cljs.js.sm_data.call(null)) : G__7932;
    return G__7932__$1;
  }();
  return function(rdr, eof, aenv, bound_vars__$1) {
    return function cljs$js$analyze_STAR__$_analyze_loop() {
      while (true) {
        var _STAR_compiler_STAR_7941 = cljs.env._STAR_compiler_STAR_;
        var _STAR_cljs_ns_STAR_7942 = cljs.analyzer._STAR_cljs_ns_STAR_;
        var _STAR_ns_STAR_7943 = cljs.core._STAR_ns_STAR_;
        var _STAR_data_readers_STAR_7944 = cljs.tools.reader._STAR_data_readers_STAR_;
        var _STAR_source_map_data_STAR_7945 = cljs.compiler._STAR_source_map_data_STAR_;
        cljs.env._STAR_compiler_STAR_ = (new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.analyzer._STAR_cljs_ns_STAR_ = (new cljs.core.Keyword(null, "*cljs-ns*", "*cljs-ns*", 565777432)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.core._STAR_ns_STAR_ = (new cljs.core.Keyword(null, "*ns*", "*ns*", -900377709)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.tools.reader._STAR_data_readers_STAR_ = (new cljs.core.Keyword(null, "*data-readers*", "*data-readers*", -371480469)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.compiler._STAR_source_map_data_STAR_ = (new cljs.core.Keyword(null, "*sm-data*", "*sm-data*", 1341435219)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        try {
          var res = function() {
            try {
              return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), cljs.tools.reader.read.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "eof", "eof", -489063237), eof, new cljs.core.Keyword(null, "read-cond", "read-cond", 1056899244), new cljs.core.Keyword(null, "allow", "allow", -1857325745), new cljs.core.Keyword(null, "features", "features", -1146962336), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
              1, [new cljs.core.Keyword(null, "cljs", "cljs", 1492417629), null], null), null)], null), rdr)], null);
            } catch (e7946) {
              var cause = e7946;
              return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, aenv, [cljs.core.str("Could not analyze "), cljs.core.str(name)].join(""), cause));
            }
          }();
          if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res))) {
            return cb.call(null, res);
          } else {
            var form = (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(res);
            if (!(eof === form)) {
              var aenv__$1 = function() {
                var G__7947 = cljs.core.assoc.call(null, aenv, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_));
                var G__7947__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__7947, new cljs.core.Keyword(null, "context", "context", -830191113), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(opts)) : G__7947;
                var G__7947__$2 = cljs.core.truth_((new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__7947__$1, new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320), true) : G__7947__$1;
                return G__7947__$2;
              }();
              var res__$1 = function() {
                try {
                  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), cljs.analyzer.analyze.call(null, aenv__$1, form, null, opts)], null);
                } catch (e7948) {
                  var cause = e7948;
                  return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, aenv__$1, [cljs.core.str("Could not analyze "), cljs.core.str(name)].join(""), cause));
                }
              }();
              if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res__$1))) {
                return cb.call(null, res__$1);
              } else {
                var ast = (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(res__$1);
                if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "ns", "ns", 441598760), (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(ast))) {
                  return cljs.js.ns_side_effects.call(null, bound_vars__$1, aenv__$1, ast, opts, function(ast, aenv__$1, res__$1, form, res, _STAR_compiler_STAR_7941, _STAR_cljs_ns_STAR_7942, _STAR_ns_STAR_7943, _STAR_data_readers_STAR_7944, _STAR_source_map_data_STAR_7945, rdr, eof, aenv, bound_vars__$1) {
                    return function(res__$2) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res__$2))) {
                        return cb.call(null, res__$2);
                      } else {
                        return cljs$js$analyze_STAR__$_analyze_loop.call(null);
                      }
                    };
                  }(ast, aenv__$1, res__$1, form, res, _STAR_compiler_STAR_7941, _STAR_cljs_ns_STAR_7942, _STAR_ns_STAR_7943, _STAR_data_readers_STAR_7944, _STAR_source_map_data_STAR_7945, rdr, eof, aenv, bound_vars__$1));
                } else {
                  continue;
                }
              }
            } else {
              return cb.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), null], null));
            }
          }
        } finally {
          cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_7945;
          cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_7944;
          cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_7943;
          cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_7942;
          cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_7941;
        }
        break;
      }
    };
  }(rdr, eof, aenv, bound_vars__$1).call(null);
};
cljs.js.analyze = function cljs$js$analyze() {
  var args7949 = [];
  var len__5099__auto___7952 = arguments.length;
  var i__5100__auto___7953 = 0;
  while (true) {
    if (i__5100__auto___7953 < len__5099__auto___7952) {
      args7949.push(arguments[i__5100__auto___7953]);
      var G__7954 = i__5100__auto___7953 + 1;
      i__5100__auto___7953 = G__7954;
      continue;
    } else {
    }
    break;
  }
  var G__7951 = args7949.length;
  switch(G__7951) {
    case 3:
      return cljs.js.analyze.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.js.analyze.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.js.analyze.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7949.length)].join(""));;
  }
};
cljs.js.analyze.cljs$core$IFn$_invoke$arity$3 = function(state, source, cb) {
  return cljs.js.analyze.call(null, state, source, null, cb);
};
cljs.js.analyze.cljs$core$IFn$_invoke$arity$4 = function(state, source, name, cb) {
  return cljs.js.analyze.call(null, state, source, name, null, cb);
};
cljs.js.analyze.cljs$core$IFn$_invoke$arity$5 = function(state, source, name, opts, cb) {
  if (cljs.core.truth_(cljs.js.atom_QMARK_.call(null, state))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "atom?", "atom?", -1007535292, null), new cljs.core.Symbol(null, "state", "state", -348086572, null))))].join(""));
  }
  if (typeof source === "string") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "source", "source", 1206599988, null))))].join(""));
  }
  if (cljs.core.truth_(cljs.js.valid_name_QMARK_.call(null, name))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-name?", "valid-name?", 1312075736, null), new cljs.core.Symbol(null, "name", "name", -810760592, null))))].join(""));
  }
  if (cljs.core.truth_(cljs.js.valid_opts_QMARK_.call(null, opts))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-opts?", "valid-opts?", 1000038576, null), new cljs.core.Symbol(null, "opts", "opts", 1795607228, null))))].join(""));
  }
  if (cljs.core.fn_QMARK_.call(null, cb)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", 1820990818, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null))))].join(""));
  }
  return cljs.js.analyze_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089), state, new cljs.core.Keyword(null, "*data-readers*", "*data-readers*", -371480469), cljs.tagged_literals._STAR_cljs_data_readers_STAR_, new cljs.core.Keyword(null, "*load-fn*", "*load-fn*", 2055642106), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "load", "load", -1318641184)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.js._STAR_load_fn_STAR_;
    }
  }(), new cljs.core.Keyword(null, "*eval-fn*", "*eval-fn*", -217221128), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "eval", "eval", -1103567905)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.js._STAR_eval_fn_STAR_;
    }
  }()], null), source, name, opts, cb);
};
cljs.js.analyze.cljs$lang$maxFixedArity = 5;
cljs.js.eval_STAR_ = function cljs$js$eval_STAR_(bound_vars, form, opts, cb) {
  var bound_vars__$1 = function() {
    var G__7967 = cljs.core.merge.call(null, bound_vars, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "*cljs-ns*", "*cljs-ns*", 565777432), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.Keyword(null, "*ns*", "*ns*", -900377709), cljs.core.create_ns.call(null, cljs.analyzer._STAR_cljs_ns_STAR_)], null));
    var G__7967__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__7967, new cljs.core.Keyword(null, "*sm-data*", "*sm-data*", 1341435219), cljs.js.sm_data.call(null)) : G__7967;
    return G__7967__$1;
  }();
  var _STAR_compiler_STAR_7968 = cljs.env._STAR_compiler_STAR_;
  var _STAR_eval_fn_STAR_7969 = cljs.js._STAR_eval_fn_STAR_;
  var _STAR_cljs_ns_STAR_7970 = cljs.analyzer._STAR_cljs_ns_STAR_;
  var _STAR_ns_STAR_7971 = cljs.core._STAR_ns_STAR_;
  var _STAR_data_readers_STAR_7972 = cljs.tools.reader._STAR_data_readers_STAR_;
  var _STAR_source_map_data_STAR_7973 = cljs.compiler._STAR_source_map_data_STAR_;
  cljs.env._STAR_compiler_STAR_ = (new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
  cljs.js._STAR_eval_fn_STAR_ = (new cljs.core.Keyword(null, "*eval-fn*", "*eval-fn*", -217221128)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
  cljs.analyzer._STAR_cljs_ns_STAR_ = (new cljs.core.Keyword(null, "*cljs-ns*", "*cljs-ns*", 565777432)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
  cljs.core._STAR_ns_STAR_ = (new cljs.core.Keyword(null, "*ns*", "*ns*", -900377709)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
  cljs.tools.reader._STAR_data_readers_STAR_ = (new cljs.core.Keyword(null, "*data-readers*", "*data-readers*", -371480469)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
  cljs.compiler._STAR_source_map_data_STAR_ = (new cljs.core.Keyword(null, "*sm-data*", "*sm-data*", 1341435219)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
  try {
    var aenv = cljs.analyzer.empty_env.call(null);
    var aenv__$1 = function() {
      var G__7974 = cljs.core.assoc.call(null, aenv, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_));
      var G__7974__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__7974, new cljs.core.Keyword(null, "context", "context", -830191113), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(opts)) : G__7974;
      var G__7974__$2 = cljs.core.truth_((new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__7974__$1, new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320), true) : G__7974__$1;
      return G__7974__$2;
    }();
    var res = function() {
      try {
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), cljs.analyzer.analyze.call(null, aenv__$1, form, null, opts)], null);
      } catch (e7975) {
        var cause = e7975;
        return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, aenv__$1, [cljs.core.str("Could not eval "), cljs.core.str(form)].join(""), cause));
      }
    }();
    if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res))) {
      return cb.call(null, res);
    } else {
      var ast = (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(res);
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "ns", "ns", 441598760), (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(ast))) {
        return cljs.js.ns_side_effects.call(null, true, bound_vars__$1, aenv__$1, ast, opts, function(ast, aenv, aenv__$1, res, _STAR_compiler_STAR_7968, _STAR_eval_fn_STAR_7969, _STAR_cljs_ns_STAR_7970, _STAR_ns_STAR_7971, _STAR_data_readers_STAR_7972, _STAR_source_map_data_STAR_7973, bound_vars__$1) {
          return function(res__$1) {
            if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res__$1))) {
              return cb.call(null, res__$1);
            } else {
              var src = [cljs.core.str('goog.provide("'), cljs.core.str(cljs.core.munge.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast))), cljs.core.str('")')].join("");
              return cb.call(null, cljs.js._STAR_eval_fn_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "lang", "lang", -1819677104), new cljs.core.Keyword(null, "clj", "clj", -660495428), new cljs.core.Keyword(null, "source", "source", -433931539), src], null)));
            }
          };
        }(ast, aenv, aenv__$1, res, _STAR_compiler_STAR_7968, _STAR_eval_fn_STAR_7969, _STAR_cljs_ns_STAR_7970, _STAR_ns_STAR_7971, _STAR_data_readers_STAR_7972, _STAR_source_map_data_STAR_7973, bound_vars__$1));
      } else {
        var src = function() {
          var sb__5015__auto__ = new goog.string.StringBuffer;
          var _STAR_print_newline_STAR_7976_7978 = cljs.core._STAR_print_newline_STAR_;
          var _STAR_print_fn_STAR_7977_7979 = cljs.core._STAR_print_fn_STAR_;
          cljs.core._STAR_print_newline_STAR_ = true;
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_7976_7978, _STAR_print_fn_STAR_7977_7979, sb__5015__auto__, ast, aenv, aenv__$1, res, _STAR_compiler_STAR_7968, _STAR_eval_fn_STAR_7969, _STAR_cljs_ns_STAR_7970, _STAR_ns_STAR_7971, _STAR_data_readers_STAR_7972, _STAR_source_map_data_STAR_7973, bound_vars__$1) {
            return function(x__5016__auto__) {
              return sb__5015__auto__.append(x__5016__auto__);
            };
          }(_STAR_print_newline_STAR_7976_7978, _STAR_print_fn_STAR_7977_7979, sb__5015__auto__, ast, aenv, aenv__$1, res, _STAR_compiler_STAR_7968, _STAR_eval_fn_STAR_7969, _STAR_cljs_ns_STAR_7970, _STAR_ns_STAR_7971, _STAR_data_readers_STAR_7972, _STAR_source_map_data_STAR_7973, bound_vars__$1);
          try {
            cljs.compiler.emit.call(null, ast);
          } finally {
            cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_7977_7979;
            cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_7976_7978;
          }
          return [cljs.core.str(sb__5015__auto__)].join("");
        }();
        return cb.call(null, cljs.js._STAR_eval_fn_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "lang", "lang", -1819677104), new cljs.core.Keyword(null, "clj", "clj", -660495428), new cljs.core.Keyword(null, "source", "source", -433931539), src], null)));
      }
    }
  } finally {
    cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_7973;
    cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_7972;
    cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_7971;
    cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_7970;
    cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_7969;
    cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_7968;
  }
};
cljs.js.eval = function cljs$js$eval() {
  var args7980 = [];
  var len__5099__auto___7983 = arguments.length;
  var i__5100__auto___7984 = 0;
  while (true) {
    if (i__5100__auto___7984 < len__5099__auto___7983) {
      args7980.push(arguments[i__5100__auto___7984]);
      var G__7985 = i__5100__auto___7984 + 1;
      i__5100__auto___7984 = G__7985;
      continue;
    } else {
    }
    break;
  }
  var G__7982 = args7980.length;
  switch(G__7982) {
    case 3:
      return cljs.js.eval.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.js.eval.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7980.length)].join(""));;
  }
};
cljs.js.eval.cljs$core$IFn$_invoke$arity$3 = function(state, form, cb) {
  return cljs.js.eval.call(null, state, form, null, cb);
};
cljs.js.eval.cljs$core$IFn$_invoke$arity$4 = function(state, form, opts, cb) {
  return cljs.js.eval_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089), state, new cljs.core.Keyword(null, "*cljs-ns*", "*cljs-ns*", 565777432), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.Keyword(null, "*ns*", "*ns*", -900377709), cljs.core.create_ns.call(null, new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null)), new cljs.core.Keyword(null, "*data-readers*", 
  "*data-readers*", -371480469), cljs.tagged_literals._STAR_cljs_data_readers_STAR_, new cljs.core.Keyword(null, "*analyze-deps*", "*analyze-deps*", -29540427), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "analyze-deps", "analyze-deps", 1000677285)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return true;
    }
  }(), new cljs.core.Keyword(null, "*load-macros*", "*load-macros*", 640729006), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "load-macros", "load-macros", 459797395)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return true;
    }
  }(), new cljs.core.Keyword(null, "*load-fn*", "*load-fn*", 2055642106), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "load", "load", -1318641184)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.js._STAR_load_fn_STAR_;
    }
  }(), new cljs.core.Keyword(null, "*eval-fn*", "*eval-fn*", -217221128), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "eval", "eval", -1103567905)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.js._STAR_eval_fn_STAR_;
    }
  }()], null), form, opts, cb);
};
cljs.js.eval.cljs$lang$maxFixedArity = 4;
cljs.js.compile_STAR_ = function cljs$js$compile_STAR_(bound_vars, source, name, opts, cb) {
  var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.call(null, source, 1, name);
  var eof = {};
  var aenv = cljs.analyzer.empty_env.call(null);
  var sb = new goog.string.StringBuffer;
  var bound_vars__$1 = function() {
    var G__8014 = cljs.core.merge.call(null, bound_vars, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "*cljs-ns*", "*cljs-ns*", 565777432), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.Keyword(null, "*ns*", "*ns*", -900377709), cljs.core.create_ns.call(null, cljs.analyzer._STAR_cljs_ns_STAR_)], null));
    var G__8014__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__8014, new cljs.core.Keyword(null, "*sm-data*", "*sm-data*", 1341435219), cljs.js.sm_data.call(null)) : G__8014;
    return G__8014__$1;
  }();
  return function(rdr, eof, aenv, sb, bound_vars__$1) {
    return function cljs$js$compile_STAR__$_compile_loop() {
      while (true) {
        var _STAR_compiler_STAR_8026 = cljs.env._STAR_compiler_STAR_;
        var _STAR_eval_fn_STAR_8027 = cljs.js._STAR_eval_fn_STAR_;
        var _STAR_cljs_ns_STAR_8028 = cljs.analyzer._STAR_cljs_ns_STAR_;
        var _STAR_ns_STAR_8029 = cljs.core._STAR_ns_STAR_;
        var _STAR_data_readers_STAR_8030 = cljs.tools.reader._STAR_data_readers_STAR_;
        var _STAR_source_map_data_STAR_8031 = cljs.compiler._STAR_source_map_data_STAR_;
        cljs.env._STAR_compiler_STAR_ = (new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.js._STAR_eval_fn_STAR_ = (new cljs.core.Keyword(null, "*eval-fn*", "*eval-fn*", -217221128)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.analyzer._STAR_cljs_ns_STAR_ = (new cljs.core.Keyword(null, "*cljs-ns*", "*cljs-ns*", 565777432)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.core._STAR_ns_STAR_ = (new cljs.core.Keyword(null, "*ns*", "*ns*", -900377709)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.tools.reader._STAR_data_readers_STAR_ = (new cljs.core.Keyword(null, "*data-readers*", "*data-readers*", -371480469)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.compiler._STAR_source_map_data_STAR_ = (new cljs.core.Keyword(null, "*sm-data*", "*sm-data*", 1341435219)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        try {
          var res = function() {
            try {
              return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), cljs.tools.reader.read.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "eof", "eof", -489063237), eof, new cljs.core.Keyword(null, "read-cond", "read-cond", 1056899244), new cljs.core.Keyword(null, "allow", "allow", -1857325745), new cljs.core.Keyword(null, "features", "features", -1146962336), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
              1, [new cljs.core.Keyword(null, "cljs", "cljs", 1492417629), null], null), null)], null), rdr)], null);
            } catch (e8032) {
              var cause = e8032;
              return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, aenv, [cljs.core.str("Could not compile "), cljs.core.str(name)].join(""), cause));
            }
          }();
          if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res))) {
            return cb.call(null, res);
          } else {
            var form = (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(res);
            if (!(eof === form)) {
              var aenv__$1 = function() {
                var G__8033 = cljs.core.assoc.call(null, aenv, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_));
                var G__8033__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__8033, new cljs.core.Keyword(null, "context", "context", -830191113), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(opts)) : G__8033;
                var G__8033__$2 = cljs.core.truth_((new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__8033__$1, new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320), true) : G__8033__$1;
                return G__8033__$2;
              }();
              var ast = function() {
                try {
                  return cljs.analyzer.analyze.call(null, aenv__$1, form, null, opts);
                } catch (e8034) {
                  var cause = e8034;
                  return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, aenv__$1, [cljs.core.str("Could not compile "), cljs.core.str(name)].join(""), cause));
                }
              }();
              sb.append(function() {
                var sb__5015__auto__ = new goog.string.StringBuffer;
                var _STAR_print_newline_STAR_8035_8037 = cljs.core._STAR_print_newline_STAR_;
                var _STAR_print_fn_STAR_8036_8038 = cljs.core._STAR_print_fn_STAR_;
                cljs.core._STAR_print_newline_STAR_ = true;
                cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_8035_8037, _STAR_print_fn_STAR_8036_8038, sb__5015__auto__, aenv__$1, ast, form, res, _STAR_compiler_STAR_8026, _STAR_eval_fn_STAR_8027, _STAR_cljs_ns_STAR_8028, _STAR_ns_STAR_8029, _STAR_data_readers_STAR_8030, _STAR_source_map_data_STAR_8031, rdr, eof, aenv, sb, bound_vars__$1) {
                  return function(x__5016__auto__) {
                    return sb__5015__auto__.append(x__5016__auto__);
                  };
                }(_STAR_print_newline_STAR_8035_8037, _STAR_print_fn_STAR_8036_8038, sb__5015__auto__, aenv__$1, ast, form, res, _STAR_compiler_STAR_8026, _STAR_eval_fn_STAR_8027, _STAR_cljs_ns_STAR_8028, _STAR_ns_STAR_8029, _STAR_data_readers_STAR_8030, _STAR_source_map_data_STAR_8031, rdr, eof, aenv, sb, bound_vars__$1);
                try {
                  cljs.compiler.emit.call(null, ast);
                } finally {
                  cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_8036_8038;
                  cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_8035_8037;
                }
                return [cljs.core.str(sb__5015__auto__)].join("");
              }());
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "ns", "ns", 441598760), (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(ast))) {
                return cljs.js.ns_side_effects.call(null, bound_vars__$1, aenv__$1, ast, opts, function(aenv__$1, ast, form, res, _STAR_compiler_STAR_8026, _STAR_eval_fn_STAR_8027, _STAR_cljs_ns_STAR_8028, _STAR_ns_STAR_8029, _STAR_data_readers_STAR_8030, _STAR_source_map_data_STAR_8031, rdr, eof, aenv, sb, bound_vars__$1) {
                  return function(res__$1) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res__$1))) {
                      return cb.call(null, res__$1);
                    } else {
                      return cljs$js$compile_STAR__$_compile_loop.call(null);
                    }
                  };
                }(aenv__$1, ast, form, res, _STAR_compiler_STAR_8026, _STAR_eval_fn_STAR_8027, _STAR_cljs_ns_STAR_8028, _STAR_ns_STAR_8029, _STAR_data_readers_STAR_8030, _STAR_source_map_data_STAR_8031, rdr, eof, aenv, sb, bound_vars__$1));
              } else {
                continue;
              }
            } else {
              if (cljs.core.truth_((new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(opts))) {
                cljs.js.append_source_map.call(null, cljs.env._STAR_compiler_STAR_, name, source, sb, cljs.core.deref.call(null, cljs.compiler._STAR_source_map_data_STAR_), opts);
              } else {
              }
              return cb.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), sb.toString()], null));
            }
          }
        } finally {
          cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_8031;
          cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_8030;
          cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_8029;
          cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_8028;
          cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_8027;
          cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_8026;
        }
        break;
      }
    };
  }(rdr, eof, aenv, sb, bound_vars__$1).call(null);
};
cljs.js.compile = function cljs$js$compile() {
  var args8039 = [];
  var len__5099__auto___8042 = arguments.length;
  var i__5100__auto___8043 = 0;
  while (true) {
    if (i__5100__auto___8043 < len__5099__auto___8042) {
      args8039.push(arguments[i__5100__auto___8043]);
      var G__8044 = i__5100__auto___8043 + 1;
      i__5100__auto___8043 = G__8044;
      continue;
    } else {
    }
    break;
  }
  var G__8041 = args8039.length;
  switch(G__8041) {
    case 3:
      return cljs.js.compile.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.js.compile.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.js.compile.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8039.length)].join(""));;
  }
};
cljs.js.compile.cljs$core$IFn$_invoke$arity$3 = function(state, source, cb) {
  return cljs.js.compile.call(null, state, source, null, cb);
};
cljs.js.compile.cljs$core$IFn$_invoke$arity$4 = function(state, source, name, cb) {
  return cljs.js.compile.call(null, state, source, name, null, cb);
};
cljs.js.compile.cljs$core$IFn$_invoke$arity$5 = function(state, source, name, opts, cb) {
  if (cljs.core.truth_(cljs.js.atom_QMARK_.call(null, state))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "atom?", "atom?", -1007535292, null), new cljs.core.Symbol(null, "state", "state", -348086572, null))))].join(""));
  }
  if (typeof source === "string") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "source", "source", 1206599988, null))))].join(""));
  }
  if (cljs.core.truth_(cljs.js.valid_name_QMARK_.call(null, name))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-name?", "valid-name?", 1312075736, null), new cljs.core.Symbol(null, "name", "name", -810760592, null))))].join(""));
  }
  if (cljs.core.truth_(cljs.js.valid_opts_QMARK_.call(null, opts))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-opts?", "valid-opts?", 1000038576, null), new cljs.core.Symbol(null, "opts", "opts", 1795607228, null))))].join(""));
  }
  if (cljs.core.fn_QMARK_.call(null, cb)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", 1820990818, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null))))].join(""));
  }
  return cljs.js.compile_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089), state, new cljs.core.Keyword(null, "*data-readers*", "*data-readers*", -371480469), cljs.tagged_literals._STAR_cljs_data_readers_STAR_, new cljs.core.Keyword(null, "*analyze-deps*", "*analyze-deps*", -29540427), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "analyze-deps", "analyze-deps", 1000677285)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return true;
    }
  }(), new cljs.core.Keyword(null, "*load-macros*", "*load-macros*", 640729006), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "load-macros", "load-macros", 459797395)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return true;
    }
  }(), new cljs.core.Keyword(null, "*load-fn*", "*load-fn*", 2055642106), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "load", "load", -1318641184)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.js._STAR_load_fn_STAR_;
    }
  }(), new cljs.core.Keyword(null, "*eval-fn*", "*eval-fn*", -217221128), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "eval", "eval", -1103567905)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.js._STAR_eval_fn_STAR_;
    }
  }(), new cljs.core.Keyword(null, "*sm-data*", "*sm-data*", 1341435219), cljs.core.truth_((new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.js.sm_data.call(null) : null], null), source, name, opts, cb);
};
cljs.js.compile.cljs$lang$maxFixedArity = 5;
cljs.js.eval_str_STAR_ = function cljs$js$eval_str_STAR_(bound_vars, source, name, opts, cb) {
  var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.call(null, source, 1, name);
  var eof = {};
  var aenv = cljs.analyzer.empty_env.call(null);
  var sb = new goog.string.StringBuffer;
  var bound_vars__$1 = function() {
    var G__8073 = cljs.core.merge.call(null, bound_vars, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "*cljs-ns*", "*cljs-ns*", 565777432), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.Keyword(null, "*ns*", "*ns*", -900377709), cljs.core.create_ns.call(null, cljs.analyzer._STAR_cljs_ns_STAR_)], null));
    var G__8073__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__8073, new cljs.core.Keyword(null, "*sm-data*", "*sm-data*", 1341435219), cljs.js.sm_data.call(null)) : G__8073;
    return G__8073__$1;
  }();
  if (cljs.core.truth_((new cljs.core.Keyword(null, "verbose", "verbose", 1694226060)).cljs$core$IFn$_invoke$arity$1(opts))) {
    cljs.js.debug_prn.call(null, "Evaluating", name);
  } else {
  }
  return function(rdr, eof, aenv, sb, bound_vars__$1) {
    return function cljs$js$eval_str_STAR__$_compile_loop(ns) {
      while (true) {
        var _STAR_compiler_STAR_8085 = cljs.env._STAR_compiler_STAR_;
        var _STAR_eval_fn_STAR_8086 = cljs.js._STAR_eval_fn_STAR_;
        var _STAR_cljs_ns_STAR_8087 = cljs.analyzer._STAR_cljs_ns_STAR_;
        var _STAR_ns_STAR_8088 = cljs.core._STAR_ns_STAR_;
        var _STAR_data_readers_STAR_8089 = cljs.tools.reader._STAR_data_readers_STAR_;
        var _STAR_source_map_data_STAR_8090 = cljs.compiler._STAR_source_map_data_STAR_;
        cljs.env._STAR_compiler_STAR_ = (new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.js._STAR_eval_fn_STAR_ = (new cljs.core.Keyword(null, "*eval-fn*", "*eval-fn*", -217221128)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.analyzer._STAR_cljs_ns_STAR_ = ns;
        cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.call(null, ns);
        cljs.tools.reader._STAR_data_readers_STAR_ = (new cljs.core.Keyword(null, "*data-readers*", "*data-readers*", -371480469)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        cljs.compiler._STAR_source_map_data_STAR_ = (new cljs.core.Keyword(null, "*sm-data*", "*sm-data*", 1341435219)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
        try {
          var res = function() {
            try {
              return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), cljs.tools.reader.read.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "eof", "eof", -489063237), eof, new cljs.core.Keyword(null, "read-cond", "read-cond", 1056899244), new cljs.core.Keyword(null, "allow", "allow", -1857325745), new cljs.core.Keyword(null, "features", "features", -1146962336), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
              1, [new cljs.core.Keyword(null, "cljs", "cljs", 1492417629), null], null), null)], null), rdr)], null);
            } catch (e8091) {
              var cause = e8091;
              return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, aenv, [cljs.core.str("Could not eval "), cljs.core.str(name)].join(""), cause));
            }
          }();
          if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res))) {
            return cb.call(null, res);
          } else {
            var form = (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(res);
            if (!(eof === form)) {
              var aenv__$1 = function() {
                var G__8092 = cljs.core.assoc.call(null, aenv, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, ns));
                var G__8092__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__8092, new cljs.core.Keyword(null, "context", "context", -830191113), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(opts)) : G__8092;
                var G__8092__$2 = cljs.core.truth_((new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320)).cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core.assoc.call(null, G__8092__$1, new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320), true) : G__8092__$1;
                return G__8092__$2;
              }();
              var res__$1 = function() {
                try {
                  return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "value", "value", 305978217), cljs.analyzer.analyze.call(null, aenv__$1, form, null, opts)], null);
                } catch (e8093) {
                  var cause = e8093;
                  return cljs.js.wrap_error.call(null, cljs.analyzer.error.call(null, aenv__$1, [cljs.core.str("Could not eval "), cljs.core.str(name)].join(""), cause));
                }
              }();
              if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res__$1))) {
                return cb.call(null, res__$1);
              } else {
                var ast = (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(res__$1);
                var ns_SINGLEQUOTE_ = cljs.analyzer._STAR_cljs_ns_STAR_;
                if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "ns", "ns", 441598760), (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(ast))) {
                  sb.append([cljs.core.str('goog.provide("'), cljs.core.str(cljs.core.munge.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast))), cljs.core.str('");\n')].join(""));
                  return cljs.js.ns_side_effects.call(null, true, bound_vars__$1, aenv__$1, ast, opts, function(ns, ast, ns_SINGLEQUOTE_, aenv__$1, res__$1, form, res, _STAR_compiler_STAR_8085, _STAR_eval_fn_STAR_8086, _STAR_cljs_ns_STAR_8087, _STAR_ns_STAR_8088, _STAR_data_readers_STAR_8089, _STAR_source_map_data_STAR_8090, rdr, eof, aenv, sb, bound_vars__$1) {
                    return function(res__$2) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res__$2))) {
                        return cb.call(null, res__$2);
                      } else {
                        return cljs$js$eval_str_STAR__$_compile_loop.call(null, ns_SINGLEQUOTE_);
                      }
                    };
                  }(ns, ast, ns_SINGLEQUOTE_, aenv__$1, res__$1, form, res, _STAR_compiler_STAR_8085, _STAR_eval_fn_STAR_8086, _STAR_cljs_ns_STAR_8087, _STAR_ns_STAR_8088, _STAR_data_readers_STAR_8089, _STAR_source_map_data_STAR_8090, rdr, eof, aenv, sb, bound_vars__$1));
                } else {
                  sb.append(function() {
                    var sb__5015__auto__ = new goog.string.StringBuffer;
                    var _STAR_print_newline_STAR_8094_8096 = cljs.core._STAR_print_newline_STAR_;
                    var _STAR_print_fn_STAR_8095_8097 = cljs.core._STAR_print_fn_STAR_;
                    cljs.core._STAR_print_newline_STAR_ = true;
                    cljs.core._STAR_print_fn_STAR_ = function(ns, _STAR_print_newline_STAR_8094_8096, _STAR_print_fn_STAR_8095_8097, sb__5015__auto__, ast, ns_SINGLEQUOTE_, aenv__$1, res__$1, form, res, _STAR_compiler_STAR_8085, _STAR_eval_fn_STAR_8086, _STAR_cljs_ns_STAR_8087, _STAR_ns_STAR_8088, _STAR_data_readers_STAR_8089, _STAR_source_map_data_STAR_8090, rdr, eof, aenv, sb, bound_vars__$1) {
                      return function(x__5016__auto__) {
                        return sb__5015__auto__.append(x__5016__auto__);
                      };
                    }(ns, _STAR_print_newline_STAR_8094_8096, _STAR_print_fn_STAR_8095_8097, sb__5015__auto__, ast, ns_SINGLEQUOTE_, aenv__$1, res__$1, form, res, _STAR_compiler_STAR_8085, _STAR_eval_fn_STAR_8086, _STAR_cljs_ns_STAR_8087, _STAR_ns_STAR_8088, _STAR_data_readers_STAR_8089, _STAR_source_map_data_STAR_8090, rdr, eof, aenv, sb, bound_vars__$1);
                    try {
                      cljs.compiler.emit.call(null, ast);
                    } finally {
                      cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_8095_8097;
                      cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_8094_8096;
                    }
                    return [cljs.core.str(sb__5015__auto__)].join("");
                  }());
                  var G__8098 = ns_SINGLEQUOTE_;
                  ns = G__8098;
                  continue;
                }
              }
            } else {
              var js_source = sb.toString();
              var evalm = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "lang", "lang", -1819677104), new cljs.core.Keyword(null, "clj", "clj", -660495428), new cljs.core.Keyword(null, "name", "name", 1843675177), name, new cljs.core.Keyword(null, "path", "path", -188191168), cljs.js.ns__GT_relpath.call(null, name), new cljs.core.Keyword(null, "source", "source", -433931539), js_source], null);
              if (cljs.core.truth_((new cljs.core.Keyword(null, "verbose", "verbose", 1694226060)).cljs$core$IFn$_invoke$arity$1(opts))) {
                cljs.js.debug_prn.call(null, js_source);
              } else {
              }
              if (cljs.core.truth_((new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(opts))) {
                cljs.js.append_source_map.call(null, cljs.env._STAR_compiler_STAR_, name, source, sb, cljs.core.deref.call(null, cljs.compiler._STAR_source_map_data_STAR_), opts);
              } else {
              }
              return cb.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns, new cljs.core.Keyword(null, "value", "value", 305978217), cljs.js._STAR_eval_fn_STAR_.call(null, evalm)], null));
            }
          }
        } finally {
          cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_8090;
          cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_8089;
          cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_8088;
          cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_8087;
          cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_8086;
          cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_8085;
        }
        break;
      }
    };
  }(rdr, eof, aenv, sb, bound_vars__$1).call(null, (new cljs.core.Keyword(null, "*cljs-ns*", "*cljs-ns*", 565777432)).cljs$core$IFn$_invoke$arity$1(bound_vars__$1));
};
cljs.js.eval_str = function cljs$js$eval_str() {
  var args8099 = [];
  var len__5099__auto___8102 = arguments.length;
  var i__5100__auto___8103 = 0;
  while (true) {
    if (i__5100__auto___8103 < len__5099__auto___8102) {
      args8099.push(arguments[i__5100__auto___8103]);
      var G__8104 = i__5100__auto___8103 + 1;
      i__5100__auto___8103 = G__8104;
      continue;
    } else {
    }
    break;
  }
  var G__8101 = args8099.length;
  switch(G__8101) {
    case 3:
      return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8099.length)].join(""));;
  }
};
cljs.js.eval_str.cljs$core$IFn$_invoke$arity$3 = function(state, source, cb) {
  return cljs.js.eval_str.call(null, state, source, null, cb);
};
cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4 = function(state, source, name, cb) {
  return cljs.js.eval_str.call(null, state, source, name, null, cb);
};
cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5 = function(state, source, name, opts, cb) {
  if (cljs.core.truth_(cljs.js.atom_QMARK_.call(null, state))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "atom?", "atom?", -1007535292, null), new cljs.core.Symbol(null, "state", "state", -348086572, null))))].join(""));
  }
  if (typeof source === "string") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "source", "source", 1206599988, null))))].join(""));
  }
  if (cljs.core.truth_(cljs.js.valid_name_QMARK_.call(null, name))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-name?", "valid-name?", 1312075736, null), new cljs.core.Symbol(null, "name", "name", -810760592, null))))].join(""));
  }
  if (cljs.core.truth_(cljs.js.valid_opts_QMARK_.call(null, opts))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-opts?", "valid-opts?", 1000038576, null), new cljs.core.Symbol(null, "opts", "opts", 1795607228, null))))].join(""));
  }
  if (cljs.core.fn_QMARK_.call(null, cb)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", 1820990818, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null))))].join(""));
  }
  return cljs.js.eval_str_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "*compiler*", "*compiler*", -168190089), state, new cljs.core.Keyword(null, "*data-readers*", "*data-readers*", -371480469), cljs.tagged_literals._STAR_cljs_data_readers_STAR_, new cljs.core.Keyword(null, "*analyze-deps*", "*analyze-deps*", -29540427), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "analyze-deps", "analyze-deps", 1000677285)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return true;
    }
  }(), new cljs.core.Keyword(null, "*load-macros*", "*load-macros*", 640729006), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "load-macros", "load-macros", 459797395)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return true;
    }
  }(), new cljs.core.Keyword(null, "*load-fn*", "*load-fn*", 2055642106), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "load", "load", -1318641184)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.js._STAR_load_fn_STAR_;
    }
  }(), new cljs.core.Keyword(null, "*eval-fn*", "*eval-fn*", -217221128), function() {
    var or__4060__auto__ = (new cljs.core.Keyword(null, "eval", "eval", -1103567905)).cljs$core$IFn$_invoke$arity$1(opts);
    if (cljs.core.truth_(or__4060__auto__)) {
      return or__4060__auto__;
    } else {
      return cljs.js._STAR_eval_fn_STAR_;
    }
  }()], null), source, name, opts, cb);
};
cljs.js.eval_str.cljs$lang$maxFixedArity = 5;
goog.provide("cljs_bootstrap.repl");
goog.require("cljs.core");
goog.require("cljs.analyzer");
goog.require("cljs.reader");
goog.require("cljs.js");
cljs_bootstrap.repl.DEBUG = false;
cljs.core.enable_console_print_BANG_.call(null);
cljs_bootstrap.repl.cstate = cljs.js.empty_state.call(null);
cljs_bootstrap.repl.init_repl = function cljs_bootstrap$repl$init_repl(mode) {
  cljs.core._STAR_target_STAR_ = mode;
  return cljs.js.eval_str.call(null, cljs_bootstrap.repl.cstate, "(ns cljs.user)", new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "eval", "eval", -1103567905), cljs.js.js_eval], null), function(res) {
    return null;
  });
};
cljs_bootstrap.repl.load_edn_caches = function cljs_bootstrap$repl$load_edn_caches(core_edn) {
  return cljs.core.swap_BANG_.call(null, cljs_bootstrap.repl.cstate, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null)], null), cljs.reader.read_string.call(null, core_edn));
};
cljs_bootstrap.repl.load_edn_cache_files = function cljs_bootstrap$repl$load_edn_cache_files() {
  var fs = require("fs");
  var core_edn = fs.readFileSync(".cljs_bootstrap/cljs/core.cljs.cache.aot.edn", "utf8");
  return cljs_bootstrap.repl.load_edn_caches.call(null, core_edn);
};
cljs_bootstrap.repl.read_eval_print = function cljs_bootstrap$repl$read_eval_print(s, cb) {
  return cljs.js.eval_str.call(null, cljs_bootstrap.repl.cstate, s, new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "verbose", "verbose", 1694226060), cljs_bootstrap.repl.DEBUG, new cljs.core.Keyword(null, "eval", "eval", -1103567905), cljs.js.js_eval, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291), new cljs.core.Keyword(null, "def-emits-var", 
  "def-emits-var", -1551927320), true], null), function(res) {
    if (cljs_bootstrap.repl.DEBUG) {
      cljs.core.prn.call(null, new cljs.core.Keyword(null, "result-data", "result-data", -1724248844), res);
    } else {
    }
    if (cljs.core.contains_QMARK_.call(null, res, new cljs.core.Keyword(null, "value", "value", 305978217))) {
      return cb.call(null, true, cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(res)));
    } else {
      return cb.call(null, false, (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(res));
    }
  });
};
cljs_bootstrap.repl.read_eval_print_loop = function cljs_bootstrap$repl$read_eval_print_loop() {
  return require("repl").start({"prompt":"cljs.user> ", "input":process.stdin, "output":process.stdout, "eval":function(cmd, ctx, filename, cb) {
    return cljs_bootstrap.repl.read_eval_print.call(null, cmd, function(p1__6730_SHARP_, p2__6731_SHARP_) {
      if (p1__6730_SHARP_) {
        return cb.call(null, p2__6731_SHARP_);
      } else {
        return cb.call(null, cljs.core.pr_str.call(null, p2__6731_SHARP_));
      }
    });
  }});
};


core_edn_cache = ';; Analyzed by ClojureScript 0.0-3619\n{:use-macros nil, :excludes #{}, :name cljs.core, :imports {StringBuffer goog.string.StringBuffer}, :requires {gstring goog.string, goog.string goog.string, gobject goog.object, goog.object goog.object, garray goog.array, goog.array goog.array, StringBuffer goog.string.StringBuffer}, :uses nil, :defs {->PersistentHashSet {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7811, :column 10, :end-line 7811, :end-column 27, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([meta hash-map __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.core/->PersistentHashSet, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([meta hash-map __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 7811, :max-fixed-arity 3, :fn-var true, :arglists (quote ([meta hash-map __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, js->clj {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9161, :column 7, :end-line 9161, :end-column 14, :arglists (quote ([x] [x & opts])), :doc "Recursively transforms JavaScript arrays into ClojureScript\\n  vectors, and JavaScript objects into ClojureScript maps.  With\\n  option \':keywordize-keys true\' will convert object fields from\\n  strings to keywords.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([x]), :arglists ([x] [x & opts]), :arglists-meta (nil nil)}}, :name cljs.core/js->clj, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([x]), :arglists ([x] [x & opts]), :arglists-meta (nil nil)}, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9161, :max-fixed-arity 1, :fn-var true, :arglists ([x] [x & opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\\n  vectors, and JavaScript objects into ClojureScript maps.  With\\n  option \':keywordize-keys true\' will convert object fields from\\n  strings to keywords."}, sort-by {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2113, :column 7, :end-line 2113, :end-column 14, :arglists (quote ([keyfn coll] [keyfn comp coll])), :doc "Returns a sorted sequence of the items in coll, where the sort\\n   order is determined by comparing (keyfn item).  Comp can be\\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\\n   Comp defaults to compare.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([keyfn coll] [keyfn comp coll]), :arglists ([keyfn coll] [keyfn comp coll]), :arglists-meta (nil nil)}}, :name cljs.core/sort-by, :variadic false, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([keyfn coll] [keyfn comp coll]), :arglists ([keyfn coll] [keyfn comp coll]), :arglists-meta (nil nil)}, :method-params ([keyfn coll] [keyfn comp coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2113, :max-fixed-arity 3, :fn-var true, :arglists ([keyfn coll] [keyfn comp coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\\n   order is determined by comparing (keyfn item).  Comp can be\\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\\n   Comp defaults to compare."}, ITransientAssociative {:meta {:file "cljs/core.cljs", :line 655, :column 14, :end-line 655, :end-column 35, :doc "Protocol for adding associativity to transient collections.", :protocol-symbol true, :protocol-info {:methods {-assoc! [[tcoll key val]]}}}, :protocol-symbol true, :name cljs.core/ITransientAssociative, :file "cljs/core.cljs", :end-column 35, :column nil, :line nil, :protocol-info {:methods {-assoc! [[tcoll key val]]}}, :info nil, :end-line 655, :impls #{cljs.core/TransientVector cljs.core/TransientHashMap cljs.core/TransientArrayMap}, :doc "Protocol for adding associativity to transient collections."}, chunk-first {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3171, :column 7, :end-line 3171, :end-column 18, :arglists (quote ([s]))}, :name cljs.core/chunk-first, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, print-meta? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8626, :column 16, :end-line 8626, :end-column 27, :tag boolean, :arglists (quote ([opts obj]))}, :name cljs.core/print-meta?, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([opts obj]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 8626, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([opts obj]))}, m3-hash-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 791, :column 15, :end-line 791, :end-column 26, :tag number, :arglists (quote ([in]))}, :name cljs.core/m3-hash-int, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([in]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 791, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([in]))}, stepper {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3575, :column 7, :end-line 3575, :end-column 14, :arglists (quote ([xform iter]))}, :name cljs.core/stepper, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([xform iter]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3575, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xform iter]))}, pr-str* {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 739, :column 7, :end-line 739, :end-column 14, :arglists (quote ([obj])), :doc "Support so that collections can implement toString without\\n   loading all the printing machinery."}, :name cljs.core/pr-str*, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 739, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Support so that collections can implement toString without\\n   loading all the printing machinery."}, eduction {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9104, :column 7, :end-line 9104, :end-column 15, :arglists (quote ([xform* coll])), :doc "Returns a reducible/iterable application of the transducers\\n  to the items in coll. Transducers are applied in order as if\\n  combined with comp. Note that these applications will be\\n  performed every time reduce/iterator is called.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xforms)], :arglists ([& xforms]), :arglists-meta (nil)}}, :name cljs.core/eduction, :variadic true, :file "cljs/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xforms)], :arglists ([& xforms]), :arglists-meta (nil)}, :method-params [(xforms)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 9104, :max-fixed-arity 0, :fn-var true, :arglists ([& xforms]), :doc "Returns a reducible/iterable application of the transducers\\n  to the items in coll. Transducers are applied in order as if\\n  combined with comp. Note that these applications will be\\n  performed every time reduce/iterator is called."}, tree-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4429, :column 7, :end-line 4429, :end-column 15, :arglists (quote ([branch? children root])), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\\n   branch? must be a fn of one arg that returns true if passed a node\\n   that can have children (but may not).  children must be a fn of one\\n   arg that returns a sequence of the children. Will only be called on\\n   nodes for which branch? returns true. Root is the root node of the\\n  tree."}, :name cljs.core/tree-seq, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([branch? children root]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4429, :max-fixed-arity 3, :fn-var true, :arglists (quote ([branch? children root])), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\\n   branch? must be a fn of one arg that returns true if passed a node\\n   that can have children (but may not).  children must be a fn of one\\n   arg that returns a sequence of the children. Will only be called on\\n   nodes for which branch? returns true. Root is the root node of the\\n  tree."}, unchecked-remainder-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2411, :column 7, :end-line 2411, :end-column 30, :arglists (quote ([x n]))}, :name cljs.core/unchecked-remainder-int, :variadic false, :file "cljs/core.cljs", :end-column 30, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2411, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n]))}, uuid {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9681, :column 7, :end-line 9681, :end-column 11, :arglists (quote ([s]))}, :name cljs.core/uuid, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9681, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1046, :column 12, :end-line 1046, :end-column 15, :tag seq, :arglists (quote ([coll])), :doc "Returns a seq on the collection. If the collection is\\n  empty, returns nil.  (seq nil) returns nil. seq also works on\\n  Strings."}, :name cljs.core/seq, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag seq, :end-line 1046, :max-fixed-arity 1, :tag seq, :fn-var true, :arglists (quote ([coll])), :doc "Returns a seq on the collection. If the collection is\\n  empty, returns nil.  (seq nil) returns nil. seq also works on\\n  Strings."}, Volatile {:num-fields 1, :protocols #{cljs.core/IVolatile cljs.core/IDeref}, :name cljs.core/Volatile, :file "cljs/core.cljs", :end-column 18, :type true, :column 10, :line 4031, :record false, :end-line 4031, :skip-protocol-flag #{cljs.core/IDeref}}, reduce {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2147, :column 7, :end-line 2147, :end-column 13, :arglists (quote ([f coll] [f val coll])), :doc "f should be a function of 2 arguments. If val is not supplied,\\n  returns the result of applying f to the first 2 items in coll, then\\n  applying f to that result and the 3rd item, etc. If coll contains no\\n  items, f must accept no arguments as well, and reduce returns the\\n  result of calling f with no arguments.  If coll has only 1 item, it\\n  is returned and f is not called.  If val is supplied, returns the\\n  result of applying f to val and the first item in coll, then\\n  applying f to that result and the 2nd item, etc. If coll contains no\\n  items, returns val and f is not called.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f val coll]), :arglists ([f coll] [f val coll]), :arglists-meta (nil nil)}}, :name cljs.core/reduce, :variadic false, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f val coll]), :arglists ([f coll] [f val coll]), :arglists-meta (nil nil)}, :method-params ([f coll] [f val coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2147, :max-fixed-arity 3, :fn-var true, :arglists ([f coll] [f val coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\\n  returns the result of applying f to the first 2 items in coll, then\\n  applying f to that result and the 3rd item, etc. If coll contains no\\n  items, f must accept no arguments as well, and reduce returns the\\n  result of calling f with no arguments.  If coll has only 1 item, it\\n  is returned and f is not called.  If val is supplied, returns the\\n  result of applying f to val and the first item in coll, then\\n  applying f to that result and the 2nd item, etc. If coll contains no\\n  items, returns val and f is not called."}, INIT {:name cljs.core/INIT, :file "cljs/core.cljs", :line nil, :column nil, :end-line 3524, :end-column 10, :meta {:file "cljs/core.cljs", :line 3524, :column 6, :end-line 3524, :end-column 10}}, find-ns {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9978, :column 7, :end-line 9978, :end-column 14, :arglists (quote ([ns]))}, :name cljs.core/find-ns, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9978, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns]))}, contains? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2004, :column 16, :end-line 2004, :end-column 25, :tag boolean, :arglists (quote ([coll v])), :doc "Returns true if key is present in the given collection, otherwise\\n  returns false.  Note that for numerically indexed collections like\\n  vectors and arrays, this tests if the numeric key is within the\\n  range of indexes. \'contains?\' operates constant or logarithmic time;\\n  it will not perform a linear search for a value.  See also \'some\'."}, :name cljs.core/contains?, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([coll v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2004, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([coll v])), :doc "Returns true if key is present in the given collection, otherwise\\n  returns false.  Note that for numerically indexed collections like\\n  vectors and arrays, this tests if the numeric key is within the\\n  range of indexes. \'contains?\' operates constant or logarithmic time;\\n  it will not perform a linear search for a value.  See also \'some\'."}, every? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3726, :column 16, :end-line 3726, :end-column 22, :tag boolean, :arglists (quote ([pred coll])), :doc "Returns true if (pred x) is logical true for every x in coll, else\\n  false."}, :name cljs.core/every?, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 3726, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns true if (pred x) is logical true for every x in coll, else\\n  false."}, ->ES6IteratorSeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1137, :column 10, :end-line 1137, :end-column 24, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :factory :positional, :arglists (quote ([value iter _rest]))}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :name cljs.core/->ES6IteratorSeq, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([value iter _rest]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 1137, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value iter _rest])), :skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}}, Var {:num-fields 3, :protocols #{cljs.core/IEquiv cljs.core/IFn cljs.core/Object cljs.core/IMeta cljs.core/Fn cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core/Var, :file "cljs/core.cljs", :end-column 13, :type true, :column 10, :line 959, :record false, :end-line 959, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IFn cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, keep-indexed {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4053, :column 7, :end-line 4053, :end-column 19, :arglists (quote ([f] [f coll])), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\\n  this means false return values will be included.  f must be free of\\n  side-effects.  Returns a stateful transducer when no collection is\\n  provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :name cljs.core/keep-indexed, :variadic false, :file "cljs/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :method-params ([f] [f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4053, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\\n  this means false return values will be included.  f must be free of\\n  side-effects.  Returns a stateful transducer when no collection is\\n  provided."}, ->PersistentQueueSeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5329, :column 10, :end-line 5329, :end-column 28, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta front rear __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :name cljs.core/->PersistentQueueSeq, :variadic false, :file "cljs/core.cljs", :end-column 28, :method-params ([meta front rear __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5329, :max-fixed-arity 4, :fn-var true, :arglists (quote ([meta front rear __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, subs {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2607, :column 7, :end-line 2607, :end-column 11, :arglists (quote ([s start] [s start end])), :doc "Returns the substring of s beginning at start inclusive, and ending\\n  at end (defaults to length of string), exclusive.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s start] [s start end]), :arglists ([s start] [s start end]), :arglists-meta (nil nil)}}, :name cljs.core/subs, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s start] [s start end]), :arglists ([s start] [s start end]), :arglists-meta (nil nil)}, :method-params ([s start] [s start end]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2607, :max-fixed-arity 3, :fn-var true, :arglists ([s start] [s start end]), :doc "Returns the substring of s beginning at start inclusive, and ending\\n  at end (defaults to length of string), exclusive."}, set {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8042, :column 7, :end-line 8042, :end-column 10, :arglists (quote ([coll])), :doc "Returns a set of the distinct elements of coll."}, :name cljs.core/set, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8042, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns a set of the distinct elements of coll."}, compare-indexed {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2067, :column 17, :end-line 2067, :end-column 32, :private true, :arglists (quote ([xs ys] [xs ys len n])), :doc "Compare indexed collection.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([xs ys] [xs ys len n]), :arglists ([xs ys] [xs ys len n]), :arglists-meta (nil nil)}}, :private true, :name cljs.core/compare-indexed, :variadic false, :file "cljs/core.cljs", :end-column 32, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([xs ys] [xs ys len n]), :arglists ([xs ys] [xs ys len n]), :arglists-meta (nil nil)}, :method-params ([xs ys] [xs ys len n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2067, :max-fixed-arity 4, :fn-var true, :arglists ([xs ys] [xs ys len n]), :doc "Compare indexed collection."}, take-last {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4267, :column 7, :end-line 4267, :end-column 16, :arglists (quote ([n coll])), :doc "Returns a seq of the last n items in coll.  Depending on the type\\n  of coll may be no better than linear time.  For vectors, see also subvec."}, :name cljs.core/take-last, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4267, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n coll])), :doc "Returns a seq of the last n items in coll.  Depending on the type\\n  of coll may be no better than linear time.  For vectors, see also subvec."}, IndexedSeq {:meta {:file "cljs/core.cljs", :line 1029, :column 29, :end-line 1029, :end-column 39, :declared true}, :num-fields 2, :protocols #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :name cljs.core/IndexedSeq, :file "cljs/core.cljs", :end-column 20, :type true, :column 10, :line 1361, :record false, :declared true, :end-line 1361, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}}, bit-set {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2522, :column 7, :end-line 2522, :end-column 14, :arglists (quote ([x n])), :doc "Set bit at index n"}, :name cljs.core/bit-set, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2522, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n])), :doc "Set bit at index n"}, string-hash-cache-count {:name cljs.core/string-hash-cache-count, :file "cljs/core.cljs", :line nil, :column nil, :end-line 818, :end-column 29, :meta {:file "cljs/core.cljs", :line 818, :column 6, :end-line 818, :end-column 29}}, ->Eduction {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9088, :column 10, :end-line 9088, :end-column 18, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :factory :positional, :arglists (quote ([xform coll]))}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :name cljs.core/->Eduction, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([xform coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 9088, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xform coll])), :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}}, tree-map-add {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7326, :column 8, :end-line 7326, :end-column 20, :private true, :arglists (quote ([comp tree k v found]))}, :private true, :name cljs.core/tree-map-add, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([comp tree k v found]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7326, :max-fixed-arity 5, :fn-var true, :arglists (quote ([comp tree k v found]))}, ->ES6SetEntriesIterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5620, :column 10, :end-line 5620, :end-column 31, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([s]))}, :protocols #{cljs.core/Object}, :name cljs.core/->ES6SetEntriesIterator, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5620, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :skip-protocol-flag nil}, -with-meta {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 548, :column 9, :end-line 548, :end-column 19, :tag clj, :protocol cljs.core/IWithMeta, :doc "Returns a new object with value of o and metadata meta added to it.", :arglists (quote ([o meta]))}, :protocol cljs.core/IWithMeta, :name cljs.core/-with-meta, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([o meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 548, :max-fixed-arity 2, :tag clj, :fn-var true, :arglists (quote ([o meta])), :doc "Returns a new object with value of o and metadata meta added to it."}, reset-cache {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9365, :column 8, :end-line 9365, :end-column 19, :private true, :arglists (quote ([method-cache method-table cached-hierarchy hierarchy]))}, :private true, :name cljs.core/reset-cache, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([method-cache method-table cached-hierarchy hierarchy]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9365, :max-fixed-arity 4, :fn-var true, :arglists (quote ([method-cache method-table cached-hierarchy hierarchy]))}, ->PersistentArrayMapIterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5772, :column 10, :end-line 5772, :end-column 36, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([arr i cnt]))}, :protocols #{cljs.core/Object}, :name cljs.core/->PersistentArrayMapIterator, :variadic false, :file "cljs/core.cljs", :end-column 36, :method-params ([arr i cnt]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5772, :max-fixed-arity 3, :fn-var true, :arglists (quote ([arr i cnt])), :skip-protocol-flag nil}, PersistentArrayMapIterator {:num-fields 3, :protocols #{cljs.core/Object}, :name cljs.core/PersistentArrayMapIterator, :file "cljs/core.cljs", :end-column 36, :type true, :column 10, :line 5772, :record false, :end-line 5772, :skip-protocol-flag nil}, butlast {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8119, :column 7, :end-line 8119, :end-column 14, :arglists (quote ([s])), :doc "Return a seq of all but the last item in coll, in linear time"}, :name cljs.core/butlast, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return a seq of all but the last item in coll, in linear time"}, tail-off {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4602, :column 8, :end-line 4602, :end-column 16, :private true, :arglists (quote ([pv]))}, :private true, :name cljs.core/tail-off, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([pv]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4602, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pv]))}, unchecked-subtract-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2421, :column 15, :end-line 2421, :end-column 37, :tag number, :arglists (quote ([x] [x y] [x y & more])), :doc "If no ys are supplied, returns the negation of x, else subtracts\\n  the ys from x and returns the result.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/unchecked-subtract-int, :variadic true, :file "cljs/core.cljs", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2421, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\\n  the ys from x and returns the result."}, -iterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 729, :column 4, :end-line 729, :end-column 13, :protocol cljs.core/IIterable, :doc "Returns an iterator for coll.", :arglists (quote ([coll]))}, :protocol cljs.core/IIterable, :name cljs.core/-iterator, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 729, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns an iterator for coll."}, take-nth {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8369, :column 7, :end-line 8369, :end-column 15, :arglists (quote ([n] [n coll])), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\\n  transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}}, :name cljs.core/take-nth, :variadic false, :file "cljs/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}, :method-params ([n] [n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8369, :max-fixed-arity 2, :fn-var true, :arglists ([n] [n coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\\n  transducer when no collection is provided."}, first {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1069, :column 7, :end-line 1069, :end-column 12, :arglists (quote ([coll])), :doc "Returns the first item in the collection. Calls seq on its\\n  argument. If coll is nil, returns nil."}, :name cljs.core/first, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1069, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns the first item in the collection. Calls seq on its\\n  argument. If coll is nil, returns nil."}, native-satisfies? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 224, :column 16, :end-line 224, :end-column 33, :tag boolean, :arglists (quote ([p x])), :doc "Internal - do not use!"}, :name cljs.core/native-satisfies?, :variadic false, :file "cljs/core.cljs", :end-column 33, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 224, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([p x])), :doc "Internal - do not use!"}, seq? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1971, :column 16, :end-line 1971, :end-column 20, :tag boolean, :arglists (quote ([s])), :doc "Return true if s satisfies ISeq"}, :name cljs.core/seq?, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1971, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([s])), :doc "Return true if s satisfies ISeq"}, -global-hierarchy {:name cljs.core/-global-hierarchy, :file "cljs/core.cljs", :line nil, :column nil, :end-line 9255, :end-column 33, :private true, :meta {:file "cljs/core.cljs", :line 9255, :column 16, :end-line 9255, :end-column 33, :private true}}, UUID {:num-fields 2, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IPrintWithWriter cljs.core/IComparable}, :name cljs.core/UUID, :file "cljs/core.cljs", :end-column 14, :type true, :column 10, :line 9657, :record false, :end-line 9657, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter cljs.core/IComparable}}, -sorted-seq-from {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 600, :column 9, :end-line 600, :end-column 25, :tag clj, :protocol cljs.core/ISorted, :doc "Returns a sorted seq from coll in either ascending or descending order.\\n     If ascending is true, the result should contain all items which are > or >=\\n     than k. If ascending is false, the result should contain all items which\\n     are < or <= than k, e.g.\\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)", :arglists (quote ([coll k ascending?]))}, :protocol cljs.core/ISorted, :name cljs.core/-sorted-seq-from, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([coll k ascending?]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 600, :max-fixed-arity 3, :tag clj, :fn-var true, :arglists (quote ([coll k ascending?])), :doc "Returns a sorted seq from coll in either ascending or descending order.\\n     If ascending is true, the result should contain all items which are > or >=\\n     than k. If ascending is false, the result should contain all items which\\n     are < or <= than k, e.g.\\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"}, println-str {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8787, :column 7, :end-line 8787, :end-column 18, :arglists (quote ([& objs])), :doc "println to a string, returning it", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :name cljs.core/println-str, :variadic true, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}, :method-params [(objs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8787, :max-fixed-arity 0, :fn-var true, :arglists ([& objs]), :doc "println to a string, returning it"}, linear-traversal-nth {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1591, :column 8, :end-line 1591, :end-column 28, :private true, :arglists (quote ([coll n] [coll n not-found])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n not-found]), :arglists ([coll n] [coll n not-found]), :arglists-meta (nil nil)}}, :private true, :name cljs.core/linear-traversal-nth, :variadic false, :file "cljs/core.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n not-found]), :arglists ([coll n] [coll n not-found]), :arglists-meta (nil nil)}, :method-params ([coll n] [coll n not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1591, :max-fixed-arity 3, :fn-var true, :arglists ([coll n] [coll n not-found])}, iterate {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4328, :column 7, :end-line 4328, :end-column 14, :arglists (quote ([f x])), :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :added "1.0"}, :added "1.0", :name cljs.core/iterate, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([f x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4328, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f x])), :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects"}, -empty {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 443, :column 4, :end-line 443, :end-column 10, :protocol cljs.core/IEmptyableCollection, :doc "Returns an empty collection of the same category as coll. Used\\n     by cljs.core/count.", :arglists (quote ([coll]))}, :protocol cljs.core/IEmptyableCollection, :name cljs.core/-empty, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 443, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns an empty collection of the same category as coll. Used\\n     by cljs.core/count."}, newline {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8743, :column 7, :end-line 8743, :end-column 14, :arglists (quote ([] [opts])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name cljs.core/newline, :variadic false, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8743, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts])}, ILookup {:meta {:file "cljs/core.cljs", :line 485, :column 14, :end-line 485, :end-column 21, :doc "Protocol for looking up a value in a data structure.", :protocol-symbol true, :protocol-info {:methods {-lookup [[o k] [o k not-found]]}}}, :protocol-symbol true, :name cljs.core/ILookup, :file "cljs/core.cljs", :end-column 21, :column nil, :line nil, :protocol-info {:methods {-lookup [[o k] [o k not-found]]}}, :info nil, :end-line 485, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/BlackNode cljs.core/Subvec cljs.core/TransientHashMap cljs.core/TaggedLiteral cljs.core/PersistentVector cljs.core/TransientArrayMap cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/RedNode}, :doc "Protocol for looking up a value in a data structure."}, -chunked-rest {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 693, :column 4, :end-line 693, :end-column 17, :protocol cljs.core/IChunkedSeq, :doc "Return a new collection of coll with the first chunk removed.", :arglists (quote ([coll]))}, :protocol cljs.core/IChunkedSeq, :name cljs.core/-chunked-rest, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 693, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Return a new collection of coll with the first chunk removed."}, write-all {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8596, :column 7, :end-line 8596, :end-column 16, :arglists (quote ([writer & ss])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(writer ss)], :arglists ([writer & ss]), :arglists-meta (nil)}}, :name cljs.core/write-all, :variadic true, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(writer ss)], :arglists ([writer & ss]), :arglists-meta (nil)}, :method-params [(writer ss)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8596, :max-fixed-arity 1, :fn-var true, :arglists ([writer & ss])}, fn? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1756, :column 16, :end-line 1756, :end-column 19, :tag boolean, :arglists (quote ([f])), :doc "Return true if f is a JavaScript function or satisfies the Fn protocol."}, :name cljs.core/fn?, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1756, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([f])), :doc "Return true if f is a JavaScript function or satisfies the Fn protocol."}, -prefer-method {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9421, :column 4, :end-line 9421, :end-column 18, :protocol cljs.core/IMultiFn, :doc nil, :arglists (quote ([mf dispatch-val dispatch-val-y]))}, :protocol cljs.core/IMultiFn, :name cljs.core/-prefer-method, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([mf dispatch-val dispatch-val-y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9421, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mf dispatch-val dispatch-val-y])), :doc nil}, -assoc {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 496, :column 9, :end-line 496, :end-column 15, :tag clj, :protocol cljs.core/IAssociative, :doc "Returns a new collection of coll with a mapping from key k to\\n     value v added to it.", :arglists (quote ([coll k v]))}, :protocol cljs.core/IAssociative, :name cljs.core/-assoc, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([coll k v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 496, :max-fixed-arity 3, :tag clj, :fn-var true, :arglists (quote ([coll k v])), :doc "Returns a new collection of coll with a mapping from key k to\\n     value v added to it."}, doall {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8506, :column 7, :end-line 8506, :end-column 12, :arglists (quote ([coll] [n coll])), :doc "When lazy sequences are produced via functions that have side\\n  effects, any effects other than those needed to produce the first\\n  element in the seq do not occur until the seq is consumed. doall can\\n  be used to force any effects. Walks through the successive nexts of\\n  the seq, retains the head and returns it, thus causing the entire\\n  seq to reside in memory at one time.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [n coll]), :arglists ([coll] [n coll]), :arglists-meta (nil nil)}}, :name cljs.core/doall, :variadic false, :file "cljs/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [n coll]), :arglists ([coll] [n coll]), :arglists-meta (nil nil)}, :method-params ([coll] [n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8506, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [n coll]), :doc "When lazy sequences are produced via functions that have side\\n  effects, any effects other than those needed to produce the first\\n  element in the seq do not occur until the seq is consumed. doall can\\n  be used to force any effects. Walks through the successive nexts of\\n  the seq, retains the head and returns it, thus causing the entire\\n  seq to reside in memory at one time."}, keyword-identical? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2939, :column 16, :end-line 2939, :end-column 34, :tag boolean, :arglists (quote ([x y])), :doc "Efficient test to determine that two keywords are identical."}, :name cljs.core/keyword-identical?, :variadic false, :file "cljs/core.cljs", :end-column 34, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2939, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([x y])), :doc "Efficient test to determine that two keywords are identical."}, *print-err-fn* {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 54, :column 3, :end-line 54, :end-column 17, :doc "Each runtime environment provides a different way to print error output.\\n  Whatever function *print-fn* is bound to will be passed any\\n  Strings which should be printed.", :dynamic true}, :name cljs.core/*print-err-fn*, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([_]), :protocol-impl nil, :arglists-meta (), :column nil, :dynamic true, :line nil, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists nil, :doc "Each runtime environment provides a different way to print error output.\\n  Whatever function *print-fn* is bound to will be passed any\\n  Strings which should be printed."}, pv-aset {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4596, :column 8, :end-line 4596, :end-column 15, :private true, :arglists (quote ([node idx val]))}, :private true, :name cljs.core/pv-aset, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([node idx val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4596, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node idx val]))}, prefers {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9643, :column 7, :end-line 9643, :end-column 14, :arglists (quote ([multifn])), :doc "Given a multimethod, returns a map of preferred value -> set of other values"}, :name cljs.core/prefers, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([multifn]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9643, :max-fixed-arity 1, :fn-var true, :arglists (quote ([multifn])), :doc "Given a multimethod, returns a map of preferred value -> set of other values"}, -js->clj {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9159, :column 4, :end-line 9159, :end-column 12, :protocol cljs.core/IEncodeClojure, :doc "Transforms JavaScript values to Clojure", :arglists (quote ([x options]))}, :protocol cljs.core/IEncodeClojure, :name cljs.core/-js->clj, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([x options]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9159, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x options])), :doc "Transforms JavaScript values to Clojure"}, LazySeq {:num-fields 4, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/LazySeq, :file "cljs/core.cljs", :end-column 17, :type true, :column 10, :line 2979, :record false, :end-line 2979, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, dedupe {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9061, :column 7, :end-line 9061, :end-column 13, :arglists (quote ([] [coll])), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\\n  Returns a transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}}, :name cljs.core/dedupe, :variadic false, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}, :method-params ([] [coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9061, :max-fixed-arity 1, :fn-var true, :arglists ([] [coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\\n  Returns a transducer when no collection is provided."}, t5674 {:num-fields 2, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core/t5674, :file "cljs/core.cljs", :type true, :anonymous true, :column nil, :line nil, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unchecked-editable-array-for {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5180, :column 8, :end-line 5180, :end-column 36, :private true, :arglists (quote ([tv i]))}, :private true, :name cljs.core/unchecked-editable-array-for, :variadic false, :file "cljs/core.cljs", :end-column 36, :method-params ([tv i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tv i]))}, ->ES6Iterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1121, :column 10, :end-line 1121, :end-column 21, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([s]))}, :protocols #{cljs.core/Object}, :name cljs.core/->ES6Iterator, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 1121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :skip-protocol-flag nil}, VectorNode {:num-fields 2, :protocols #{}, :name cljs.core/VectorNode, :file "cljs/core.cljs", :end-column 20, :type true, :column 10, :line 4588, :record false, :end-line 4588, :skip-protocol-flag nil}, dissoc {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1742, :column 7, :end-line 1742, :end-column 13, :arglists (quote ([coll] [coll k] [coll k & ks])), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\\n  that does not contain a mapping for key(s).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([coll] [coll k]), :arglists ([coll] [coll k] [coll k & ks]), :arglists-meta (nil nil nil)}}, :name cljs.core/dissoc, :variadic true, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([coll] [coll k]), :arglists ([coll] [coll k] [coll k & ks]), :arglists-meta (nil nil nil)}, :method-params ([coll] [coll k]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 1742, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [coll k] [coll k & ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\\n  that does not contain a mapping for key(s)."}, atom {:name cljs.core/atom, :file "cljs/core.cljs", :line nil, :column nil, :end-line 6047, :end-column 72, :declared true, :meta {:file "cljs/core.cljs", :line 6047, :column 68, :end-line 6047, :end-column 72, :declared true}}, bit-shift-right {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2536, :column 7, :end-line 2536, :end-column 22, :arglists (quote ([x n])), :doc "Bitwise shift right"}, :name cljs.core/bit-shift-right, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2536, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n])), :doc "Bitwise shift right"}, *clojurescript-version* {:name cljs.core/*clojurescript-version*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 16, :end-column 29, :meta {:file "cljs/core.cljs", :line 16, :column 6, :end-line 16, :end-column 29}}, -first {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 469, :column 4, :end-line 469, :end-column 10, :protocol cljs.core/ISeq, :doc "Returns the first item in the collection coll. Used by cljs.core/first.", :arglists (quote ([coll]))}, :protocol cljs.core/ISeq, :name cljs.core/-first, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 469, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns the first item in the collection coll. Used by cljs.core/first."}, peek {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1830, :column 7, :end-line 1830, :end-column 11, :arglists (quote ([coll])), :doc "For a list or queue, same as first, for a vector, same as, but much\\n  more efficient than, last. If the collection is empty, returns nil."}, :name cljs.core/peek, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1830, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "For a list or queue, same as first, for a vector, same as, but much\\n  more efficient than, last. If the collection is empty, returns nil."}, IKVReduce {:meta {:file "cljs/core.cljs", :line 559, :column 14, :end-line 559, :end-column 23, :doc "Protocol for associative types that can reduce themselves\\n  via a function of key and val. Called by cljs.core/reduce-kv.", :protocol-symbol true, :protocol-info {:methods {-kv-reduce [[coll f init]]}}}, :protocol-symbol true, :name cljs.core/IKVReduce, :file "cljs/core.cljs", :end-column 23, :column nil, :line nil, :protocol-info {:methods {-kv-reduce [[coll f init]]}}, :info nil, :end-line 559, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap}, :doc "Protocol for associative types that can reduce themselves\\n  via a function of key and val. Called by cljs.core/reduce-kv."}, aget {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 363, :column 7, :end-line 363, :end-column 11, :arglists (quote ([array i] [array i & idxs])), :doc "Returns the value at the index.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([array i]), :arglists ([array i] [array i & idxs]), :arglists-meta (nil nil)}}, :name cljs.core/aget, :variadic true, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([array i]), :arglists ([array i] [array i & idxs]), :arglists-meta (nil nil)}, :method-params ([array i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 363, :max-fixed-arity 2, :fn-var true, :arglists ([array i] [array i & idxs]), :doc "Returns the value at the index."}, PersistentTreeMapSeq {:num-fields 5, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/PersistentTreeMapSeq, :file "cljs/core.cljs", :end-column 30, :type true, :column 10, :line 6920, :record false, :end-line 6920, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, -write {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 614, :column 4, :end-line 614, :end-column 10, :protocol cljs.core/IWriter, :doc "Writes s with writer and returns the result.", :arglists (quote ([writer s]))}, :protocol cljs.core/IWriter, :name cljs.core/-write, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([writer s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 614, :max-fixed-arity 2, :fn-var true, :arglists (quote ([writer s])), :doc "Writes s with writer and returns the result."}, iter {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3548, :column 7, :end-line 3548, :end-column 11, :arglists (quote ([coll]))}, :name cljs.core/iter, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3548, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, mk-bound-fn {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8223, :column 7, :end-line 8223, :end-column 18, :arglists (quote ([sc test key]))}, :name cljs.core/mk-bound-fn, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([sc test key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8223, :max-fixed-arity 3, :fn-var true, :arglists (quote ([sc test key]))}, last {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1531, :column 7, :end-line 1531, :end-column 11, :arglists (quote ([s])), :doc "Return the last item in coll, in linear time"}, :name cljs.core/last, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1531, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return the last item in coll, in linear time"}, -default-dispatch-val {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9425, :column 4, :end-line 9425, :end-column 25, :protocol cljs.core/IMultiFn, :doc nil, :arglists (quote ([mf]))}, :protocol cljs.core/IMultiFn, :name cljs.core/-default-dispatch-val, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([mf]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9425, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mf])), :doc nil}, pr {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8760, :column 7, :end-line 8760, :end-column 9, :arglists (quote ([& objs])), :doc "Prints the object(s) using string-print.  Prints the\\n  object(s), separated by spaces if there is more than one.\\n  By default, pr and prn print in a way that objects can be\\n  read by the reader", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :name cljs.core/pr, :variadic true, :file "cljs/core.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}, :method-params [(objs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8760, :max-fixed-arity 0, :fn-var true, :arglists ([& objs]), :doc "Prints the object(s) using string-print.  Prints the\\n  object(s), separated by spaces if there is more than one.\\n  By default, pr and prn print in a way that objects can be\\n  read by the reader"}, tree-map-seq-push {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6913, :column 8, :end-line 6913, :end-column 25, :private true, :arglists (quote ([node stack ascending?]))}, :private true, :name cljs.core/tree-map-seq-push, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([node stack ascending?]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6913, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node stack ascending?]))}, namespace {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2957, :column 7, :end-line 2957, :end-column 16, :arglists (quote ([x])), :doc "Returns the namespace String of a symbol or keyword, or nil if not present."}, :name cljs.core/namespace, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2957, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns the namespace String of a symbol or keyword, or nil if not present."}, empty-unordered-hash {:name cljs.core/empty-unordered-hash, :file "cljs/core.cljs", :line nil, :column nil, :end-line 1195, :end-column 36, :private true, :meta {:file "cljs/core.cljs", :line 1195, :column 16, :end-line 1195, :end-column 36, :private true}}, obj-map {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7601, :column 7, :end-line 7601, :end-column 14, :arglists (quote ([& keyvals])), :doc "keyval => key val\\n  Returns a new object map with supplied mappings.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}}, :name cljs.core/obj-map, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}, :method-params [(keyvals)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 7601, :max-fixed-arity 0, :fn-var true, :arglists ([& keyvals]), :doc "keyval => key val\\n  Returns a new object map with supplied mappings."}, Reduced {:num-fields 1, :protocols #{cljs.core/IDeref}, :name cljs.core/Reduced, :file "cljs/core.cljs", :end-column 17, :type true, :column 10, :line 1244, :record false, :end-line 1244, :skip-protocol-flag #{cljs.core/IDeref}}, ->t5671 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([nil-iter meta5672])), :file "cljs/core.cljs"}, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core/->t5671, :variadic false, :file "cljs/core.cljs", :method-params ([nil-iter meta5672]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column nil, :factory :positional, :line nil, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nil-iter meta5672])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, -conj {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 449, :column 9, :end-line 449, :end-column 14, :tag clj, :protocol cljs.core/ICollection, :doc "Returns a new collection of coll with o added to it. The new item\\n     should be added to the most efficient place, e.g.\\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\\n     (conj \'(2 3 4 5) 1) => \'(1 2 3 4 5)", :arglists (quote ([coll o]))}, :protocol cljs.core/ICollection, :name cljs.core/-conj, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([coll o]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 449, :max-fixed-arity 2, :tag clj, :fn-var true, :arglists (quote ([coll o])), :doc "Returns a new collection of coll with o added to it. The new item\\n     should be added to the most efficient place, e.g.\\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\\n     (conj \'(2 3 4 5) 1) => \'(1 2 3 4 5)"}, NodeSeq {:num-fields 5, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/NodeSeq, :file "cljs/core.cljs", :end-column 17, :type true, :column 10, :line 6541, :record false, :end-line 6541, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, = {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1102, :column 16, :end-line 1102, :end-column 17, :tag boolean, :arglists (quote ([x] [x y] [x y & more])), :doc "Equality. Returns true if x equals y, false if not. Compares\\n  numbers and collections in a type-independent manner.  Clojure\'s immutable data\\n  structures define -equiv (and thus =) as a value, not an identity,\\n  comparison.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/=, :variadic true, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1102, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "Equality. Returns true if x equals y, false if not. Compares\\n  numbers and collections in a type-independent manner.  Clojure\'s immutable data\\n  structures define -equiv (and thus =) as a value, not an identity,\\n  comparison."}, ITransientMap {:meta {:file "cljs/core.cljs", :line 661, :column 14, :end-line 661, :end-column 27, :doc "Protocol for adding mapping functionality to transient collections.", :protocol-symbol true, :protocol-info {:methods {-dissoc! [[tcoll key]]}}}, :protocol-symbol true, :name cljs.core/ITransientMap, :file "cljs/core.cljs", :end-column 27, :column nil, :line nil, :protocol-info {:methods {-dissoc! [[tcoll key]]}}, :info nil, :end-line 661, :impls #{cljs.core/TransientHashMap cljs.core/TransientArrayMap}, :doc "Protocol for adding mapping functionality to transient collections."}, push-tail {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4618, :column 8, :end-line 4618, :end-column 17, :private true, :arglists (quote ([pv level parent tailnode]))}, :private true, :name cljs.core/push-tail, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([pv level parent tailnode]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4618, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pv level parent tailnode]))}, take {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4214, :column 7, :end-line 4214, :end-column 11, :arglists (quote ([n] [n coll])), :doc "Returns a lazy sequence of the first n items in coll, or all items if\\n  there are fewer than n.  Returns a stateful transducer when\\n  no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}}, :name cljs.core/take, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}, :method-params ([n] [n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4214, :max-fixed-arity 2, :fn-var true, :arglists ([n] [n coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\\n  there are fewer than n.  Returns a stateful transducer when\\n  no collection is provided."}, vector? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1907, :column 16, :end-line 1907, :end-column 23, :tag boolean, :arglists (quote ([x])), :doc "Return true if x satisfies IVector"}, :name cljs.core/vector?, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1907, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Return true if x satisfies IVector"}, array-index-of-equiv? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5670, :column 8, :end-line 5670, :end-column 29, :private true, :arglists (quote ([arr k]))}, :private true, :name cljs.core/array-index-of-equiv?, :variadic false, :file "cljs/core.cljs", :end-column 29, :method-params ([arr k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5670, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr k]))}, bitmap-indexed-node-index {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6073, :column 8, :end-line 6073, :end-column 33, :private true, :arglists (quote ([bitmap bit]))}, :private true, :name cljs.core/bitmap-indexed-node-index, :variadic false, :file "cljs/core.cljs", :end-column 33, :method-params ([bitmap bit]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6073, :max-fixed-arity 2, :fn-var true, :arglists (quote ([bitmap bit]))}, boolean {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1983, :column 16, :end-line 1983, :end-column 23, :tag boolean, :arglists (quote ([x])), :doc "Coerce to boolean"}, :name cljs.core/boolean, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1983, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Coerce to boolean"}, IChunk {:meta {:file "cljs/core.cljs", :line 684, :column 14, :end-line 684, :end-column 20, :doc "Protocol for accessing the items of a chunk.", :protocol-symbol true, :protocol-info {:methods {-drop-first [[coll]]}}}, :protocol-symbol true, :name cljs.core/IChunk, :file "cljs/core.cljs", :end-column 20, :column nil, :line nil, :protocol-info {:methods {-drop-first [[coll]]}}, :info nil, :end-line 684, :impls #{cljs.core/ArrayChunk}, :doc "Protocol for accessing the items of a chunk."}, bit-shift-left {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2532, :column 7, :end-line 2532, :end-column 21, :arglists (quote ([x n])), :doc "Bitwise shift left"}, :name cljs.core/bit-shift-left, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2532, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n])), :doc "Bitwise shift left"}, random-uuid {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9684, :column 7, :end-line 9684, :end-column 18, :arglists (quote ([]))}, :name cljs.core/random-uuid, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9684, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, rand-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9228, :column 7, :end-line 9228, :end-column 15, :arglists (quote ([n])), :doc "Returns a random integer between 0 (inclusive) and n (exclusive)."}, :name cljs.core/rand-int, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9228, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a random integer between 0 (inclusive) and n (exclusive)."}, aclone {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 340, :column 7, :end-line 340, :end-column 13, :arglists (quote ([arr])), :doc "Returns a javascript array, cloned from the passed in array"}, :name cljs.core/aclone, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([arr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arr])), :doc "Returns a javascript array, cloned from the passed in array"}, BlackNode {:meta {:file "cljs/core.cljs", :line 6976, :column 18, :end-line 6976, :end-column 27, :declared true}, :num-fields 5, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :name cljs.core/BlackNode, :file "cljs/core.cljs", :end-column 19, :type true, :column 10, :line 7079, :record false, :declared true, :end-line 7079, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, vreset! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4048, :column 7, :end-line 4048, :end-column 14, :arglists (quote ([vol newval])), :doc "Sets the value of volatile to newval without regard for the\\n   current value. Returns newval."}, :name cljs.core/vreset!, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([vol newval]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4048, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vol newval])), :doc "Sets the value of volatile to newval without regard for the\\n   current value. Returns newval."}, chunk {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3168, :column 7, :end-line 3168, :end-column 12, :arglists (quote ([b]))}, :name cljs.core/chunk, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b]))}, dec {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2314, :column 7, :end-line 2314, :end-column 10, :arglists (quote ([x])), :doc "Returns a number one less than num."}, :name cljs.core/dec, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a number one less than num."}, ->t5674 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([nil-iter meta5675])), :file "cljs/core.cljs"}, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core/->t5674, :variadic false, :file "cljs/core.cljs", :method-params ([nil-iter meta5675]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column nil, :factory :positional, :line nil, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nil-iter meta5675])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, map {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4167, :column 7, :end-line 4167, :end-column 10, :arglists (quote ([f] [f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls])), :doc "Returns a lazy sequence consisting of the result of applying f to\\n  the set of first items of each coll, followed by applying f to the\\n  set of second items in each coll, until any one of the colls is\\n  exhausted.  Any remaining items in other colls are ignored. Function\\n  f should accept number-of-colls arguments. Returns a transducer when\\n  no collection is provided.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f] [f coll] [f c1 c2] [f c1 c2 c3]), :arglists ([f] [f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls]), :arglists-meta (nil nil nil nil nil)}}, :name cljs.core/map, :variadic true, :file "cljs/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f] [f coll] [f c1 c2] [f c1 c2 c3]), :arglists ([f] [f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls]), :arglists-meta (nil nil nil nil nil)}, :method-params ([f] [f coll] [f c1 c2] [f c1 c2 c3]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column nil, :line nil, :end-line 4167, :max-fixed-arity 4, :fn-var true, :arglists ([f] [f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\\n  the set of first items of each coll, followed by applying f to the\\n  set of second items in each coll, until any one of the colls is\\n  exhausted.  Any remaining items in other colls are ignored. Function\\n  f should accept number-of-colls arguments. Returns a transducer when\\n  no collection is provided."}, juxt {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8457, :column 7, :end-line 8457, :end-column 11, :arglists (quote ([f] [f g] [f g h] [f g h & fs])), :doc "Takes a set of functions and returns a fn that is the juxtaposition\\n  of those fns.  The returned fn takes a variable number of args, and\\n  returns a vector containing the result of applying each fn to the\\n  args (left-to-right).\\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f] [f g] [f g h]), :arglists ([f] [f g] [f g h] [f g h & fs]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/juxt, :variadic true, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([f] [f g] [f g h]), :arglists ([f] [f g] [f g h] [f g h & fs]), :arglists-meta (nil nil nil nil)}, :method-params ([f] [f g] [f g h]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 8457, :max-fixed-arity 3, :fn-var true, :arglists ([f] [f g] [f g h] [f g h & fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\\n  of those fns.  The returned fn takes a variable number of args, and\\n  returns a vector containing the result of applying each fn to the\\n  args (left-to-right).\\n  ((juxt a b c) x) => [(a x) (b x) (c x)]"}, ->t7376 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([nil-iter meta7377])), :file "cljs/core.cljs"}, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core/->t7376, :variadic false, :file "cljs/core.cljs", :method-params ([nil-iter meta7377]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column nil, :factory :positional, :line nil, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nil-iter meta7377])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, < {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2266, :column 16, :end-line 2266, :end-column 17, :tag boolean, :arglists (quote ([x] [x y] [x y & more])), :doc "Returns non-nil if nums are in monotonically increasing order,\\n  otherwise false.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/<, :variadic true, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2266, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "Returns non-nil if nums are in monotonically increasing order,\\n  otherwise false."}, inode-kv-reduce {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6090, :column 8, :end-line 6090, :end-column 23, :private true, :arglists (quote ([arr f init]))}, :private true, :name cljs.core/inode-kv-reduce, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([arr f init]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6090, :max-fixed-arity 3, :fn-var true, :arglists (quote ([arr f init]))}, obj-map->hash-map {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5472, :column 8, :end-line 5472, :end-column 25, :private true, :arglists (quote ([m k v]))}, :private true, :name cljs.core/obj-map->hash-map, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([m k v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5472, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m k v]))}, test {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9784, :column 7, :end-line 9784, :end-column 11, :arglists (quote ([v])), :doc "test [v] finds fn at key :test in var metadata and calls it,\\n  presuming failure will throw exception"}, :name cljs.core/test, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9784, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "test [v] finds fn at key :test in var metadata and calls it,\\n  presuming failure will throw exception"}, rest {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1080, :column 12, :end-line 1080, :end-column 16, :tag seq, :arglists (quote ([coll])), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\\n  argument."}, :name cljs.core/rest, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag seq, :end-line 1080, :max-fixed-arity 1, :tag seq, :fn-var true, :arglists (quote ([coll])), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\\n  argument."}, ex-data {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9747, :column 7, :end-line 9747, :end-column 14, :arglists (quote ([ex])), :doc "Alpha - subject to change.\\n  Returns exception data (a map) if ex is an ExceptionInfo.\\n  Otherwise returns nil."}, :name cljs.core/ex-data, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([ex]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9747, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex])), :doc "Alpha - subject to change.\\n  Returns exception data (a map) if ex is an ExceptionInfo.\\n  Otherwise returns nil."}, PersistentArrayMapSeq {:num-fields 3, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/PersistentArrayMapSeq, :file "cljs/core.cljs", :end-column 31, :type true, :column 10, :line 5711, :record false, :end-line 5711, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, -drop-first {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 686, :column 4, :end-line 686, :end-column 15, :protocol cljs.core/IChunk, :doc "Return a new chunk of coll with the first item removed.", :arglists (quote ([coll]))}, :protocol cljs.core/IChunk, :name cljs.core/-drop-first, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 686, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Return a new chunk of coll with the first item removed."}, isa? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9265, :column 16, :end-line 9265, :end-column 20, :tag boolean, :arglists (quote ([child parent] [h child parent])), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\\n  parent, either via a JavaScript type inheritance relationship or a\\n  relationship established via derive. h must be a hierarchy obtained\\n  from make-hierarchy, if not supplied defaults to the global\\n  hierarchy", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([child parent] [h child parent]), :arglists ([child parent] [h child parent]), :arglists-meta (nil nil)}}, :name cljs.core/isa?, :variadic false, :file "cljs/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([child parent] [h child parent]), :arglists ([child parent] [h child parent]), :arglists-meta (nil nil)}, :method-params ([child parent] [h child parent]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 9265, :max-fixed-arity 3, :tag boolean, :fn-var true, :arglists ([child parent] [h child parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\\n  parent, either via a JavaScript type inheritance relationship or a\\n  relationship established via derive. h must be a hierarchy obtained\\n  from make-hierarchy, if not supplied defaults to the global\\n  hierarchy"}, -clone {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 433, :column 9, :end-line 433, :end-column 15, :tag clj, :protocol cljs.core/ICloneable, :doc "Creates a clone of value.", :arglists (quote ([value]))}, :protocol cljs.core/ICloneable, :name cljs.core/-clone, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 433, :max-fixed-arity 1, :tag clj, :fn-var true, :arglists (quote ([value])), :doc "Creates a clone of value."}, munge {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9888, :column 7, :end-line 9888, :end-column 12, :arglists (quote ([name]))}, :name cljs.core/munge, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9888, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, empty-ordered-hash {:name cljs.core/empty-ordered-hash, :file "cljs/core.cljs", :line nil, :column nil, :end-line 1180, :end-column 34, :private true, :meta {:file "cljs/core.cljs", :line 1180, :column 16, :end-line 1180, :end-column 34, :private true}}, DEMUNGE_MAP {:name cljs.core/DEMUNGE_MAP, :file "cljs/core.cljs", :line nil, :column nil, :end-line 302, :end-column 14, :jsdoc ["@enum {string}"], :meta {:file "cljs/core.cljs", :line 302, :column 3, :end-line 302, :end-column 14, :jsdoc ["@enum {string}"]}}, ES6IteratorSeq {:num-fields 3, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :name cljs.core/ES6IteratorSeq, :file "cljs/core.cljs", :end-column 24, :type true, :column 10, :line 1137, :record false, :end-line 1137, :skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}}, ->NeverEquiv {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5427, :column 10, :end-line 5427, :end-column 20, :protocols #{cljs.core/IEquiv cljs.core/Object}, :skip-protocol-flag #{cljs.core/IEquiv}, :factory :positional, :arglists (quote ([]))}, :protocols #{cljs.core/IEquiv cljs.core/Object}, :name cljs.core/->NeverEquiv, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5427, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag #{cljs.core/IEquiv}}, re-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8553, :column 7, :end-line 8553, :end-column 13, :arglists (quote ([re s])), :doc "Returns a lazy sequence of successive matches of re in s."}, :name cljs.core/re-seq, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([re s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8553, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re s])), :doc "Returns a lazy sequence of successive matches of re in s."}, char? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 218, :column 16, :end-line 218, :end-column 21, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is a JavaScript char."}, :name cljs.core/char?, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 218, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a JavaScript char."}, make-hierarchy {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9251, :column 7, :end-line 9251, :end-column 21, :arglists (quote ([])), :doc "Creates a hierarchy object for use with derive, isa? etc."}, :name cljs.core/make-hierarchy, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9251, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Creates a hierarchy object for use with derive, isa? etc."}, Symbol {:meta {:file "cljs/core.cljs", :line 814, :column 15, :end-line 814, :end-column 21, :declared true}, :num-fields 5, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/Object cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :name cljs.core/Symbol, :file "cljs/core.cljs", :end-column 16, :type true, :column 10, :line 910, :record false, :declared true, :end-line 910, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}}, tv-push-tail {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5154, :column 8, :end-line 5154, :end-column 20, :private true, :arglists (quote ([tv level parent tail-node]))}, :private true, :name cljs.core/tv-push-tail, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([tv level parent tail-node]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5154, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tv level parent tail-node]))}, -reduce {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 554, :column 4, :end-line 554, :end-column 11, :protocol cljs.core/IReduce, :doc "f should be a function of 2 arguments. If start is not supplied,\\n     returns the result of applying f to the first 2 items in coll, then\\n     applying f to that result and the 3rd item, etc.", :arglists (quote ([coll f] [coll f start])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll f] [coll f start]), :arglists ([coll f] [coll f start]), :arglists-meta (nil nil)}}, :protocol cljs.core/IReduce, :name cljs.core/-reduce, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll f] [coll f start]), :arglists ([coll f] [coll f start]), :arglists-meta (nil nil)}, :method-params ([coll f] [coll f start]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 554, :max-fixed-arity 3, :fn-var true, :arglists ([coll f] [coll f start]), :doc "f should be a function of 2 arguments. If start is not supplied,\\n     returns the result of applying f to the first 2 items in coll, then\\n     applying f to that result and the 3rd item, etc."}, -count {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 438, :column 12, :end-line 438, :end-column 18, :tag number, :protocol cljs.core/ICounted, :doc "Calculates the count of coll in constant time. Used by cljs.core/count.", :arglists (quote ([coll]))}, :protocol cljs.core/ICounted, :name cljs.core/-count, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 438, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([coll])), :doc "Calculates the count of coll in constant time. Used by cljs.core/count."}, keep {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3888, :column 7, :end-line 3888, :end-column 11, :arglists (quote ([f] [f coll])), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\\n  this means false return values will be included.  f must be free of\\n  side-effects.  Returns a transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :name cljs.core/keep, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :method-params ([f] [f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3888, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\\n  this means false return values will be included.  f must be free of\\n  side-effects.  Returns a transducer when no collection is provided."}, char {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2334, :column 7, :end-line 2334, :end-column 11, :arglists (quote ([x])), :doc "Coerce to char"}, :name cljs.core/char, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2334, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Coerce to char"}, mapcat {:protocol-inline nil, :meta {:added "1.0", :file "cljs/core.cljs", :end-column 13, :static true, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([f]), :arglists ([f] [f & colls]), :arglists-meta (nil nil)}, :column 7, :line 4382, :end-line 4382, :arglists (quote ([f] [f & colls])), :doc "Returns the result of applying concat to the result of applying map\\n  to f and colls.  Thus function f should return a collection. Returns\\n  a transducer when no collections are provided"}, :added "1.0", :name cljs.core/mapcat, :variadic true, :file "cljs/core.cljs", :end-column 13, :static true, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([f]), :arglists ([f] [f & colls]), :arglists-meta (nil nil)}, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4382, :max-fixed-arity 1, :fn-var true, :arglists ([f] [f & colls]), :doc "Returns the result of applying concat to the result of applying map\\n  to f and colls.  Thus function f should return a collection. Returns\\n  a transducer when no collections are provided"}, unchecked-long {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2448, :column 7, :end-line 2448, :end-column 21, :arglists (quote ([x])), :doc "Coerce to long by stripping decimal places. Identical to `int\'."}, :name cljs.core/unchecked-long, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2448, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Coerce to long by stripping decimal places. Identical to `int\'."}, m3-seed {:name cljs.core/m3-seed, :file "cljs/core.cljs", :line nil, :column nil, :end-line 772, :end-column 13, :meta {:file "cljs/core.cljs", :line 772, :column 6, :end-line 772, :end-column 13}}, some? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 202, :column 16, :end-line 202, :end-column 21, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is not nil, false otherwise."}, :name cljs.core/some?, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 202, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is not nil, false otherwise."}, unchecked-negate {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2403, :column 7, :end-line 2403, :end-column 23, :arglists (quote ([x]))}, :name cljs.core/unchecked-negate, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2403, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, symbol-identical? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2948, :column 16, :end-line 2948, :end-column 33, :tag boolean, :arglists (quote ([x y])), :doc "Efficient test to determine that two symbol are identical."}, :name cljs.core/symbol-identical?, :variadic false, :file "cljs/core.cljs", :end-column 33, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2948, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([x y])), :doc "Efficient test to determine that two symbol are identical."}, reverse {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2810, :column 7, :end-line 2810, :end-column 14, :arglists (quote ([coll])), :doc "Returns a seq of the items in coll in reverse order. Not lazy."}, :name cljs.core/reverse, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2810, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns a seq of the items in coll in reverse order. Not lazy."}, range {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8360, :column 7, :end-line 8360, :end-column 12, :arglists (quote ([] [end] [start end] [start end step])), :doc "Returns a lazy seq of nums from start (inclusive) to end\\n   (exclusive), by step, where start defaults to 0, step to 1,\\n   and end to infinity.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [end] [start end] [start end step]), :arglists ([] [end] [start end] [start end step]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/range, :variadic false, :file "cljs/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [end] [start end] [start end step]), :arglists ([] [end] [start end] [start end step]), :arglists-meta (nil nil nil nil)}, :method-params ([] [end] [start end] [start end step]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 8360, :max-fixed-arity 3, :fn-var true, :arglists ([] [end] [start end] [start end step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\\n   (exclusive), by step, where start defaults to 0, step to 1,\\n   and end to infinity."}, bit-count {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2548, :column 7, :end-line 2548, :end-column 16, :arglists (quote ([v])), :doc "Counts the number of bits set in n"}, :name cljs.core/bit-count, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2548, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Counts the number of bits set in n"}, create-node {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6523, :column 8, :end-line 6523, :end-column 19, :private true, :arglists (quote ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2])), :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2]), :arglists ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2]), :arglists-meta (nil nil)}}, :private true, :name cljs.core/create-node, :variadic false, :file "cljs/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2]), :arglists ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2]), :arglists-meta (nil nil)}, :method-params ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6523, :max-fixed-arity 7, :fn-var true, :arglists ([shift key1 val1 key2hash key2 val2] [edit shift key1 val1 key2hash key2 val2])}, sort {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2099, :column 7, :end-line 2099, :end-column 11, :arglists (quote ([coll] [comp coll])), :doc "Returns a sorted sequence of the items in coll. Comp can be\\n   boolean-valued comparison function, or a -/0/+ valued comparator.\\n   Comp defaults to compare.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [comp coll]), :arglists ([coll] [comp coll]), :arglists-meta (nil nil)}}, :name cljs.core/sort, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [comp coll]), :arglists ([coll] [comp coll]), :arglists-meta (nil nil)}, :method-params ([coll] [comp coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2099, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [comp coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\\n   boolean-valued comparison function, or a -/0/+ valued comparator.\\n   Comp defaults to compare."}, ->MetaFn {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1761, :column 10, :end-line 1761, :end-column 16, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([afn meta]))}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :name cljs.core/->MetaFn, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([afn meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 1761, :max-fixed-arity 2, :fn-var true, :arglists (quote ([afn meta])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, unchecked-inc-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2386, :column 7, :end-line 2386, :end-column 24, :arglists (quote ([x]))}, :name cljs.core/unchecked-inc-int, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2386, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, -compare {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 680, :column 12, :end-line 680, :end-column 20, :tag number, :protocol cljs.core/IComparable, :doc "Returns a negative number, zero, or a positive number when x is logically\\n     \'less than\', \'equal to\', or \'greater than\' y.", :arglists (quote ([x y]))}, :protocol cljs.core/IComparable, :name cljs.core/-compare, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 680, :max-fixed-arity 2, :tag number, :fn-var true, :arglists (quote ([x y])), :doc "Returns a negative number, zero, or a positive number when x is logically\\n     \'less than\', \'equal to\', or \'greater than\' y."}, map-indexed {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3861, :column 7, :end-line 3861, :end-column 18, :arglists (quote ([f] [f coll])), :doc "Returns a lazy sequence consisting of the result of applying f to 0\\n  and the first item of coll, followed by applying f to 1 and the second\\n  item in coll, etc, until coll is exhausted. Thus function f should\\n  accept 2 arguments, index and item.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :name cljs.core/map-indexed, :variadic false, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :method-params ([f] [f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3861, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\\n  and the first item of coll, followed by applying f to 1 and the second\\n  item in coll, etc, until coll is exhausted. Thus function f should\\n  accept 2 arguments, index and item."}, array-list {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8170, :column 7, :end-line 8170, :end-column 17, :arglists (quote ([]))}, :name cljs.core/array-list, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8170, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, rand-nth {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9232, :column 7, :end-line 9232, :end-column 15, :arglists (quote ([coll])), :doc "Return a random element of the (sequential) collection. Will have\\n  the same performance characteristics as nth for the given\\n  collection."}, :name cljs.core/rand-nth, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Return a random element of the (sequential) collection. Will have\\n  the same performance characteristics as nth for the given\\n  collection."}, comp {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3778, :column 7, :end-line 3778, :end-column 11, :arglists (quote ([] [f] [f g] [f g h] [f1 f2 f3 & fs])), :doc "Takes a set of functions and returns a fn that is the composition\\n  of those fns.  The returned fn takes a variable number of args,\\n  applies the rightmost of fns to the args, the next\\n  fn (right-to-left) to the result, etc.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([] [f] [f g] [f g h]), :arglists ([] [f] [f g] [f g h] [f1 f2 f3 & fs]), :arglists-meta (nil nil nil nil nil)}}, :name cljs.core/comp, :variadic true, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([] [f] [f g] [f g h]), :arglists ([] [f] [f g] [f g h] [f1 f2 f3 & fs]), :arglists-meta (nil nil nil nil nil)}, :method-params ([] [f] [f g] [f g h]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column nil, :line nil, :end-line 3778, :max-fixed-arity 3, :fn-var true, :arglists ([] [f] [f g] [f g h] [f1 f2 f3 & fs]), :doc "Takes a set of functions and returns a fn that is the composition\\n  of those fns.  The returned fn takes a variable number of args,\\n  applies the rightmost of fns to the args, the next\\n  fn (right-to-left) to the result, etc."}, array-chunk {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3088, :column 7, :end-line 3088, :end-column 18, :arglists (quote ([arr] [arr off] [arr off end])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([arr] [arr off] [arr off end]), :arglists ([arr] [arr off] [arr off end]), :arglists-meta (nil nil nil)}}, :name cljs.core/array-chunk, :variadic false, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([arr] [arr off] [arr off end]), :arglists ([arr] [arr off] [arr off end]), :arglists-meta (nil nil nil)}, :method-params ([arr] [arr off] [arr off end]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 3088, :max-fixed-arity 3, :fn-var true, :arglists ([arr] [arr off] [arr off end])}, dispatch-fn {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9651, :column 7, :end-line 9651, :end-column 18, :arglists (quote ([multifn])), :doc "Given a multimethod, return it\'s dispatch-fn."}, :name cljs.core/dispatch-fn, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([multifn]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9651, :max-fixed-arity 1, :fn-var true, :arglists (quote ([multifn])), :doc "Given a multimethod, return it\'s dispatch-fn."}, bit-shift-right-zero-fill {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2540, :column 7, :end-line 2540, :end-column 32, :arglists (quote ([x n])), :doc "DEPRECATED: Bitwise shift right with zero fill"}, :name cljs.core/bit-shift-right-zero-fill, :variadic false, :file "cljs/core.cljs", :end-column 32, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2540, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n])), :doc "DEPRECATED: Bitwise shift right with zero fill"}, js-reserved? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9853, :column 8, :end-line 9853, :end-column 20, :private true, :arglists (quote ([x]))}, :private true, :name cljs.core/js-reserved?, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9853, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, -as-transient {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 645, :column 9, :end-line 645, :end-column 22, :tag clj, :protocol cljs.core/IEditableCollection, :doc "Returns a new, transient version of the collection, in constant time.", :arglists (quote ([coll]))}, :protocol cljs.core/IEditableCollection, :name cljs.core/-as-transient, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 645, :max-fixed-arity 1, :tag clj, :fn-var true, :arglists (quote ([coll])), :doc "Returns a new, transient version of the collection, in constant time."}, dorun {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8493, :column 7, :end-line 8493, :end-column 12, :arglists (quote ([coll] [n coll])), :doc "When lazy sequences are produced via functions that have side\\n  effects, any effects other than those needed to produce the first\\n  element in the seq do not occur until the seq is consumed. dorun can\\n  be used to force any effects. Walks through the successive nexts of\\n  the seq, does not retain the head and returns nil.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [n coll]), :arglists ([coll] [n coll]), :arglists-meta (nil nil)}}, :name cljs.core/dorun, :variadic false, :file "cljs/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [n coll]), :arglists ([coll] [n coll]), :arglists-meta (nil nil)}, :method-params ([coll] [n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8493, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [n coll]), :doc "When lazy sequences are produced via functions that have side\\n  effects, any effects other than those needed to produce the first\\n  element in the seq do not occur until the seq is consumed. dorun can\\n  be used to force any effects. Walks through the successive nexts of\\n  the seq, does not retain the head and returns nil."}, pr-sequential-writer {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8573, :column 7, :end-line 8573, :end-column 27, :arglists (quote ([writer print-one begin sep end opts coll]))}, :name cljs.core/pr-sequential-writer, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([writer print-one begin sep end opts coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8573, :max-fixed-arity 7, :fn-var true, :arglists (quote ([writer print-one begin sep end opts coll]))}, accumulating-seq-count {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1564, :column 8, :end-line 1564, :end-column 30, :private true, :arglists (quote ([coll]))}, :private true, :name cljs.core/accumulating-seq-count, :variadic false, :file "cljs/core.cljs", :end-column 30, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1564, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, IIndexed {:meta {:file "cljs/core.cljs", :line 458, :column 14, :end-line 458, :end-column 22, :doc "Protocol for collections to provide idexed-based access to their items.", :protocol-symbol true, :protocol-info {:methods {-nth [[coll n] [coll n not-found]]}}}, :protocol-symbol true, :name cljs.core/IIndexed, :file "cljs/core.cljs", :end-column 22, :column nil, :line nil, :protocol-info {:methods {-nth [[coll n] [coll n not-found]]}}, :info nil, :end-line 458, :impls #{cljs.core/TransientVector cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/Range cljs.core/RedNode}, :doc "Protocol for collections to provide idexed-based access to their items."}, disj {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1845, :column 7, :end-line 1845, :end-column 11, :arglists (quote ([coll] [coll k] [coll k & ks])), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\\n  does not contain key(s).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([coll] [coll k]), :arglists ([coll] [coll k] [coll k & ks]), :arglists-meta (nil nil nil)}}, :name cljs.core/disj, :variadic true, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([coll] [coll k]), :arglists ([coll] [coll k] [coll k & ks]), :arglists-meta (nil nil nil)}, :method-params ([coll] [coll k]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 1845, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [coll k] [coll k & ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\\n  does not contain key(s)."}, IPrintWithWriter {:meta {:file "cljs/core.cljs", :line 619, :column 14, :end-line 619, :end-column 30, :doc "The old IPrintable protocol\'s implementation consisted of building a giant\\n   list of strings to concatenate.  This involved lots of concat calls,\\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\\n   be implemented efficiently in terms of e.g. a StringBuffer append.", :protocol-symbol true, :protocol-info {:methods {-pr-writer [[o writer opts]]}}}, :protocol-symbol true, :name cljs.core/IPrintWithWriter, :file "cljs/core.cljs", :end-column 30, :column nil, :line nil, :protocol-info {:methods {-pr-writer [[o writer opts]]}}, :info nil, :end-line 619, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/Eduction cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Volatile cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ExceptionInfo cljs.core/Var cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/TaggedLiteral cljs.core/ES6IteratorSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/LazyTransformer cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "The old IPrintable protocol\'s implementation consisted of building a giant\\n   list of strings to concatenate.  This involved lots of concat calls,\\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\\n   be implemented efficiently in terms of e.g. a StringBuffer append."}, ->UUID {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9657, :column 10, :end-line 9657, :end-column 14, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IPrintWithWriter cljs.core/IComparable}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter cljs.core/IComparable}, :factory :positional, :arglists (quote ([uuid __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IPrintWithWriter cljs.core/IComparable}, :name cljs.core/->UUID, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([uuid __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 9657, :max-fixed-arity 2, :fn-var true, :arglists (quote ([uuid __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter cljs.core/IComparable}}, IVector {:meta {:file "cljs/core.cljs", :line 528, :column 14, :end-line 528, :end-column 21, :doc "Protocol for adding vector functionality to collections.", :protocol-symbol true, :protocol-info {:methods {-assoc-n [[coll n val]]}}}, :protocol-symbol true, :name cljs.core/IVector, :file "cljs/core.cljs", :end-column 21, :column nil, :line nil, :protocol-info {:methods {-assoc-n [[coll n val]]}}, :info nil, :end-line 528, :impls #{cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/RedNode}, :doc "Protocol for adding vector functionality to collections."}, IIterable {:meta {:file "cljs/core.cljs", :line 727, :column 14, :end-line 727, :end-column 23, :doc "Protocol for iterating over a collection.", :protocol-symbol true, :protocol-info {:methods {-iterator [[coll]]}}}, :protocol-symbol true, :name cljs.core/IIterable, :file "cljs/core.cljs", :end-column 23, :column nil, :line nil, :protocol-info {:methods {-iterator [[coll]]}}, :info nil, :end-line 727, :impls #{cljs.core/PersistentArrayMap cljs.core/IndexedSeq cljs.core/PersistentVector cljs.core/Range}, :doc "Protocol for iterating over a collection."}, *2 {:name cljs.core/*2, :file "cljs/core.cljs", :line nil, :column nil, :end-line 153, :end-column 5, :doc "bound in a repl thread to the second most recent value printed", :meta {:file "cljs/core.cljs", :line 153, :column 3, :end-line 153, :end-column 5, :doc "bound in a repl thread to the second most recent value printed"}}, Eduction {:num-fields 2, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :name cljs.core/Eduction, :file "cljs/core.cljs", :end-column 18, :type true, :column 10, :line 9088, :record false, :end-line 9088, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}}, pv-clone-node {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4599, :column 8, :end-line 4599, :end-column 21, :private true, :arglists (quote ([node]))}, :private true, :name cljs.core/pv-clone-node, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4599, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, cons {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2883, :column 7, :end-line 2883, :end-column 11, :arglists (quote ([x coll])), :doc "Returns a new seq where x is the first element and seq is the rest."}, :name cljs.core/cons, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([x coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2883, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x coll])), :doc "Returns a new seq where x is the first element and seq is the rest."}, PersistentTreeSet {:num-fields 3, :protocols #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.core/PersistentTreeSet, :file "cljs/core.cljs", :end-column 27, :type true, :column 10, :line 7943, :record false, :end-line 7943, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ns-lookup {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9921, :column 8, :end-line 9921, :end-column 17, :private true, :arglists (quote ([ns-obj k]))}, :private true, :name cljs.core/ns-lookup, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([ns-obj k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9921, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ns-obj k]))}, floats {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2458, :column 7, :end-line 2458, :end-column 13, :arglists (quote ([x]))}, :name cljs.core/floats, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2458, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, TransientVector {:meta {:file "cljs/core.cljs", :line 4704, :column 44, :end-line 4704, :end-column 59, :declared true}, :num-fields 4, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :name cljs.core/TransientVector, :file "cljs/core.cljs", :end-column 25, :type true, :column 10, :line 5196, :record false, :declared true, :end-line 5196, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}}, pos? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2568, :column 16, :end-line 2568, :end-column 20, :tag boolean, :arglists (quote ([n])), :doc "Returns true if num is greater than zero, else false"}, :name cljs.core/pos?, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2568, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([n])), :doc "Returns true if num is greater than zero, else false"}, fnil {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3836, :column 7, :end-line 3836, :end-column 11, :arglists (quote ([f x] [f x y] [f x y z])), :doc "Takes a function f, and returns a function that calls f, replacing\\n  a nil first argument to f with the supplied value x. Higher arity\\n  versions can replace arguments in the second and third\\n  positions (y, z). Note that the function f can take any number of\\n  arguments, not just the one(s) being nil-patched.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([f x] [f x y] [f x y z]), :arglists ([f x] [f x y] [f x y z]), :arglists-meta (nil nil nil)}}, :name cljs.core/fnil, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([f x] [f x y] [f x y z]), :arglists ([f x] [f x y] [f x y z]), :arglists-meta (nil nil nil)}, :method-params ([f x] [f x y] [f x y z]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 3836, :max-fixed-arity 4, :fn-var true, :arglists ([f x] [f x y] [f x y z]), :doc "Takes a function f, and returns a function that calls f, replacing\\n  a nil first argument to f with the supplied value x. Higher arity\\n  versions can replace arguments in the second and third\\n  positions (y, z). Note that the function f can take any number of\\n  arguments, not just the one(s) being nil-patched."}, merge-with {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7777, :column 7, :end-line 7777, :end-column 17, :arglists (quote ([f & maps])), :doc "Returns a map that consists of the rest of the maps conj-ed onto\\n  the first.  If a key occurs in more than one map, the mapping(s)\\n  from the latter (left-to-right) will be combined with the mapping in\\n  the result by calling (f val-in-result val-in-latter).", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f maps)], :arglists ([f & maps]), :arglists-meta (nil)}}, :name cljs.core/merge-with, :variadic true, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f maps)], :arglists ([f & maps]), :arglists-meta (nil)}, :method-params [(f maps)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 7777, :max-fixed-arity 1, :fn-var true, :arglists ([f & maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\\n  the first.  If a key occurs in more than one map, the mapping(s)\\n  from the latter (left-to-right) will be combined with the mapping in\\n  the result by calling (f val-in-result val-in-latter)."}, nthrest {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1675, :column 7, :end-line 1675, :end-column 14, :arglists (quote ([coll n])), :doc "Returns the nth rest of coll, coll when n is 0."}, :name cljs.core/nthrest, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([coll n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1675, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll n])), :doc "Returns the nth rest of coll, coll when n is 0."}, sequential? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1883, :column 16, :end-line 1883, :end-column 27, :tag boolean, :arglists (quote ([x])), :doc "Returns true if coll satisfies ISequential"}, :name cljs.core/sequential?, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1883, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if coll satisfies ISequential"}, tree-map-replace {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7424, :column 8, :end-line 7424, :end-column 24, :private true, :arglists (quote ([comp tree k v]))}, :private true, :name cljs.core/tree-map-replace, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([comp tree k v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7424, :max-fixed-arity 4, :fn-var true, :arglists (quote ([comp tree k v]))}, m3-mix-H1 {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 779, :column 15, :end-line 779, :end-column 24, :tag number, :arglists (quote ([h1 k1]))}, :name cljs.core/m3-mix-H1, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([h1 k1]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 779, :max-fixed-arity 2, :tag number, :fn-var true, :arglists (quote ([h1 k1]))}, ->TransientArrayMap {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5966, :column 10, :end-line 5966, :end-column 27, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :factory :positional, :arglists (quote ([editable? len arr]))}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :name cljs.core/->TransientArrayMap, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([editable? len arr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5966, :max-fixed-arity 3, :fn-var true, :arglists (quote ([editable? len arr])), :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, prim-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1434, :column 7, :end-line 1434, :end-column 15, :arglists (quote ([prim] [prim i])), :doc "Create seq from a primitive JavaScript Array-like.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([prim] [prim i]), :arglists ([prim] [prim i]), :arglists-meta (nil nil)}}, :name cljs.core/prim-seq, :variadic false, :file "cljs/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([prim] [prim i]), :arglists ([prim] [prim i]), :arglists-meta (nil nil)}, :method-params ([prim] [prim i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1434, :max-fixed-arity 2, :fn-var true, :arglists ([prim] [prim i]), :doc "Create seq from a primitive JavaScript Array-like."}, *print-level* {:name cljs.core/*print-level*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 122, :end-column 16, :dynamic true, :doc "*print-level* controls how many levels deep the printer will\\n  print nested objects. If it is bound to logical false, there is no\\n  limit. Otherwise, it must be bound to an integer indicating the maximum\\n  level to print. Each argument to print is at level 0; if an argument is a\\n  collection, its items are at level 1; and so on. If an object is a\\n  collection and is at a level greater than or equal to the value bound to\\n  *print-level*, the printer prints \'#\' to represent it. The root binding\\n  is nil indicating no limit.", :meta {:file "cljs/core.cljs", :line 122, :column 3, :end-line 122, :end-column 16, :dynamic true, :doc "*print-level* controls how many levels deep the printer will\\n  print nested objects. If it is bound to logical false, there is no\\n  limit. Otherwise, it must be bound to an integer indicating the maximum\\n  level to print. Each argument to print is at level 0; if an argument is a\\n  collection, its items are at level 1; and so on. If an object is a\\n  collection and is at a level greater than or equal to the value bound to\\n  *print-level*, the printer prints \'#\' to represent it. The root binding\\n  is nil indicating no limit."}}, shuffle {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2140, :column 7, :end-line 2140, :end-column 14, :arglists (quote ([coll])), :doc "Return a random permutation of coll"}, :name cljs.core/shuffle, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Return a random permutation of coll"}, ChunkedSeq {:meta {:file "cljs/core.cljs", :line 1911, :column 22, :end-line 1911, :end-column 32, :declared true}, :num-fields 6, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/ChunkedSeq, :file "cljs/core.cljs", :end-column 20, :type true, :column 10, :line 4929, :record false, :declared true, :end-line 4929, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, hash-keyword {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2891, :column 7, :end-line 2891, :end-column 19, :arglists (quote ([k]))}, :name cljs.core/hash-keyword, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2891, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, find {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2015, :column 7, :end-line 2015, :end-column 11, :arglists (quote ([coll k])), :doc "Returns the map entry for key, or nil if key not present."}, :name cljs.core/find, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([coll k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2015, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll k])), :doc "Returns the map entry for key, or nil if key not present."}, alength {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 377, :column 15, :end-line 377, :end-column 22, :tag number, :arglists (quote ([array])), :doc "Returns the length of the array. Works on arrays of all types."}, :name cljs.core/alength, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([array]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 377, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([array])), :doc "Returns the length of the array. Works on arrays of all types."}, bit-xor {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2484, :column 7, :end-line 2484, :end-column 14, :arglists (quote ([x y] [x y & more])), :doc "Bitwise exclusive or", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}}, :name cljs.core/bit-xor, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2484, :max-fixed-arity 2, :fn-var true, :arglists ([x y] [x y & more]), :doc "Bitwise exclusive or"}, ->IndexedSeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1361, :column 10, :end-line 1361, :end-column 20, :protocols #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :factory :positional, :arglists (quote ([arr i]))}, :protocols #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :name cljs.core/->IndexedSeq, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([arr i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 1361, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr i])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}}, ObjMap {:num-fields 5, :protocols #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.core/ObjMap, :file "cljs/core.cljs", :end-column 16, :type true, :column 10, :line 5496, :record false, :end-line 5496, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, unsigned-bit-shift-right {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2544, :column 7, :end-line 2544, :end-column 31, :arglists (quote ([x n])), :doc "Bitwise shift right with zero fill"}, :name cljs.core/unsigned-bit-shift-right, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2544, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n])), :doc "Bitwise shift right with zero fill"}, ES6SetEntriesIterator {:num-fields 1, :protocols #{cljs.core/Object}, :name cljs.core/ES6SetEntriesIterator, :file "cljs/core.cljs", :end-column 31, :type true, :column 10, :line 5620, :record false, :end-line 5620, :skip-protocol-flag nil}, neg? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2577, :column 16, :end-line 2577, :end-column 20, :tag boolean, :arglists (quote ([x])), :doc "Returns true if num is less than zero, else false"}, :name cljs.core/neg?, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2577, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if num is less than zero, else false"}, Cons {:num-fields 4, :protocols #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/Cons, :file "cljs/core.cljs", :end-column 14, :type true, :column 10, :line 2834, :record false, :end-line 2834, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, -remove-method {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9420, :column 4, :end-line 9420, :end-column 18, :protocol cljs.core/IMultiFn, :doc nil, :arglists (quote ([mf dispatch-val]))}, :protocol cljs.core/IMultiFn, :name cljs.core/-remove-method, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([mf dispatch-val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9420, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mf dispatch-val])), :doc nil}, ->StringIter {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3500, :column 10, :end-line 3500, :end-column 20, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([s i]))}, :protocols #{cljs.core/Object}, :name cljs.core/->StringIter, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([s i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 3500, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s i])), :skip-protocol-flag nil}, js-invoke {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 392, :column 7, :end-line 392, :end-column 16, :arglists (quote ([obj s & args])), :doc "Invoke JavaScript object method via string. Needed when the\\n  string is not a valid unquoted property name.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj s args)], :arglists ([obj s & args]), :arglists-meta (nil)}}, :name cljs.core/js-invoke, :variadic true, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(obj s args)], :arglists ([obj s & args]), :arglists-meta (nil)}, :method-params [(obj s args)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 392, :max-fixed-arity 2, :fn-var true, :arglists ([obj s & args]), :doc "Invoke JavaScript object method via string. Needed when the\\n  string is not a valid unquoted property name."}, ->List {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2673, :column 10, :end-line 2673, :end-column 14, :protocols #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta first rest count __hash]))}, :protocols #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->List, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([meta first rest count __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 2673, :max-fixed-arity 5, :fn-var true, :arglists (quote ([meta first rest count __hash])), :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, m3-mix-K1 {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 776, :column 15, :end-line 776, :end-column 24, :tag number, :arglists (quote ([k1]))}, :name cljs.core/m3-mix-K1, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([k1]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 776, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([k1]))}, unchecked-float {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2349, :column 15, :end-line 2349, :end-column 30, :tag number, :arglists (quote ([x]))}, :name cljs.core/unchecked-float, :variadic false, :file "cljs/core.cljs", :end-column 30, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2349, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([x]))}, undefined? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1966, :column 16, :end-line 1966, :end-column 26, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x identical to the JavaScript undefined value."}, :name cljs.core/undefined?, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1966, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x identical to the JavaScript undefined value."}, IMeta {:meta {:file "cljs/core.cljs", :line 541, :column 14, :end-line 541, :end-column 19, :doc "Protocol for accessing the metadata of an object.", :protocol-symbol true, :protocol-info {:methods {-meta [[o]]}}}, :protocol-symbol true, :name cljs.core/IMeta, :file "cljs/core.cljs", :end-column 19, :column nil, :line nil, :protocol-info {:methods {-meta [[o]]}}, :info nil, :end-line 541, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/Var cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/t7373 cljs.core/RSeq cljs.core/PersistentHashSet function cljs.core/PersistentTreeMap cljs.core/t7376 cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/MetaFn cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "Protocol for accessing the metadata of an object."}, reduced? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1253, :column 16, :end-line 1253, :end-column 24, :tag boolean, :arglists (quote ([r])), :doc "Returns true if x is the result of a call to reduced"}, :name cljs.core/reduced?, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([r]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1253, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([r])), :doc "Returns true if x is the result of a call to reduced"}, apply-to {:protocol-inline nil, :meta {:arglists (quote ([f argc args])), :file "cljs/core.cljs"}, :name cljs.core/apply-to, :variadic false, :file "cljs/core.cljs", :method-params ([f argc args]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f argc args]))}, disj! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3400, :column 7, :end-line 3400, :end-column 12, :arglists (quote ([tcoll val] [tcoll val & vals])), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\\n  does not contain key(s).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([tcoll val]), :arglists ([tcoll val] [tcoll val & vals]), :arglists-meta (nil nil)}}, :name cljs.core/disj!, :variadic true, :file "cljs/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([tcoll val]), :arglists ([tcoll val] [tcoll val & vals]), :arglists-meta (nil nil)}, :method-params ([tcoll val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3400, :max-fixed-arity 2, :fn-var true, :arglists ([tcoll val] [tcoll val & vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\\n  does not contain key(s)."}, -lookup {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 487, :column 4, :end-line 487, :end-column 11, :protocol cljs.core/ILookup, :doc "Use k to look up a value in o. If not-found is supplied and k is not\\n     a valid value that can be used for look up, not-found is returned.", :arglists (quote ([o k] [o k not-found])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([o k] [o k not-found]), :arglists ([o k] [o k not-found]), :arglists-meta (nil nil)}}, :protocol cljs.core/ILookup, :name cljs.core/-lookup, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([o k] [o k not-found]), :arglists ([o k] [o k not-found]), :arglists-meta (nil nil)}, :method-params ([o k] [o k not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 487, :max-fixed-arity 3, :fn-var true, :arglists ([o k] [o k not-found]), :doc "Use k to look up a value in o. If not-found is supplied and k is not\\n     a valid value that can be used for look up, not-found is returned."}, ICloneable {:meta {:file "cljs/core.cljs", :line 431, :column 14, :end-line 431, :end-column 24, :doc "Protocol for cloning a value.", :protocol-symbol true, :protocol-info {:methods {-clone [[value]]}}}, :protocol-symbol true, :name cljs.core/ICloneable, :file "cljs/core.cljs", :end-column 24, :column nil, :line nil, :protocol-info {:methods {-clone [[value]]}}, :info nil, :end-line 431, :impls #{cljs.core/PersistentHashMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/Subvec cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/Range}, :doc "Protocol for cloning a value."}, IEncodeClojure {:meta {:file "cljs/core.cljs", :line 9158, :column 14, :end-line 9158, :end-column 28, :doc nil, :protocol-symbol true, :protocol-info {:methods {-js->clj [[x options]]}}}, :protocol-symbol true, :name cljs.core/IEncodeClojure, :file "cljs/core.cljs", :end-column 28, :column nil, :line nil, :protocol-info {:methods {-js->clj [[x options]]}}, :info nil, :end-line 9158, :impls #{}, :doc nil}, booleans {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2453, :column 7, :end-line 2453, :end-column 15, :arglists (quote ([x]))}, :name cljs.core/booleans, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2453, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ->ArrayList {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8162, :column 10, :end-line 8162, :end-column 19, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([arr]))}, :protocols #{cljs.core/Object}, :name cljs.core/->ArrayList, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([arr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 8162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arr])), :skip-protocol-flag nil}, RSeq {:meta {:file "cljs/core.cljs", :line 1342, :column 25, :end-line 1342, :end-column 29, :declared true}, :num-fields 3, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/RSeq, :file "cljs/core.cljs", :end-column 14, :type true, :column 10, :line 1451, :record false, :declared true, :end-line 1451, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, mask {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6055, :column 8, :end-line 6055, :end-column 12, :private true, :arglists (quote ([hash shift]))}, :private true, :name cljs.core/mask, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([hash shift]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6055, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hash shift]))}, int-array {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3205, :column 7, :end-line 3205, :end-column 16, :arglists (quote ([size-or-seq] [size init-val-or-seq])), :doc "Creates an array of ints. Does not coerce array, provided for compatibility\\n  with Clojure.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}}, :name cljs.core/int-array, :variadic false, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}, :method-params ([size-or-seq] [size init-val-or-seq]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3205, :max-fixed-arity 2, :fn-var true, :arglists ([size-or-seq] [size init-val-or-seq]), :doc "Creates an array of ints. Does not coerce array, provided for compatibility\\n  with Clojure."}, find-and-cache-best-method {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9392, :column 8, :end-line 9392, :end-column 34, :private true, :arglists (quote ([name dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy]))}, :private true, :name cljs.core/find-and-cache-best-method, :variadic false, :file "cljs/core.cljs", :end-column 34, :method-params ([name dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9392, :max-fixed-arity 7, :fn-var true, :arglists (quote ([name dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy]))}, set? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1872, :column 16, :end-line 1872, :end-column 20, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x satisfies ISet"}, :name cljs.core/set?, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1872, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x satisfies ISet"}, iterable? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1031, :column 7, :end-line 1031, :end-column 16, :arglists (quote ([x])), :doc "Return true if x implements IIterable protocol."}, :name cljs.core/iterable?, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1031, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return true if x implements IIterable protocol."}, cat {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9049, :column 7, :end-line 9049, :end-column 10, :arglists (quote ([rf])), :doc "A transducer which concatenates the contents of each input, which must be a\\n  collection, into the reduction.", :added "1.7"}, :added "1.7", :name cljs.core/cat, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([rf]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9049, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rf])), :doc "A transducer which concatenates the contents of each input, which must be a\\n  collection, into the reduction."}, ->ES6EntriesIterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5607, :column 10, :end-line 5607, :end-column 28, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([s]))}, :protocols #{cljs.core/Object}, :name cljs.core/->ES6EntriesIterator, :variadic false, :file "cljs/core.cljs", :end-column 28, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5607, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :skip-protocol-flag nil}, divide {:name cljs.core/divide, :file "cljs/core.cljs", :line nil, :column nil, :end-line 2257, :end-column 16, :declared true, :meta {:file "cljs/core.cljs", :line 2257, :column 10, :end-line 2257, :end-column 16, :declared true}}, js-reserved-arr {:name cljs.core/js-reserved-arr, :file "cljs/core.cljs", :line nil, :column nil, :end-line 9836, :end-column 31, :private true, :meta {:file "cljs/core.cljs", :line 9836, :column 16, :end-line 9836, :end-column 31, :private true}}, -pr-writer {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 625, :column 4, :end-line 625, :end-column 14, :protocol cljs.core/IPrintWithWriter, :doc nil, :arglists (quote ([o writer opts]))}, :protocol cljs.core/IPrintWithWriter, :name cljs.core/-pr-writer, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([o writer opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 625, :max-fixed-arity 3, :fn-var true, :arglists (quote ([o writer opts])), :doc nil}, flush {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8604, :column 7, :end-line 8604, :end-column 12, :arglists (quote ([]))}, :name cljs.core/flush, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8604, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, set-from-indexed-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8036, :column 7, :end-line 8036, :end-column 27, :arglists (quote ([iseq]))}, :name cljs.core/set-from-indexed-seq, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([iseq]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8036, :max-fixed-arity 1, :fn-var true, :arglists (quote ([iseq]))}, take-while {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8204, :column 7, :end-line 8204, :end-column 17, :arglists (quote ([pred] [pred coll])), :doc "Returns a lazy sequence of successive items from coll while\\n  (pred item) returns true. pred must be free of side-effects.\\n  Returns a transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :name cljs.core/take-while, :variadic false, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :method-params ([pred] [pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8204, :max-fixed-arity 2, :fn-var true, :arglists ([pred] [pred coll]), :doc "Returns a lazy sequence of successive items from coll while\\n  (pred item) returns true. pred must be free of side-effects.\\n  Returns a transducer when no collection is provided."}, vary-meta {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3466, :column 7, :end-line 3466, :end-column 16, :arglists (quote ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d] [obj f a b c d & args])), :doc "Returns an object of the same type and value as obj, with\\n  (apply f (meta obj) args) as its metadata.", :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d]), :arglists ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d] [obj f a b c d & args]), :arglists-meta (nil nil nil nil nil nil)}}, :name cljs.core/vary-meta, :variadic true, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d]), :arglists ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d] [obj f a b c d & args]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column nil, :line nil, :end-line 3466, :max-fixed-arity 6, :fn-var true, :arglists ([obj f] [obj f a] [obj f a b] [obj f a b c] [obj f a b c d] [obj f a b c d & args]), :doc "Returns an object of the same type and value as obj, with\\n  (apply f (meta obj) args) as its metadata."}, INext {:meta {:file "cljs/core.cljs", :line 477, :column 14, :end-line 477, :end-column 19, :doc "Protocol for accessing the next items of a collection.", :protocol-symbol true, :protocol-info {:methods {-next [[coll]]}}}, :protocol-symbol true, :name cljs.core/INext, :file "cljs/core.cljs", :end-column 19, :column nil, :line nil, :protocol-info {:methods {-next [[coll]]}}, :info nil, :end-line 477, :impls #{cljs.core/Cons cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/LazySeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range}, :doc "Protocol for accessing the next items of a collection."}, is_proto_ {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 234, :column 7, :end-line 234, :end-column 16, :arglists (quote ([x]))}, :name cljs.core/is_proto_, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, START {:name cljs.core/START, :file "cljs/core.cljs", :line nil, :column nil, :end-line 3525, :end-column 11, :meta {:file "cljs/core.cljs", :line 3525, :column 6, :end-line 3525, :end-column 11}}, ICounted {:meta {:file "cljs/core.cljs", :line 436, :column 14, :end-line 436, :end-column 22, :doc "Protocol for adding the ability to count a collection in constant time.", :protocol-symbol true, :protocol-info {:methods {-count [[coll]]}}}, :protocol-symbol true, :name cljs.core/ICounted, :file "cljs/core.cljs", :end-column 22, :column nil, :line nil, :protocol-info {:methods {-count [[coll]]}}, :info nil, :end-line 436, :impls #{nil cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/Subvec cljs.core/TransientHashMap cljs.core/ChunkBuffer cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/TransientArrayMap cljs.core/RSeq cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/ArrayChunk cljs.core/PersistentTreeSet cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "Protocol for adding the ability to count a collection in constant time."}, IMapEntry {:meta {:file "cljs/core.cljs", :line 506, :column 14, :end-line 506, :end-column 23, :doc "Protocol for examining a map entry.", :protocol-symbol true, :protocol-info {:methods {-key [[coll]], -val [[coll]]}}}, :protocol-symbol true, :name cljs.core/IMapEntry, :file "cljs/core.cljs", :end-column 23, :column nil, :line nil, :protocol-info {:methods {-key [[coll]], -val [[coll]]}}, :info nil, :end-line 506, :impls #{cljs.core/BlackNode cljs.core/PersistentVector cljs.core/RedNode}, :doc "Protocol for examining a map entry."}, <= {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2278, :column 16, :end-line 2278, :end-column 18, :tag boolean, :arglists (quote ([x] [x y] [x y & more])), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\\n  otherwise false.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/<=, :variadic true, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2278, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\\n  otherwise false."}, conj! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3359, :column 7, :end-line 3359, :end-column 12, :arglists (quote ([] [coll] [tcoll val] [tcoll val & vals])), :doc "Adds x to the transient collection, and return coll. The \'addition\'\\n  may happen at different \'places\' depending on the concrete type.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [coll] [tcoll val]), :arglists ([] [coll] [tcoll val] [tcoll val & vals]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/conj!, :variadic true, :file "cljs/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [coll] [tcoll val]), :arglists ([] [coll] [tcoll val] [tcoll val & vals]), :arglists-meta (nil nil nil nil)}, :method-params ([] [coll] [tcoll val]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 3359, :max-fixed-arity 2, :fn-var true, :arglists ([] [coll] [tcoll val] [tcoll val & vals]), :doc "Adds x to the transient collection, and return coll. The \'addition\'\\n  may happen at different \'places\' depending on the concrete type."}, -pop {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 524, :column 9, :end-line 524, :end-column 13, :tag clj, :protocol cljs.core/IStack, :doc "Returns a new stack without the item on top of the stack. Is used\\n     by cljs.core/pop.", :arglists (quote ([coll]))}, :protocol cljs.core/IStack, :name cljs.core/-pop, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 524, :max-fixed-arity 1, :tag clj, :fn-var true, :arglists (quote ([coll])), :doc "Returns a new stack without the item on top of the stack. Is used\\n     by cljs.core/pop."}, array-index-of-identical? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5662, :column 8, :end-line 5662, :end-column 33, :private true, :arglists (quote ([arr k]))}, :private true, :name cljs.core/array-index-of-identical?, :variadic false, :file "cljs/core.cljs", :end-column 33, :method-params ([arr k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5662, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr k]))}, repeatedly {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4321, :column 7, :end-line 4321, :end-column 17, :arglists (quote ([f] [n f])), :doc "Takes a function of no args, presumably with side effects, and\\n  returns an infinite (or length n if supplied) lazy sequence of calls\\n  to it", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [n f]), :arglists ([f] [n f]), :arglists-meta (nil nil)}}, :name cljs.core/repeatedly, :variadic false, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [n f]), :arglists ([f] [n f]), :arglists-meta (nil nil)}, :method-params ([f] [n f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4321, :max-fixed-arity 2, :fn-var true, :arglists ([f] [n f]), :doc "Takes a function of no args, presumably with side effects, and\\n  returns an infinite (or length n if supplied) lazy sequence of calls\\n  to it"}, zipmap {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8136, :column 7, :end-line 8136, :end-column 13, :arglists (quote ([keys vals])), :doc "Returns a map with the keys mapped to the corresponding vals."}, :name cljs.core/zipmap, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([keys vals]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([keys vals])), :doc "Returns a map with the keys mapped to the corresponding vals."}, IStack {:meta {:file "cljs/core.cljs", :line 518, :column 14, :end-line 518, :end-column 20, :doc "Protocol for collections to provide access to their items as stacks. The top\\n  of the stack should be accessed in the most efficient way for the different\\n  data structures.", :protocol-symbol true, :protocol-info {:methods {-peek [[coll]], -pop [[coll]]}}}, :protocol-symbol true, :name cljs.core/IStack, :file "cljs/core.cljs", :end-column 20, :column nil, :line nil, :protocol-info {:methods {-peek [[coll]], -pop [[coll]]}}, :info nil, :end-line 518, :impls #{cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/Subvec cljs.core/PersistentVector cljs.core/List cljs.core/RedNode}, :doc "Protocol for collections to provide access to their items as stacks. The top\\n  of the stack should be accessed in the most efficient way for the different\\n  data structures."}, -remove-watch {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 640, :column 4, :end-line 640, :end-column 17, :protocol cljs.core/IWatchable, :doc "Removes watcher that corresponds to key from this.", :arglists (quote ([this key]))}, :protocol cljs.core/IWatchable, :name cljs.core/-remove-watch, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([this key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 640, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this key])), :doc "Removes watcher that corresponds to key from this."}, IVolatile {:meta {:file "cljs/core.cljs", :line 721, :column 14, :end-line 721, :end-column 23, :doc "Protocol for adding volatile functionality.", :protocol-symbol true, :protocol-info {:methods {-vreset! [[o new-value]]}}}, :protocol-symbol true, :name cljs.core/IVolatile, :file "cljs/core.cljs", :end-column 23, :column nil, :line nil, :protocol-info {:methods {-vreset! [[o new-value]]}}, :info nil, :end-line 721, :impls #{cljs.core/Volatile}, :doc "Protocol for adding volatile functionality."}, remove {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4421, :column 7, :end-line 4421, :end-column 13, :arglists (quote ([pred] [pred coll])), :doc "Returns a lazy sequence of the items in coll for which\\n  (pred item) returns false. pred must be free of side-effects.\\n  Returns a transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :name cljs.core/remove, :variadic false, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :method-params ([pred] [pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4421, :max-fixed-arity 2, :fn-var true, :arglists ([pred] [pred coll]), :doc "Returns a lazy sequence of the items in coll for which\\n  (pred item) returns false. pred must be free of side-effects.\\n  Returns a transducer when no collection is provided."}, ->BitmapIndexedNode {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6108, :column 10, :end-line 6108, :end-column 27, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([edit bitmap arr]))}, :protocols #{cljs.core/Object}, :name cljs.core/->BitmapIndexedNode, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([edit bitmap arr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 6108, :max-fixed-arity 3, :fn-var true, :arglists (quote ([edit bitmap arr])), :skip-protocol-flag nil}, * {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2250, :column 15, :end-line 2250, :end-column 16, :tag number, :arglists (quote ([] [x] [x y] [x y & more])), :doc "Returns the product of nums. (*) returns 1.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/*, :variadic true, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2250, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([] [x] [x y] [x y & more]), :doc "Returns the product of nums. (*) returns 1."}, re-pattern {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8562, :column 7, :end-line 8562, :end-column 17, :arglists (quote ([s])), :doc "Returns an instance of RegExp which has compiled the provided string."}, :name cljs.core/re-pattern, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8562, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns an instance of RegExp which has compiled the provided string."}, min {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2325, :column 15, :end-line 2325, :end-column 18, :tag number, :arglists (quote ([x] [x y] [x y & more])), :doc "Returns the least of the nums.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/min, :variadic true, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2325, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "Returns the least of the nums."}, array-index-of-nil? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5634, :column 8, :end-line 5634, :end-column 27, :private true, :arglists (quote ([arr]))}, :private true, :name cljs.core/array-index-of-nil?, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([arr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5634, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arr]))}, -persistent! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 652, :column 9, :end-line 652, :end-column 21, :tag clj, :protocol cljs.core/ITransientCollection, :doc "Creates a persistent data structure from tcoll and returns it.", :arglists (quote ([tcoll]))}, :protocol cljs.core/ITransientCollection, :name cljs.core/-persistent!, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([tcoll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 652, :max-fixed-arity 1, :tag clj, :fn-var true, :arglists (quote ([tcoll])), :doc "Creates a persistent data structure from tcoll and returns it."}, -nth {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 460, :column 4, :end-line 460, :end-column 8, :protocol cljs.core/IIndexed, :doc "Returns the value at the index n in the collection coll.\\n     Returns not-found if index n is out of bounds and not-found is supplied.", :arglists (quote ([coll n] [coll n not-found])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n not-found]), :arglists ([coll n] [coll n not-found]), :arglists-meta (nil nil)}}, :protocol cljs.core/IIndexed, :name cljs.core/-nth, :variadic false, :file "cljs/core.cljs", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n not-found]), :arglists ([coll n] [coll n not-found]), :arglists-meta (nil nil)}, :method-params ([coll n] [coll n not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 460, :max-fixed-arity 3, :fn-var true, :arglists ([coll n] [coll n not-found]), :doc "Returns the value at the index n in the collection coll.\\n     Returns not-found if index n is out of bounds and not-found is supplied."}, pop! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3394, :column 7, :end-line 3394, :end-column 11, :arglists (quote ([tcoll])), :doc "Removes the last item from a transient vector. If\\n  the collection is empty, throws an exception. Returns coll"}, :name cljs.core/pop!, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([tcoll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3394, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tcoll])), :doc "Removes the last item from a transient vector. If\\n  the collection is empty, throws an exception. Returns coll"}, chunk-append {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3165, :column 7, :end-line 3165, :end-column 19, :arglists (quote ([b x]))}, :name cljs.core/chunk-append, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([b x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([b x]))}, prn-str {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8755, :column 7, :end-line 8755, :end-column 14, :arglists (quote ([& objs])), :doc "Same as pr-str followed by (newline)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :name cljs.core/prn-str, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}, :method-params [(objs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8755, :max-fixed-arity 0, :fn-var true, :arglists ([& objs]), :doc "Same as pr-str followed by (newline)"}, IReversible {:meta {:file "cljs/core.cljs", :line 590, :column 14, :end-line 590, :end-column 25, :doc "Protocol for reversing a seq.", :protocol-symbol true, :protocol-info {:methods {-rseq [[coll]]}}}, :protocol-symbol true, :name cljs.core/IReversible, :file "cljs/core.cljs", :end-column 25, :column nil, :line nil, :protocol-info {:methods {-rseq [[coll]]}}, :info nil, :end-line 590, :impls #{cljs.core/IndexedSeq cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet}, :doc "Protocol for reversing a seq."}, reversible? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2799, :column 16, :end-line 2799, :end-column 27, :tag boolean, :arglists (quote ([coll])), :doc "Returns true if coll satisfies? IReversible."}, :name cljs.core/reversible?, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2799, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([coll])), :doc "Returns true if coll satisfies? IReversible."}, -realized? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 630, :column 13, :end-line 630, :end-column 23, :tag boolean, :protocol cljs.core/IPending, :doc "Returns true if a value for d has been produced, false otherwise.", :arglists (quote ([d]))}, :protocol cljs.core/IPending, :name cljs.core/-realized?, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 630, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([d])), :doc "Returns true if a value for d has been produced, false otherwise."}, -add-watch {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 637, :column 4, :end-line 637, :end-column 14, :protocol cljs.core/IWatchable, :doc "Adds a watcher function f to this. Keys must be unique per reference,\\n     and can be used to remove the watch with -remove-watch.", :arglists (quote ([this key f]))}, :protocol cljs.core/IWatchable, :name cljs.core/-add-watch, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([this key f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 637, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this key f])), :doc "Adds a watcher function f to this. Keys must be unique per reference,\\n     and can be used to remove the watch with -remove-watch."}, -deref-with-timeout {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 539, :column 4, :end-line 539, :end-column 23, :protocol cljs.core/IDerefWithTimeout, :doc nil, :arglists (quote ([o msec timeout-val]))}, :protocol cljs.core/IDerefWithTimeout, :name cljs.core/-deref-with-timeout, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([o msec timeout-val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 539, :max-fixed-arity 3, :fn-var true, :arglists (quote ([o msec timeout-val])), :doc nil}, conj {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1543, :column 7, :end-line 1543, :end-column 11, :arglists (quote ([] [coll] [coll x] [coll x & xs])), :doc "conj[oin]. Returns a new collection with the xs\\n  \'added\'. (conj nil item) returns (item).  The \'addition\' may\\n  happen at different \'places\' depending on the concrete type.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [coll] [coll x]), :arglists ([] [coll] [coll x] [coll x & xs]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/conj, :variadic true, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [coll] [coll x]), :arglists ([] [coll] [coll x] [coll x & xs]), :arglists-meta (nil nil nil nil)}, :method-params ([] [coll] [coll x]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 1543, :max-fixed-arity 2, :fn-var true, :arglists ([] [coll] [coll x] [coll x & xs]), :doc "conj[oin]. Returns a new collection with the xs\\n  \'added\'. (conj nil item) returns (item).  The \'addition\' may\\n  happen at different \'places\' depending on the concrete type."}, -sorted-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 598, :column 9, :end-line 598, :end-column 20, :tag clj, :protocol cljs.core/ISorted, :doc "Returns a sorted seq from coll in either ascending or descending order.", :arglists (quote ([coll ascending?]))}, :protocol cljs.core/ISorted, :name cljs.core/-sorted-seq, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([coll ascending?]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 598, :max-fixed-arity 2, :tag clj, :fn-var true, :arglists (quote ([coll ascending?])), :doc "Returns a sorted seq from coll in either ascending or descending order."}, flatten1 {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4368, :column 8, :end-line 4368, :end-column 16, :private true, :arglists (quote ([colls])), :doc "Take a collection of collections, and return a lazy seq\\n  of items from the inner collection"}, :private true, :name cljs.core/flatten1, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([colls]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4368, :max-fixed-arity 1, :fn-var true, :arglists (quote ([colls])), :doc "Take a collection of collections, and return a lazy seq\\n  of items from the inner collection"}, transduce {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2217, :column 7, :end-line 2217, :end-column 16, :arglists (quote ([xform f coll] [xform f init coll])), :doc "reduce with a transformation of f (xf). If init is not\\n  supplied, (f) will be called to produce it. f should be a reducing\\n  step function that accepts both 1 and 2 arguments, if it accepts\\n  only 2 you can add the arity-1 with \'completing\'. Returns the result\\n  of applying (the transformed) xf to init and the first item in coll,\\n  then applying xf to that result and the 2nd item, etc. If coll\\n  contains no items, returns init and f is not called. Note that\\n  certain transforms may inject or skip items.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([xform f coll] [xform f init coll]), :arglists ([xform f coll] [xform f init coll]), :arglists-meta (nil nil)}}, :name cljs.core/transduce, :variadic false, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([xform f coll] [xform f init coll]), :arglists ([xform f coll] [xform f init coll]), :arglists-meta (nil nil)}, :method-params ([xform f coll] [xform f init coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2217, :max-fixed-arity 4, :fn-var true, :arglists ([xform f coll] [xform f init coll]), :doc "reduce with a transformation of f (xf). If init is not\\n  supplied, (f) will be called to produce it. f should be a reducing\\n  step function that accepts both 1 and 2 arguments, if it accepts\\n  only 2 you can add the arity-1 with \'completing\'. Returns the result\\n  of applying (the transformed) xf to init and the first item in coll,\\n  then applying xf to that result and the 2nd item, etc. If coll\\n  contains no items, returns init and f is not called. Note that\\n  certain transforms may inject or skip items."}, fixture1 {:name cljs.core/fixture1, :file "cljs/core.cljs", :line nil, :column nil, :end-line 9009, :end-column 14, :meta {:file "cljs/core.cljs", :line 9009, :column 6, :end-line 9009, :end-column 14}}, -swap! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 718, :column 4, :end-line 718, :end-column 10, :protocol cljs.core/ISwap, :doc "Swaps the value of o to be (apply f current-value-of-atom args).", :arglists (quote ([o f] [o f a] [o f a b] [o f a b xs])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([o f] [o f a] [o f a b] [o f a b xs]), :arglists ([o f] [o f a] [o f a b] [o f a b xs]), :arglists-meta (nil nil nil nil)}}, :protocol cljs.core/ISwap, :name cljs.core/-swap!, :variadic false, :file "cljs/core.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([o f] [o f a] [o f a b] [o f a b xs]), :arglists ([o f] [o f a] [o f a b] [o f a b xs]), :arglists-meta (nil nil nil nil)}, :method-params ([o f] [o f a] [o f a b] [o f a b xs]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 718, :max-fixed-arity 5, :fn-var true, :arglists ([o f] [o f a] [o f a b] [o f a b xs]), :doc "Swaps the value of o to be (apply f current-value-of-atom args)."}, *print-length* {:name cljs.core/*print-length*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 110, :end-column 17, :dynamic true, :doc "When set to logical true, objects will be printed in a way that preserves\\n  their type when read in later.\\n\\n  Defaults to false.", :meta {:file "cljs/core.cljs", :line 110, :column 3, :end-line 110, :end-column 17, :dynamic true, :doc "When set to logical true, objects will be printed in a way that preserves\\n  their type when read in later.\\n\\n  Defaults to false."}}, js-delete {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1933, :column 7, :end-line 1933, :end-column 16, :arglists (quote ([obj key])), :doc "Delete a property from a JavaScript object."}, :name cljs.core/js-delete, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([obj key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1933, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj key])), :doc "Delete a property from a JavaScript object."}, truth_ {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 163, :column 7, :end-line 163, :end-column 13, :arglists (quote ([x])), :doc "Internal - do not use!"}, :name cljs.core/truth_, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Internal - do not use!"}, array-index-of {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5678, :column 7, :end-line 5678, :end-column 21, :arglists (quote ([arr k]))}, :name cljs.core/array-index-of, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([arr k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5678, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr k]))}, ->MultiFn {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9431, :column 10, :end-line 9431, :end-column 17, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :factory :positional, :arglists (quote ([name dispatch-fn default-dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy]))}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :name cljs.core/->MultiFn, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([name dispatch-fn default-dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 9431, :max-fixed-arity 8, :fn-var true, :arglists (quote ([name dispatch-fn default-dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy])), :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}}, key->js {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9127, :column 7, :end-line 9127, :end-column 14, :arglists (quote ([k]))}, :name cljs.core/key->js, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, ->MultiStepper {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3591, :column 10, :end-line 3591, :end-column 22, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([xform iters nexts]))}, :protocols #{cljs.core/Object}, :name cljs.core/->MultiStepper, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([xform iters nexts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 3591, :max-fixed-arity 3, :fn-var true, :arglists (quote ([xform iters nexts])), :skip-protocol-flag nil}, IEncodeJS {:meta {:file "cljs/core.cljs", :line 9120, :column 14, :end-line 9120, :end-column 23, :doc nil, :protocol-symbol true, :protocol-info {:methods {-clj->js [[x]], -key->js [[x]]}}}, :protocol-symbol true, :name cljs.core/IEncodeJS, :file "cljs/core.cljs", :end-column 23, :column nil, :line nil, :protocol-info {:methods {-clj->js [[x]], -key->js [[x]]}}, :info nil, :end-line 9120, :impls #{}, :doc nil}, new-path {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4608, :column 8, :end-line 4608, :end-column 16, :private true, :arglists (quote ([edit level node]))}, :private true, :name cljs.core/new-path, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([edit level node]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4608, :max-fixed-arity 3, :fn-var true, :arglists (quote ([edit level node]))}, compare-and-set! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4007, :column 7, :end-line 4007, :end-column 23, :arglists (quote ([a oldval newval])), :doc "Atomically sets the value of atom to newval if and only if the\\n  current value of the atom is equal to oldval. Returns true if\\n  set happened, else false."}, :name cljs.core/compare-and-set!, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([a oldval newval]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4007, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a oldval newval])), :doc "Atomically sets the value of atom to newval if and only if the\\n  current value of the atom is equal to oldval. Returns true if\\n  set happened, else false."}, array-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1442, :column 7, :end-line 1442, :end-column 16, :arglists (quote ([array] [array i])), :doc "Create a seq from a JavaScript array.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([array] [array i]), :arglists ([array] [array i]), :arglists-meta (nil nil)}}, :name cljs.core/array-seq, :variadic false, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([array] [array i]), :arglists ([array] [array i]), :arglists-meta (nil nil)}, :method-params ([array] [array i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1442, :max-fixed-arity 2, :fn-var true, :arglists ([array] [array i]), :doc "Create a seq from a JavaScript array."}, array-copy-downward {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1946, :column 8, :end-line 1946, :end-column 27, :private true, :arglists (quote ([from i to j len]))}, :private true, :name cljs.core/array-copy-downward, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([from i to j len]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1946, :max-fixed-arity 5, :fn-var true, :arglists (quote ([from i to j len]))}, pack-array-node {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6306, :column 8, :end-line 6306, :end-column 23, :private true, :arglists (quote ([array-node edit idx]))}, :private true, :name cljs.core/pack-array-node, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([array-node edit idx]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6306, :max-fixed-arity 3, :fn-var true, :arglists (quote ([array-node edit idx]))}, interleave {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4333, :column 7, :end-line 4333, :end-column 17, :arglists (quote ([c1 c2] [c1 c2 & colls])), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([c1 c2]), :arglists ([c1 c2] [c1 c2 & colls]), :arglists-meta (nil nil)}}, :name cljs.core/interleave, :variadic true, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([c1 c2]), :arglists ([c1 c2] [c1 c2 & colls]), :arglists-meta (nil nil)}, :method-params ([c1 c2]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4333, :max-fixed-arity 2, :fn-var true, :arglists ([c1 c2] [c1 c2 & colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc."}, print-map {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8799, :column 7, :end-line 8799, :end-column 16, :arglists (quote ([m print-one writer opts]))}, :name cljs.core/print-map, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([m print-one writer opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8799, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m print-one writer opts]))}, map? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1895, :column 16, :end-line 1895, :end-column 20, :tag boolean, :arglists (quote ([x])), :doc "Return true if x satisfies IMap"}, :name cljs.core/map?, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1895, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Return true if x satisfies IMap"}, m3-C1 {:name cljs.core/m3-C1, :file "cljs/core.cljs", :line nil, :column nil, :end-line 773, :end-column 11, :meta {:file "cljs/core.cljs", :line 773, :column 6, :end-line 773, :end-column 11}}, get {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1683, :column 7, :end-line 1683, :end-column 10, :arglists (quote ([o k] [o k not-found])), :doc "Returns the value mapped to key, not-found or nil if key not present.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([o k] [o k not-found]), :arglists ([o k] [o k not-found]), :arglists-meta (nil nil)}}, :name cljs.core/get, :variadic false, :file "cljs/core.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([o k] [o k not-found]), :arglists ([o k] [o k not-found]), :arglists-meta (nil nil)}, :method-params ([o k] [o k not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1683, :max-fixed-arity 3, :fn-var true, :arglists ([o k] [o k not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present."}, identity {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2202, :column 7, :end-line 2202, :end-column 15, :arglists (quote ([x])), :doc "Returns its argument."}, :name cljs.core/identity, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2202, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns its argument."}, into {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4452, :column 7, :end-line 4452, :end-column 11, :arglists (quote ([to from] [to xform from])), :doc "Returns a new coll consisting of to-coll with all of the items of\\n  from-coll conjoined. A transducer may be supplied.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([to from] [to xform from]), :arglists ([to from] [to xform from]), :arglists-meta (nil nil)}}, :name cljs.core/into, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([to from] [to xform from]), :arglists ([to from] [to xform from]), :arglists-meta (nil nil)}, :method-params ([to from] [to xform from]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4452, :max-fixed-arity 3, :fn-var true, :arglists ([to from] [to xform from]), :doc "Returns a new coll consisting of to-coll with all of the items of\\n  from-coll conjoined. A transducer may be supplied."}, long {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2443, :column 7, :end-line 2443, :end-column 11, :arglists (quote ([x])), :doc "Coerce to long by stripping decimal places. Identical to `int\'."}, :name cljs.core/long, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2443, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Coerce to long by stripping decimal places. Identical to `int\'."}, double {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2344, :column 15, :end-line 2344, :end-column 21, :tag number, :arglists (quote ([x]))}, :name cljs.core/double, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2344, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([x]))}, volatile? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4044, :column 7, :end-line 4044, :end-column 16, :arglists (quote ([x])), :doc "Returns true if x is a volatile."}, :name cljs.core/volatile?, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4044, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a volatile."}, ChunkBuffer {:num-fields 2, :protocols #{cljs.core/Object cljs.core/ICounted}, :name cljs.core/ChunkBuffer, :file "cljs/core.cljs", :end-column 21, :type true, :column 10, :line 3047, :record false, :end-line 3047, :skip-protocol-flag #{cljs.core/ICounted}}, -key {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 508, :column 4, :end-line 508, :end-column 8, :protocol cljs.core/IMapEntry, :doc "Returns the key of the map entry.", :arglists (quote ([coll]))}, :protocol cljs.core/IMapEntry, :name cljs.core/-key, :variadic false, :file "cljs/core.cljs", :end-column 8, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 508, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns the key of the map entry."}, ->t7373 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([nil-iter meta7374])), :file "cljs/core.cljs"}, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core/->t7373, :variadic false, :file "cljs/core.cljs", :method-params ([nil-iter meta7374]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column nil, :factory :positional, :line nil, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nil-iter meta7374])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, nfirst {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1516, :column 7, :end-line 1516, :end-column 13, :arglists (quote ([coll])), :doc "Same as (next (first x))"}, :name cljs.core/nfirst, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1516, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Same as (next (first x))"}, StringBufferWriter {:num-fields 1, :protocols #{cljs.core/IWriter}, :name cljs.core/StringBufferWriter, :file "cljs/core.cljs", :end-column 28, :type true, :column 10, :line 734, :record false, :end-line 734, :skip-protocol-flag #{cljs.core/IWriter}}, meta {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1823, :column 7, :end-line 1823, :end-column 11, :arglists (quote ([o])), :doc "Returns the metadata of obj, returns nil if there is no metadata."}, :name cljs.core/meta, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1823, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc "Returns the metadata of obj, returns nil if there is no metadata."}, tv-editable-tail {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5149, :column 8, :end-line 5149, :end-column 24, :private true, :arglists (quote ([tl]))}, :private true, :name cljs.core/tv-editable-tail, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([tl]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tl]))}, -kv-reduce {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 562, :column 4, :end-line 562, :end-column 14, :protocol cljs.core/IKVReduce, :doc "Reduces an associative collection and returns the result. f should be\\n     a function that takes three arguments.", :arglists (quote ([coll f init]))}, :protocol cljs.core/IKVReduce, :name cljs.core/-kv-reduce, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([coll f init]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 562, :max-fixed-arity 3, :fn-var true, :arglists (quote ([coll f init])), :doc "Reduces an associative collection and returns the result. f should be\\n     a function that takes three arguments."}, IHash {:meta {:file "cljs/core.cljs", :line 571, :column 14, :end-line 571, :end-column 19, :doc "Protocol for adding hashing functionality to a type.", :protocol-symbol true, :protocol-info {:methods {-hash [[o]]}}}, :protocol-symbol true, :name cljs.core/IHash, :file "cljs/core.cljs", :end-column 19, :column nil, :line nil, :protocol-info {:methods {-hash [[o]]}}, :info nil, :end-line 571, :impls #{cljs.core/Namespace cljs.core/PersistentHashMap cljs.core/MultiFn cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/TaggedLiteral default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/LazyTransformer cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "Protocol for adding hashing functionality to a type."}, bit-and-not {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2502, :column 7, :end-line 2502, :end-column 18, :arglists (quote ([x y] [x y & more])), :doc "Bitwise and", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}}, :name cljs.core/bit-and-not, :variadic true, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2502, :max-fixed-arity 2, :fn-var true, :arglists ([x y] [x y & more]), :doc "Bitwise and"}, var? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1022, :column 7, :end-line 1022, :end-column 11, :arglists (quote ([v])), :doc "Returns true if v is of type cljs.core.Var"}, :name cljs.core/var?, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1022, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns true if v is of type cljs.core.Var"}, -comparator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 609, :column 4, :end-line 609, :end-column 15, :protocol cljs.core/ISorted, :doc "Returns the comparator for coll.", :arglists (quote ([coll]))}, :protocol cljs.core/ISorted, :name cljs.core/-comparator, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 609, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns the comparator for coll."}, unchecked-add-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2359, :column 15, :end-line 2359, :end-column 32, :tag number, :arglists (quote ([] [x] [x y] [x y & more])), :doc "Returns the sum of nums. (+) returns 0.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/unchecked-add-int, :variadic true, :file "cljs/core.cljs", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2359, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([] [x] [x y] [x y & more]), :doc "Returns the sum of nums. (+) returns 0."}, hash-ordered-coll {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1169, :column 15, :end-line 1169, :end-column 32, :tag number, :arglists (quote ([coll])), :doc "Returns the hash code, consistent with =, for an external ordered\\n   collection implementing Iterable.\\n   See http://clojure.org/data_structures#hash for full algorithms."}, :name cljs.core/hash-ordered-coll, :variadic false, :file "cljs/core.cljs", :end-column 32, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 1169, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([coll])), :doc "Returns the hash code, consistent with =, for an external ordered\\n   collection implementing Iterable.\\n   See http://clojure.org/data_structures#hash for full algorithms."}, extend-object! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2661, :column 8, :end-line 2661, :end-column 22, :private true, :arglists (quote ([obj fn-map])), :doc "Takes a JavaScript object and a map of names to functions and\\n  attaches said functions as methods on the object.  Any references to\\n  JavaScript\'s implicit this (via the this-as macro) will resolve to the\\n  object that the function is attached."}, :private true, :name cljs.core/extend-object!, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([obj fn-map]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2661, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj fn-map])), :doc "Takes a JavaScript object and a map of names to functions and\\n  attaches said functions as methods on the object.  Any references to\\n  JavaScript\'s implicit this (via the this-as macro) will resolve to the\\n  object that the function is attached."}, do-assoc {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4661, :column 8, :end-line 4661, :end-column 16, :private true, :arglists (quote ([pv level node i val]))}, :private true, :name cljs.core/do-assoc, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([pv level node i val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4661, :max-fixed-arity 5, :fn-var true, :arglists (quote ([pv level node i val]))}, reset-meta! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8955, :column 7, :end-line 8955, :end-column 18, :arglists (quote ([iref m])), :doc "Atomically resets the metadata for an atom"}, :name cljs.core/reset-meta!, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([iref m]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8955, :max-fixed-arity 2, :fn-var true, :arglists (quote ([iref m])), :doc "Atomically resets the metadata for an atom"}, ->KeySeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7633, :column 10, :end-line 7633, :end-column 16, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([mseq _meta]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->KeySeq, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([mseq _meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 7633, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mseq _meta])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, IEquiv {:meta {:file "cljs/core.cljs", :line 566, :column 14, :end-line 566, :end-column 20, :doc "Protocol for adding value comparison functionality to a type.", :protocol-symbol true, :protocol-info {:methods {-equiv [[o other]]}}}, :protocol-symbol true, :name cljs.core/IEquiv, :file "cljs/core.cljs", :end-column 20, :column nil, :line nil, :protocol-info {:methods {-equiv [[o other]]}}, :info nil, :end-line 566, :impls #{cljs.core/Namespace cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq js/Date cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/Var cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/TaggedLiteral number default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/NeverEquiv cljs.core/LazyTransformer cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "Protocol for adding value comparison functionality to a type."}, tree-map-kv-reduce {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7063, :column 8, :end-line 7063, :end-column 26, :private true, :arglists (quote ([node f init]))}, :private true, :name cljs.core/tree-map-kv-reduce, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([node f init]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7063, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node f init]))}, cycle {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4301, :column 7, :end-line 4301, :end-column 12, :arglists (quote ([coll])), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll."}, :name cljs.core/cycle, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4301, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll."}, -deref {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 535, :column 4, :end-line 535, :end-column 10, :protocol cljs.core/IDeref, :doc "Returns the value of the reference o.", :arglists (quote ([o]))}, :protocol cljs.core/IDeref, :name cljs.core/-deref, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 535, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc "Returns the value of the reference o."}, pr-writer-ex-info {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9699, :column 8, :end-line 9699, :end-column 25, :private true, :arglists (quote ([obj writer opts]))}, :private true, :name cljs.core/pr-writer-ex-info, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([obj writer opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9699, :max-fixed-arity 3, :fn-var true, :arglists (quote ([obj writer opts]))}, empty? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1859, :column 16, :end-line 1859, :end-column 22, :tag boolean, :arglists (quote ([coll])), :doc "Returns true if coll has no items - same as (not (seq coll)).\\n  Please use the idiom (seq x) rather than (not (empty? x))"}, :name cljs.core/empty?, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1859, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([coll])), :doc "Returns true if coll has no items - same as (not (seq coll)).\\n  Please use the idiom (seq x) rather than (not (empty? x))"}, TaggedLiteral {:num-fields 2, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IPrintWithWriter cljs.core/ILookup}, :name cljs.core/TaggedLiteral, :file "cljs/core.cljs", :end-column 23, :type true, :column 10, :line 9794, :record false, :end-line 9794, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter cljs.core/ILookup}}, short {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2342, :column 15, :end-line 2342, :end-column 20, :tag number, :arglists (quote ([x]))}, :name cljs.core/short, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2342, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([x]))}, -clj->js {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9121, :column 4, :end-line 9121, :end-column 12, :protocol cljs.core/IEncodeJS, :doc "Recursively transforms clj values to JavaScript", :arglists (quote ([x]))}, :protocol cljs.core/IEncodeJS, :name cljs.core/-clj->js, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Recursively transforms clj values to JavaScript"}, -chunked-first {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 691, :column 4, :end-line 691, :end-column 18, :protocol cljs.core/IChunkedSeq, :doc "Returns the first chunk in coll.", :arglists (quote ([coll]))}, :protocol cljs.core/IChunkedSeq, :name cljs.core/-chunked-first, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 691, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns the first chunk in coll."}, filterv {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4482, :column 7, :end-line 4482, :end-column 14, :arglists (quote ([pred coll])), :doc "Returns a vector of the items in coll for which\\n  (pred item) returns true. pred must be free of side-effects."}, :name cljs.core/filterv, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4482, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns a vector of the items in coll for which\\n  (pred item) returns true. pred must be free of side-effects."}, ->TaggedLiteral {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9794, :column 10, :end-line 9794, :end-column 23, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IPrintWithWriter cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter cljs.core/ILookup}, :factory :positional, :arglists (quote ([tag form]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IPrintWithWriter cljs.core/ILookup}, :name cljs.core/->TaggedLiteral, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([tag form]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 9794, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag form])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter cljs.core/ILookup}}, tv-editable-root {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5146, :column 8, :end-line 5146, :end-column 24, :private true, :arglists (quote ([node]))}, :private true, :name cljs.core/tv-editable-root, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, hash {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 847, :column 7, :end-line 847, :end-column 11, :arglists (quote ([o])), :doc "Returns the hash code of its argument. Note this is the hash code\\n   consistent with =."}, :name cljs.core/hash, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 847, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc "Returns the hash code of its argument. Note this is the hash code\\n   consistent with =."}, quot {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2472, :column 7, :end-line 2472, :end-column 11, :arglists (quote ([n d])), :doc "quot[ient] of dividing numerator by denominator."}, :name cljs.core/quot, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([n d]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2472, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n d])), :doc "quot[ient] of dividing numerator by denominator."}, ns-interns* {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9962, :column 7, :end-line 9962, :end-column 18, :arglists (quote ([sym]))}, :name cljs.core/ns-interns*, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9962, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, unchecked-double {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2350, :column 15, :end-line 2350, :end-column 31, :tag number, :arglists (quote ([x]))}, :name cljs.core/unchecked-double, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2350, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([x]))}, *target* {:meta {:file "cljs/core.cljs", :line 27, :column 3, :end-line 27, :end-column 11, :dynamic true, :doc "Var bound to the name value of the compiler build :target option.\\n  For example, if the compiler build :target is :nodejs, *target* will be bound\\n  to \\"nodejs\\". *target* is a Google Closure define and can be set by compiler\\n  :closure-defines option.", :jsdoc ["@define {string}"]}, :name cljs.core/*target*, :file "cljs/core.cljs", :end-column 11, :column nil, :dynamic true, :line nil, :end-line 27, :doc "Var bound to the name value of the compiler build :target option.\\n  For example, if the compiler build :target is :nodejs, *target* will be bound\\n  to \\"nodejs\\". *target* is a Google Closure define and can be set by compiler\\n  :closure-defines option.", :jsdoc ["@define {string}"]}, ->ChunkedCons {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3096, :column 10, :end-line 3096, :end-column 21, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([chunk more meta __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :name cljs.core/->ChunkedCons, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([chunk more meta __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 3096, :max-fixed-arity 4, :fn-var true, :arglists (quote ([chunk more meta __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}}, ranged-iterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4697, :column 7, :end-line 4697, :end-column 22, :arglists (quote ([v start end]))}, :name cljs.core/ranged-iterator, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([v start end]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4697, :max-fixed-arity 3, :fn-var true, :arglists (quote ([v start end]))}, ITransientVector {:meta {:file "cljs/core.cljs", :line 666, :column 14, :end-line 666, :end-column 30, :doc "Protocol for adding vector functionality to transient collections.", :protocol-symbol true, :protocol-info {:methods {-assoc-n! [[tcoll n val]], -pop! [[tcoll]]}}}, :protocol-symbol true, :name cljs.core/ITransientVector, :file "cljs/core.cljs", :end-column 30, :column nil, :line nil, :protocol-info {:methods {-assoc-n! [[tcoll n val]], -pop! [[tcoll]]}}, :info nil, :end-line 666, :impls #{cljs.core/TransientVector}, :doc "Protocol for adding vector functionality to transient collections."}, key {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7696, :column 7, :end-line 7696, :end-column 10, :arglists (quote ([map-entry])), :doc "Returns the key of the map entry."}, :name cljs.core/key, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([map-entry]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7696, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-entry])), :doc "Returns the key of the map entry."}, longs {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2460, :column 7, :end-line 2460, :end-column 12, :arglists (quote ([x]))}, :name cljs.core/longs, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2460, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, not= {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3482, :column 16, :end-line 3482, :end-column 20, :tag boolean, :arglists (quote ([x] [x y] [x y & more])), :doc "Same as (not (= obj1 obj2))", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/not=, :variadic true, :file "cljs/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 3482, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "Same as (not (= obj1 obj2))"}, set-print-err-fn! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 62, :column 7, :end-line 62, :end-column 24, :arglists (quote ([f])), :doc "Set *print-err-fn* to f."}, :name cljs.core/set-print-err-fn!, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Set *print-err-fn* to f."}, string? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 213, :column 16, :end-line 213, :end-column 23, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is a JavaScript string."}, :name cljs.core/string?, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 213, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a JavaScript string."}, es6-iterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1130, :column 7, :end-line 1130, :end-column 19, :arglists (quote ([coll])), :doc "EXPERIMENTAL: Return a ES2015 compatible iterator for coll."}, :name cljs.core/es6-iterator, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "EXPERIMENTAL: Return a ES2015 compatible iterator for coll."}, Delay {:num-fields 2, :protocols #{cljs.core/IPending cljs.core/IDeref}, :name cljs.core/Delay, :file "cljs/core.cljs", :end-column 15, :type true, :column 10, :line 9014, :record false, :end-line 9014, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}}, munge-str {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9876, :column 8, :end-line 9876, :end-column 17, :private true, :arglists (quote ([name]))}, :private true, :name cljs.core/munge-str, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9876, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, pr-str-with-opts {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8720, :column 7, :end-line 8720, :end-column 23, :arglists (quote ([objs opts])), :doc "Prints a sequence of objects to a string, observing all the\\n  options given in opts"}, :name cljs.core/pr-str-with-opts, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([objs opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8720, :max-fixed-arity 2, :fn-var true, :arglists (quote ([objs opts])), :doc "Prints a sequence of objects to a string, observing all the\\n  options given in opts"}, m3-C2 {:name cljs.core/m3-C2, :file "cljs/core.cljs", :line nil, :column nil, :end-line 774, :end-column 11, :meta {:file "cljs/core.cljs", :line 774, :column 6, :end-line 774, :end-column 11}}, ->Symbol {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 910, :column 10, :end-line 910, :end-column 16, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/Object cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([ns name str _hash _meta]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/Object cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :name cljs.core/->Symbol, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([ns name str _hash _meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 910, :max-fixed-arity 5, :fn-var true, :arglists (quote ([ns name str _hash _meta])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}}, *print-newline* {:name cljs.core/*print-newline*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 78, :end-column 18, :dynamic true, :doc "When set to logical false will drop newlines from printing calls.\\n  This is to work around the implicit newlines emitted by standard JavaScript\\n  console objects.", :meta {:file "cljs/core.cljs", :line 78, :column 3, :end-line 78, :end-column 18, :dynamic true, :doc "When set to logical false will drop newlines from printing calls.\\n  This is to work around the implicit newlines emitted by standard JavaScript\\n  console objects."}}, unchecked-multiply-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2396, :column 15, :end-line 2396, :end-column 37, :tag number, :arglists (quote ([] [x] [x y] [x y & more])), :doc "Returns the product of nums. (*) returns 1.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/unchecked-multiply-int, :variadic true, :file "cljs/core.cljs", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2396, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([] [x] [x y] [x y & more]), :doc "Returns the product of nums. (*) returns 1."}, chunk-rest {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3174, :column 7, :end-line 3174, :end-column 17, :arglists (quote ([s]))}, :name cljs.core/chunk-rest, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3174, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, remove-all-methods {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9618, :column 7, :end-line 9618, :end-column 25, :arglists (quote ([multifn])), :doc "Removes all of the methods of multimethod."}, :name cljs.core/remove-all-methods, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([multifn]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9618, :max-fixed-arity 1, :fn-var true, :arglists (quote ([multifn])), :doc "Removes all of the methods of multimethod."}, trampoline {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9206, :column 7, :end-line 9206, :end-column 17, :arglists (quote ([f] [f & args])), :doc "trampoline can be used to convert algorithms requiring mutual\\n  recursion without stack consumption. Calls f with supplied args, if\\n  any. If f returns a fn, calls that fn with no arguments, and\\n  continues to repeat, until the return value is not a fn, then\\n  returns that non-fn value. Note that if you want to return a fn as a\\n  final value, you must wrap it in some data structure and unpack it\\n  after trampoline returns.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([f]), :arglists ([f] [f & args]), :arglists-meta (nil nil)}}, :name cljs.core/trampoline, :variadic true, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([f]), :arglists ([f] [f & args]), :arglists-meta (nil nil)}, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9206, :max-fixed-arity 1, :fn-var true, :arglists ([f] [f & args]), :doc "trampoline can be used to convert algorithms requiring mutual\\n  recursion without stack consumption. Calls f with supplied args, if\\n  any. If f returns a fn, calls that fn with no arguments, and\\n  continues to repeat, until the return value is not a fn, then\\n  returns that non-fn value. Note that if you want to return a fn as a\\n  final value, you must wrap it in some data structure and unpack it\\n  after trampoline returns."}, pr-opts {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 126, :column 8, :end-line 126, :end-column 15, :private true, :arglists (quote ([]))}, :private true, :name cljs.core/pr-opts, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 126, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, *1 {:name cljs.core/*1, :file "cljs/core.cljs", :line nil, :column nil, :end-line 149, :end-column 5, :doc "bound in a repl thread to the most recent value printed", :meta {:file "cljs/core.cljs", :line 149, :column 3, :end-line 149, :end-column 5, :doc "bound in a repl thread to the most recent value printed"}}, vec {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4909, :column 7, :end-line 4909, :end-column 10, :arglists (quote ([coll])), :doc "Creates a new vector containing the contents of coll. JavaScript arrays\\n  will be aliased and should not be modified."}, :name cljs.core/vec, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4909, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Creates a new vector containing the contents of coll. JavaScript arrays\\n  will be aliased and should not be modified."}, *print-meta* {:name cljs.core/*print-meta*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 94, :end-column 15, :dynamic true, :doc "If set to logical true, when printing an object, its metadata will also\\n  be printed in a form that can be read back by the reader.\\n\\n  Defaults to false.", :meta {:file "cljs/core.cljs", :line 94, :column 3, :end-line 94, :end-column 15, :dynamic true, :doc "If set to logical true, when printing an object, its metadata will also\\n  be printed in a form that can be read back by the reader.\\n\\n  Defaults to false."}}, -notify-watches {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 635, :column 4, :end-line 635, :end-column 19, :protocol cljs.core/IWatchable, :doc "Calls all watchers with this, oldval and newval.", :arglists (quote ([this oldval newval]))}, :protocol cljs.core/IWatchable, :name cljs.core/-notify-watches, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([this oldval newval]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 635, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this oldval newval])), :doc "Calls all watchers with this, oldval and newval."}, MultiFn {:num-fields 8, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :name cljs.core/MultiFn, :file "cljs/core.cljs", :end-column 17, :type true, :column 10, :line 9431, :record false, :end-line 9431, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}}, int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2433, :column 7, :end-line 2433, :end-column 10, :arglists (quote ([x])), :doc "Coerce to int by stripping decimal places."}, :name cljs.core/int, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2433, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Coerce to int by stripping decimal places."}, ->ValSeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7701, :column 10, :end-line 7701, :end-column 16, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([mseq _meta]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->ValSeq, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([mseq _meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 7701, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mseq _meta])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, rand {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9222, :column 7, :end-line 9222, :end-column 11, :arglists (quote ([] [n])), :doc "Returns a random floating point number between 0 (inclusive) and\\n  n (default 1) (exclusive).", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name cljs.core/rand, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9222, :max-fixed-arity 1, :fn-var true, :arglists ([] [n]), :doc "Returns a random floating point number between 0 (inclusive) and\\n  n (default 1) (exclusive)."}, second {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1506, :column 7, :end-line 1506, :end-column 13, :arglists (quote ([coll])), :doc "Same as (first (next x))"}, :name cljs.core/second, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1506, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Same as (first (next x))"}, find-ns-obj {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9952, :column 7, :end-line 9952, :end-column 18, :arglists (quote ([ns]))}, :name cljs.core/find-ns-obj, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9952, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns]))}, IEditableCollection {:meta {:file "cljs/core.cljs", :line 643, :column 14, :end-line 643, :end-column 33, :doc "Protocol for collections which can transformed to transients.", :protocol-symbol true, :protocol-info {:methods {-as-transient [[coll]]}}}, :protocol-symbol true, :name cljs.core/IEditableCollection, :file "cljs/core.cljs", :end-column 33, :column nil, :line nil, :protocol-info {:methods {-as-transient [[coll]]}}, :info nil, :end-line 643, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/PersistentHashSet}, :doc "Protocol for collections which can transformed to transients."}, hash-combine {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 873, :column 7, :end-line 873, :end-column 19, :arglists (quote ([seed hash]))}, :name cljs.core/hash-combine, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([seed hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 873, :max-fixed-arity 2, :fn-var true, :arglists (quote ([seed hash]))}, > {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2290, :column 16, :end-line 2290, :end-column 17, :tag boolean, :arglists (quote ([x] [x y] [x y & more])), :doc "Returns non-nil if nums are in monotonically decreasing order,\\n  otherwise false.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/>, :variadic true, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2290, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\\n  otherwise false."}, -name {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 703, :column 12, :end-line 703, :end-column 17, :tag string, :protocol cljs.core/INamed, :doc "Returns the name String of x.", :arglists (quote ([x]))}, :protocol cljs.core/INamed, :name cljs.core/-name, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag string, :end-line 703, :max-fixed-arity 1, :tag string, :fn-var true, :arglists (quote ([x])), :doc "Returns the name String of x."}, replace {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8077, :column 7, :end-line 8077, :end-column 14, :arglists (quote ([smap] [smap coll])), :doc "Given a map of replacement pairs and a vector/collection, returns a\\n  vector/seq with any elements = a key in smap replaced with the\\n  corresponding val in smap.  Returns a transducer when no collection\\n  is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([smap] [smap coll]), :arglists ([smap] [smap coll]), :arglists-meta (nil nil)}}, :name cljs.core/replace, :variadic false, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([smap] [smap coll]), :arglists ([smap] [smap coll]), :arglists-meta (nil nil)}, :method-params ([smap] [smap coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8077, :max-fixed-arity 2, :fn-var true, :arglists ([smap] [smap coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\\n  vector/seq with any elements = a key in smap replaced with the\\n  corresponding val in smap.  Returns a transducer when no collection\\n  is provided."}, ->Subvec {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5013, :column 10, :end-line 5013, :end-column 16, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta v start end __hash]))}, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :name cljs.core/->Subvec, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([meta v start end __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5013, :max-fixed-arity 5, :fn-var true, :arglists (quote ([meta v start end __hash])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, associative? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1879, :column 16, :end-line 1879, :end-column 28, :tag boolean, :arglists (quote ([x])), :doc "Returns true if coll implements Associative"}, :name cljs.core/associative?, :variadic false, :file "cljs/core.cljs", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1879, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if coll implements Associative"}, unchecked-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2438, :column 7, :end-line 2438, :end-column 20, :arglists (quote ([x])), :doc "Coerce to int by stripping decimal places."}, :name cljs.core/unchecked-int, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2438, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Coerce to int by stripping decimal places."}, js-keys {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1926, :column 7, :end-line 1926, :end-column 14, :arglists (quote ([obj])), :doc "Return the JavaScript keys for an object."}, :name cljs.core/js-keys, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1926, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Return the JavaScript keys for an object."}, ES6EntriesIterator {:num-fields 1, :protocols #{cljs.core/Object}, :name cljs.core/ES6EntriesIterator, :file "cljs/core.cljs", :end-column 28, :type true, :column 10, :line 5607, :record false, :end-line 5607, :skip-protocol-flag nil}, keyword? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2934, :column 16, :end-line 2934, :end-column 24, :tag boolean, :arglists (quote ([x])), :doc "Return true if x is a Keyword"}, :name cljs.core/keyword?, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2934, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Return true if x is a Keyword"}, array-iter {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3521, :column 7, :end-line 3521, :end-column 17, :arglists (quote ([x]))}, :name cljs.core/array-iter, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3521, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, force {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9030, :column 7, :end-line 9030, :end-column 12, :arglists (quote ([x])), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x"}, :name cljs.core/force, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9030, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x"}, group-by {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9239, :column 7, :end-line 9239, :end-column 15, :arglists (quote ([f coll])), :doc "Returns a map of the elements of coll keyed by the result of\\n  f on each element. The value at each key will be a vector of the\\n  corresponding elements, in the order they appeared in coll."}, :name cljs.core/group-by, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Returns a map of the elements of coll keyed by the result of\\n  f on each element. The value at each key will be a vector of the\\n  corresponding elements, in the order they appeared in coll."}, -rseq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 592, :column 9, :end-line 592, :end-column 14, :tag clj, :protocol cljs.core/IReversible, :doc "Returns a seq of the items in coll in reversed order.", :arglists (quote ([coll]))}, :protocol cljs.core/IReversible, :name cljs.core/-rseq, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 592, :max-fixed-arity 1, :tag clj, :fn-var true, :arglists (quote ([coll])), :doc "Returns a seq of the items in coll in reversed order."}, prn {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8792, :column 7, :end-line 8792, :end-column 10, :arglists (quote ([& objs])), :doc "Same as pr followed by (newline).", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :name cljs.core/prn, :variadic true, :file "cljs/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}, :method-params [(objs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8792, :max-fixed-arity 0, :fn-var true, :arglists ([& objs]), :doc "Same as pr followed by (newline)."}, tv-pop-tail {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5166, :column 8, :end-line 5166, :end-column 19, :private true, :arglists (quote ([tv level node]))}, :private true, :name cljs.core/tv-pop-tail, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([tv level node]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5166, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tv level node]))}, default-dispatch-val {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9647, :column 7, :end-line 9647, :end-column 27, :arglists (quote ([multifn])), :doc "Given a multimethod, return it\'s default-dispatch-val."}, :name cljs.core/default-dispatch-val, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([multifn]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9647, :max-fixed-arity 1, :fn-var true, :arglists (quote ([multifn])), :doc "Given a multimethod, return it\'s default-dispatch-val."}, ->Atom {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3922, :column 10, :end-line 3922, :end-column 14, :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IMeta cljs.core/IDeref}, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :factory :positional, :arglists (quote ([state meta validator watches]))}, :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IMeta cljs.core/IDeref}, :name cljs.core/->Atom, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([state meta validator watches]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 3922, :max-fixed-arity 4, :fn-var true, :arglists (quote ([state meta validator watches])), :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}}, PersistentHashMap {:meta {:file "cljs/core.cljs", :line 6034, :column 27, :end-line 6034, :end-column 44, :declared true}, :num-fields 6, :protocols #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.core/PersistentHashMap, :file "cljs/core.cljs", :end-column 27, :type true, :column 10, :line 6659, :record false, :declared true, :end-line 6659, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, unchecked-multiply {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2389, :column 15, :end-line 2389, :end-column 33, :tag number, :arglists (quote ([] [x] [x y] [x y & more])), :doc "Returns the product of nums. (*) returns 1.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/unchecked-multiply, :variadic true, :file "cljs/core.cljs", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2389, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([] [x] [x y] [x y & more]), :doc "Returns the product of nums. (*) returns 1."}, ArrayNodeSeq {:num-fields 5, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/ArrayNodeSeq, :file "cljs/core.cljs", :end-column 22, :type true, :column 10, :line 6604, :record false, :end-line 6604, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, even? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3754, :column 16, :end-line 3754, :end-column 21, :tag boolean, :arglists (quote ([n])), :doc "Returns true if n is even, throws an exception if n is not an integer"}, :name cljs.core/even?, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 3754, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([n])), :doc "Returns true if n is even, throws an exception if n is not an integer"}, es6-iterator-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1147, :column 7, :end-line 1147, :end-column 23, :arglists (quote ([iter])), :doc "EXPERIMENTAL: Given an ES2015 compatible iterator return a seq."}, :name cljs.core/es6-iterator-seq, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([iter]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([iter])), :doc "EXPERIMENTAL: Given an ES2015 compatible iterator return a seq."}, unchecked-dec {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2366, :column 7, :end-line 2366, :end-column 20, :arglists (quote ([x])), :doc "Returns a number one less than x, an int."}, :name cljs.core/unchecked-dec, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2366, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a number one less than x, an int."}, hash-collision-node-find-index {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6416, :column 8, :end-line 6416, :end-column 38, :private true, :arglists (quote ([arr cnt key]))}, :private true, :name cljs.core/hash-collision-node-find-index, :variadic false, :file "cljs/core.cljs", :end-column 38, :method-params ([arr cnt key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6416, :max-fixed-arity 3, :fn-var true, :arglists (quote ([arr cnt key]))}, persistent-array-map-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5766, :column 7, :end-line 5766, :end-column 31, :arglists (quote ([arr i _meta]))}, :name cljs.core/persistent-array-map-seq, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([arr i _meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5766, :max-fixed-arity 3, :fn-var true, :arglists (quote ([arr i _meta]))}, RangeIterator {:num-fields 3, :protocols #{cljs.core/Object}, :name cljs.core/RangeIterator, :file "cljs/core.cljs", :end-column 23, :type true, :column 10, :line 8259, :record false, :end-line 8259, :skip-protocol-flag nil}, MultiStepper {:num-fields 3, :protocols #{cljs.core/Object}, :name cljs.core/MultiStepper, :file "cljs/core.cljs", :end-column 22, :type true, :column 10, :line 3591, :record false, :end-line 3591, :skip-protocol-flag nil}, tagged-literal? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9824, :column 7, :end-line 9824, :end-column 22, :arglists (quote ([value])), :doc "Return true if the value is the data representation of a tagged literal"}, :name cljs.core/tagged-literal?, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9824, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Return true if the value is the data representation of a tagged literal"}, double-array {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3249, :column 7, :end-line 3249, :end-column 19, :arglists (quote ([size-or-seq] [size init-val-or-seq])), :doc "Creates an array of doubles. Does not coerce array, provided for compatibility\\n  with Clojure.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}}, :name cljs.core/double-array, :variadic false, :file "cljs/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}, :method-params ([size-or-seq] [size init-val-or-seq]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3249, :max-fixed-arity 2, :fn-var true, :arglists ([size-or-seq] [size init-val-or-seq]), :doc "Creates an array of doubles. Does not coerce array, provided for compatibility\\n  with Clojure."}, create-ns {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9972, :column 7, :end-line 9972, :end-column 16, :arglists (quote ([sym] [sym ns-obj])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([sym] [sym ns-obj]), :arglists ([sym] [sym ns-obj]), :arglists-meta (nil nil)}}, :name cljs.core/create-ns, :variadic false, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([sym] [sym ns-obj]), :arglists ([sym] [sym ns-obj]), :arglists-meta (nil nil)}, :method-params ([sym] [sym ns-obj]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9972, :max-fixed-arity 2, :fn-var true, :arglists ([sym] [sym ns-obj])}, ->EmptyList {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2739, :column 10, :end-line 2739, :end-column 19, :protocols #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta]))}, :protocols #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->EmptyList, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 2739, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta])), :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, seq-reduce {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2124, :column 8, :end-line 2124, :end-column 18, :private true, :arglists (quote ([f coll] [f val coll])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f val coll]), :arglists ([f coll] [f val coll]), :arglists-meta (nil nil)}}, :private true, :name cljs.core/seq-reduce, :variadic false, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f val coll]), :arglists ([f coll] [f val coll]), :arglists-meta (nil nil)}, :method-params ([f coll] [f val coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2124, :max-fixed-arity 3, :fn-var true, :arglists ([f coll] [f val coll])}, spread {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3301, :column 7, :end-line 3301, :end-column 13, :arglists (quote ([arglist]))}, :name cljs.core/spread, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([arglist]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3301, :max-fixed-arity 1, :fn-var true, :arglists (quote ([arglist]))}, balance-left {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6978, :column 8, :end-line 6978, :end-column 20, :private true, :arglists (quote ([key val ins right]))}, :private true, :name cljs.core/balance-left, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([key val ins right]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6978, :max-fixed-arity 4, :fn-var true, :arglists (quote ([key val ins right]))}, rseq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2804, :column 12, :end-line 2804, :end-column 16, :tag seq, :arglists (quote ([coll])), :doc "Returns, in constant time, a seq of the items in rev (which\\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"}, :name cljs.core/rseq, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag seq, :end-line 2804, :max-fixed-arity 1, :tag seq, :fn-var true, :arglists (quote ([coll])), :doc "Returns, in constant time, a seq of the items in rev (which\\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"}, ex-cause {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9763, :column 7, :end-line 9763, :end-column 15, :arglists (quote ([ex])), :doc "Alpha - subject to change.\\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\\n  ExceptionInfo.\\n  Otherwise returns nil."}, :name cljs.core/ex-cause, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([ex]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9763, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex])), :doc "Alpha - subject to change.\\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\\n  ExceptionInfo.\\n  Otherwise returns nil."}, IReset {:meta {:file "cljs/core.cljs", :line 711, :column 14, :end-line 711, :end-column 20, :doc "Protocol for adding resetting functionality.", :protocol-symbol true, :protocol-info {:methods {-reset! [[o new-value]]}}}, :protocol-symbol true, :name cljs.core/IReset, :file "cljs/core.cljs", :end-column 20, :column nil, :line nil, :protocol-info {:methods {-reset! [[o new-value]]}}, :info nil, :end-line 711, :impls #{}, :doc "Protocol for adding resetting functionality."}, IEmptyableCollection {:meta {:file "cljs/core.cljs", :line 441, :column 14, :end-line 441, :end-column 34, :doc "Protocol for creating an empty collection.", :protocol-symbol true, :protocol-info {:methods {-empty [[coll]]}}}, :protocol-symbol true, :name cljs.core/IEmptyableCollection, :file "cljs/core.cljs", :end-column 34, :column nil, :line nil, :protocol-info {:methods {-empty [[coll]]}}, :info nil, :end-line 441, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "Protocol for creating an empty collection."}, array-map-index-of {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5692, :column 8, :end-line 5692, :end-column 26, :private true, :arglists (quote ([m k]))}, :private true, :name cljs.core/array-map-index-of, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5692, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, ex-message {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9755, :column 7, :end-line 9755, :end-column 17, :arglists (quote ([ex])), :doc "Alpha - subject to change.\\n  Returns the message attached to the given Error / ExceptionInfo object.\\n  For non-Errors returns nil."}, :name cljs.core/ex-message, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([ex]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9755, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex])), :doc "Alpha - subject to change.\\n  Returns the message attached to the given Error / ExceptionInfo object.\\n  For non-Errors returns nil."}, string-print {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8600, :column 7, :end-line 8600, :end-column 19, :arglists (quote ([x]))}, :name cljs.core/string-print, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8600, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, float {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2343, :column 15, :end-line 2343, :end-column 20, :tag number, :arglists (quote ([x]))}, :name cljs.core/float, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2343, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([x]))}, fixture2 {:name cljs.core/fixture2, :file "cljs/core.cljs", :line nil, :column nil, :end-line 9010, :end-column 14, :meta {:file "cljs/core.cljs", :line 9010, :column 6, :end-line 9010, :end-column 14}}, IRecord {:meta {:file "cljs/core.cljs", :line 587, :column 14, :end-line 587, :end-column 21, :doc "Marker interface indicating a record object", :protocol-symbol true, :protocol-info {:methods {}}}, :protocol-symbol true, :name cljs.core/IRecord, :file "cljs/core.cljs", :end-column 21, :column nil, :line nil, :protocol-info {:methods {}}, :info nil, :end-line 587, :impls #{}, :doc "Marker interface indicating a record object"}, pr-str {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8750, :column 7, :end-line 8750, :end-column 13, :arglists (quote ([& objs])), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :name cljs.core/pr-str, :variadic true, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}, :method-params [(objs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8750, :max-fixed-arity 0, :fn-var true, :arglists ([& objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter."}, first-array-for-longvec {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4637, :column 8, :end-line 4637, :end-column 31, :private true, :arglists (quote ([pv]))}, :private true, :name cljs.core/first-array-for-longvec, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([pv]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4637, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pv]))}, es6-set-entries-iterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5629, :column 7, :end-line 5629, :end-column 31, :arglists (quote ([coll]))}, :name cljs.core/es6-set-entries-iterator, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5629, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, concat {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3309, :column 7, :end-line 3309, :end-column 13, :arglists (quote ([] [x] [x y] [x y & zs])), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & zs]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/concat, :variadic true, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & zs]), :arglists-meta (nil nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 3309, :max-fixed-arity 2, :fn-var true, :arglists ([] [x] [x y] [x y & zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls."}, -methods {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9423, :column 4, :end-line 9423, :end-column 12, :protocol cljs.core/IMultiFn, :doc nil, :arglists (quote ([mf]))}, :protocol cljs.core/IMultiFn, :name cljs.core/-methods, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([mf]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9423, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mf])), :doc nil}, js-reserved {:name cljs.core/js-reserved, :file "cljs/core.cljs", :line nil, :column nil, :end-line 9851, :end-column 17, :meta {:file "cljs/core.cljs", :line 9851, :column 6, :end-line 9851, :end-column 17}}, IDerefWithTimeout {:meta {:file "cljs/core.cljs", :line 538, :column 14, :end-line 538, :end-column 31, :doc nil, :protocol-symbol true, :protocol-info {:methods {-deref-with-timeout [[o msec timeout-val]]}}}, :protocol-symbol true, :name cljs.core/IDerefWithTimeout, :file "cljs/core.cljs", :end-column 31, :column nil, :line nil, :protocol-info {:methods {-deref-with-timeout [[o msec timeout-val]]}}, :info nil, :end-line 538, :impls #{}, :doc nil}, symbol {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 944, :column 7, :end-line 944, :end-column 13, :arglists (quote ([name] [ns name])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([name] [ns name]), :arglists ([name] [ns name]), :arglists-meta (nil nil)}}, :name cljs.core/symbol, :variadic false, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([name] [ns name]), :arglists ([name] [ns name]), :arglists-meta (nil nil)}, :method-params ([name] [ns name]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 944, :max-fixed-arity 2, :fn-var true, :arglists ([name] [ns name])}, to-array-2d {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3194, :column 7, :end-line 3194, :end-column 18, :arglists (quote ([coll])), :doc "Returns a (potentially-ragged) 2-dimensional array\\n  containing the contents of coll."}, :name cljs.core/to-array-2d, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns a (potentially-ragged) 2-dimensional array\\n  containing the contents of coll."}, Subvec {:num-fields 5, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :name cljs.core/Subvec, :file "cljs/core.cljs", :end-column 16, :type true, :column 10, :line 5013, :record false, :end-line 5013, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ExceptionInfo {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9711, :column 3, :end-line 9711, :end-column 16, :jsdoc ["@constructor"], :arglists (quote ([message data cause]))}, :name cljs.core/ExceptionInfo, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([message data cause]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9711, :max-fixed-arity 3, :fn-var true, :arglists (quote ([message data cause])), :jsdoc ["@constructor"]}, mod {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2467, :column 7, :end-line 2467, :end-column 10, :arglists (quote ([n d])), :doc "Modulus of num and div. Truncates toward negative infinity."}, :name cljs.core/mod, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([n d]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2467, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n d])), :doc "Modulus of num and div. Truncates toward negative infinity."}, ISet {:meta {:file "cljs/core.cljs", :line 513, :column 14, :end-line 513, :end-column 18, :doc "Protocol for adding set functionality to a collection.", :protocol-symbol true, :protocol-info {:methods {-disjoin [[coll v]]}}}, :protocol-symbol true, :name cljs.core/ISet, :file "cljs/core.cljs", :end-column 18, :column nil, :line nil, :protocol-info {:methods {-disjoin [[coll v]]}}, :info nil, :end-line 513, :impls #{cljs.core/PersistentHashSet cljs.core/PersistentTreeSet}, :doc "Protocol for adding set functionality to a collection."}, pop {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1837, :column 7, :end-line 1837, :end-column 10, :arglists (quote ([coll])), :doc "For a list or queue, returns a new list/queue without the first\\n  item, for a vector, returns a new vector without the last item.\\n  Note - not the same as next/butlast."}, :name cljs.core/pop, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1837, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "For a list or queue, returns a new list/queue without the first\\n  item, for a vector, returns a new vector without the last item.\\n  Note - not the same as next/butlast."}, IPending {:meta {:file "cljs/core.cljs", :line 627, :column 14, :end-line 627, :end-column 22, :doc "Protocol for types which can have a deferred realization. Currently only\\n  implemented by Delay.", :protocol-symbol true, :protocol-info {:methods {-realized? [[d]]}}}, :protocol-symbol true, :name cljs.core/IPending, :file "cljs/core.cljs", :end-column 22, :column nil, :line nil, :protocol-info {:methods {-realized? [[d]]}}, :info nil, :end-line 627, :impls #{cljs.core/Delay}, :doc "Protocol for types which can have a deferred realization. Currently only\\n  implemented by Delay."}, -entry-key {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 607, :column 4, :end-line 607, :end-column 14, :protocol cljs.core/ISorted, :doc "Returns the key for entry.", :arglists (quote ([coll entry]))}, :protocol cljs.core/ISorted, :name cljs.core/-entry-key, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([coll entry]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 607, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll entry])), :doc "Returns the key for entry."}, CHAR_MAP {:name cljs.core/CHAR_MAP, :file "cljs/core.cljs", :line nil, :column nil, :end-line 275, :end-column 11, :jsdoc ["@enum {string"], :meta {:file "cljs/core.cljs", :line 275, :column 3, :end-line 275, :end-column 11, :jsdoc ["@enum {string"]}}, pop-tail {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4671, :column 8, :end-line 4671, :end-column 16, :private true, :arglists (quote ([pv level node]))}, :private true, :name cljs.core/pop-tail, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([pv level node]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4671, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pv level node]))}, dissoc! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3384, :column 7, :end-line 3384, :end-column 14, :arglists (quote ([tcoll key] [tcoll key & ks])), :doc "Returns a transient map that doesn\'t contain a mapping for key(s).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([tcoll key]), :arglists ([tcoll key] [tcoll key & ks]), :arglists-meta (nil nil)}}, :name cljs.core/dissoc!, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([tcoll key]), :arglists ([tcoll key] [tcoll key & ks]), :arglists-meta (nil nil)}, :method-params ([tcoll key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3384, :max-fixed-arity 2, :fn-var true, :arglists ([tcoll key] [tcoll key & ks]), :doc "Returns a transient map that doesn\'t contain a mapping for key(s)."}, reductions {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8443, :column 7, :end-line 8443, :end-column 17, :arglists (quote ([f coll] [f init coll])), :doc "Returns a lazy seq of the intermediate values of the reduction (as\\n  per reduce) of coll by f, starting with init.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f init coll]), :arglists ([f coll] [f init coll]), :arglists-meta (nil nil)}}, :name cljs.core/reductions, :variadic false, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f coll] [f init coll]), :arglists ([f coll] [f init coll]), :arglists-meta (nil nil)}, :method-params ([f coll] [f init coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8443, :max-fixed-arity 3, :fn-var true, :arglists ([f coll] [f init coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\\n  per reduce) of coll by f, starting with init."}, indexed? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1348, :column 16, :end-line 1348, :end-column 24, :tag boolean, :arglists (quote ([x])), :doc "Returns true if coll implements nth in constant time"}, :name cljs.core/indexed?, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1348, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if coll implements nth in constant time"}, - {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2243, :column 15, :end-line 2243, :end-column 16, :tag number, :arglists (quote ([x] [x y] [x y & more])), :doc "If no ys are supplied, returns the negation of x, else subtracts\\n  the ys from x and returns the result.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/-, :variadic true, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2243, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\\n  the ys from x and returns the result."}, -equiv {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 568, :column 13, :end-line 568, :end-column 19, :tag boolean, :protocol cljs.core/IEquiv, :doc "Returns true if o and other are equal, false otherwise.", :arglists (quote ([o other]))}, :protocol cljs.core/IEquiv, :name cljs.core/-equiv, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([o other]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 568, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([o other])), :doc "Returns true if o and other are equal, false otherwise."}, ->RangeIterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8259, :column 10, :end-line 8259, :end-column 23, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([i end step]))}, :protocols #{cljs.core/Object}, :name cljs.core/->RangeIterator, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([i end step]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 8259, :max-fixed-arity 3, :fn-var true, :arglists (quote ([i end step])), :skip-protocol-flag nil}, ->ArrayNode {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6319, :column 10, :end-line 6319, :end-column 19, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([edit cnt arr]))}, :protocols #{cljs.core/Object}, :name cljs.core/->ArrayNode, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([edit cnt arr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 6319, :max-fixed-arity 3, :fn-var true, :arglists (quote ([edit cnt arr])), :skip-protocol-flag nil}, assoc! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3372, :column 7, :end-line 3372, :end-column 13, :arglists (quote ([tcoll key val] [tcoll key val & kvs])), :doc "When applied to a transient map, adds mapping of key(s) to\\n  val(s). When applied to a transient vector, sets the val at index.\\n  Note - index must be <= (count vector). Returns coll.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([tcoll key val]), :arglists ([tcoll key val] [tcoll key val & kvs]), :arglists-meta (nil nil)}}, :name cljs.core/assoc!, :variadic true, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([tcoll key val]), :arglists ([tcoll key val] [tcoll key val & kvs]), :arglists-meta (nil nil)}, :method-params ([tcoll key val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3372, :max-fixed-arity 3, :fn-var true, :arglists ([tcoll key val] [tcoll key val & kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\\n  val(s). When applied to a transient vector, sets the val at index.\\n  Note - index must be <= (count vector). Returns coll."}, hash-set {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8059, :column 7, :end-line 8059, :end-column 15, :arglists (quote ([] [& keys])), :doc "Returns a new hash set with supplied keys.  Any equal keys are\\n  handled as if by repeated uses of conj.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params ([]), :arglists ([] [& keys]), :arglists-meta (nil nil)}}, :name cljs.core/hash-set, :variadic true, :file "cljs/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params ([]), :arglists ([] [& keys]), :arglists-meta (nil nil)}, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8059, :max-fixed-arity 0, :fn-var true, :arglists ([] [& keys]), :doc "Returns a new hash set with supplied keys.  Any equal keys are\\n  handled as if by repeated uses of conj."}, reduce-kv {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2190, :column 7, :end-line 2190, :end-column 16, :arglists (quote ([f init coll])), :doc "Reduces an associative collection. f should be a function of 3\\n  arguments. Returns the result of applying f to init, the first key\\n  and the first value in coll, then applying f to that result and the\\n  2nd key and value, etc. If coll contains no entries, returns init\\n  and f is not called. Note that reduce-kv is supported on vectors,\\n  where the keys will be the ordinals."}, :name cljs.core/reduce-kv, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([f init coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2190, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init coll])), :doc "Reduces an associative collection. f should be a function of 3\\n  arguments. Returns the result of applying f to init, the first key\\n  and the first value in coll, then applying f to that result and the\\n  2nd key and value, etc. If coll contains no entries, returns init\\n  and f is not called. Note that reduce-kv is supported on vectors,\\n  where the keys will be the ordinals."}, reset! {:name cljs.core/reset!, :file "cljs/core.cljs", :line nil, :column nil, :end-line 6047, :end-column 55, :declared true, :meta {:file "cljs/core.cljs", :line 6047, :column 49, :end-line 6047, :end-column 55, :declared true}}, name {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8127, :column 7, :end-line 8127, :end-column 11, :arglists (quote ([x])), :doc "Returns the name String of a string, symbol or keyword."}, :name cljs.core/name, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns the name String of a string, symbol or keyword."}, ->RedNode {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7183, :column 10, :end-line 7183, :end-column 17, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :factory :positional, :arglists (quote ([key val left right __hash]))}, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :name cljs.core/->RedNode, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([key val left right __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 7183, :max-fixed-arity 5, :fn-var true, :arglists (quote ([key val left right __hash])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, unchecked-array-for {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4645, :column 8, :end-line 4645, :end-column 27, :private true, :arglists (quote ([pv i]))}, :private true, :name cljs.core/unchecked-array-for, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([pv i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4645, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pv i]))}, Fn {:meta {:file "cljs/core.cljs", :line 400, :column 14, :end-line 400, :end-column 16, :doc "Marker protocol", :protocol-symbol true, :protocol-info {:methods {}}}, :protocol-symbol true, :name cljs.core/Fn, :file "cljs/core.cljs", :end-column 16, :column nil, :line nil, :protocol-info {:methods {}}, :info nil, :end-line 400, :impls #{cljs.core/Var function cljs.core/MetaFn}, :doc "Marker protocol"}, ffirst {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1511, :column 7, :end-line 1511, :end-column 13, :arglists (quote ([coll])), :doc "Same as (first (first x))"}, :name cljs.core/ffirst, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1511, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Same as (first (first x))"}, sorted-set {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8065, :column 7, :end-line 8065, :end-column 17, :arglists (quote ([& keys])), :doc "Returns a new sorted set with supplied keys.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keys)], :arglists ([& keys]), :arglists-meta (nil)}}, :name cljs.core/sorted-set, :variadic true, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keys)], :arglists ([& keys]), :arglists-meta (nil)}, :method-params [(keys)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8065, :max-fixed-arity 0, :fn-var true, :arglists ([& keys]), :doc "Returns a new sorted set with supplied keys."}, pr-with-opts {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8737, :column 8, :end-line 8737, :end-column 20, :private true, :arglists (quote ([objs opts])), :doc "Prints a sequence of objects using string-print, observing all\\n  the options given in opts"}, :private true, :name cljs.core/pr-with-opts, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([objs opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8737, :max-fixed-arity 2, :fn-var true, :arglists (quote ([objs opts])), :doc "Prints a sequence of objects using string-print, observing all\\n  the options given in opts"}, PersistentTreeMap {:num-fields 5, :protocols #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.core/PersistentTreeMap, :file "cljs/core.cljs", :end-column 27, :type true, :column 10, :line 7433, :record false, :end-line 7433, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->PersistentTreeMap {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7433, :column 10, :end-line 7433, :end-column 27, :protocols #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :factory :positional, :arglists (quote ([comp tree cnt meta __hash]))}, :protocols #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.core/->PersistentTreeMap, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([comp tree cnt meta __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 7433, :max-fixed-arity 5, :fn-var true, :arglists (quote ([comp tree cnt meta __hash])), :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, array-reduce {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1311, :column 8, :end-line 1311, :end-column 20, :private true, :arglists (quote ([arr f] [arr f val] [arr f val idx])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([arr f] [arr f val] [arr f val idx]), :arglists ([arr f] [arr f val] [arr f val idx]), :arglists-meta (nil nil nil)}}, :private true, :name cljs.core/array-reduce, :variadic false, :file "cljs/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([arr f] [arr f val] [arr f val idx]), :arglists ([arr f] [arr f val] [arr f val idx]), :arglists-meta (nil nil nil)}, :method-params ([arr f] [arr f val] [arr f val idx]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 1311, :max-fixed-arity 4, :fn-var true, :arglists ([arr f] [arr f val] [arr f val idx])}, counted? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1344, :column 16, :end-line 1344, :end-column 24, :tag boolean, :arglists (quote ([x])), :doc "Returns true if coll implements count in constant time"}, :name cljs.core/counted?, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1344, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if coll implements count in constant time"}, tagged-literal {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9829, :column 7, :end-line 9829, :end-column 21, :arglists (quote ([tag form])), :doc "Construct a data representation of a tagged literal from a\\n  tag symbol and a form."}, :name cljs.core/tagged-literal, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([tag form]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9829, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag form])), :doc "Construct a data representation of a tagged literal from a\\n  tag symbol and a form."}, println {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8780, :column 7, :end-line 8780, :end-column 14, :arglists (quote ([& objs])), :doc "Same as print followed by (newline)", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :name cljs.core/println, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}, :method-params [(objs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8780, :max-fixed-arity 0, :fn-var true, :arglists ([& objs]), :doc "Same as print followed by (newline)"}, assoc-in {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4534, :column 7, :end-line 4534, :end-column 15, :arglists (quote ([m [k & ks] v])), :doc "Associates a value in a nested associative structure, where ks is a\\n  sequence of keys and v is the new value and returns a new nested structure.\\n  If any levels do not exist, hash-maps will be created."}, :name cljs.core/assoc-in, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([m p__7970 v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4534, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m [k & ks] v])), :doc "Associates a value in a nested associative structure, where ks is a\\n  sequence of keys and v is the new value and returns a new nested structure.\\n  If any levels do not exist, hash-maps will be created."}, PersistentHashSet {:num-fields 3, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.core/PersistentHashSet, :file "cljs/core.cljs", :end-column 27, :type true, :column 10, :line 7811, :record false, :end-line 7811, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, bit-test {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2527, :column 16, :end-line 2527, :end-column 24, :tag boolean, :arglists (quote ([x n])), :doc "Test bit at index n"}, :name cljs.core/bit-test, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2527, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([x n])), :doc "Test bit at index n"}, ->Namespace {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9924, :column 10, :end-line 9924, :end-column 19, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/Object}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash}, :factory :positional, :arglists (quote ([obj name]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/Object}, :name cljs.core/->Namespace, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([obj name]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 9924, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj name])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash}}, TransientHashMap {:meta {:file "cljs/core.cljs", :line 6657, :column 10, :end-line 6657, :end-column 26, :declared true}, :num-fields 5, :protocols #{cljs.core/ITransientMap cljs.core/Object cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :name cljs.core/TransientHashMap, :file "cljs/core.cljs", :end-column 26, :type true, :column 10, :line 6808, :record false, :declared true, :end-line 6808, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ->PersistentHashMap {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6659, :column 10, :end-line 6659, :end-column 27, :protocols #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :factory :positional, :arglists (quote ([meta cnt root has-nil? nil-val __hash]))}, :protocols #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.core/->PersistentHashMap, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([meta cnt root has-nil? nil-val __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 6659, :max-fixed-arity 6, :fn-var true, :arglists (quote ([meta cnt root has-nil? nil-val __hash])), :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, array-extend-kv {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5695, :column 8, :end-line 5695, :end-column 23, :private true, :arglists (quote ([arr k v]))}, :private true, :name cljs.core/array-extend-kv, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([arr k v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5695, :max-fixed-arity 3, :fn-var true, :arglists (quote ([arr k v]))}, ISwap {:meta {:file "cljs/core.cljs", :line 716, :column 14, :end-line 716, :end-column 19, :doc "Protocol for adding swapping functionality.", :protocol-symbol true, :protocol-info {:methods {-swap! [[o f] [o f a] [o f a b] [o f a b xs]]}}}, :protocol-symbol true, :name cljs.core/ISwap, :file "cljs/core.cljs", :end-column 19, :column nil, :line nil, :protocol-info {:methods {-swap! [[o f] [o f a] [o f a b] [o f a b xs]]}}, :info nil, :end-line 716, :impls #{}, :doc "Protocol for adding swapping functionality."}, ChunkedCons {:meta {:file "cljs/core.cljs", :line 1911, :column 10, :end-line 1911, :end-column 21, :declared true}, :num-fields 4, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :name cljs.core/ChunkedCons, :file "cljs/core.cljs", :end-column 21, :type true, :column 10, :line 3096, :record false, :declared true, :end-line 3096, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}}, memoize {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9191, :column 7, :end-line 9191, :end-column 14, :arglists (quote ([f])), :doc "Returns a memoized version of a referentially transparent function. The\\n  memoized version of the function keeps a cache of the mapping from arguments\\n  to results and, when calls with the same arguments are repeated often, has\\n  higher performance at the expense of higher memory use."}, :name cljs.core/memoize, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Returns a memoized version of a referentially transparent function. The\\n  memoized version of the function keeps a cache of the mapping from arguments\\n  to results and, when calls with the same arguments are repeated often, has\\n  higher performance at the expense of higher memory use."}, alter-meta! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8946, :column 7, :end-line 8946, :end-column 18, :arglists (quote ([iref f & args])), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\\n\\n  (apply f its-current-meta args)\\n\\n  f must be free of side-effects", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(iref f args)], :arglists ([iref f & args]), :arglists-meta (nil)}}, :name cljs.core/alter-meta!, :variadic true, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(iref f args)], :arglists ([iref f & args]), :arglists-meta (nil)}, :method-params [(iref f args)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8946, :max-fixed-arity 2, :fn-var true, :arglists ([iref f & args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\\n\\n  (apply f its-current-meta args)\\n\\n  f must be free of side-effects"}, ->StringBufferWriter {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 734, :column 10, :end-line 734, :end-column 28, :protocols #{cljs.core/IWriter}, :skip-protocol-flag #{cljs.core/IWriter}, :factory :positional, :arglists (quote ([sb]))}, :protocols #{cljs.core/IWriter}, :name cljs.core/->StringBufferWriter, :variadic false, :file "cljs/core.cljs", :end-column 28, :method-params ([sb]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 734, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sb])), :skip-protocol-flag #{cljs.core/IWriter}}, zero? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2572, :column 16, :end-line 2572, :end-column 21, :tag boolean, :arglists (quote ([n])), :doc "Returns true if num is zero, else false"}, :name cljs.core/zero?, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2572, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([n])), :doc "Returns true if num is zero, else false"}, tv-ensure-editable {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5141, :column 8, :end-line 5141, :end-column 26, :private true, :arglists (quote ([edit node]))}, :private true, :name cljs.core/tv-ensure-editable, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([edit node]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([edit node]))}, *main-cli-fn* {:name cljs.core/*main-cli-fn*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 242, :end-column 16, :doc "When compiled for a command-line target, whatever\\n  function *main-fn* is set to will be called with the command-line\\n  argv as arguments", :meta {:file "cljs/core.cljs", :line 242, :column 3, :end-line 242, :end-column 16, :doc "When compiled for a command-line target, whatever\\n  function *main-fn* is set to will be called with the command-line\\n  argv as arguments"}}, -assoc-n {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 530, :column 9, :end-line 530, :end-column 17, :tag clj, :protocol cljs.core/IVector, :doc "Returns a new vector with value val added at position n.", :arglists (quote ([coll n val]))}, :protocol cljs.core/IVector, :name cljs.core/-assoc-n, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([coll n val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 530, :max-fixed-arity 3, :tag clj, :fn-var true, :arglists (quote ([coll n val])), :doc "Returns a new vector with value val added at position n."}, unchecked-dec-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2371, :column 7, :end-line 2371, :end-column 24, :arglists (quote ([x])), :doc "Returns a number one less than x, an int."}, :name cljs.core/unchecked-dec-int, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2371, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a number one less than x, an int."}, hash-imap {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2640, :column 8, :end-line 2640, :end-column 17, :private true, :arglists (quote ([m]))}, :private true, :name cljs.core/hash-imap, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2640, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, dominates {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9388, :column 8, :end-line 9388, :end-column 17, :private true, :arglists (quote ([x y prefer-table]))}, :private true, :name cljs.core/dominates, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([x y prefer-table]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9388, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y prefer-table]))}, persistent! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3352, :column 7, :end-line 3352, :end-column 18, :arglists (quote ([tcoll])), :doc "Returns a new, persistent version of the transient collection, in\\n  constant time. The transient collection cannot be used after this\\n  call, any such use will throw an exception."}, :name cljs.core/persistent!, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([tcoll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3352, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tcoll])), :doc "Returns a new, persistent version of the transient collection, in\\n  constant time. The transient collection cannot be used after this\\n  call, any such use will throw an exception."}, set-print-fn! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 58, :column 7, :end-line 58, :end-column 20, :arglists (quote ([f])), :doc "Set *print-fn* to f."}, :name cljs.core/set-print-fn!, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Set *print-fn* to f."}, nnext {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1526, :column 7, :end-line 1526, :end-column 12, :arglists (quote ([coll])), :doc "Same as (next (next x))"}, :name cljs.core/nnext, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1526, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Same as (next (next x))"}, Box {:num-fields 1, :protocols #{}, :name cljs.core/Box, :file "cljs/core.cljs", :end-column 13, :type true, :column 10, :line 6045, :record false, :end-line 6045, :skip-protocol-flag nil}, balance-right {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7003, :column 8, :end-line 7003, :end-column 21, :private true, :arglists (quote ([key val left ins]))}, :private true, :name cljs.core/balance-right, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([key val left ins]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7003, :max-fixed-arity 4, :fn-var true, :arglists (quote ([key val left ins]))}, throw-no-method-error {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9428, :column 8, :end-line 9428, :end-column 29, :private true, :arglists (quote ([name dispatch-val]))}, :private true, :name cljs.core/throw-no-method-error, :variadic false, :file "cljs/core.cljs", :end-column 29, :method-params ([name dispatch-val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9428, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name dispatch-val]))}, demunge-str {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9898, :column 8, :end-line 9898, :end-column 19, :private true, :arglists (quote ([munged-name]))}, :private true, :name cljs.core/demunge-str, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([munged-name]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9898, :max-fixed-arity 1, :fn-var true, :arglists (quote ([munged-name]))}, add-watch {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8960, :column 7, :end-line 8960, :end-column 16, :arglists (quote ([iref key f])), :doc "Alpha - subject to change.\\n\\n  Adds a watch function to an atom reference. The watch fn must be a\\n  fn of 4 args: a key, the reference, its old-state, its\\n  new-state. Whenever the reference\'s state might have been changed,\\n  any registered watches will have their functions called. The watch\\n  fn will be called synchronously. Note that an atom\'s state\\n  may have changed again prior to the fn call, so use old/new-state\\n  rather than derefing the reference. Keys must be unique per\\n  reference, and can be used to remove the watch with remove-watch,\\n  but are otherwise considered opaque by the watch mechanism.  Bear in\\n  mind that regardless of the result or action of the watch fns the\\n  atom\'s value will change.  Example:\\n\\n      (def a (atom 0))\\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\\n      (swap! a inc)\\n      ;; Assertion Error\\n      (deref a)\\n      ;=> 1"}, :name cljs.core/add-watch, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([iref key f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8960, :max-fixed-arity 3, :fn-var true, :arglists (quote ([iref key f])), :doc "Alpha - subject to change.\\n\\n  Adds a watch function to an atom reference. The watch fn must be a\\n  fn of 4 args: a key, the reference, its old-state, its\\n  new-state. Whenever the reference\'s state might have been changed,\\n  any registered watches will have their functions called. The watch\\n  fn will be called synchronously. Note that an atom\'s state\\n  may have changed again prior to the fn call, so use old/new-state\\n  rather than derefing the reference. Keys must be unique per\\n  reference, and can be used to remove the watch with remove-watch,\\n  but are otherwise considered opaque by the watch mechanism.  Bear in\\n  mind that regardless of the result or action of the watch fns the\\n  atom\'s value will change.  Example:\\n\\n      (def a (atom 0))\\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\\n      (swap! a inc)\\n      ;; Assertion Error\\n      (deref a)\\n      ;=> 1"}, not-every? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3735, :column 16, :end-line 3735, :end-column 26, :tag boolean, :arglists (quote ([pred coll])), :doc "Returns false if (pred x) is logical true for every x in\\n  coll, else true."}, :name cljs.core/not-every?, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 3735, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns false if (pred x) is logical true for every x in\\n  coll, else true."}, rem {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2478, :column 7, :end-line 2478, :end-column 10, :arglists (quote ([n d])), :doc "remainder of dividing numerator by denominator."}, :name cljs.core/rem, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([n d]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2478, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n d])), :doc "remainder of dividing numerator by denominator."}, pr-sb-with-opts {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8713, :column 8, :end-line 8713, :end-column 23, :private true, :arglists (quote ([objs opts]))}, :private true, :name cljs.core/pr-sb-with-opts, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([objs opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8713, :max-fixed-arity 2, :fn-var true, :arglists (quote ([objs opts]))}, BitmapIndexedNode {:num-fields 3, :protocols #{cljs.core/Object}, :name cljs.core/BitmapIndexedNode, :file "cljs/core.cljs", :end-column 27, :type true, :column 10, :line 6108, :record false, :end-line 6108, :skip-protocol-flag nil}, ->NodeSeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6541, :column 10, :end-line 6541, :end-column 17, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta nodes i s __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->NodeSeq, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([meta nodes i s __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 6541, :max-fixed-arity 5, :fn-var true, :arglists (quote ([meta nodes i s __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, some {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3740, :column 7, :end-line 3740, :end-column 11, :arglists (quote ([pred coll])), :doc "Returns the first logical true value of (pred x) for any x in coll,\\n  else nil.  One common idiom is to use a set as pred, for example\\n  this will return :fred if :fred is in the sequence, otherwise nil:\\n  (some #{:fred} coll)"}, :name cljs.core/some, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3740, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns the first logical true value of (pred x) for any x in coll,\\n  else nil.  One common idiom is to use a set as pred, for example\\n  this will return :fred if :fred is in the sequence, otherwise nil:\\n  (some #{:fred} coll)"}, INamed {:meta {:file "cljs/core.cljs", :line 701, :column 14, :end-line 701, :end-column 20, :doc "Protocol for adding a name.", :protocol-symbol true, :protocol-info {:methods {-name [[x]], -namespace [[x]]}}}, :protocol-symbol true, :name cljs.core/INamed, :file "cljs/core.cljs", :end-column 20, :column nil, :line nil, :protocol-info {:methods {-name [[x]], -namespace [[x]]}}, :info nil, :end-line 701, :impls #{cljs.core/MultiFn cljs.core/Keyword cljs.core/Symbol}, :doc "Protocol for adding a name."}, ->Box {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6045, :column 10, :end-line 6045, :end-column 13, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([val]))}, :protocols #{}, :name cljs.core/->Box, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 6045, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :skip-protocol-flag nil}, IReduce {:meta {:file "cljs/core.cljs", :line 551, :column 14, :end-line 551, :end-column 21, :doc "Protocol for seq types that can reduce themselves.\\n  Called by cljs.core/reduce.", :protocol-symbol true, :protocol-info {:methods {-reduce [[coll f] [coll f start]]}}}, :protocol-symbol true, :name cljs.core/IReduce, :file "cljs/core.cljs", :end-column 21, :column nil, :line nil, :protocol-info {:methods {-reduce [[coll f] [coll f start]]}}, :info nil, :end-line 551, :impls #{cljs.core/Cons cljs.core/Eduction cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ArrayChunk cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "Protocol for seq types that can reduce themselves.\\n  Called by cljs.core/reduce."}, drop {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4239, :column 7, :end-line 4239, :end-column 11, :arglists (quote ([n] [n coll])), :doc "Returns a lazy sequence of all but the first n items in coll.\\n  Returns a stateful transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}}, :name cljs.core/drop, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n coll]), :arglists ([n] [n coll]), :arglists-meta (nil nil)}, :method-params ([n] [n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4239, :max-fixed-arity 2, :fn-var true, :arglists ([n] [n coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\\n  Returns a stateful transducer when no collection is provided."}, js-obj {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1918, :column 7, :end-line 1918, :end-column 13, :arglists (quote ([] [& keyvals])), :doc "Create JavaSript object from an even number arguments representing\\n  interleaved keys and values.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params ([]), :arglists ([] [& keyvals]), :arglists-meta (nil nil)}}, :name cljs.core/js-obj, :variadic true, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params ([]), :arglists ([] [& keyvals]), :arglists-meta (nil nil)}, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1918, :max-fixed-arity 0, :fn-var true, :arglists ([] [& keyvals]), :doc "Create JavaSript object from an even number arguments representing\\n  interleaved keys and values."}, ITransientCollection {:meta {:file "cljs/core.cljs", :line 648, :column 14, :end-line 648, :end-column 34, :doc "Protocol for adding basic functionality to transient collections.", :protocol-symbol true, :protocol-info {:methods {-conj! [[tcoll val]], -persistent! [[tcoll]]}}}, :protocol-symbol true, :name cljs.core/ITransientCollection, :file "cljs/core.cljs", :end-column 34, :column nil, :line nil, :protocol-info {:methods {-conj! [[tcoll val]], -persistent! [[tcoll]]}}, :info nil, :end-line 648, :impls #{cljs.core/TransientVector cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientHashSet}, :doc "Protocol for adding basic functionality to transient collections."}, Atom {:num-fields 4, :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/Object cljs.core/IMeta cljs.core/IDeref}, :name cljs.core/Atom, :file "cljs/core.cljs", :end-column 14, :type true, :column 10, :line 3922, :record false, :end-line 3922, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}}, nth {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1611, :column 7, :end-line 1611, :end-column 10, :arglists (quote ([coll n] [coll n not-found])), :doc "Returns the value at the index. get returns nil if index out of\\n  bounds, nth throws an exception unless not-found is supplied.  nth\\n  also works for strings, arrays, regex Matchers and Lists, and,\\n  in O(n) time, for sequences.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n not-found]), :arglists ([coll n] [coll n not-found]), :arglists-meta (nil nil)}}, :name cljs.core/nth, :variadic false, :file "cljs/core.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll n] [coll n not-found]), :arglists ([coll n] [coll n not-found]), :arglists-meta (nil nil)}, :method-params ([coll n] [coll n not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1611, :max-fixed-arity 3, :fn-var true, :arglists ([coll n] [coll n not-found]), :doc "Returns the value at the index. get returns nil if index out of\\n  bounds, nth throws an exception unless not-found is supplied.  nth\\n  also works for strings, arrays, regex Matchers and Lists, and,\\n  in O(n) time, for sequences."}, sorted? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1887, :column 16, :end-line 1887, :end-column 23, :tag boolean, :arglists (quote ([x])), :doc "Returns true if coll satisfies ISorted"}, :name cljs.core/sorted?, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1887, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if coll satisfies ISorted"}, nil? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 177, :column 16, :end-line 177, :end-column 20, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is nil, false otherwise."}, :name cljs.core/nil?, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 177, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is nil, false otherwise."}, split-at {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4307, :column 7, :end-line 4307, :end-column 15, :arglists (quote ([n coll])), :doc "Returns a vector of [(take n coll) (drop n coll)]"}, :name cljs.core/split-at, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4307, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n coll])), :doc "Returns a vector of [(take n coll) (drop n coll)]"}, TransientHashSet {:meta {:file "cljs/core.cljs", :line 7809, :column 10, :end-line 7809, :end-column 26, :declared true}, :num-fields 1, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :name cljs.core/TransientHashSet, :file "cljs/core.cljs", :end-column 26, :type true, :column 10, :line 7906, :record false, :declared true, :end-line 7906, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}}, *e {:name cljs.core/*e, :file "cljs/core.cljs", :line nil, :column nil, :end-line 161, :end-column 5, :doc "bound in a repl thread to the most recent exception caught by the repl", :meta {:file "cljs/core.cljs", :line 161, :column 3, :end-line 161, :end-column 5, :doc "bound in a repl thread to the most recent exception caught by the repl"}}, array-map-extend-kv {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5706, :column 8, :end-line 5706, :end-column 27, :private true, :arglists (quote ([m k v]))}, :private true, :name cljs.core/array-map-extend-kv, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([m k v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5706, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m k v]))}, prn-str-with-opts {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8728, :column 7, :end-line 8728, :end-column 24, :arglists (quote ([objs opts])), :doc "Same as pr-str-with-opts followed by (newline)"}, :name cljs.core/prn-str-with-opts, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([objs opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8728, :max-fixed-arity 2, :fn-var true, :arglists (quote ([objs opts])), :doc "Same as pr-str-with-opts followed by (newline)"}, not-native {:name cljs.core/not-native, :file "cljs/core.cljs", :line nil, :column nil, :end-line 168, :end-column 16, :meta {:file "cljs/core.cljs", :line 168, :column 6, :end-line 168, :end-column 16}}, random-sample {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9080, :column 7, :end-line 9080, :end-column 20, :arglists (quote ([prob] [prob coll])), :doc "Returns items from coll with random probability of prob (0.0 -\\n  1.0).  Returns a transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([prob] [prob coll]), :arglists ([prob] [prob coll]), :arglists-meta (nil nil)}}, :name cljs.core/random-sample, :variadic false, :file "cljs/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([prob] [prob coll]), :arglists ([prob] [prob coll]), :arglists-meta (nil nil)}, :method-params ([prob] [prob coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9080, :max-fixed-arity 2, :fn-var true, :arglists ([prob] [prob coll]), :doc "Returns items from coll with random probability of prob (0.0 -\\n  1.0).  Returns a transducer when no collection is provided."}, select-keys {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7793, :column 7, :end-line 7793, :end-column 18, :arglists (quote ([map keyseq])), :doc "Returns a map containing only those entries in map whose key is in keys"}, :name cljs.core/select-keys, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([map keyseq]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7793, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map keyseq])), :doc "Returns a map containing only those entries in map whose key is in keys"}, bit-and {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2490, :column 7, :end-line 2490, :end-column 14, :arglists (quote ([x y] [x y & more])), :doc "Bitwise and", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}}, :name cljs.core/bit-and, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2490, :max-fixed-arity 2, :fn-var true, :arglists ([x y] [x y & more]), :doc "Bitwise and"}, bounded-count {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3293, :column 8, :end-line 3293, :end-column 21, :private true, :arglists (quote ([s n]))}, :private true, :name cljs.core/bounded-count, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([s n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3293, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s n]))}, update {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4570, :column 7, :end-line 4570, :end-column 13, :arglists (quote ([m k f] [m k f x] [m k f x y] [m k f x y z] [m k f x y z & more])), :doc "\'Updates\' a value in an associative structure, where k is a\\n  key and f is a function that will take the old value\\n  and any supplied args and return the new value, and returns a new\\n  structure.  If the key does not exist, nil is passed as the old value.", :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([m k f] [m k f x] [m k f x y] [m k f x y z]), :arglists ([m k f] [m k f x] [m k f x y] [m k f x y z] [m k f x y z & more]), :arglists-meta (nil nil nil nil nil)}}, :name cljs.core/update, :variadic true, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([m k f] [m k f x] [m k f x y] [m k f x y z]), :arglists ([m k f] [m k f x] [m k f x y] [m k f x y z] [m k f x y z & more]), :arglists-meta (nil nil nil nil nil)}, :method-params ([m k f] [m k f x] [m k f x y] [m k f x y z]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column nil, :line nil, :end-line 4570, :max-fixed-arity 6, :fn-var true, :arglists ([m k f] [m k f x] [m k f x y] [m k f x y z] [m k f x y z & more]), :doc "\'Updates\' a value in an associative structure, where k is a\\n  key and f is a function that will take the old value\\n  and any supplied args and return the new value, and returns a new\\n  structure.  If the key does not exist, nil is passed as the old value."}, gensym_counter {:name cljs.core/gensym_counter, :file "cljs/core.cljs", :line nil, :column nil, :end-line 8995, :end-column 20, :meta {:file "cljs/core.cljs", :line 8995, :column 6, :end-line 8995, :end-column 20}}, find-macros-ns {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9990, :column 7, :end-line 9990, :end-column 21, :arglists (quote ([ns]))}, :name cljs.core/find-macros-ns, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9990, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns]))}, list* {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3334, :column 7, :end-line 3334, :end-column 12, :arglists (quote ([args] [a args] [a b args] [a b c args] [a b c d & more])), :doc "Creates a new list containing the items prepended to the rest, the\\n  last of which will be treated as a sequence.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([args] [a args] [a b args] [a b c args]), :arglists ([args] [a args] [a b args] [a b c args] [a b c d & more]), :arglists-meta (nil nil nil nil nil)}}, :name cljs.core/list*, :variadic true, :file "cljs/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([args] [a args] [a b args] [a b c args]), :arglists ([args] [a args] [a b args] [a b c args] [a b c d & more]), :arglists-meta (nil nil nil nil nil)}, :method-params ([args] [a args] [a b args] [a b c args]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column nil, :line nil, :end-line 3334, :max-fixed-arity 4, :fn-var true, :arglists ([args] [a args] [a b args] [a b c args] [a b c d & more]), :doc "Creates a new list containing the items prepended to the rest, the\\n  last of which will be treated as a sequence."}, array-index-of-keyword? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5642, :column 8, :end-line 5642, :end-column 31, :private true, :arglists (quote ([arr k]))}, :private true, :name cljs.core/array-index-of-keyword?, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([arr k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5642, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr k]))}, ->Keyword {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2906, :column 10, :end-line 2906, :end-column 17, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/Object cljs.core/INamed cljs.core/IPrintWithWriter}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :factory :positional, :arglists (quote ([ns name fqn _hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/Object cljs.core/INamed cljs.core/IPrintWithWriter}, :name cljs.core/->Keyword, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([ns name fqn _hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 2906, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ns name fqn _hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}}, update-in {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4543, :column 7, :end-line 4543, :end-column 16, :arglists (quote ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c] [m [k & ks] f a b c & args])), :doc "\'Updates\' a value in a nested associative structure, where ks is a\\n  sequence of keys and f is a function that will take the old value\\n  and any supplied args and return the new value, and returns a new\\n  nested structure.  If any levels do not exist, hash-maps will be\\n  created.", :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c]), :arglists ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c] [m [k & ks] f a b c & args]), :arglists-meta (nil nil nil nil nil)}}, :name cljs.core/update-in, :variadic true, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c]), :arglists ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c] [m [k & ks] f a b c & args]), :arglists-meta (nil nil nil nil nil)}, :method-params ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column nil, :line nil, :end-line 4543, :max-fixed-arity 6, :fn-var true, :arglists ([m [k & ks] f] [m [k & ks] f a] [m [k & ks] f a b] [m [k & ks] f a b c] [m [k & ks] f a b c & args]), :doc "\'Updates\' a value in a nested associative structure, where ks is a\\n  sequence of keys and f is a function that will take the old value\\n  and any supplied args and return the new value, and returns a new\\n  nested structure.  If any levels do not exist, hash-maps will be\\n  created."}, prefer-method {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9628, :column 7, :end-line 9628, :end-column 20, :arglists (quote ([multifn dispatch-val-x dispatch-val-y])), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\\n   when there is a conflict"}, :name cljs.core/prefer-method, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([multifn dispatch-val-x dispatch-val-y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9628, :max-fixed-arity 3, :fn-var true, :arglists (quote ([multifn dispatch-val-x dispatch-val-y])), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\\n   when there is a conflict"}, hash-symbol {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 891, :column 8, :end-line 891, :end-column 19, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.core/hash-symbol, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 891, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, ensure-reduced {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1258, :column 7, :end-line 1258, :end-column 21, :arglists (quote ([x])), :doc "If x is already reduced?, returns it, else returns (reduced x)"}, :name cljs.core/ensure-reduced, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "If x is already reduced?, returns it, else returns (reduced x)"}, edit-and-set {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6079, :column 8, :end-line 6079, :end-column 20, :private true, :arglists (quote ([inode edit i a] [inode edit i a j b])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([inode edit i a] [inode edit i a j b]), :arglists ([inode edit i a] [inode edit i a j b]), :arglists-meta (nil nil)}}, :private true, :name cljs.core/edit-and-set, :variadic false, :file "cljs/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([inode edit i a] [inode edit i a j b]), :arglists ([inode edit i a] [inode edit i a j b]), :arglists-meta (nil nil)}, :method-params ([inode edit i a] [inode edit i a j b]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6079, :max-fixed-arity 6, :fn-var true, :arglists ([inode edit i a] [inode edit i a j b])}, ->PersistentArrayMap {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5781, :column 10, :end-line 5781, :end-column 28, :protocols #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta cnt arr __hash]))}, :protocols #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :name cljs.core/->PersistentArrayMap, :variadic false, :file "cljs/core.cljs", :end-column 28, :method-params ([meta cnt arr __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5781, :max-fixed-arity 4, :fn-var true, :arglists (quote ([meta cnt arr __hash])), :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}}, instance? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 880, :column 16, :end-line 880, :end-column 25, :tag boolean, :arglists (quote ([t o])), :doc "Evaluates x and tests if it is an instance of the type\\n  c. Returns true or false"}, :name cljs.core/instance?, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([t o]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 880, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([t o])), :doc "Evaluates x and tests if it is an instance of the type\\n  c. Returns true or false"}, mix-collection-hash {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1157, :column 15, :end-line 1157, :end-column 34, :tag number, :arglists (quote ([hash-basis count])), :doc "Mix final collection hash for ordered or unordered collections.\\n   hash-basis is the combined collection hash, count is the number\\n   of elements included in the basis. Note this is the hash code\\n   consistent with =, different from .hashCode.\\n   See http://clojure.org/data_structures#hash for full algorithms."}, :name cljs.core/mix-collection-hash, :variadic false, :file "cljs/core.cljs", :end-column 34, :method-params ([hash-basis count]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 1157, :max-fixed-arity 2, :tag number, :fn-var true, :arglists (quote ([hash-basis count])), :doc "Mix final collection hash for ordered or unordered collections.\\n   hash-basis is the combined collection hash, count is the number\\n   of elements included in the basis. Note this is the hash code\\n   consistent with =, different from .hashCode.\\n   See http://clojure.org/data_structures#hash for full algorithms."}, re-find {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8539, :column 7, :end-line 8539, :end-column 14, :arglists (quote ([re s])), :doc "Returns the first regex match, if any, of s to re, using\\n  re.exec(s). Returns a vector, containing first the matching\\n  substring, then any capturing groups if the regular expression contains\\n  capturing groups."}, :name cljs.core/re-find, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([re s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8539, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re s])), :doc "Returns the first regex match, if any, of s to re, using\\n  re.exec(s). Returns a vector, containing first the matching\\n  substring, then any capturing groups if the regular expression contains\\n  capturing groups."}, run! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9113, :column 7, :end-line 9113, :end-column 11, :arglists (quote ([proc coll])), :doc "Runs the supplied procedure (via reduce), for purposes of side\\n  effects, on successive items in the collection. Returns nil"}, :name cljs.core/run!, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([proc coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([proc coll])), :doc "Runs the supplied procedure (via reduce), for purposes of side\\n  effects, on successive items in the collection. Returns nil"}, char-escapes {:name cljs.core/char-escapes, :file "cljs/core.cljs", :line nil, :column nil, :end-line 8607, :end-column 28, :private true, :meta {:file "cljs/core.cljs", :line 8607, :column 16, :end-line 8607, :end-column 28, :private true}}, ES6Iterator {:num-fields 1, :protocols #{cljs.core/Object}, :name cljs.core/ES6Iterator, :file "cljs/core.cljs", :end-column 21, :type true, :column 10, :line 1121, :record false, :end-line 1121, :skip-protocol-flag nil}, val {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7764, :column 7, :end-line 7764, :end-column 10, :arglists (quote ([map-entry])), :doc "Returns the value in the map entry."}, :name cljs.core/val, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([map-entry]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7764, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-entry])), :doc "Returns the value in the map entry."}, unchecked-add {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2352, :column 15, :end-line 2352, :end-column 28, :tag number, :arglists (quote ([] [x] [x y] [x y & more])), :doc "Returns the sum of nums. (+) returns 0.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/unchecked-add, :variadic true, :file "cljs/core.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2352, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([] [x] [x y] [x y & more]), :doc "Returns the sum of nums. (+) returns 0."}, t7376 {:num-fields 2, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core/t7376, :file "cljs/core.cljs", :type true, :anonymous true, :column nil, :line nil, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, not {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 194, :column 16, :end-line 194, :end-column 19, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is logical false, false otherwise."}, :name cljs.core/not, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 194, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is logical false, false otherwise."}, -vreset! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 723, :column 4, :end-line 723, :end-column 12, :protocol cljs.core/IVolatile, :doc "Sets the value of volatile o to new-value without regard for the\\n     current value. Returns new-value.", :arglists (quote ([o new-value]))}, :protocol cljs.core/IVolatile, :name cljs.core/-vreset!, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([o new-value]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 723, :max-fixed-arity 2, :fn-var true, :arglists (quote ([o new-value])), :doc "Sets the value of volatile o to new-value without regard for the\\n     current value. Returns new-value."}, fn->comparator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2083, :column 17, :end-line 2083, :end-column 31, :private true, :arglists (quote ([f])), :doc "Given a fn that might be boolean valued or a comparator,\\n   return a fn that is a comparator."}, :private true, :name cljs.core/fn->comparator, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2083, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Given a fn that might be boolean valued or a comparator,\\n   return a fn that is a comparator."}, with-meta {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1814, :column 7, :end-line 1814, :end-column 16, :arglists (quote ([o meta])), :doc "Returns an object of the same type and value as obj, with\\n  map m as its metadata."}, :name cljs.core/with-meta, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([o meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1814, :max-fixed-arity 2, :fn-var true, :arglists (quote ([o meta])), :doc "Returns an object of the same type and value as obj, with\\n  map m as its metadata."}, unreduced {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1263, :column 7, :end-line 1263, :end-column 16, :arglists (quote ([x])), :doc "If x is reduced?, returns (deref x), else returns x"}, :name cljs.core/unreduced, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "If x is reduced?, returns (deref x), else returns x"}, record? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1902, :column 16, :end-line 1902, :end-column 23, :tag boolean, :arglists (quote ([x])), :doc "Return true if x satisfies IRecord"}, :name cljs.core/record?, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1902, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Return true if x satisfies IRecord"}, type {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 244, :column 7, :end-line 244, :end-column 11, :arglists (quote ([x])), :doc "Return x\'s constructor."}, :name cljs.core/type, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return x\'s constructor."}, identical? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 172, :column 16, :end-line 172, :end-column 26, :tag boolean, :arglists (quote ([x y])), :doc "Tests if 2 arguments are the same object"}, :name cljs.core/identical?, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 172, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([x y])), :doc "Tests if 2 arguments are the same object"}, -namespace {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 705, :column 12, :end-line 705, :end-column 22, :tag string, :protocol cljs.core/INamed, :doc "Returns the namespace String of x.", :arglists (quote ([x]))}, :protocol cljs.core/INamed, :name cljs.core/-namespace, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag string, :end-line 705, :max-fixed-arity 1, :tag string, :fn-var true, :arglists (quote ([x])), :doc "Returns the namespace String of x."}, unchecked-divide-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2376, :column 15, :end-line 2376, :end-column 35, :tag number, :arglists (quote ([x] [x y] [x y & more])), :doc "If no denominators are supplied, returns 1/numerator,\\n  else returns numerator divided by all of the denominators.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/unchecked-divide-int, :variadic true, :file "cljs/core.cljs", :end-column 35, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2376, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "If no denominators are supplied, returns 1/numerator,\\n  else returns numerator divided by all of the denominators."}, ns-name {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 10006, :column 7, :end-line 10006, :end-column 14, :arglists (quote ([ns-obj]))}, :name cljs.core/ns-name, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([ns-obj]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 10006, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns-obj]))}, swap-global-hierarchy! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9262, :column 8, :end-line 9262, :end-column 30, :private true, :arglists (quote ([f & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}}, :private true, :name cljs.core/swap-global-hierarchy!, :variadic true, :file "cljs/core.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}, :method-params [(f args)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 9262, :max-fixed-arity 1, :fn-var true, :arglists ([f & args])}, max-key {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8148, :column 7, :end-line 8148, :end-column 14, :arglists (quote ([k x] [k x y] [k x y & more])), :doc "Returns the x for which (k x), a number, is greatest.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([k x] [k x y]), :arglists ([k x] [k x y] [k x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/max-key, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([k x] [k x y]), :arglists ([k x] [k x y] [k x y & more]), :arglists-meta (nil nil nil)}, :method-params ([k x] [k x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 8148, :max-fixed-arity 3, :fn-var true, :arglists ([k x] [k x y] [k x y & more]), :doc "Returns the x for which (k x), a number, is greatest."}, ->PersistentTreeSet {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7943, :column 10, :end-line 7943, :end-column 27, :protocols #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([meta tree-map __hash]))}, :protocols #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.core/->PersistentTreeSet, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([meta tree-map __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 7943, :max-fixed-arity 3, :fn-var true, :arglists (quote ([meta tree-map __hash])), :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, *out* {:name cljs.core/*out*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 36, :end-column 8, :dynamic true, :meta {:file "cljs/core.cljs", :line 36, :column 3, :end-line 36, :end-column 8, :dynamic true}}, ->ChunkBuffer {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3047, :column 10, :end-line 3047, :end-column 21, :protocols #{cljs.core/Object cljs.core/ICounted}, :skip-protocol-flag #{cljs.core/ICounted}, :factory :positional, :arglists (quote ([buf end]))}, :protocols #{cljs.core/Object cljs.core/ICounted}, :name cljs.core/->ChunkBuffer, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([buf end]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 3047, :max-fixed-arity 2, :fn-var true, :arglists (quote ([buf end])), :skip-protocol-flag #{cljs.core/ICounted}}, hash-string {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 838, :column 7, :end-line 838, :end-column 18, :arglists (quote ([k]))}, :name cljs.core/hash-string, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 838, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, ValSeq {:num-fields 2, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/ValSeq, :file "cljs/core.cljs", :end-column 16, :type true, :column 10, :line 7701, :record false, :end-line 7701, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, -prefers {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9424, :column 4, :end-line 9424, :end-column 12, :protocol cljs.core/IMultiFn, :doc nil, :arglists (quote ([mf]))}, :protocol cljs.core/IMultiFn, :name cljs.core/-prefers, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([mf]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9424, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mf])), :doc nil}, set-validator! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4016, :column 7, :end-line 4016, :end-column 21, :arglists (quote ([iref val])), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\\n  side-effect-free fn of one argument, which will be passed the intended\\n  new state on any state change. If the new state is unacceptable, the\\n  validator-fn should return false or throw an Error. If the current state\\n  is not acceptable to the new validator, an Error will be thrown and the\\n  validator will not be changed."}, :name cljs.core/set-validator!, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([iref val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4016, :max-fixed-arity 2, :fn-var true, :arglists (quote ([iref val])), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\\n  side-effect-free fn of one argument, which will be passed the intended\\n  new state on any state change. If the new state is unacceptable, the\\n  validator-fn should return false or throw an Error. If the current state\\n  is not acceptable to the new validator, an Error will be thrown and the\\n  validator will not be changed."}, -meta {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 543, :column 16, :end-line 543, :end-column 21, :tag clj-or-nil, :protocol cljs.core/IMeta, :doc "Returns the metadata of object o.", :arglists (quote ([o]))}, :protocol cljs.core/IMeta, :name cljs.core/-meta, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj-or-nil, :end-line 543, :max-fixed-arity 1, :tag clj-or-nil, :fn-var true, :arglists (quote ([o])), :doc "Returns the metadata of object o."}, RedNode {:meta {:file "cljs/core.cljs", :line 6976, :column 10, :end-line 6976, :end-column 17, :declared true}, :num-fields 5, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :name cljs.core/RedNode, :file "cljs/core.cljs", :end-column 17, :type true, :column 10, :line 7183, :record false, :declared true, :end-line 7183, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, -dispatch-fn {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9426, :column 4, :end-line 9426, :end-column 16, :protocol cljs.core/IMultiFn, :doc nil, :arglists (quote ([mf]))}, :protocol cljs.core/IMultiFn, :name cljs.core/-dispatch-fn, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([mf]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9426, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mf])), :doc nil}, ->IndexedSeqIterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1352, :column 10, :end-line 1352, :end-column 28, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([arr i]))}, :protocols #{cljs.core/Object}, :name cljs.core/->IndexedSeqIterator, :variadic false, :file "cljs/core.cljs", :end-column 28, :method-params ([arr i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 1352, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr i])), :skip-protocol-flag nil}, -add-method {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9419, :column 4, :end-line 9419, :end-column 15, :protocol cljs.core/IMultiFn, :doc nil, :arglists (quote ([mf dispatch-val method]))}, :protocol cljs.core/IMultiFn, :name cljs.core/-add-method, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([mf dispatch-val method]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9419, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mf dispatch-val method])), :doc nil}, balance-left-del {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7025, :column 8, :end-line 7025, :end-column 24, :private true, :arglists (quote ([key val del right]))}, :private true, :name cljs.core/balance-left-del, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([key val del right]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7025, :max-fixed-arity 4, :fn-var true, :arglists (quote ([key val del right]))}, swap! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3985, :column 7, :end-line 3985, :end-column 12, :arglists (quote ([a f] [a f x] [a f x y] [a f x y & more])), :doc "Atomically swaps the value of atom to be:\\n  (apply f current-value-of-atom args). Note that f may be called\\n  multiple times, and thus should be free of side effects.  Returns\\n  the value that was swapped in.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([a f] [a f x] [a f x y]), :arglists ([a f] [a f x] [a f x y] [a f x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/swap!, :variadic true, :file "cljs/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([a f] [a f x] [a f x y]), :arglists ([a f] [a f x] [a f x y] [a f x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([a f] [a f x] [a f x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 3985, :max-fixed-arity 4, :fn-var true, :arglists ([a f] [a f x] [a f x y] [a f x y & more]), :doc "Atomically swaps the value of atom to be:\\n  (apply f current-value-of-atom args). Note that f may be called\\n  multiple times, and thus should be free of side effects.  Returns\\n  the value that was swapped in."}, vals {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7758, :column 7, :end-line 7758, :end-column 11, :arglists (quote ([hash-map])), :doc "Returns a sequence of the map\'s values."}, :name cljs.core/vals, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([hash-map]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7758, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hash-map])), :doc "Returns a sequence of the map\'s values."}, -chunked-next {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 698, :column 4, :end-line 698, :end-column 17, :protocol cljs.core/IChunkedNext, :doc "Returns a new collection of coll without the first chunk.", :arglists (quote ([coll]))}, :protocol cljs.core/IChunkedNext, :name cljs.core/-chunked-next, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 698, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns a new collection of coll without the first chunk."}, unchecked-subtract {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2414, :column 15, :end-line 2414, :end-column 33, :tag number, :arglists (quote ([x] [x y] [x y & more])), :doc "If no ys are supplied, returns the negation of x, else subtracts\\n  the ys from x and returns the result.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/unchecked-subtract, :variadic true, :file "cljs/core.cljs", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2414, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\\n  the ys from x and returns the result."}, remove-pair {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6067, :column 8, :end-line 6067, :end-column 19, :private true, :arglists (quote ([arr i]))}, :private true, :name cljs.core/remove-pair, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([arr i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6067, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr i]))}, IMap {:meta {:file "cljs/core.cljs", :line 500, :column 14, :end-line 500, :end-column 18, :doc "Protocol for adding mapping functionality to collections.", :protocol-symbol true, :protocol-info {:methods {-dissoc [[coll k]]}}}, :protocol-symbol true, :name cljs.core/IMap, :file "cljs/core.cljs", :end-column 18, :column nil, :line nil, :protocol-info {:methods {-dissoc [[coll k]]}}, :info nil, :end-line 500, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentTreeMap}, :doc "Protocol for adding mapping functionality to collections."}, ->SeqIter {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3527, :column 10, :end-line 3527, :end-column 17, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([_seq _next]))}, :protocols #{cljs.core/Object}, :name cljs.core/->SeqIter, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([_seq _next]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 3527, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_seq _next])), :skip-protocol-flag nil}, sorted-set-by {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8070, :column 7, :end-line 8070, :end-column 20, :arglists (quote ([comparator & keys])), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(comparator keys)], :arglists ([comparator & keys]), :arglists-meta (nil)}}, :name cljs.core/sorted-set-by, :variadic true, :file "cljs/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(comparator keys)], :arglists ([comparator & keys]), :arglists-meta (nil)}, :method-params [(comparator keys)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8070, :max-fixed-arity 1, :fn-var true, :arglists ([comparator & keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator."}, PersistentVector {:num-fields 6, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :name cljs.core/PersistentVector, :file "cljs/core.cljs", :end-column 26, :type true, :column 10, :line 4707, :record false, :end-line 4707, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, cloneable? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1041, :column 7, :end-line 1041, :end-column 17, :arglists (quote ([value])), :doc "Return true if x implements ICloneable protocol."}, :name cljs.core/cloneable?, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1041, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Return true if x implements ICloneable protocol."}, hash-string* {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 821, :column 7, :end-line 821, :end-column 19, :arglists (quote ([s]))}, :name cljs.core/hash-string*, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 821, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, key-test {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6049, :column 16, :end-line 6049, :end-column 24, :tag boolean, :arglists (quote ([key other]))}, :name cljs.core/key-test, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([key other]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 6049, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([key other]))}, ->LazyTransformer {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3636, :column 10, :end-line 3636, :end-column 25, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([stepper first rest meta]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :name cljs.core/->LazyTransformer, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([stepper first rest meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 3636, :max-fixed-arity 4, :fn-var true, :arglists (quote ([stepper first rest meta])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}}, -reset {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9418, :column 4, :end-line 9418, :end-column 10, :protocol cljs.core/IMultiFn, :doc nil, :arglists (quote ([mf]))}, :protocol cljs.core/IMultiFn, :name cljs.core/-reset, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([mf]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9418, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mf])), :doc nil}, true? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1962, :column 16, :end-line 1962, :end-column 21, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is the value true, false otherwise."}, :name cljs.core/true?, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1962, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is the value true, false otherwise."}, find-ns-obj* {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9946, :column 8, :end-line 9946, :end-column 20, :private true, :arglists (quote ([ctxt xs]))}, :private true, :name cljs.core/find-ns-obj*, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([ctxt xs]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9946, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctxt xs]))}, array {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 349, :column 14, :end-line 349, :end-column 19, :tag array, :arglists (quote ([var-args])), :doc "Creates a new javascript array.\\n@param {...*} var_args"}, :name cljs.core/array, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([var-args]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag array, :end-line 349, :max-fixed-arity 1, :tag array, :fn-var true, :arglists (quote ([var-args])), :doc "Creates a new javascript array.\\n@param {...*} var_args"}, print {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8771, :column 3, :end-line 8771, :end-column 8, :doc "Prints the object(s) using string-print.\\n  print and println produce output for human consumption."}, :name cljs.core/print, :variadic true, :file "cljs/core.cljs", :end-column 8, :method-params ([objs]), :protocol-impl nil, :arglists-meta (), :column nil, :line nil, :end-line 8771, :max-fixed-arity 0, :fn-var true, :arglists nil, :doc "Prints the object(s) using string-print.\\n  print and println produce output for human consumption."}, -peek {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 522, :column 4, :end-line 522, :end-column 9, :protocol cljs.core/IStack, :doc "Returns the item from the top of the stack. Is used by cljs.core/peek.", :arglists (quote ([coll]))}, :protocol cljs.core/IStack, :name cljs.core/-peek, :variadic false, :file "cljs/core.cljs", :end-column 9, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 522, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns the item from the top of the stack. Is used by cljs.core/peek."}, ISeq {:meta {:file "cljs/core.cljs", :line 467, :column 14, :end-line 467, :end-column 18, :doc "Protocol for collections to provide access to their items as sequences.", :protocol-symbol true, :protocol-info {:methods {-first [[coll]], -rest [[coll]]}}}, :protocol-symbol true, :name cljs.core/ISeq, :file "cljs/core.cljs", :end-column 18, :column nil, :line nil, :protocol-info {:methods {-first [[coll]], -rest [[coll]]}}, :info nil, :end-line 467, :impls #{cljs.core/Cons cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/LazySeq cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/ES6IteratorSeq cljs.core/PersistentArrayMapSeq cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq}, :doc "Protocol for collections to provide access to their items as sequences."}, empty {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1558, :column 7, :end-line 1558, :end-column 12, :arglists (quote ([coll])), :doc "Returns an empty collection of the same category as coll, or nil"}, :name cljs.core/empty, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1558, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns an empty collection of the same category as coll, or nil"}, remove-method {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9623, :column 7, :end-line 9623, :end-column 20, :arglists (quote ([multifn dispatch-val])), :doc "Removes the method of multimethod associated with dispatch-value."}, :name cljs.core/remove-method, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([multifn dispatch-val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9623, :max-fixed-arity 2, :fn-var true, :arglists (quote ([multifn dispatch-val])), :doc "Removes the method of multimethod associated with dispatch-value."}, PersistentQueueSeq {:num-fields 4, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :name cljs.core/PersistentQueueSeq, :file "cljs/core.cljs", :end-column 28, :type true, :column 10, :line 5329, :record false, :end-line 5329, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, balance-right-del {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7044, :column 8, :end-line 7044, :end-column 25, :private true, :arglists (quote ([key val left del]))}, :private true, :name cljs.core/balance-right-del, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([key val left del]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7044, :max-fixed-arity 4, :fn-var true, :arglists (quote ([key val left del]))}, volatile! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4039, :column 7, :end-line 4039, :end-column 16, :arglists (quote ([val])), :doc "Creates and returns a Volatile with an initial value of val."}, :name cljs.core/volatile!, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4039, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Creates and returns a Volatile with an initial value of val."}, / {:protocol-inline nil, :meta {:tag number, :arglists (quote ([x] [x y] [x y & more])), :doc "If no denominators are supplied, returns 1/numerator,\\n  else returns numerator divided by all of the denominators.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :file "cljs/core.cljs"}, :name cljs.core//, :variadic true, :file "cljs/core.cljs", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag number, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "If no denominators are supplied, returns 1/numerator,\\n  else returns numerator divided by all of the denominators."}, bitpos {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6076, :column 8, :end-line 6076, :end-column 14, :private true, :arglists (quote ([hash shift]))}, :private true, :name cljs.core/bitpos, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([hash shift]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6076, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hash shift]))}, bit-or {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2496, :column 7, :end-line 2496, :end-column 13, :arglists (quote ([x y] [x y & more])), :doc "Bitwise or", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}}, :name cljs.core/bit-or, :variadic true, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x y]), :arglists ([x y] [x y & more]), :arglists-meta (nil nil)}, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2496, :max-fixed-arity 2, :fn-var true, :arglists ([x y] [x y & more]), :doc "Bitwise or"}, m3-fmix {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 782, :column 15, :end-line 782, :end-column 22, :tag number, :arglists (quote ([h1 len]))}, :name cljs.core/m3-fmix, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([h1 len]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 782, :max-fixed-arity 2, :tag number, :fn-var true, :arglists (quote ([h1 len]))}, vector {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4920, :column 7, :end-line 4920, :end-column 13, :arglists (quote ([& args])), :doc "Creates a new vector containing the args.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.core/vector, :variadic true, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 4920, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Creates a new vector containing the args."}, hash-coll {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2630, :column 8, :end-line 2630, :end-column 17, :private true, :arglists (quote ([coll]))}, :private true, :name cljs.core/hash-coll, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2630, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, clone-and-set {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6058, :column 8, :end-line 6058, :end-column 21, :private true, :arglists (quote ([arr i a] [arr i a j b])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([arr i a] [arr i a j b]), :arglists ([arr i a] [arr i a j b]), :arglists-meta (nil nil)}}, :private true, :name cljs.core/clone-and-set, :variadic false, :file "cljs/core.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([arr i a] [arr i a j b]), :arglists ([arr i a] [arr i a j b]), :arglists-meta (nil nil)}, :method-params ([arr i a] [arr i a j b]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6058, :max-fixed-arity 5, :fn-var true, :arglists ([arr i a] [arr i a j b])}, array->transient-hash-map {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6036, :column 8, :end-line 6036, :end-column 33, :private true, :arglists (quote ([len arr]))}, :private true, :name cljs.core/array->transient-hash-map, :variadic false, :file "cljs/core.cljs", :end-column 33, :method-params ([len arr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6036, :max-fixed-arity 2, :fn-var true, :arglists (quote ([len arr]))}, >= {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2302, :column 16, :end-line 2302, :end-column 18, :tag boolean, :arglists (quote ([x] [x y] [x y & more])), :doc "Returns non-nil if nums are in monotonically non-increasing order,\\n  otherwise false.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/>=, :variadic true, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2302, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\\n  otherwise false."}, ->TransientHashSet {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7906, :column 10, :end-line 7906, :end-column 26, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :factory :positional, :arglists (quote ([transient-map]))}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :name cljs.core/->TransientHashSet, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([transient-map]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 7906, :max-fixed-arity 1, :fn-var true, :arglists (quote ([transient-map])), :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}}, drop-last {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4262, :column 7, :end-line 4262, :end-column 16, :arglists (quote ([s] [n s])), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [n s]), :arglists ([s] [n s]), :arglists-meta (nil nil)}}, :name cljs.core/drop-last, :variadic false, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [n s]), :arglists ([s] [n s]), :arglists-meta (nil nil)}, :method-params ([s] [n s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4262, :max-fixed-arity 2, :fn-var true, :arglists ([s] [n s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll"}, ->ArrayIter {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3512, :column 10, :end-line 3512, :end-column 19, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([arr i]))}, :protocols #{cljs.core/Object}, :name cljs.core/->ArrayIter, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([arr i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 3512, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr i])), :skip-protocol-flag nil}, object? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 206, :column 16, :end-line 206, :end-column 23, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x\'s constructor is Object"}, :name cljs.core/object?, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 206, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x\'s constructor is Object"}, ->ArrayNodeSeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6604, :column 10, :end-line 6604, :end-column 22, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta nodes i s __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->ArrayNodeSeq, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([meta nodes i s __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 6604, :max-fixed-arity 5, :fn-var true, :arglists (quote ([meta nodes i s __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, tree-map-append {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7345, :column 8, :end-line 7345, :end-column 23, :private true, :arglists (quote ([left right]))}, :private true, :name cljs.core/tree-map-append, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([left right]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7345, :max-fixed-arity 2, :fn-var true, :arglists (quote ([left right]))}, not-empty {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3489, :column 7, :end-line 3489, :end-column 16, :arglists (quote ([coll])), :doc "If coll is empty, returns nil, else coll"}, :name cljs.core/not-empty, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3489, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "If coll is empty, returns nil, else coll"}, distinct {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8094, :column 7, :end-line 8094, :end-column 15, :arglists (quote ([] [coll])), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}}, :name cljs.core/distinct, :variadic false, :file "cljs/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [coll]), :arglists ([] [coll]), :arglists-meta (nil nil)}, :method-params ([] [coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8094, :max-fixed-arity 1, :fn-var true, :arglists ([] [coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed"}, partition {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4491, :column 7, :end-line 4491, :end-column 16, :arglists (quote ([n coll] [n step coll] [n step pad coll])), :doc "Returns a lazy sequence of lists of n items each, at offsets step\\n  apart. If step is not supplied, defaults to n, i.e. the partitions\\n  do not overlap. If a pad collection is supplied, use its elements as\\n  necessary to complete last partition up to n items. In case there are\\n  not enough padding elements, return a partition with less than n items.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([n coll] [n step coll] [n step pad coll]), :arglists ([n coll] [n step coll] [n step pad coll]), :arglists-meta (nil nil nil)}}, :name cljs.core/partition, :variadic false, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([n coll] [n step coll] [n step pad coll]), :arglists ([n coll] [n step coll] [n step pad coll]), :arglists-meta (nil nil nil)}, :method-params ([n coll] [n step coll] [n step pad coll]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 4491, :max-fixed-arity 4, :fn-var true, :arglists ([n coll] [n step coll] [n step pad coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\\n  apart. If step is not supplied, defaults to n, i.e. the partitions\\n  do not overlap. If a pad collection is supplied, use its elements as\\n  necessary to complete last partition up to n items. In case there are\\n  not enough padding elements, return a partition with less than n items."}, IMultiFn {:meta {:file "cljs/core.cljs", :line 9417, :column 14, :end-line 9417, :end-column 22, :doc nil, :protocol-symbol true, :protocol-info {:methods {-prefer-method [[mf dispatch-val dispatch-val-y]], -default-dispatch-val [[mf]], -remove-method [[mf dispatch-val]], -methods [[mf]], -prefers [[mf]], -dispatch-fn [[mf]], -add-method [[mf dispatch-val method]], -reset [[mf]], -get-method [[mf dispatch-val]]}}}, :protocol-symbol true, :name cljs.core/IMultiFn, :file "cljs/core.cljs", :end-column 22, :column nil, :line nil, :protocol-info {:methods {-prefer-method [[mf dispatch-val dispatch-val-y]], -default-dispatch-val [[mf]], -remove-method [[mf dispatch-val]], -methods [[mf]], -prefers [[mf]], -dispatch-fn [[mf]], -add-method [[mf dispatch-val method]], -reset [[mf]], -get-method [[mf dispatch-val]]}}, :info nil, :end-line 9417, :impls #{cljs.core/MultiFn}, :doc nil}, DEMUNGE_PATTERN {:name cljs.core/DEMUNGE_PATTERN, :file "cljs/core.cljs", :line nil, :column nil, :end-line 328, :end-column 21, :meta {:file "cljs/core.cljs", :line 328, :column 6, :end-line 328, :end-column 21}}, fix {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2428, :column 16, :end-line 2428, :end-column 19, :tag number, :private true, :arglists (quote ([q]))}, :private true, :name cljs.core/fix, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([q]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2428, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([q]))}, EmptyList {:num-fields 1, :protocols #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/EmptyList, :file "cljs/core.cljs", :end-column 19, :type true, :column 10, :line 2739, :record false, :end-line 2739, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, IAssociative {:meta {:file "cljs/core.cljs", :line 491, :column 14, :end-line 491, :end-column 26, :doc "Protocol for adding associativity to collections.", :protocol-symbol true, :protocol-info {:methods {-contains-key? [[coll k]], -assoc [[coll k v]]}}}, :protocol-symbol true, :name cljs.core/IAssociative, :file "cljs/core.cljs", :end-column 26, :column nil, :line nil, :protocol-info {:methods {-contains-key? [[coll k]], -assoc [[coll k v]]}}, :info nil, :end-line 491, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap cljs.core/RedNode}, :doc "Protocol for adding associativity to collections."}, bit-flip {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2513, :column 7, :end-line 2513, :end-column 15, :arglists (quote ([x n])), :doc "Flip bit at index n"}, :name cljs.core/bit-flip, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2513, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n])), :doc "Flip bit at index n"}, long-array {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3227, :column 7, :end-line 3227, :end-column 17, :arglists (quote ([size-or-seq] [size init-val-or-seq])), :doc "Creates an array of longs. Does not coerce array, provided for compatibility\\n  with Clojure.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}}, :name cljs.core/long-array, :variadic false, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}, :method-params ([size-or-seq] [size init-val-or-seq]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3227, :max-fixed-arity 2, :fn-var true, :arglists ([size-or-seq] [size init-val-or-seq]), :doc "Creates an array of longs. Does not coerce array, provided for compatibility\\n  with Clojure."}, descendants {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9301, :column 7, :end-line 9301, :end-column 18, :arglists (quote ([tag] [h tag])), :doc "Returns the immediate and indirect children of tag, through a\\n  relationship established via derive. h must be a hierarchy obtained\\n  from make-hierarchy, if not supplied defaults to the global\\n  hierarchy. Note: does not work on JavaScript type inheritance\\n  relationships.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [h tag]), :arglists ([tag] [h tag]), :arglists-meta (nil nil)}}, :name cljs.core/descendants, :variadic false, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [h tag]), :arglists ([tag] [h tag]), :arglists-meta (nil nil)}, :method-params ([tag] [h tag]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9301, :max-fixed-arity 2, :fn-var true, :arglists ([tag] [h tag]), :doc "Returns the immediate and indirect children of tag, through a\\n  relationship established via derive. h must be a hierarchy obtained\\n  from make-hierarchy, if not supplied defaults to the global\\n  hierarchy. Note: does not work on JavaScript type inheritance\\n  relationships."}, imul {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 761, :column 17, :end-line 761, :end-column 21, :tag number, :arglists (quote ([a b]))}, :name cljs.core/imul, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 761, :max-fixed-arity 2, :tag number, :fn-var true, :arglists (quote ([a b]))}, ->Delay {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9014, :column 10, :end-line 9014, :end-column 15, :protocols #{cljs.core/IPending cljs.core/IDeref}, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :factory :positional, :arglists (quote ([f value]))}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :name cljs.core/->Delay, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([f value]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 9014, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f value])), :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}}, array-for {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4656, :column 8, :end-line 4656, :end-column 17, :private true, :arglists (quote ([pv i]))}, :private true, :name cljs.core/array-for, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([pv i]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4656, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pv i]))}, merge {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7769, :column 7, :end-line 7769, :end-column 12, :arglists (quote ([& maps])), :doc "Returns a map that consists of the rest of the maps conj-ed onto\\n  the first.  If a key occurs in more than one map, the mapping from\\n  the latter (left-to-right) will be the mapping in the result.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name cljs.core/merge, :variadic true, :file "cljs/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 7769, :max-fixed-arity 0, :fn-var true, :arglists ([& maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\\n  the first.  If a key occurs in more than one map, the mapping from\\n  the latter (left-to-right) will be the mapping in the result."}, ISeqable {:meta {:file "cljs/core.cljs", :line 576, :column 14, :end-line 576, :end-column 22, :doc "Protocol for adding the ability to a type to be transformed into a sequence.", :protocol-symbol true, :protocol-info {:methods {-seq [[o]]}}}, :protocol-symbol true, :name cljs.core/ISeqable, :file "cljs/core.cljs", :end-column 22, :column nil, :line nil, :protocol-info {:methods {-seq [[o]]}}, :info nil, :end-line 576, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/Eduction cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/ES6IteratorSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "Protocol for adding the ability to a type to be transformed into a sequence."}, js-mod {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2462, :column 7, :end-line 2462, :end-column 13, :arglists (quote ([n d])), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"}, :name cljs.core/js-mod, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([n d]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2462, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n d])), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"}, integer? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1996, :column 16, :end-line 1996, :end-column 24, :tag boolean, :arglists (quote ([n])), :doc "Returns true if n is an integer."}, :name cljs.core/integer?, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1996, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([n])), :doc "Returns true if n is an integer."}, MetaFn {:num-fields 2, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :name cljs.core/MetaFn, :file "cljs/core.cljs", :end-column 16, :type true, :column 10, :line 1761, :record false, :end-line 1761, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, NS_CACHE {:name cljs.core/NS_CACHE, :file "cljs/core.cljs", :line nil, :column nil, :end-line 9944, :end-column 14, :meta {:file "cljs/core.cljs", :line 9944, :column 6, :end-line 9944, :end-column 14}}, mapv {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4466, :column 7, :end-line 4466, :end-column 11, :arglists (quote ([f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls])), :doc "Returns a vector consisting of the result of applying f to the\\n  set of first items of each coll, followed by applying f to the set\\n  of second items in each coll, until any one of the colls is\\n  exhausted.  Any remaining items in other colls are ignored. Function\\n  f should accept number-of-colls arguments.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f coll] [f c1 c2] [f c1 c2 c3]), :arglists ([f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/mapv, :variadic true, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f coll] [f c1 c2] [f c1 c2 c3]), :arglists ([f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls]), :arglists-meta (nil nil nil nil)}, :method-params ([f coll] [f c1 c2] [f c1 c2 c3]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 4466, :max-fixed-arity 4, :fn-var true, :arglists ([f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls]), :doc "Returns a vector consisting of the result of applying f to the\\n  set of first items of each coll, followed by applying f to the set\\n  of second items in each coll, until any one of the colls is\\n  exhausted.  Any remaining items in other colls are ignored. Function\\n  f should accept number-of-colls arguments."}, partition-all {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8173, :column 7, :end-line 8173, :end-column 20, :arglists (quote ([n] [n coll] [n step coll])), :doc "Returns a lazy sequence of lists like partition, but may include\\n  partitions with fewer than n items at the end.  Returns a stateful\\n  transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n] [n coll] [n step coll]), :arglists ([n] [n coll] [n step coll]), :arglists-meta (nil nil nil)}}, :name cljs.core/partition-all, :variadic false, :file "cljs/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n] [n coll] [n step coll]), :arglists ([n] [n coll] [n step coll]), :arglists-meta (nil nil nil)}, :method-params ([n] [n coll] [n step coll]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 8173, :max-fixed-arity 3, :fn-var true, :arglists ([n] [n coll] [n step coll]), :doc "Returns a lazy sequence of lists like partition, but may include\\n  partitions with fewer than n items at the end.  Returns a stateful\\n  transducer when no collection is provided."}, partition-by {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8393, :column 7, :end-line 8393, :end-column 19, :arglists (quote ([f] [f coll])), :doc "Applies f to each value in coll, splitting it each time f returns a\\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\\n   transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :name cljs.core/partition-by, :variadic false, :file "cljs/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :method-params ([f] [f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8393, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\\n   transducer when no collection is provided."}, ISequential {:meta {:file "cljs/core.cljs", :line 581, :column 14, :end-line 581, :end-column 25, :doc "Marker interface indicating a persistent collection of sequential items", :protocol-symbol true, :protocol-info {:methods {}}}, :protocol-symbol true, :name cljs.core/ISequential, :file "cljs/core.cljs", :end-column 25, :column nil, :line nil, :protocol-info {:methods {}}, :info nil, :end-line 581, :impls #{cljs.core/Cons cljs.core/Eduction cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "Marker interface indicating a persistent collection of sequential items"}, ->LazySeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2979, :column 10, :end-line 2979, :end-column 17, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta fn s __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->LazySeq, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([meta fn s __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 2979, :max-fixed-arity 4, :fn-var true, :arglists (quote ([meta fn s __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, equiv-map {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5436, :column 8, :end-line 5436, :end-column 17, :private true, :arglists (quote ([x y])), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\\n  false."}, :private true, :name cljs.core/equiv-map, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5436, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\\n  false."}, ->Volatile {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4031, :column 10, :end-line 4031, :end-column 18, :protocols #{cljs.core/IVolatile cljs.core/IDeref}, :skip-protocol-flag #{cljs.core/IDeref}, :factory :positional, :arglists (quote ([state]))}, :protocols #{cljs.core/IVolatile cljs.core/IDeref}, :name cljs.core/->Volatile, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 4031, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :skip-protocol-flag #{cljs.core/IDeref}}, object-array {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3271, :column 7, :end-line 3271, :end-column 19, :arglists (quote ([size-or-seq] [size init-val-or-seq])), :doc "Creates an array of objects. Does not coerce array, provided for compatibility\\n  with Clojure.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}}, :name cljs.core/object-array, :variadic false, :file "cljs/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size-or-seq] [size init-val-or-seq]), :arglists ([size-or-seq] [size init-val-or-seq]), :arglists-meta (nil nil)}, :method-params ([size-or-seq] [size init-val-or-seq]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3271, :max-fixed-arity 2, :fn-var true, :arglists ([size-or-seq] [size init-val-or-seq]), :doc "Creates an array of objects. Does not coerce array, provided for compatibility\\n  with Clojure."}, Keyword {:meta {:file "cljs/core.cljs", :line 170, :column 20, :end-line 170, :end-column 27, :declared true}, :num-fields 4, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/Object cljs.core/INamed cljs.core/IPrintWithWriter}, :name cljs.core/Keyword, :file "cljs/core.cljs", :end-column 17, :type true, :column 10, :line 2906, :record false, :declared true, :end-line 2906, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}}, derive {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9310, :column 7, :end-line 9310, :end-column 13, :arglists (quote ([tag parent] [h tag parent])), :doc "Establishes a parent/child relationship between parent and\\n  tag. Parent must be a namespace-qualified symbol or keyword and\\n  child can be either a namespace-qualified symbol or keyword or a\\n  class. h must be a hierarchy obtained from make-hierarchy, if not\\n  supplied defaults to, and modifies, the global hierarchy.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tag parent] [h tag parent]), :arglists ([tag parent] [h tag parent]), :arglists-meta (nil nil)}}, :name cljs.core/derive, :variadic false, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tag parent] [h tag parent]), :arglists ([tag parent] [h tag parent]), :arglists-meta (nil nil)}, :method-params ([tag parent] [h tag parent]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9310, :max-fixed-arity 3, :fn-var true, :arglists ([tag parent] [h tag parent]), :doc "Establishes a parent/child relationship between parent and\\n  tag. Parent must be a namespace-qualified symbol or keyword and\\n  child can be either a namespace-qualified symbol or keyword or a\\n  class. h must be a hierarchy obtained from make-hierarchy, if not\\n  supplied defaults to, and modifies, the global hierarchy."}, seq-iter {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3545, :column 7, :end-line 3545, :end-column 15, :arglists (quote ([coll]))}, :name cljs.core/seq-iter, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3545, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, IChunkedSeq {:meta {:file "cljs/core.cljs", :line 689, :column 14, :end-line 689, :end-column 25, :doc "Protocol for accessing a collection as sequential chunks.", :protocol-symbol true, :protocol-info {:methods {-chunked-first [[coll]], -chunked-rest [[coll]]}}}, :protocol-symbol true, :name cljs.core/IChunkedSeq, :file "cljs/core.cljs", :end-column 25, :column nil, :line nil, :protocol-info {:methods {-chunked-first [[coll]], -chunked-rest [[coll]]}}, :info nil, :end-line 689, :impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :doc "Protocol for accessing a collection as sequential chunks."}, special-symbol? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9778, :column 16, :end-line 9778, :end-column 31, :tag boolean, :arglists (quote ([x]))}, :name cljs.core/special-symbol?, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 9778, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, compare-keywords {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2894, :column 8, :end-line 2894, :end-column 24, :private true, :arglists (quote ([a b]))}, :private true, :name cljs.core/compare-keywords, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2894, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, ancestors {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9293, :column 7, :end-line 9293, :end-column 16, :arglists (quote ([tag] [h tag])), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\\n  inheritance relationship or a relationship established via derive. h\\n  must be a hierarchy obtained from make-hierarchy, if not supplied\\n  defaults to the global hierarchy", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [h tag]), :arglists ([tag] [h tag]), :arglists-meta (nil nil)}}, :name cljs.core/ancestors, :variadic false, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [h tag]), :arglists ([tag] [h tag]), :arglists-meta (nil nil)}, :method-params ([tag] [h tag]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9293, :max-fixed-arity 2, :fn-var true, :arglists ([tag] [h tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\\n  inheritance relationship or a relationship established via derive. h\\n  must be a hierarchy obtained from make-hierarchy, if not supplied\\n  defaults to the global hierarchy"}, subseq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8229, :column 7, :end-line 8229, :end-column 13, :arglists (quote ([sc test key] [sc start-test start-key end-test end-key])), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\\n  >=. Returns a seq of those entries with keys ek for\\n  which (test (.. sc comparator (compare ek key)) 0) is true", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([sc test key] [sc start-test start-key end-test end-key]), :arglists ([sc test key] [sc start-test start-key end-test end-key]), :arglists-meta (nil nil)}}, :name cljs.core/subseq, :variadic false, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([sc test key] [sc start-test start-key end-test end-key]), :arglists ([sc test key] [sc start-test start-key end-test end-key]), :arglists-meta (nil nil)}, :method-params ([sc test key] [sc start-test start-key end-test end-key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8229, :max-fixed-arity 5, :fn-var true, :arglists ([sc test key] [sc start-test start-key end-test end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\\n  >=. Returns a seq of those entries with keys ek for\\n  which (test (.. sc comparator (compare ek key)) 0) is true"}, LazyTransformer {:meta {:file "cljs/core.cljs", :line 3557, :column 10, :end-line 3557, :end-column 25, :declared true}, :num-fields 4, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :name cljs.core/LazyTransformer, :file "cljs/core.cljs", :end-column 25, :type true, :column 10, :line 3636, :record false, :declared true, :end-line 3636, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}}, gensym {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8997, :column 7, :end-line 8997, :end-column 13, :arglists (quote ([] [prefix-string])), :doc "Returns a new symbol with a unique name. If a prefix string is\\n  supplied, the name is prefix# where # is some unique number. If\\n  prefix is not supplied, the prefix is \'G__\'.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [prefix-string]), :arglists ([] [prefix-string]), :arglists-meta (nil nil)}}, :name cljs.core/gensym, :variadic false, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [prefix-string]), :arglists ([] [prefix-string]), :arglists-meta (nil nil)}, :method-params ([] [prefix-string]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8997, :max-fixed-arity 1, :fn-var true, :arglists ([] [prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\\n  supplied, the name is prefix# where # is some unique number. If\\n  prefix is not supplied, the prefix is \'G__\'."}, -next {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 479, :column 16, :end-line 479, :end-column 21, :tag clj-or-nil, :protocol cljs.core/INext, :doc "Returns a new collection of coll without the first item. In contrast to\\n     rest, it should return nil if there are no more items, e.g.\\n     (next []) => nil\\n     (next nil) => nil", :arglists (quote ([coll]))}, :protocol cljs.core/INext, :name cljs.core/-next, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj-or-nil, :end-line 479, :max-fixed-arity 1, :tag clj-or-nil, :fn-var true, :arglists (quote ([coll])), :doc "Returns a new collection of coll without the first item. In contrast to\\n     rest, it should return nil if there are no more items, e.g.\\n     (next []) => nil\\n     (next nil) => nil"}, ->HashCollisionNode {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6425, :column 10, :end-line 6425, :end-column 27, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([edit collision-hash cnt arr]))}, :protocols #{cljs.core/Object}, :name cljs.core/->HashCollisionNode, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([edit collision-hash cnt arr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 6425, :max-fixed-arity 4, :fn-var true, :arglists (quote ([edit collision-hash cnt arr])), :skip-protocol-flag nil}, delay? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9026, :column 16, :end-line 9026, :end-column 22, :tag boolean, :arglists (quote ([x])), :doc "returns true if x is a Delay created with delay"}, :name cljs.core/delay?, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 9026, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "returns true if x is a Delay created with delay"}, create-inode-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6587, :column 8, :end-line 6587, :end-column 24, :private true, :arglists (quote ([nodes] [nodes i s])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([nodes] [nodes i s]), :arglists ([nodes] [nodes i s]), :arglists-meta (nil nil)}}, :private true, :name cljs.core/create-inode-seq, :variadic false, :file "cljs/core.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([nodes] [nodes i s]), :arglists ([nodes] [nodes i s]), :arglists-meta (nil nil)}, :method-params ([nodes] [nodes i s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6587, :max-fixed-arity 3, :fn-var true, :arglists ([nodes] [nodes i s])}, flatten {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4444, :column 7, :end-line 4444, :end-column 14, :arglists (quote ([x])), :doc "Takes any nested combination of sequential things (lists, vectors,\\n  etc.) and returns their contents as a single, flat sequence.\\n  (flatten nil) returns nil."}, :name cljs.core/flatten, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4444, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Takes any nested combination of sequential things (lists, vectors,\\n  etc.) and returns their contents as a single, flat sequence.\\n  (flatten nil) returns nil."}, -dissoc {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 503, :column 9, :end-line 503, :end-column 16, :tag clj, :protocol cljs.core/IMap, :doc "Returns a new collection of coll without the mapping for key k.", :arglists (quote ([coll k]))}, :protocol cljs.core/IMap, :name cljs.core/-dissoc, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([coll k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 503, :max-fixed-arity 2, :tag clj, :fn-var true, :arglists (quote ([coll k])), :doc "Returns a new collection of coll without the mapping for key k."}, doubles {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2459, :column 7, :end-line 2459, :end-column 14, :arglists (quote ([x]))}, :name cljs.core/doubles, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2459, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, -contains-key? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 493, :column 13, :end-line 493, :end-column 27, :tag boolean, :protocol cljs.core/IAssociative, :doc "Returns true if k is a key in coll.", :arglists (quote ([coll k]))}, :protocol cljs.core/IAssociative, :name cljs.core/-contains-key?, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([coll k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 493, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([coll k])), :doc "Returns true if k is a key in coll."}, remove-watch {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8985, :column 7, :end-line 8985, :end-column 19, :arglists (quote ([iref key])), :doc "Alpha - subject to change.\\n\\n  Removes a watch (set by add-watch) from a reference"}, :name cljs.core/remove-watch, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([iref key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8985, :max-fixed-arity 2, :fn-var true, :arglists (quote ([iref key])), :doc "Alpha - subject to change.\\n\\n  Removes a watch (set by add-watch) from a reference"}, ex-info {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9739, :column 7, :end-line 9739, :end-column 14, :arglists (quote ([msg data] [msg data cause])), :doc "Alpha - subject to change.\\n  Create an instance of ExceptionInfo, an Error type that carries a\\n  map of additional data.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([msg data] [msg data cause]), :arglists ([msg data] [msg data cause]), :arglists-meta (nil nil)}}, :name cljs.core/ex-info, :variadic false, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([msg data] [msg data cause]), :arglists ([msg data] [msg data cause]), :arglists-meta (nil nil)}, :method-params ([msg data] [msg data cause]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9739, :max-fixed-arity 3, :fn-var true, :arglists ([msg data] [msg data cause]), :doc "Alpha - subject to change.\\n  Create an instance of ExceptionInfo, an Error type that carries a\\n  map of additional data."}, ifn? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1991, :column 16, :end-line 1991, :end-column 20, :tag boolean, :arglists (quote ([f])), :doc "Returns true if f returns true for fn? or satisfies IFn."}, :name cljs.core/ifn?, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1991, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([f])), :doc "Returns true if f returns true for fn? or satisfies IFn."}, IAtom {:meta {:file "cljs/core.cljs", :line 708, :column 14, :end-line 708, :end-column 19, :doc "Marker protocol indicating an atom.", :protocol-symbol true, :protocol-info {:methods {}}}, :protocol-symbol true, :name cljs.core/IAtom, :file "cljs/core.cljs", :end-column 19, :column nil, :line nil, :protocol-info {:methods {}}, :info nil, :end-line 708, :impls #{cljs.core/Atom}, :doc "Marker protocol indicating an atom."}, ->PersistentQueue {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5369, :column 10, :end-line 5369, :end-column 25, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta count front rear __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :name cljs.core/->PersistentQueue, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([meta count front rear __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5369, :max-fixed-arity 5, :fn-var true, :arglists (quote ([meta count front rear __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}}, IWatchable {:meta {:file "cljs/core.cljs", :line 633, :column 14, :end-line 633, :end-column 24, :doc "Protocol for types that can be watched. Currently only implemented by Atom.", :protocol-symbol true, :protocol-info {:methods {-notify-watches [[this oldval newval]], -add-watch [[this key f]], -remove-watch [[this key]]}}}, :protocol-symbol true, :name cljs.core/IWatchable, :file "cljs/core.cljs", :end-column 24, :column nil, :line nil, :protocol-info {:methods {-notify-watches [[this oldval newval]], -add-watch [[this key f]], -remove-watch [[this key]]}}, :info nil, :end-line 633, :impls #{cljs.core/Atom}, :doc "Protocol for types that can be watched. Currently only implemented by Atom."}, ->Stepper {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3562, :column 10, :end-line 3562, :end-column 17, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([xform iter]))}, :protocols #{cljs.core/Object}, :name cljs.core/->Stepper, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([xform iter]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 3562, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xform iter])), :skip-protocol-flag nil}, pv-fresh-node {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4590, :column 8, :end-line 4590, :end-column 21, :private true, :arglists (quote ([edit]))}, :private true, :name cljs.core/pv-fresh-node, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([edit]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4590, :max-fixed-arity 1, :fn-var true, :arglists (quote ([edit]))}, subvec {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5130, :column 7, :end-line 5130, :end-column 13, :arglists (quote ([v start] [v start end])), :doc "Returns a persistent vector of the items in vector from\\n  start (inclusive) to end (exclusive).  If end is not supplied,\\n  defaults to (count vector). This operation is O(1) and very fast, as\\n  the resulting vector shares structure with the original and no\\n  trimming is done.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v start] [v start end]), :arglists ([v start] [v start end]), :arglists-meta (nil nil)}}, :name cljs.core/subvec, :variadic false, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v start] [v start end]), :arglists ([v start] [v start end]), :arglists-meta (nil nil)}, :method-params ([v start] [v start end]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5130, :max-fixed-arity 3, :fn-var true, :arglists ([v start] [v start end]), :doc "Returns a persistent vector of the items in vector from\\n  start (inclusive) to end (exclusive).  If end is not supplied,\\n  defaults to (count vector). This operation is O(1) and very fast, as\\n  the resulting vector shares structure with the original and no\\n  trimming is done."}, -pop! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 670, :column 9, :end-line 670, :end-column 14, :tag clj, :protocol cljs.core/ITransientVector, :doc "Returns tcoll with the last item removed from it.", :arglists (quote ([tcoll]))}, :protocol cljs.core/ITransientVector, :name cljs.core/-pop!, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([tcoll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 670, :max-fixed-arity 1, :tag clj, :fn-var true, :arglists (quote ([tcoll])), :doc "Returns tcoll with the last item removed from it."}, partial {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3807, :column 7, :end-line 3807, :end-column 14, :arglists (quote ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3] [f arg1 arg2 arg3 & more])), :doc "Takes a function f and fewer than the normal arguments to f, and\\n  returns a fn that takes a variable number of additional args. When\\n  called, the returned function calls f with args + additional args.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3]), :arglists ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3] [f arg1 arg2 arg3 & more]), :arglists-meta (nil nil nil nil nil)}}, :name cljs.core/partial, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3]), :arglists ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3] [f arg1 arg2 arg3 & more]), :arglists-meta (nil nil nil nil nil)}, :method-params ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column nil, :line nil, :end-line 3807, :max-fixed-arity 4, :fn-var true, :arglists ([f] [f arg1] [f arg1 arg2] [f arg1 arg2 arg3] [f arg1 arg2 arg3 & more]), :doc "Takes a function f and fewer than the normal arguments to f, and\\n  returns a fn that takes a variable number of additional args. When\\n  called, the returned function calls f with args + additional args."}, chunked-seq? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1913, :column 16, :end-line 1913, :end-column 28, :tag boolean, :arglists (quote ([x])), :doc "Return true if x is satisfies IChunkedSeq."}, :name cljs.core/chunked-seq?, :variadic false, :file "cljs/core.cljs", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1913, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Return true if x is satisfies IChunkedSeq."}, replicate {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4317, :column 7, :end-line 4317, :end-column 16, :arglists (quote ([n x])), :doc "Returns a lazy seq of n xs."}, :name cljs.core/replicate, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([n x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4317, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n x])), :doc "Returns a lazy seq of n xs."}, PersistentQueue {:num-fields 5, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :name cljs.core/PersistentQueue, :file "cljs/core.cljs", :end-column 25, :type true, :column 10, :line 5369, :record false, :end-line 5369, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}}, min-key {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8155, :column 7, :end-line 8155, :end-column 14, :arglists (quote ([k x] [k x y] [k x y & more])), :doc "Returns the x for which (k x), a number, is least.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([k x] [k x y]), :arglists ([k x] [k x y] [k x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/min-key, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([k x] [k x y]), :arglists ([k x] [k x y] [k x y & more]), :arglists-meta (nil nil nil)}, :method-params ([k x] [k x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 8155, :max-fixed-arity 3, :fn-var true, :arglists ([k x] [k x y] [k x y & more]), :doc "Returns the x for which (k x), a number, is least."}, hash-iset {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2650, :column 8, :end-line 2650, :end-column 17, :private true, :arglists (quote ([s]))}, :private true, :name cljs.core/hash-iset, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2650, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, reduced {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1248, :column 7, :end-line 1248, :end-column 14, :arglists (quote ([x])), :doc "Wraps x in a way such that a reduce will terminate with the value x"}, :name cljs.core/reduced, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Wraps x in a way such that a reduce will terminate with the value x"}, re-matches {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8527, :column 7, :end-line 8527, :end-column 17, :arglists (quote ([re s])), :doc "Returns the result of (re-find re s) if re fully matches s."}, :name cljs.core/re-matches, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([re s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8527, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re s])), :doc "Returns the result of (re-find re s) if re fully matches s."}, pr-writer-impl {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8631, :column 8, :end-line 8631, :end-column 22, :private true, :arglists (quote ([obj writer opts]))}, :private true, :name cljs.core/pr-writer-impl, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([obj writer opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8631, :max-fixed-arity 3, :fn-var true, :arglists (quote ([obj writer opts]))}, array-map {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7592, :column 7, :end-line 7592, :end-column 16, :arglists (quote ([& keyvals])), :doc "keyval => key val\\n  Returns a new array map with supplied mappings.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}}, :name cljs.core/array-map, :variadic true, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}, :method-params [(keyvals)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 7592, :max-fixed-arity 0, :fn-var true, :arglists ([& keyvals]), :doc "keyval => key val\\n  Returns a new array map with supplied mappings."}, ITransientSet {:meta {:file "cljs/core.cljs", :line 673, :column 14, :end-line 673, :end-column 27, :doc "Protocol for adding set functionality to a transient collection.", :protocol-symbol true, :protocol-info {:methods {-disjoin! [[tcoll v]]}}}, :protocol-symbol true, :name cljs.core/ITransientSet, :file "cljs/core.cljs", :end-column 27, :column nil, :line nil, :protocol-info {:methods {-disjoin! [[tcoll v]]}}, :info nil, :end-line 673, :impls #{cljs.core/TransientHashSet}, :doc "Protocol for adding set functionality to a transient collection."}, ITER_SYMBOL {:name cljs.core/ITER_SYMBOL, :file "cljs/core.cljs", :line nil, :column nil, :end-line 272, :end-column 19, :meta {:file "cljs/core.cljs", :line 272, :column 8, :end-line 272, :end-column 19}}, unchecked-byte {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2346, :column 15, :end-line 2346, :end-column 29, :tag number, :arglists (quote ([x]))}, :name cljs.core/unchecked-byte, :variadic false, :file "cljs/core.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2346, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([x]))}, ArrayNode {:meta {:file "cljs/core.cljs", :line 6106, :column 10, :end-line 6106, :end-column 19, :declared true}, :num-fields 3, :protocols #{cljs.core/Object}, :name cljs.core/ArrayNode, :file "cljs/core.cljs", :end-column 19, :type true, :column 10, :line 6319, :record false, :declared true, :end-line 6319, :skip-protocol-flag nil}, ->ChunkedSeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4929, :column 10, :end-line 4929, :end-column 20, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([vec node i off meta __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->ChunkedSeq, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([vec node i off meta __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 4929, :max-fixed-arity 6, :fn-var true, :arglists (quote ([vec node i off meta __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, every-pred {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4089, :column 7, :end-line 4089, :end-column 17, :arglists (quote ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps])), :doc "Takes a set of predicates and returns a function f that returns true if all of its\\n  composing predicates return a logical true value against all of its arguments, else it returns\\n  false. Note that f is short-circuiting in that it will stop execution on the first\\n  argument that triggers a logical false result against the original predicates.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([p] [p1 p2] [p1 p2 p3]), :arglists ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/every-pred, :variadic true, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([p] [p1 p2] [p1 p2 p3]), :arglists ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps]), :arglists-meta (nil nil nil nil)}, :method-params ([p] [p1 p2] [p1 p2 p3]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 4089, :max-fixed-arity 3, :fn-var true, :arglists ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\\n  composing predicates return a logical true value against all of its arguments, else it returns\\n  false. Note that f is short-circuiting in that it will stop execution on the first\\n  argument that triggers a logical false result against the original predicates."}, keys {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7690, :column 7, :end-line 7690, :end-column 11, :arglists (quote ([hash-map])), :doc "Returns a sequence of the map\'s keys."}, :name cljs.core/keys, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([hash-map]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7690, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hash-map])), :doc "Returns a sequence of the map\'s keys."}, missing-protocol {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 250, :column 7, :end-line 250, :end-column 23, :arglists (quote ([proto obj]))}, :name cljs.core/missing-protocol, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([proto obj]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 250, :max-fixed-arity 2, :fn-var true, :arglists (quote ([proto obj]))}, load-file {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 265, :column 7, :end-line 265, :end-column 16, :arglists (quote ([file]))}, :name cljs.core/load-file, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([file]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists (quote ([file]))}, PersistentArrayMap {:num-fields 4, :protocols #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :name cljs.core/PersistentArrayMap, :file "cljs/core.cljs", :end-column 28, :type true, :column 10, :line 5781, :record false, :end-line 5781, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}}, distinct? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2023, :column 16, :end-line 2023, :end-column 25, :tag boolean, :arglists (quote ([x] [x y] [x y & more])), :doc "Returns true if no two of the arguments are =", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/distinct?, :variadic true, :file "cljs/core.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2023, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "Returns true if no two of the arguments are ="}, never-equiv {:name cljs.core/never-equiv, :file "cljs/core.cljs", :line nil, :column nil, :end-line 5434, :end-column 27, :private true, :meta {:file "cljs/core.cljs", :line 5434, :column 16, :end-line 5434, :end-column 27, :private true}}, Stepper {:num-fields 2, :protocols #{cljs.core/Object}, :name cljs.core/Stepper, :file "cljs/core.cljs", :end-column 17, :type true, :column 10, :line 3562, :record false, :end-line 3562, :skip-protocol-flag nil}, unchecked-short {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2348, :column 15, :end-line 2348, :end-column 30, :tag number, :arglists (quote ([x]))}, :name cljs.core/unchecked-short, :variadic false, :file "cljs/core.cljs", :end-column 30, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2348, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([x]))}, ->Range {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8270, :column 10, :end-line 8270, :end-column 15, :protocols #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta start end step __hash]))}, :protocols #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->Range, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([meta start end step __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 8270, :max-fixed-arity 5, :fn-var true, :arglists (quote ([meta start end step __hash])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, methods {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9634, :column 7, :end-line 9634, :end-column 14, :arglists (quote ([multifn])), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns"}, :name cljs.core/methods, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([multifn]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9634, :max-fixed-arity 1, :fn-var true, :arglists (quote ([multifn])), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns"}, odd? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3760, :column 16, :end-line 3760, :end-column 20, :tag boolean, :arglists (quote ([n])), :doc "Returns true if n is odd, throws an exception if n is not an integer"}, :name cljs.core/odd?, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 3760, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([n])), :doc "Returns true if n is odd, throws an exception if n is not an integer"}, ->ArrayChunk {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3064, :column 10, :end-line 3064, :end-column 20, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :factory :positional, :arglists (quote ([arr off end]))}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :name cljs.core/->ArrayChunk, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([arr off end]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 3064, :max-fixed-arity 3, :fn-var true, :arglists (quote ([arr off end])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}}, lazy-transformer {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3559, :column 7, :end-line 3559, :end-column 23, :arglists (quote ([stepper]))}, :name cljs.core/lazy-transformer, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([stepper]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3559, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stepper]))}, ci-reduce {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1278, :column 8, :end-line 1278, :end-column 17, :private true, :arglists (quote ([cicoll f] [cicoll f val] [cicoll f val idx])), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\\nreduces them without incurring seq initialization", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cicoll f] [cicoll f val] [cicoll f val idx]), :arglists ([cicoll f] [cicoll f val] [cicoll f val idx]), :arglists-meta (nil nil nil)}}, :private true, :name cljs.core/ci-reduce, :variadic false, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([cicoll f] [cicoll f val] [cicoll f val idx]), :arglists ([cicoll f] [cicoll f val] [cicoll f val idx]), :arglists-meta (nil nil nil)}, :method-params ([cicoll f] [cicoll f val] [cicoll f val idx]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 1278, :max-fixed-arity 4, :fn-var true, :arglists ([cicoll f] [cicoll f val] [cicoll f val idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\\nreduces them without incurring seq initialization"}, *3 {:name cljs.core/*3, :file "cljs/core.cljs", :line nil, :column nil, :end-line 157, :end-column 5, :doc "bound in a repl thread to the third most recent value printed", :meta {:file "cljs/core.cljs", :line 157, :column 3, :end-line 157, :end-column 5, :doc "bound in a repl thread to the third most recent value printed"}}, -get-method {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9422, :column 4, :end-line 9422, :end-column 15, :protocol cljs.core/IMultiFn, :doc nil, :arglists (quote ([mf dispatch-val]))}, :protocol cljs.core/IMultiFn, :name cljs.core/-get-method, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([mf dispatch-val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9422, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mf dispatch-val])), :doc nil}, ->Var {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 959, :column 10, :end-line 959, :end-column 13, :protocols #{cljs.core/IEquiv cljs.core/IFn cljs.core/Object cljs.core/IMeta cljs.core/Fn cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IFn cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([val sym _meta]))}, :protocols #{cljs.core/IEquiv cljs.core/IFn cljs.core/Object cljs.core/IMeta cljs.core/Fn cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core/->Var, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([val sym _meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 959, :max-fixed-arity 3, :fn-var true, :arglists (quote ([val sym _meta])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IFn cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, frequencies {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8434, :column 7, :end-line 8434, :end-column 18, :arglists (quote ([coll])), :doc "Returns a map from distinct items in coll to the number of times\\n  they appear."}, :name cljs.core/frequencies, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8434, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns a map from distinct items in coll to the number of times\\n  they appear."}, reduceable? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1891, :column 16, :end-line 1891, :end-column 27, :tag boolean, :arglists (quote ([x])), :doc "Returns true if coll satisfies IReduce"}, :name cljs.core/reduceable?, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1891, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if coll satisfies IReduce"}, string-hash-cache {:name cljs.core/string-hash-cache, :file "cljs/core.cljs", :line nil, :column nil, :end-line 817, :end-column 23, :meta {:file "cljs/core.cljs", :line 817, :column 6, :end-line 817, :end-column 23}}, rsubseq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8244, :column 7, :end-line 8244, :end-column 14, :arglists (quote ([sc test key] [sc start-test start-key end-test end-key])), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\\n  >=. Returns a reverse seq of those entries with keys ek for\\n  which (test (.. sc comparator (compare ek key)) 0) is true", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([sc test key] [sc start-test start-key end-test end-key]), :arglists ([sc test key] [sc start-test start-key end-test end-key]), :arglists-meta (nil nil)}}, :name cljs.core/rsubseq, :variadic false, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([sc test key] [sc start-test start-key end-test end-key]), :arglists ([sc test key] [sc start-test start-key end-test end-key]), :arglists-meta (nil nil)}, :method-params ([sc test key] [sc start-test start-key end-test end-key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8244, :max-fixed-arity 5, :fn-var true, :arglists ([sc test key] [sc start-test start-key end-test end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\\n  >=. Returns a reverse seq of those entries with keys ek for\\n  which (test (.. sc comparator (compare ek key)) 0) is true"}, inc {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1238, :column 7, :end-line 1238, :end-column 10, :arglists (quote ([x])), :doc "Returns a number one greater than num."}, :name cljs.core/inc, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a number one greater than num."}, type->str {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 259, :column 7, :end-line 259, :end-column 16, :arglists (quote ([ty]))}, :name cljs.core/type->str, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([ty]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ty]))}, obj-clone {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5486, :column 8, :end-line 5486, :end-column 17, :private true, :arglists (quote ([obj ks]))}, :private true, :name cljs.core/obj-clone, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([obj ks]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5486, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj ks]))}, get-method {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9638, :column 7, :end-line 9638, :end-column 17, :arglists (quote ([multifn dispatch-val])), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\\n  that would apply to that value, or nil if none apply and no default"}, :name cljs.core/get-method, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([multifn dispatch-val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9638, :max-fixed-arity 2, :fn-var true, :arglists (quote ([multifn dispatch-val])), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\\n  that would apply to that value, or nil if none apply and no default"}, vector-index-out-of-bounds {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4634, :column 8, :end-line 4634, :end-column 34, :private true, :arglists (quote ([i cnt]))}, :private true, :name cljs.core/vector-index-out-of-bounds, :variadic false, :file "cljs/core.cljs", :end-column 34, :method-params ([i cnt]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4634, :max-fixed-arity 2, :fn-var true, :arglists (quote ([i cnt]))}, es6-entries-iterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5616, :column 7, :end-line 5616, :end-column 27, :arglists (quote ([coll]))}, :name cljs.core/es6-entries-iterator, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5616, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, bit-clear {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2508, :column 7, :end-line 2508, :end-column 16, :arglists (quote ([x n])), :doc "Clear bit at index n"}, :name cljs.core/bit-clear, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2508, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n])), :doc "Clear bit at index n"}, Range {:num-fields 5, :protocols #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/Range, :file "cljs/core.cljs", :end-column 15, :type true, :column 10, :line 8270, :record false, :end-line 8270, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, filter {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4392, :column 7, :end-line 4392, :end-column 13, :arglists (quote ([pred] [pred coll])), :doc "Returns a lazy sequence of the items in coll for which\\n  (pred item) returns true. pred must be free of side-effects.\\n  Returns a transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :name cljs.core/filter, :variadic false, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :method-params ([pred] [pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4392, :max-fixed-arity 2, :fn-var true, :arglists ([pred] [pred coll]), :doc "Returns a lazy sequence of the items in coll for which\\n  (pred item) returns true. pred must be free of side-effects.\\n  Returns a transducer when no collection is provided."}, ->PersistentTreeMapSeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6920, :column 10, :end-line 6920, :end-column 30, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta stack ascending? cnt __hash]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->PersistentTreeMapSeq, :variadic false, :file "cljs/core.cljs", :end-column 30, :method-params ([meta stack ascending? cnt __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 6920, :max-fixed-arity 5, :fn-var true, :arglists (quote ([meta stack ascending? cnt __hash])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, create-array-node-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6643, :column 8, :end-line 6643, :end-column 29, :private true, :arglists (quote ([nodes] [meta nodes i s])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([nodes] [meta nodes i s]), :arglists ([nodes] [meta nodes i s]), :arglists-meta (nil nil)}}, :private true, :name cljs.core/create-array-node-seq, :variadic false, :file "cljs/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([nodes] [meta nodes i s]), :arglists ([nodes] [meta nodes i s]), :arglists-meta (nil nil)}, :method-params ([nodes] [meta nodes i s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6643, :max-fixed-arity 4, :fn-var true, :arglists ([nodes] [meta nodes i s])}, -assoc-n! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 668, :column 9, :end-line 668, :end-column 18, :tag clj, :protocol cljs.core/ITransientVector, :doc "Returns tcoll with value val added at position n.", :arglists (quote ([tcoll n val]))}, :protocol cljs.core/ITransientVector, :name cljs.core/-assoc-n!, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([tcoll n val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 668, :max-fixed-arity 3, :tag clj, :fn-var true, :arglists (quote ([tcoll n val])), :doc "Returns tcoll with value val added at position n."}, IWithMeta {:meta {:file "cljs/core.cljs", :line 546, :column 14, :end-line 546, :end-column 23, :doc "Protocol for adding metadata to an object.", :protocol-symbol true, :protocol-info {:methods {-with-meta [[o meta]]}}}, :protocol-symbol true, :name cljs.core/IWithMeta, :file "cljs/core.cljs", :end-column 23, :column nil, :line nil, :protocol-info {:methods {-with-meta [[o meta]]}}, :info nil, :end-line 546, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/Var cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/t7373 cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/t7376 cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/MetaFn cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "Protocol for adding metadata to an object."}, list {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2817, :column 7, :end-line 2817, :end-column 11, :arglists (quote ([& xs])), :doc "Creates a new list containing the items.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name cljs.core/list, :variadic true, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 2817, :max-fixed-arity 0, :fn-var true, :arglists ([& xs]), :doc "Creates a new list containing the items."}, + {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2235, :column 15, :end-line 2235, :end-column 16, :tag number, :arglists (quote ([] [x] [x y] [x y & more])), :doc "Returns the sum of nums. (+) returns 0.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/+, :variadic true, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2235, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([] [x] [x y] [x y & more]), :doc "Returns the sum of nums. (+) returns 0."}, IndexedSeqIterator {:num-fields 2, :protocols #{cljs.core/Object}, :name cljs.core/IndexedSeqIterator, :file "cljs/core.cljs", :end-column 28, :type true, :column 10, :line 1352, :record false, :end-line 1352, :skip-protocol-flag nil}, split-with {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8388, :column 7, :end-line 8388, :end-column 17, :arglists (quote ([pred coll])), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]"}, :name cljs.core/split-with, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8388, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]"}, ->VectorNode {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4588, :column 10, :end-line 4588, :end-column 20, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([edit arr]))}, :protocols #{}, :name cljs.core/->VectorNode, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([edit arr]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 4588, :max-fixed-arity 2, :fn-var true, :arglists (quote ([edit arr])), :skip-protocol-flag nil}, aset {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 370, :column 7, :end-line 370, :end-column 11, :arglists (quote ([array i val] [array idx idx2 & idxv])), :doc "Sets the value at the index.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([array i val]), :arglists ([array i val] [array idx idx2 & idxv]), :arglists-meta (nil nil)}}, :name cljs.core/aset, :variadic true, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([array i val]), :arglists ([array i val] [array idx idx2 & idxv]), :arglists-meta (nil nil)}, :method-params ([array i val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 370, :max-fixed-arity 3, :fn-var true, :arglists ([array i val] [array idx idx2 & idxv]), :doc "Sets the value at the index."}, int-rotate-left {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 752, :column 15, :end-line 752, :end-column 30, :tag number, :arglists (quote ([x n]))}, :name cljs.core/int-rotate-left, :variadic false, :file "cljs/core.cljs", :end-column 30, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 752, :max-fixed-arity 2, :tag number, :fn-var true, :arglists (quote ([x n]))}, keyword {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2964, :column 7, :end-line 2964, :end-column 14, :arglists (quote ([name] [ns name])), :doc "Returns a Keyword with the given namespace and name.  Do not use :\\n  in the keyword strings, it will be added automatically.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([name] [ns name]), :arglists ([name] [ns name]), :arglists-meta (nil nil)}}, :name cljs.core/keyword, :variadic false, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([name] [ns name]), :arglists ([name] [ns name]), :arglists-meta (nil nil)}, :method-params ([name] [ns name]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2964, :max-fixed-arity 2, :fn-var true, :arglists ([name] [ns name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\\n  in the keyword strings, it will be added automatically."}, ->Cons {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2834, :column 10, :end-line 2834, :end-column 14, :protocols #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta first rest __hash]))}, :protocols #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->Cons, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([meta first rest __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 2834, :max-fixed-arity 4, :fn-var true, :arglists (quote ([meta first rest __hash])), :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, *ns* {:name cljs.core/*ns*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 32, :end-column 7, :dynamic true, :doc "Var bound to the current namespace. Only used for bootstrapping.", :meta {:file "cljs/core.cljs", :line 32, :column 3, :end-line 32, :end-column 7, :dynamic true, :doc "Var bound to the current namespace. Only used for bootstrapping."}}, *assert* {:name cljs.core/*assert*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 40, :end-column 11, :dynamic true, :meta {:file "cljs/core.cljs", :line 40, :column 3, :end-line 40, :end-column 11, :dynamic true}}, create-tree-map-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6973, :column 8, :end-line 6973, :end-column 27, :private true, :arglists (quote ([tree ascending? cnt]))}, :private true, :name cljs.core/create-tree-map-seq, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([tree ascending? cnt]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 6973, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tree ascending? cnt]))}, ICollection {:meta {:file "cljs/core.cljs", :line 447, :column 14, :end-line 447, :end-column 25, :doc "Protocol for adding to a collection.", :protocol-symbol true, :protocol-info {:methods {-conj [[coll o]]}}}, :protocol-symbol true, :name cljs.core/ICollection, :file "cljs/core.cljs", :end-column 25, :column nil, :line nil, :protocol-info {:methods {-conj [[coll o]]}}, :info nil, :end-line 447, :impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :doc "Protocol for adding to a collection."}, multi-stepper {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3616, :column 7, :end-line 3616, :end-column 20, :arglists (quote ([xform iters] [xform iters nexts])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([xform iters] [xform iters nexts]), :arglists ([xform iters] [xform iters nexts]), :arglists-meta (nil nil)}}, :name cljs.core/multi-stepper, :variadic false, :file "cljs/core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([xform iters] [xform iters nexts]), :arglists ([xform iters] [xform iters nexts]), :arglists-meta (nil nil)}, :method-params ([xform iters] [xform iters nexts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3616, :max-fixed-arity 3, :fn-var true, :arglists ([xform iters] [xform iters nexts])}, chars {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2455, :column 7, :end-line 2455, :end-column 12, :arglists (quote ([x]))}, :name cljs.core/chars, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2455, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, str {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2593, :column 7, :end-line 2593, :end-column 10, :arglists (quote ([] [x] [x & ys])), :doc "With no args, returns the empty string. With one arg x, returns\\n  x.toString().  (str nil) returns the empty string. With more than\\n  one arg, returns the concatenation of the str values of the args.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([] [x]), :arglists ([] [x] [x & ys]), :arglists-meta (nil nil nil)}}, :name cljs.core/str, :variadic true, :file "cljs/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([] [x]), :arglists ([] [x] [x & ys]), :arglists-meta (nil nil nil)}, :method-params ([] [x]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 2593, :max-fixed-arity 1, :fn-var true, :arglists ([] [x] [x & ys]), :doc "With no args, returns the empty string. With one arg x, returns\\n  x.toString().  (str nil) returns the empty string. With more than\\n  one arg, returns the concatenation of the str values of the args."}, next {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1093, :column 12, :end-line 1093, :end-column 16, :tag seq, :arglists (quote ([coll])), :doc "Returns a seq of the items after the first. Calls seq on its\\n  argument.  If there are no more items, returns nil"}, :name cljs.core/next, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag seq, :end-line 1093, :max-fixed-arity 1, :tag seq, :fn-var true, :arglists (quote ([coll])), :doc "Returns a seq of the items after the first. Calls seq on its\\n  argument.  If there are no more items, returns nil"}, ASeq {:meta {:file "cljs/core.cljs", :line 464, :column 14, :end-line 464, :end-column 18, :doc "Marker protocol indicating an array sequence.", :protocol-symbol true, :protocol-info {:methods {}}}, :protocol-symbol true, :name cljs.core/ASeq, :file "cljs/core.cljs", :end-column 18, :column nil, :line nil, :protocol-info {:methods {}}, :info nil, :end-line 464, :impls #{cljs.core/Cons cljs.core/IndexedSeq cljs.core/List cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :doc "Marker protocol indicating an array sequence."}, pr-seq-writer {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8707, :column 7, :end-line 8707, :end-column 20, :arglists (quote ([objs writer opts]))}, :name cljs.core/pr-seq-writer, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([objs writer opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8707, :max-fixed-arity 3, :fn-var true, :arglists (quote ([objs writer opts]))}, SeqIter {:num-fields 2, :protocols #{cljs.core/Object}, :name cljs.core/SeqIter, :file "cljs/core.cljs", :end-column 17, :type true, :column 10, :line 3527, :record false, :end-line 3527, :skip-protocol-flag nil}, IFn {:meta {:file "cljs/core.cljs", :line 403, :column 14, :end-line 403, :end-column 17, :doc "Protocol for adding the ability to invoke an object as a function.\\n  For example, a vector can also be used to look up a value:\\n  ([1 2 3 4] 1) => 2", :protocol-symbol true, :protocol-info {:methods {-invoke [[this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest]]}}}, :protocol-symbol true, :name cljs.core/IFn, :file "cljs/core.cljs", :end-column 17, :column nil, :line nil, :protocol-info {:methods {-invoke [[this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest]]}}, :info nil, :end-line 403, :impls #{cljs.core/PersistentHashMap cljs.core/MultiFn cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/Keyword cljs.core/BlackNode cljs.core/Subvec cljs.core/Var cljs.core/PersistentVector cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/Symbol cljs.core/MetaFn cljs.core/RedNode}, :doc "Protocol for adding the ability to invoke an object as a function.\\n  For example, a vector can also be used to look up a value:\\n  ([1 2 3 4] 1) => 2"}, regexp? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8522, :column 16, :end-line 8522, :end-column 23, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is a JavaScript RegExp instance."}, :name cljs.core/regexp?, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 8522, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a JavaScript RegExp instance."}, hash-map {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7583, :column 7, :end-line 7583, :end-column 15, :arglists (quote ([& keyvals])), :doc "keyval => key val\\n  Returns a new hash map with supplied mappings.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}}, :name cljs.core/hash-map, :variadic true, :file "cljs/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}, :method-params [(keyvals)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 7583, :max-fixed-arity 0, :fn-var true, :arglists ([& keyvals]), :doc "keyval => key val\\n  Returns a new hash map with supplied mappings."}, underive {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9344, :column 7, :end-line 9344, :end-column 15, :arglists (quote ([tag parent] [h tag parent])), :doc "Removes a parent/child relationship between parent and\\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\\n  supplied defaults to, and modifies, the global hierarchy.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tag parent] [h tag parent]), :arglists ([tag parent] [h tag parent]), :arglists-meta (nil nil)}}, :name cljs.core/underive, :variadic false, :file "cljs/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tag parent] [h tag parent]), :arglists ([tag parent] [h tag parent]), :arglists-meta (nil nil)}, :method-params ([tag parent] [h tag parent]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9344, :max-fixed-arity 3, :fn-var true, :arglists ([tag parent] [h tag parent]), :doc "Removes a parent/child relationship between parent and\\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\\n  supplied defaults to, and modifies, the global hierarchy."}, array-copy {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1938, :column 8, :end-line 1938, :end-column 18, :private true, :arglists (quote ([from i to j len]))}, :private true, :name cljs.core/array-copy, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([from i to j len]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1938, :max-fixed-arity 5, :fn-var true, :arglists (quote ([from i to j len]))}, obj-map-compare-keys {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5464, :column 8, :end-line 5464, :end-column 28, :private true, :arglists (quote ([a b]))}, :private true, :name cljs.core/obj-map-compare-keys, :variadic false, :file "cljs/core.cljs", :end-column 28, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5464, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, -reset! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 713, :column 4, :end-line 713, :end-column 11, :protocol cljs.core/IReset, :doc "Sets the value of o to new-value.", :arglists (quote ([o new-value]))}, :protocol cljs.core/IReset, :name cljs.core/-reset!, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([o new-value]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 713, :max-fixed-arity 2, :fn-var true, :arglists (quote ([o new-value])), :doc "Sets the value of o to new-value."}, -rest {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 471, :column 9, :end-line 471, :end-column 14, :tag clj, :protocol cljs.core/ISeq, :doc "Returns a new collection of coll without the first item. It should\\n     always return a seq, e.g.\\n     (rest []) => ()\\n     (rest nil) => ()", :arglists (quote ([coll]))}, :protocol cljs.core/ISeq, :name cljs.core/-rest, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 471, :max-fixed-arity 1, :tag clj, :fn-var true, :arglists (quote ([coll])), :doc "Returns a new collection of coll without the first item. It should\\n     always return a seq, e.g.\\n     (rest []) => ()\\n     (rest nil) => ()"}, nil-iter {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3493, :column 7, :end-line 3493, :end-column 15, :arglists (quote ([]))}, :name cljs.core/nil-iter, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3493, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, pr-writer {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8698, :column 8, :end-line 8698, :end-column 17, :private true, :arglists (quote ([obj writer opts])), :doc "Prefer this to pr-seq, because it makes the printing function\\n   configurable, allowing efficient implementations such as appending\\n   to a StringBuffer."}, :private true, :name cljs.core/pr-writer, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([obj writer opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8698, :max-fixed-arity 3, :fn-var true, :arglists (quote ([obj writer opts])), :doc "Prefer this to pr-seq, because it makes the printing function\\n   configurable, allowing efficient implementations such as appending\\n   to a StringBuffer."}, false? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1958, :column 16, :end-line 1958, :end-column 22, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is the value false, false otherwise."}, :name cljs.core/false?, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1958, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is the value false, false otherwise."}, RangedIterator {:num-fields 6, :protocols #{cljs.core/Object}, :name cljs.core/RangedIterator, :file "cljs/core.cljs", :end-column 24, :type true, :column 10, :line 4685, :record false, :end-line 4685, :skip-protocol-flag nil}, *print-readably* {:name cljs.core/*print-readably*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 86, :end-column 19, :dynamic true, :doc "When set to logical false, strings and characters will be printed with\\n  non-alphanumeric characters converted to the appropriate escape sequences.\\n\\n  Defaults to true", :meta {:file "cljs/core.cljs", :line 86, :column 3, :end-line 86, :end-column 19, :dynamic true, :doc "When set to logical false, strings and characters will be printed with\\n  non-alphanumeric characters converted to the appropriate escape sequences.\\n\\n  Defaults to true"}}, ints {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2457, :column 7, :end-line 2457, :end-column 11, :arglists (quote ([x]))}, :name cljs.core/ints, :variadic false, :file "cljs/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2457, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, some-fn {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4128, :column 7, :end-line 4128, :end-column 14, :arglists (quote ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps])), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\\n  returned by one of its composing predicates against any of its arguments, else it returns\\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\\n  argument that triggers a logical true result against the original predicates.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([p] [p1 p2] [p1 p2 p3]), :arglists ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps]), :arglists-meta (nil nil nil nil)}}, :name cljs.core/some-fn, :variadic true, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([p] [p1 p2] [p1 p2 p3]), :arglists ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps]), :arglists-meta (nil nil nil nil)}, :method-params ([p] [p1 p2] [p1 p2 p3]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 4128, :max-fixed-arity 3, :fn-var true, :arglists ([p] [p1 p2] [p1 p2 p3] [p1 p2 p3 & ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\\n  returned by one of its composing predicates against any of its arguments, else it returns\\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\\n  argument that triggers a logical true result against the original predicates."}, demunge-pattern {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9860, :column 8, :end-line 9860, :end-column 23, :private true, :arglists (quote ([]))}, :private true, :name cljs.core/demunge-pattern, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9860, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, *flush-on-newline* {:name cljs.core/*flush-on-newline*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 71, :end-column 21, :dynamic true, :doc "When set to true, output will be flushed whenever a newline is printed.\\n\\n  Defaults to true.", :meta {:file "cljs/core.cljs", :line 71, :column 3, :end-line 71, :end-column 21, :dynamic true, :doc "When set to true, output will be flushed whenever a newline is printed.\\n\\n  Defaults to true."}}, to-array {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3184, :column 7, :end-line 3184, :end-column 15, :arglists (quote ([s])), :doc "Naive impl of to-array as a start."}, :name cljs.core/to-array, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Naive impl of to-array as a start."}, build-subvec {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5119, :column 8, :end-line 5119, :end-column 20, :private true, :arglists (quote ([meta v start end __hash]))}, :private true, :name cljs.core/build-subvec, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([meta v start end __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5119, :max-fixed-arity 5, :fn-var true, :arglists (quote ([meta v start end __hash]))}, Namespace {:num-fields 2, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/Object}, :name cljs.core/Namespace, :file "cljs/core.cljs", :end-column 19, :type true, :column 10, :line 9924, :record false, :end-line 9924, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash}}, list? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2732, :column 16, :end-line 2732, :end-column 21, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x implements IList"}, :name cljs.core/list?, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2732, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x implements IList"}, tree-map-remove {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7402, :column 8, :end-line 7402, :end-column 23, :private true, :arglists (quote ([comp tree k found]))}, :private true, :name cljs.core/tree-map-remove, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([comp tree k found]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 7402, :max-fixed-arity 4, :fn-var true, :arglists (quote ([comp tree k found]))}, HashCollisionNode {:num-fields 4, :protocols #{cljs.core/Object}, :name cljs.core/HashCollisionNode, :file "cljs/core.cljs", :end-column 27, :type true, :column 10, :line 6425, :record false, :end-line 6425, :skip-protocol-flag nil}, array? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 182, :column 16, :end-line 182, :end-column 22, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x is a JavaScript array."}, :name cljs.core/array?, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 182, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is a JavaScript array."}, prefers* {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9370, :column 8, :end-line 9370, :end-column 16, :private true, :arglists (quote ([x y prefer-table]))}, :private true, :name cljs.core/prefers*, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([x y prefer-table]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9370, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y prefer-table]))}, clone {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1036, :column 7, :end-line 1036, :end-column 12, :arglists (quote ([value])), :doc "Clone the supplied value which must implement ICloneable."}, :name cljs.core/clone, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1036, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Clone the supplied value which must implement ICloneable."}, scan-array {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5450, :column 8, :end-line 5450, :end-column 18, :private true, :arglists (quote ([incr k array]))}, :private true, :name cljs.core/scan-array, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([incr k array]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5450, :max-fixed-arity 3, :fn-var true, :arglists (quote ([incr k array]))}, demunge {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9914, :column 7, :end-line 9914, :end-column 14, :arglists (quote ([name]))}, :name cljs.core/demunge, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9914, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, bit-not {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2518, :column 7, :end-line 2518, :end-column 14, :arglists (quote ([x])), :doc "Bitwise complement"}, :name cljs.core/bit-not, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2518, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Bitwise complement"}, quote-string {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8617, :column 17, :end-line 8617, :end-column 29, :private true, :arglists (quote ([s]))}, :private true, :name cljs.core/quote-string, :variadic false, :file "cljs/core.cljs", :end-column 29, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 8617, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, byte {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2332, :column 15, :end-line 2332, :end-column 19, :tag number, :arglists (quote ([x]))}, :name cljs.core/byte, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2332, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([x]))}, max {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2318, :column 15, :end-line 2318, :end-column 18, :tag number, :arglists (quote ([x] [x y] [x y & more])), :doc "Returns the greatest of the nums.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/max, :variadic true, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag number, :end-line 2318, :max-fixed-arity 2, :tag number, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "Returns the greatest of the nums."}, IComparable {:meta {:file "cljs/core.cljs", :line 678, :column 14, :end-line 678, :end-column 25, :doc "Protocol for values that can be compared.", :protocol-symbol true, :protocol-info {:methods {-compare [[x y]]}}}, :protocol-symbol true, :name cljs.core/IComparable, :file "cljs/core.cljs", :end-column 25, :column nil, :line nil, :protocol-info {:methods {-compare [[x y]]}}, :info nil, :end-line 678, :impls #{js/Date cljs.core/Keyword cljs.core/Subvec cljs.core/PersistentVector cljs.core/Symbol cljs.core/UUID}, :doc "Protocol for values that can be compared."}, == {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2555, :column 16, :end-line 2555, :end-column 18, :tag boolean, :arglists (quote ([x] [x y] [x y & more])), :doc "Returns non-nil if nums all have the equivalent\\n  value, otherwise false. Behavior on non nums is\\n  undefined.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core/==, :variadic true, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 2555, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([x] [x y] [x y & more]), :doc "Returns non-nil if nums all have the equivalent\\n  value, otherwise false. Behavior on non nums is\\n  undefined."}, parents {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9285, :column 7, :end-line 9285, :end-column 14, :arglists (quote ([tag] [h tag])), :doc "Returns the immediate parents of tag, either via a JavaScript type\\n  inheritance relationship or a relationship established via derive. h\\n  must be a hierarchy obtained from make-hierarchy, if not supplied\\n  defaults to the global hierarchy", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [h tag]), :arglists ([tag] [h tag]), :arglists-meta (nil nil)}}, :name cljs.core/parents, :variadic false, :file "cljs/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([tag] [h tag]), :arglists ([tag] [h tag]), :arglists-meta (nil nil)}, :method-params ([tag] [h tag]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9285, :max-fixed-arity 2, :fn-var true, :arglists ([tag] [h tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\\n  inheritance relationship or a relationship established via derive. h\\n  must be a hierarchy obtained from make-hierarchy, if not supplied\\n  defaults to the global hierarchy"}, count {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1570, :column 7, :end-line 1570, :end-column 12, :arglists (quote ([coll])), :doc "Returns the number of items in the collection. (count nil) returns\\n  0.  Also works on strings, arrays, and Maps"}, :name cljs.core/count, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1570, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns the number of items in the collection. (count nil) returns\\n  0.  Also works on strings, arrays, and Maps"}, -disjoin! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 675, :column 9, :end-line 675, :end-column 18, :tag clj, :protocol cljs.core/ITransientSet, :doc "Returns tcoll without v.", :arglists (quote ([tcoll v]))}, :protocol cljs.core/ITransientSet, :name cljs.core/-disjoin!, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([tcoll v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 675, :max-fixed-arity 2, :tag clj, :fn-var true, :arglists (quote ([tcoll v])), :doc "Returns tcoll without v."}, *loaded-libs* {:name cljs.core/*loaded-libs*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 124, :end-column 33, :dynamic true, :meta {:file "cljs/core.cljs", :line 124, :column 20, :end-line 124, :end-column 33, :dynamic true}}, ->TransientHashMap {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 6808, :column 10, :end-line 6808, :end-column 26, :protocols #{cljs.core/ITransientMap cljs.core/Object cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :factory :positional, :arglists (quote ([edit root count has-nil? nil-val]))}, :protocols #{cljs.core/ITransientMap cljs.core/Object cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :name cljs.core/->TransientHashMap, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([edit root count has-nil? nil-val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 6808, :max-fixed-arity 5, :fn-var true, :arglists (quote ([edit root count has-nil? nil-val])), :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, array-index-of-symbol? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5652, :column 8, :end-line 5652, :end-column 30, :private true, :arglists (quote ([arr k]))}, :private true, :name cljs.core/array-index-of-symbol?, :variadic false, :file "cljs/core.cljs", :end-column 30, :method-params ([arr k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 5652, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr k]))}, ArrayChunk {:meta {:file "cljs/core.cljs", :line 3045, :column 10, :end-line 3045, :end-column 20, :declared true}, :num-fields 3, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :name cljs.core/ArrayChunk, :file "cljs/core.cljs", :end-column 20, :type true, :column 10, :line 3064, :record false, :declared true, :end-line 3064, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}}, sorted-map-by {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7623, :column 7, :end-line 7623, :end-column 20, :arglists (quote ([comparator & keyvals])), :doc "keyval => key val\\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(comparator keyvals)], :arglists ([comparator & keyvals]), :arglists-meta (nil)}}, :name cljs.core/sorted-map-by, :variadic true, :file "cljs/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(comparator keyvals)], :arglists ([comparator & keyvals]), :arglists-meta (nil)}, :method-params [(comparator keyvals)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 7623, :max-fixed-arity 1, :fn-var true, :arglists ([comparator & keyvals]), :doc "keyval => key val\\n  Returns a new sorted map with supplied mappings, using the supplied comparator."}, apply {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3418, :column 7, :end-line 3418, :end-column 12, :arglists (quote ([f args] [f x args] [f x y args] [f x y z args] [f a b c d & args])), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.", :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([f args] [f x args] [f x y args] [f x y z args]), :arglists ([f args] [f x args] [f x y args] [f x y z args] [f a b c d & args]), :arglists-meta (nil nil nil nil nil)}}, :name cljs.core/apply, :variadic true, :file "cljs/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([f args] [f x args] [f x y args] [f x y z args]), :arglists ([f args] [f x args] [f x y args] [f x y z args] [f a b c d & args]), :arglists-meta (nil nil nil nil nil)}, :method-params ([f args] [f x args] [f x y args] [f x y z args]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column nil, :line nil, :end-line 3418, :max-fixed-arity 5, :fn-var true, :arglists ([f args] [f x args] [f x y args] [f x y z args] [f a b c d & args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args."}, get-global-hierarchy {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9257, :column 8, :end-line 9257, :end-column 28, :private true, :arglists (quote ([]))}, :private true, :name cljs.core/get-global-hierarchy, :variadic false, :file "cljs/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9257, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, add-to-string-hash-cache {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 832, :column 7, :end-line 832, :end-column 31, :arglists (quote ([k]))}, :name cljs.core/add-to-string-hash-cache, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 832, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, clj->js {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9137, :column 7, :end-line 9137, :end-column 14, :arglists (quote ([x])), :doc "Recursively transforms ClojureScript values to JavaScript.\\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\\nMaps become Objects. Arbitrary keys are encoded to by key->js."}, :name cljs.core/clj->js, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Recursively transforms ClojureScript values to JavaScript.\\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\\nMaps become Objects. Arbitrary keys are encoded to by key->js."}, TransientArrayMap {:meta {:file "cljs/core.cljs", :line 5709, :column 10, :end-line 5709, :end-column 27, :declared true}, :num-fields 3, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :name cljs.core/TransientArrayMap, :file "cljs/core.cljs", :end-column 27, :type true, :column 10, :line 5966, :record false, :declared true, :end-line 5966, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ->TransientVector {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5196, :column 10, :end-line 5196, :end-column 25, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :factory :positional, :arglists (quote ([cnt shift root tail]))}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :name cljs.core/->TransientVector, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([cnt shift root tail]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5196, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cnt shift root tail])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}}, t5671 {:num-fields 2, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core/t5671, :file "cljs/core.cljs", :type true, :anonymous true, :column nil, :line nil, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t7373 {:num-fields 2, :protocols #{cljs.core/Object cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core/t7373, :file "cljs/core.cljs", :type true, :anonymous true, :column nil, :line nil, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, IChunkedNext {:meta {:file "cljs/core.cljs", :line 696, :column 14, :end-line 696, :end-column 26, :doc "Protocol for accessing the chunks of a collection.", :protocol-symbol true, :protocol-info {:methods {-chunked-next [[coll]]}}}, :protocol-symbol true, :name cljs.core/IChunkedNext, :file "cljs/core.cljs", :end-column 26, :column nil, :line nil, :protocol-info {:methods {-chunked-next [[coll]]}}, :info nil, :end-line 696, :impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :doc "Protocol for accessing the chunks of a collection."}, interpose {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4347, :column 7, :end-line 4347, :end-column 16, :arglists (quote ([sep] [sep coll])), :doc "Returns a lazy seq of the elements of coll separated by sep", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([sep] [sep coll]), :arglists ([sep] [sep coll]), :arglists-meta (nil nil)}}, :name cljs.core/interpose, :variadic false, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([sep] [sep coll]), :arglists ([sep] [sep coll]), :arglists-meta (nil nil)}, :method-params ([sep] [sep coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4347, :max-fixed-arity 2, :fn-var true, :arglists ([sep] [sep coll]), :doc "Returns a lazy seq of the elements of coll separated by sep"}, ->BlackNode {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7079, :column 10, :end-line 7079, :end-column 19, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :factory :positional, :arglists (quote ([key val left right __hash]))}, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :name cljs.core/->BlackNode, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([key val left right __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 7079, :max-fixed-arity 5, :fn-var true, :arglists (quote ([key val left right __hash])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, deref {:name cljs.core/deref, :file "cljs/core.cljs", :line nil, :column nil, :end-line 6047, :end-column 78, :declared true, :meta {:file "cljs/core.cljs", :line 6047, :column 73, :end-line 6047, :end-column 78, :declared true}}, pv-aget {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4593, :column 8, :end-line 4593, :end-column 15, :private true, :arglists (quote ([node idx]))}, :private true, :name cljs.core/pv-aget, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([node idx]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4593, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node idx]))}, assoc {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1727, :column 7, :end-line 1727, :end-column 12, :arglists (quote ([coll k v] [coll k v & kvs])), :doc "assoc[iate]. When applied to a map, returns a new map of the\\n   same (hashed/sorted) type, that contains the mapping of key(s) to\\n   val(s). When applied to a vector, returns a new vector that\\n   contains val at index.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([coll k v]), :arglists ([coll k v] [coll k v & kvs]), :arglists-meta (nil nil)}}, :name cljs.core/assoc, :variadic true, :file "cljs/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([coll k v]), :arglists ([coll k v] [coll k v & kvs]), :arglists-meta (nil nil)}, :method-params ([coll k v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1727, :max-fixed-arity 3, :fn-var true, :arglists ([coll k v] [coll k v & kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\\n   same (hashed/sorted) type, that contains the mapping of key(s) to\\n   val(s). When applied to a vector, returns a new vector that\\n   contains val at index."}, transient {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3347, :column 7, :end-line 3347, :end-column 16, :arglists (quote ([coll])), :doc "Returns a new, transient version of the collection, in constant time."}, :name cljs.core/transient, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3347, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns a new, transient version of the collection, in constant time."}, -disjoin {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 515, :column 9, :end-line 515, :end-column 17, :tag clj, :protocol cljs.core/ISet, :doc "Returns a new collection of coll that does not contain v.", :arglists (quote ([coll v]))}, :protocol cljs.core/ISet, :name cljs.core/-disjoin, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([coll v]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 515, :max-fixed-arity 2, :tag clj, :fn-var true, :arglists (quote ([coll v])), :doc "Returns a new collection of coll that does not contain v."}, chunk-cons {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3160, :column 7, :end-line 3160, :end-column 17, :arglists (quote ([chunk rest]))}, :name cljs.core/chunk-cons, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([chunk rest]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3160, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chunk rest]))}, ArrayIter {:num-fields 2, :protocols #{cljs.core/Object}, :name cljs.core/ArrayIter, :file "cljs/core.cljs", :end-column 19, :type true, :column 10, :line 3512, :record false, :end-line 3512, :skip-protocol-flag nil}, comparator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9772, :column 7, :end-line 9772, :end-column 17, :arglists (quote ([pred])), :doc "Returns an JavaScript compatible comparator based upon pred."}, :name cljs.core/comparator, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([pred]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9772, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pred])), :doc "Returns an JavaScript compatible comparator based upon pred."}, sorted-map {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 7614, :column 7, :end-line 7614, :end-column 17, :arglists (quote ([& keyvals])), :doc "keyval => key val\\n  Returns a new sorted map with supplied mappings.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}}, :name cljs.core/sorted-map, :variadic true, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(keyvals)], :arglists ([& keyvals]), :arglists-meta (nil)}, :method-params [(keyvals)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 7614, :max-fixed-arity 0, :fn-var true, :arglists ([& keyvals]), :doc "keyval => key val\\n  Returns a new sorted map with supplied mappings."}, drop-while {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4276, :column 7, :end-line 4276, :end-column 17, :arglists (quote ([pred] [pred coll])), :doc "Returns a lazy sequence of the items in coll starting from the\\n  first item for which (pred item) returns logical false.  Returns a\\n  stateful transducer when no collection is provided.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}}, :name cljs.core/drop-while, :variadic false, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([pred] [pred coll]), :arglists ([pred] [pred coll]), :arglists-meta (nil nil)}, :method-params ([pred] [pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4276, :max-fixed-arity 2, :fn-var true, :arglists ([pred] [pred coll]), :doc "Returns a lazy sequence of the items in coll starting from the\\n  first item for which (pred item) returns logical false.  Returns a\\n  stateful transducer when no collection is provided."}, IWriter {:meta {:file "cljs/core.cljs", :line 612, :column 14, :end-line 612, :end-column 21, :doc "Protocol for writing. Currently only implemented by StringBufferWriter.", :protocol-symbol true, :protocol-info {:methods {-write [[writer s]], -flush [[writer]]}}}, :protocol-symbol true, :name cljs.core/IWriter, :file "cljs/core.cljs", :end-column 21, :column nil, :line nil, :protocol-info {:methods {-write [[writer s]], -flush [[writer]]}}, :info nil, :end-line 612, :impls #{cljs.core/StringBufferWriter}, :doc "Protocol for writing. Currently only implemented by StringBufferWriter."}, KeySeq {:num-fields 2, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/KeySeq, :file "cljs/core.cljs", :end-column 16, :type true, :column 10, :line 7633, :record false, :end-line 7633, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, realized? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9037, :column 16, :end-line 9037, :end-column 25, :tag boolean, :arglists (quote ([d])), :doc "Returns true if a value has been produced for a delay or lazy sequence."}, :name cljs.core/realized?, :variadic false, :file "cljs/core.cljs", :end-column 25, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 9037, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([d])), :doc "Returns true if a value has been produced for a delay or lazy sequence."}, *print-fn* {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 46, :column 3, :end-line 46, :end-column 13, :doc "Each runtime environment provides a different way to print output.\\n  Whatever function *print-fn* is bound to will be passed any\\n  Strings which should be printed.", :dynamic true}, :name cljs.core/*print-fn*, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([_]), :protocol-impl nil, :arglists-meta (), :column nil, :dynamic true, :line nil, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists nil, :doc "Each runtime environment provides a different way to print output.\\n  Whatever function *print-fn* is bound to will be passed any\\n  Strings which should be printed."}, compare {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2041, :column 15, :end-line 2041, :end-column 22, :tag number, :arglists (quote ([x y])), :doc "Comparator. Returns a negative number, zero, or a positive number\\n  when x is logically \'less than\', \'equal to\', or \'greater than\'\\n  y. Uses IComparable if available and google.array.defaultCompare for objects\\n of the same type and special-cases nil to be less than any other object."}, :name cljs.core/compare, :variadic false, :file "cljs/core.cljs", :end-column 22, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2041, :max-fixed-arity 2, :tag number, :fn-var true, :arglists (quote ([x y])), :doc "Comparator. Returns a negative number, zero, or a positive number\\n  when x is logically \'less than\', \'equal to\', or \'greater than\'\\n  y. Uses IComparable if available and google.array.defaultCompare for objects\\n of the same type and special-cases nil to be less than any other object."}, complement {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3764, :column 16, :end-line 3764, :end-column 26, :tag boolean, :arglists (quote ([f])), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\\n  has the same effects, if any, and returns the opposite truth value."}, :name cljs.core/complement, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 3764, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([f])), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\\n  has the same effects, if any, and returns the opposite truth value."}, lookup-sentinel {:name cljs.core/lookup-sentinel, :file "cljs/core.cljs", :line nil, :column nil, :end-line 1956, :end-column 31, :private true, :meta {:file "cljs/core.cljs", :line 1956, :column 16, :end-line 1956, :end-column 31, :private true}}, -assoc! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 657, :column 9, :end-line 657, :end-column 16, :tag clj, :protocol cljs.core/ITransientAssociative, :doc "Returns a new transient collection of tcoll with a mapping from key to\\n     val added to it.", :arglists (quote ([tcoll key val]))}, :protocol cljs.core/ITransientAssociative, :name cljs.core/-assoc!, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([tcoll key val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 657, :max-fixed-arity 3, :tag clj, :fn-var true, :arglists (quote ([tcoll key val])), :doc "Returns a new transient collection of tcoll with a mapping from key to\\n     val added to it."}, *print-dup* {:name cljs.core/*print-dup*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 102, :end-column 14, :dynamic true, :doc "When set to logical true, objects will be printed in a way that preserves\\n  their type when read in later.\\n\\n  Defaults to false.", :meta {:file "cljs/core.cljs", :line 102, :column 3, :end-line 102, :end-column 14, :dynamic true, :doc "When set to logical true, objects will be printed in a way that preserves\\n  their type when read in later.\\n\\n  Defaults to false."}}, string-iter {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3509, :column 7, :end-line 3509, :end-column 18, :arglists (quote ([x]))}, :name cljs.core/string-iter, :variadic false, :file "cljs/core.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3509, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, -key->js {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9122, :column 4, :end-line 9122, :end-column 12, :protocol cljs.core/IEncodeJS, :doc "Transforms map keys to valid JavaScript keys. Arbitrary keys are\\n  encoded to their string representation via (pr-str x)", :arglists (quote ([x]))}, :protocol cljs.core/IEncodeJS, :name cljs.core/-key->js, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Transforms map keys to valid JavaScript keys. Arbitrary keys are\\n  encoded to their string representation via (pr-str x)"}, IDeref {:meta {:file "cljs/core.cljs", :line 533, :column 14, :end-line 533, :end-column 20, :doc "Protocol for adding dereference functionality to a reference.", :protocol-symbol true, :protocol-info {:methods {-deref [[o]]}}}, :protocol-symbol true, :name cljs.core/IDeref, :file "cljs/core.cljs", :end-column 20, :column nil, :line nil, :protocol-info {:methods {-deref [[o]]}}, :info nil, :end-line 533, :impls #{cljs.core/Reduced cljs.core/Volatile cljs.core/Delay cljs.core/Var cljs.core/Atom}, :doc "Protocol for adding dereference functionality to a reference."}, sequence {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3708, :column 7, :end-line 3708, :end-column 15, :arglists (quote ([coll] [xform coll] [xform coll & colls])), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\\n  transducer is supplied, returns a lazy sequence of applications of\\n  the transform to the items in coll(s), i.e. to the set of first\\n  items of each coll, followed by the set of second\\n  items in each coll, until any one of the colls is exhausted.  Any\\n  remaining items in other colls are ignored. The transform should accept\\n  number-of-colls arguments", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([coll] [xform coll]), :arglists ([coll] [xform coll] [xform coll & colls]), :arglists-meta (nil nil nil)}}, :name cljs.core/sequence, :variadic true, :file "cljs/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([coll] [xform coll]), :arglists ([coll] [xform coll] [xform coll & colls]), :arglists-meta (nil nil nil)}, :method-params ([coll] [xform coll]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 3708, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [xform coll] [xform coll & colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\\n  transducer is supplied, returns a lazy sequence of applications of\\n  the transform to the items in coll(s), i.e. to the set of first\\n  items of each coll, followed by the set of second\\n  items in each coll, until any one of the colls is exhausted.  Any\\n  remaining items in other colls are ignored. The transform should accept\\n  number-of-colls arguments"}, constantly {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3774, :column 7, :end-line 3774, :end-column 17, :arglists (quote ([x])), :doc "Returns a function that takes any number of arguments and returns x."}, :name cljs.core/constantly, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3774, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a function that takes any number of arguments and returns x."}, ->RangedIterator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4685, :column 10, :end-line 4685, :end-column 24, :protocols #{cljs.core/Object}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([i base arr v start end]))}, :protocols #{cljs.core/Object}, :name cljs.core/->RangedIterator, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([i base arr v start end]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 4685, :max-fixed-arity 6, :fn-var true, :arglists (quote ([i base arr v start end])), :skip-protocol-flag nil}, chunked-seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5005, :column 7, :end-line 5005, :end-column 18, :arglists (quote ([vec i off] [vec node i off] [vec node i off meta])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([vec i off] [vec node i off] [vec node i off meta]), :arglists ([vec i off] [vec node i off] [vec node i off meta]), :arglists-meta (nil nil nil)}}, :name cljs.core/chunked-seq, :variadic false, :file "cljs/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([vec i off] [vec node i off] [vec node i off meta]), :arglists ([vec i off] [vec node i off] [vec node i off meta]), :arglists-meta (nil nil nil)}, :method-params ([vec i off] [vec node i off] [vec node i off meta]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 5005, :max-fixed-arity 5, :fn-var true, :arglists ([vec i off] [vec node i off] [vec node i off meta])}, ISorted {:meta {:file "cljs/core.cljs", :line 595, :column 14, :end-line 595, :end-column 21, :doc "Protocol for a collection which can represent their items\\n  in a sorted manner. ", :protocol-symbol true, :protocol-info {:methods {-sorted-seq [[coll ascending?]], -sorted-seq-from [[coll k ascending?]], -entry-key [[coll entry]], -comparator [[coll]]}}}, :protocol-symbol true, :name cljs.core/ISorted, :file "cljs/core.cljs", :end-column 21, :column nil, :line nil, :protocol-info {:methods {-sorted-seq [[coll ascending?]], -sorted-seq-from [[coll k ascending?]], -entry-key [[coll entry]], -comparator [[coll]]}}, :info nil, :end-line 595, :impls #{cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet}, :doc "Protocol for a collection which can represent their items\\n  in a sorted manner. "}, make-array {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 332, :column 14, :end-line 332, :end-column 24, :tag array, :arglists (quote ([size] [type size])), :doc "Construct a JavaScript array of specified size. Accepts ignored type\\n  argument for compatibility with Clojure.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size] [type size]), :arglists ([size] [type size]), :arglists-meta (nil nil)}}, :name cljs.core/make-array, :variadic false, :file "cljs/core.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([size] [type size]), :arglists ([size] [type size]), :arglists-meta (nil nil)}, :method-params ([size] [type size]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag array, :end-line 332, :max-fixed-arity 2, :tag array, :fn-var true, :arglists ([size] [type size]), :doc "Construct a JavaScript array of specified size. Accepts ignored type\\n  argument for compatibility with Clojure."}, shorts {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2456, :column 7, :end-line 2456, :end-column 13, :arglists (quote ([x]))}, :name cljs.core/shorts, :variadic false, :file "cljs/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2456, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, *unchecked-if* {:name cljs.core/*unchecked-if*, :file "cljs/core.cljs", :line nil, :column nil, :end-line 18, :end-column 20, :meta {:file "cljs/core.cljs", :line 18, :column 6, :end-line 18, :end-column 20}}, ->RSeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1451, :column 10, :end-line 1451, :end-column 14, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([ci i meta]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->RSeq, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([ci i meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 1451, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ci i meta])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, enable-console-print! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 135, :column 7, :end-line 135, :end-column 28, :arglists (quote ([])), :doc "Set *print-fn* to console.log"}, :name cljs.core/enable-console-print!, :variadic false, :file "cljs/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 135, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Set *print-fn* to console.log"}, -flush {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 616, :column 4, :end-line 616, :end-column 10, :protocol cljs.core/IWriter, :doc "Flush writer.", :arglists (quote ([writer]))}, :protocol cljs.core/IWriter, :name cljs.core/-flush, :variadic false, :file "cljs/core.cljs", :end-column 10, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 616, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Flush writer."}, completing {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2206, :column 7, :end-line 2206, :end-column 17, :arglists (quote ([f] [f cf])), :doc "Takes a reducing function f of 2 args and returns a fn suitable for\\n  transduce by adding an arity-1 signature that calls cf (default -\\n  identity) on the result argument.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f cf]), :arglists ([f] [f cf]), :arglists-meta (nil nil)}}, :name cljs.core/completing, :variadic false, :file "cljs/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f cf]), :arglists ([f] [f cf]), :arglists-meta (nil nil)}, :method-params ([f] [f cf]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2206, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f cf]), :doc "Takes a reducing function f of 2 args and returns a fn suitable for\\n  transduce by adding an arity-1 signature that calls cf (default -\\n  identity) on the result argument."}, unchecked-negate-int {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2406, :column 7, :end-line 2406, :end-column 27, :arglists (quote ([x]))}, :name cljs.core/unchecked-negate-int, :variadic false, :file "cljs/core.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2406, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ->PersistentVector {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4707, :column 10, :end-line 4707, :end-column 26, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :factory :positional, :arglists (quote ([meta cnt shift root tail __hash]))}, :protocols #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :name cljs.core/->PersistentVector, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([meta cnt shift root tail __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 4707, :max-fixed-arity 6, :fn-var true, :arglists (quote ([meta cnt shift root tail __hash])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, equiv-sequential {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2615, :column 8, :end-line 2615, :end-column 24, :private true, :arglists (quote ([x y])), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\\n  returns false."}, :private true, :name cljs.core/equiv-sequential, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2615, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\\n  returns false."}, hash-unordered-coll {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1183, :column 15, :end-line 1183, :end-column 34, :tag number, :arglists (quote ([coll])), :doc "Returns the hash code, consistent with =, for an external unordered\\n   collection implementing Iterable. For maps, the iterator should\\n   return map entries whose hash is computed as\\n     (hash-ordered-coll [k v]).\\n   See http://clojure.org/data_structures#hash for full algorithms."}, :name cljs.core/hash-unordered-coll, :variadic false, :file "cljs/core.cljs", :end-column 34, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 1183, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([coll])), :doc "Returns the hash code, consistent with =, for an external unordered\\n   collection implementing Iterable. For maps, the iterator should\\n   return map entries whose hash is computed as\\n     (hash-ordered-coll [k v]).\\n   See http://clojure.org/data_structures#hash for full algorithms."}, repeat {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4312, :column 7, :end-line 4312, :end-column 13, :arglists (quote ([x] [n x])), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [n x]), :arglists ([x] [n x]), :arglists-meta (nil nil)}}, :name cljs.core/repeat, :variadic false, :file "cljs/core.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [n x]), :arglists ([x] [n x]), :arglists-meta (nil nil)}, :method-params ([x] [n x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4312, :max-fixed-arity 2, :fn-var true, :arglists ([x] [n x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs."}, unchecked-inc {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2383, :column 7, :end-line 2383, :end-column 20, :arglists (quote ([x]))}, :name cljs.core/unchecked-inc, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2383, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, nthnext {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2583, :column 7, :end-line 2583, :end-column 14, :arglists (quote ([coll n])), :doc "Returns the nth next of coll, (seq coll) when n is 0."}, :name cljs.core/nthnext, :variadic false, :file "cljs/core.cljs", :end-column 14, :method-params ([coll n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2583, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll n])), :doc "Returns the nth next of coll, (seq coll) when n is 0."}, preserving-reduced {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 9042, :column 8, :end-line 9042, :end-column 26, :private true, :arglists (quote ([rf]))}, :private true, :name cljs.core/preserving-reduced, :variadic false, :file "cljs/core.cljs", :end-column 26, :method-params ([rf]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 9042, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rf]))}, get-validator {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 4026, :column 7, :end-line 4026, :end-column 20, :arglists (quote ([iref])), :doc "Gets the validator-fn for a var/ref/agent/atom."}, :name cljs.core/get-validator, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([iref]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4026, :max-fixed-arity 1, :fn-var true, :arglists (quote ([iref])), :doc "Gets the validator-fn for a var/ref/agent/atom."}, StringIter {:num-fields 2, :protocols #{cljs.core/Object}, :name cljs.core/StringIter, :file "cljs/core.cljs", :end-column 20, :type true, :column 10, :line 3500, :record false, :end-line 3500, :skip-protocol-flag nil}, number? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 189, :column 16, :end-line 189, :end-column 23, :tag boolean, :arglists (quote ([n])), :doc "Returns true if x is a JavaScript number."}, :name cljs.core/number?, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 189, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([n])), :doc "Returns true if x is a JavaScript number."}, -conj! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 650, :column 9, :end-line 650, :end-column 15, :tag clj, :protocol cljs.core/ITransientCollection, :doc "Adds value val to tcoll and returns tcoll.", :arglists (quote ([tcoll val]))}, :protocol cljs.core/ITransientCollection, :name cljs.core/-conj!, :variadic false, :file "cljs/core.cljs", :end-column 15, :method-params ([tcoll val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 650, :max-fixed-arity 2, :tag clj, :fn-var true, :arglists (quote ([tcoll val])), :doc "Adds value val to tcoll and returns tcoll."}, ->PersistentArrayMapSeq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5711, :column 10, :end-line 5711, :end-column 31, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :factory :positional, :arglists (quote ([arr i _meta]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/->PersistentArrayMapSeq, :variadic false, :file "cljs/core.cljs", :end-column 31, :method-params ([arr i _meta]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5711, :max-fixed-arity 3, :fn-var true, :arglists (quote ([arr i _meta])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, chunk-next {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3177, :column 7, :end-line 3177, :end-column 17, :arglists (quote ([s]))}, :name cljs.core/chunk-next, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, ArrayList {:num-fields 1, :protocols #{cljs.core/Object}, :name cljs.core/ArrayList, :file "cljs/core.cljs", :end-column 19, :type true, :column 10, :line 8162, :record false, :end-line 8162, :skip-protocol-flag nil}, print-str {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 8775, :column 7, :end-line 8775, :end-column 16, :arglists (quote ([& objs])), :doc "print to a string, returning it", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}}, :name cljs.core/print-str, :variadic true, :file "cljs/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(objs)], :arglists ([& objs]), :arglists-meta (nil)}, :method-params [(objs)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 8775, :max-fixed-arity 0, :fn-var true, :arglists ([& objs]), :doc "print to a string, returning it"}, not-any? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3749, :column 16, :end-line 3749, :end-column 24, :tag boolean, :arglists (quote ([pred coll])), :doc "Returns false if (pred x) is logical true for any x in coll,\\n  else true."}, :name cljs.core/not-any?, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 3749, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns false if (pred x) is logical true for any x in coll,\\n  else true."}, into-array {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 384, :column 14, :end-line 384, :end-column 24, :tag array, :arglists (quote ([aseq] [type aseq])), :doc "Returns an array with components set to the values in aseq. Optional type\\n  argument accepted for compatibility with Clojure.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([aseq] [type aseq]), :arglists ([aseq] [type aseq]), :arglists-meta (nil nil)}}, :name cljs.core/into-array, :variadic false, :file "cljs/core.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([aseq] [type aseq]), :arglists ([aseq] [type aseq]), :arglists-meta (nil nil)}, :method-params ([aseq] [type aseq]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag array, :end-line 384, :max-fixed-arity 2, :tag array, :fn-var true, :arglists ([aseq] [type aseq]), :doc "Returns an array with components set to the values in aseq. Optional type\\n  argument accepted for compatibility with Clojure."}, -hash {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 573, :column 4, :end-line 573, :end-column 9, :protocol cljs.core/IHash, :doc "Returns the hash code of o.", :arglists (quote ([o]))}, :protocol cljs.core/IHash, :name cljs.core/-hash, :variadic false, :file "cljs/core.cljs", :end-column 9, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 573, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc "Returns the hash code of o."}, -dissoc! {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 663, :column 9, :end-line 663, :end-column 17, :tag clj, :protocol cljs.core/ITransientMap, :doc "Returns a new transient collection of tcoll without the mapping for key.", :arglists (quote ([tcoll key]))}, :protocol cljs.core/ITransientMap, :name cljs.core/-dissoc!, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([tcoll key]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj, :end-line 663, :max-fixed-arity 2, :tag clj, :fn-var true, :arglists (quote ([tcoll key])), :doc "Returns a new transient collection of tcoll without the mapping for key."}, ->Reduced {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1244, :column 10, :end-line 1244, :end-column 17, :protocols #{cljs.core/IDeref}, :skip-protocol-flag #{cljs.core/IDeref}, :factory :positional, :arglists (quote ([val]))}, :protocols #{cljs.core/IDeref}, :name cljs.core/->Reduced, :variadic false, :file "cljs/core.cljs", :end-column 17, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 1244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :skip-protocol-flag #{cljs.core/IDeref}}, chunk-buffer {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 3061, :column 7, :end-line 3061, :end-column 19, :arglists (quote ([capacity]))}, :name cljs.core/chunk-buffer, :variadic false, :file "cljs/core.cljs", :end-column 19, :method-params ([capacity]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 3061, :max-fixed-arity 1, :fn-var true, :arglists (quote ([capacity]))}, seqable? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1978, :column 16, :end-line 1978, :end-column 24, :tag boolean, :arglists (quote ([s])), :doc "Return true if s satisfies ISeqable"}, :name cljs.core/seqable?, :variadic false, :file "cljs/core.cljs", :end-column 24, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1978, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([s])), :doc "Return true if s satisfies ISeqable"}, symbol? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 886, :column 16, :end-line 886, :end-column 23, :tag boolean, :arglists (quote ([x])), :doc "Return true if x is a Symbol"}, :name cljs.core/symbol?, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 886, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Return true if x is a Symbol"}, m3-hash-unencoded-chars {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 798, :column 15, :end-line 798, :end-column 38, :tag number, :arglists (quote ([in]))}, :name cljs.core/m3-hash-unencoded-chars, :variadic false, :file "cljs/core.cljs", :end-column 38, :method-params ([in]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 798, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([in]))}, unchecked-char {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2347, :column 15, :end-line 2347, :end-column 29, :tag number, :arglists (quote ([x]))}, :name cljs.core/unchecked-char, :variadic false, :file "cljs/core.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag number, :end-line 2347, :max-fixed-arity 1, :tag number, :fn-var true, :arglists (quote ([x]))}, NeverEquiv {:num-fields 0, :protocols #{cljs.core/IEquiv cljs.core/Object}, :name cljs.core/NeverEquiv, :file "cljs/core.cljs", :end-column 20, :type true, :column 10, :line 5427, :record false, :end-line 5427, :skip-protocol-flag #{cljs.core/IEquiv}}, -invoke {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 407, :column 4, :end-line 407, :end-column 11, :protocol cljs.core/IFn, :doc nil, :arglists (quote ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest])), :top-fn {:variadic false, :max-fixed-arity 22, :method-params ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest]), :arglists ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest]), :arglists-meta (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)}}, :protocol cljs.core/IFn, :name cljs.core/-invoke, :variadic false, :file "cljs/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 22, :method-params ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest]), :arglists ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest]), :arglists-meta (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)}, :method-params ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil), :column nil, :line nil, :end-line 407, :max-fixed-arity 22, :fn-var true, :arglists ([this] [this a] [this a b] [this a b c] [this a b c d] [this a b c d e] [this a b c d e f] [this a b c d e f g] [this a b c d e f g h] [this a b c d e f g h i] [this a b c d e f g h i j] [this a b c d e f g h i j k] [this a b c d e f g h i j k l] [this a b c d e f g h i j k l m] [this a b c d e f g h i j k l m n] [this a b c d e f g h i j k l m n o] [this a b c d e f g h i j k l m n o p] [this a b c d e f g h i j k l m n o p q] [this a b c d e f g h i j k l m n o p q r] [this a b c d e f g h i j k l m n o p q r s] [this a b c d e f g h i j k l m n o p q r s t] [this a b c d e f g h i j k l m n o p q r s t rest]), :doc nil}, coll? {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1865, :column 16, :end-line 1865, :end-column 21, :tag boolean, :arglists (quote ([x])), :doc "Returns true if x satisfies ICollection"}, :name cljs.core/coll?, :variadic false, :file "cljs/core.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag boolean, :end-line 1865, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x satisfies ICollection"}, get-in {:protocol-inline nil, :meta {:added "1.2", :file "cljs/core.cljs", :end-column 13, :static true, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m ks] [m ks not-found]), :arglists ([m ks] [m ks not-found]), :arglists-meta (nil nil)}, :column 7, :line 4513, :end-line 4513, :arglists (quote ([m ks] [m ks not-found])), :doc "Returns the value in a nested associative structure,\\n  where ks is a sequence of keys. Returns nil if the key is not present,\\n  or the not-found value if supplied."}, :added "1.2", :name cljs.core/get-in, :variadic false, :file "cljs/core.cljs", :end-column 13, :static true, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m ks] [m ks not-found]), :arglists ([m ks] [m ks not-found]), :arglists-meta (nil nil)}, :method-params ([m ks] [m ks not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4513, :max-fixed-arity 3, :fn-var true, :arglists ([m ks] [m ks not-found]), :doc "Returns the value in a nested associative structure,\\n  where ks is a sequence of keys. Returns nil if the key is not present,\\n  or the not-found value if supplied."}, fnext {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 1521, :column 7, :end-line 1521, :end-column 12, :arglists (quote ([coll])), :doc "Same as (first (next x))"}, :name cljs.core/fnext, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 1521, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Same as (first (next x))"}, IList {:meta {:file "cljs/core.cljs", :line 584, :column 14, :end-line 584, :end-column 19, :doc "Marker interface indicating a persistent list", :protocol-symbol true, :protocol-info {:methods {}}}, :protocol-symbol true, :name cljs.core/IList, :file "cljs/core.cljs", :end-column 19, :column nil, :line nil, :protocol-info {:methods {}}, :info nil, :end-line 584, :impls #{cljs.core/Cons cljs.core/EmptyList cljs.core/List}, :doc "Marker interface indicating a persistent list"}, List {:meta {:file "cljs/core.cljs", :line 1342, :column 30, :end-line 1342, :end-column 34, :declared true}, :num-fields 5, :protocols #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :name cljs.core/List, :file "cljs/core.cljs", :end-column 14, :type true, :column 10, :line 2673, :record false, :declared true, :end-line 2673, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, -val {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 510, :column 4, :end-line 510, :end-column 8, :protocol cljs.core/IMapEntry, :doc "Returns the value of the map entry.", :arglists (quote ([coll]))}, :protocol cljs.core/IMapEntry, :name cljs.core/-val, :variadic false, :file "cljs/core.cljs", :end-column 8, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 510, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Returns the value of the map entry."}, bytes {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 2454, :column 7, :end-line 2454, :end-column 12, :arglists (quote ([x]))}, :name cljs.core/bytes, :variadic false, :file "cljs/core.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 2454, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ->ObjMap {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 5496, :column 10, :end-line 5496, :end-column 16, :protocols #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :factory :positional, :arglists (quote ([meta keys strobj update-count __hash]))}, :protocols #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/Object cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.core/->ObjMap, :variadic false, :file "cljs/core.cljs", :end-column 16, :method-params ([meta keys strobj update-count __hash]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :factory :positional, :line nil, :end-line 5496, :max-fixed-arity 5, :fn-var true, :arglists (quote ([meta keys strobj update-count __hash])), :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, compare-symbols {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 896, :column 8, :end-line 896, :end-column 23, :private true, :arglists (quote ([a b]))}, :private true, :name cljs.core/compare-symbols, :variadic false, :file "cljs/core.cljs", :end-column 23, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 896, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, -seq {:protocol-inline nil, :meta {:file "cljs/core.cljs", :line 578, :column 16, :end-line 578, :end-column 20, :tag clj-or-nil, :protocol cljs.core/ISeqable, :doc "Returns a seq of o, or nil if o is empty.", :arglists (quote ([o]))}, :protocol cljs.core/ISeqable, :name cljs.core/-seq, :variadic false, :file "cljs/core.cljs", :end-column 20, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :ret-tag clj-or-nil, :end-line 578, :max-fixed-arity 1, :tag clj-or-nil, :fn-var true, :arglists (quote ([o])), :doc "Returns a seq of o, or nil if o is empty."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:meta :dup :else :cljs.core/none :validator :default :ns :fallback-impl :flush-on-newline :no-test :descendants :ancestors :readably :more-marker :print-length :ok :parents :tag :mutable :arglists :alt-impl :keywordize-keys :cljs.core/not-found}, :order [:flush-on-newline :readably :meta :dup :print-length :else :default :mutable :arglists :validator :tag :cljs.core/not-found :cljs.core/none :more-marker :alt-impl :fallback-impl :keywordize-keys :parents :descendants :ancestors :ok :no-test :ns]}, :doc nil}';

cljs_bootstrap.repl.init_repl('default');
cljs_bootstrap.repl.load_edn_caches(core_edn_cache);
